code,response
"import React from 'react';

/* eslint-disable */

function decodeParam(val) {
  if (!(typeof val === 'string' || val.length === 0)) {
    return val;
  }

  try {
    return decodeURIComponent(val);
  } catch (err) {
    if (err instanceof URIError) {
      err.message = `Failed to decode param '${val}'`;
      err.status = 400;
    }

    throw err;
  }
}

// Match the provided URL path pattern to an actual URI string. For example:
//   matchURI({ path: '/posts/:id' }, '/dummy') => null
//   matchURI({ path: '/posts/:id' }, '/posts/123') => { id: 123 }
function matchURI(route, path) {
  const match = route.pattern.exec(path);

  if (!match) {
    return null;
  }

  const params = Object.create(null);

  for (let i = 1; i < match.length; i++) {
    params[route.keys[i - 1].name] = match[i] !== undefined ? decodeParam(match[i]) : undefined;
  }

  return params;
}

// Find the route matching the specified location (context), fetch the required data,
// instantiate and return a React component
function resolve(routes, context) {
  for (const route of routes) {
    const params = matchURI(route, context.error ? '/error' : context.pathname);

    if (!params) {
      continue;
    }

    // Check if the route has any data requirements, for example:
    // { path: '/tasks/:id', data: { task: 'GET /api/tasks/$id' }, page: './pages/task' }
    if (route.data) {
      // Load page component and all required data in parallel
      const keys = Object.keys(route.data);
      return Promise.all([
        route.load(),
        ...keys.map(key => {
          const query = route.data[key];
          const method = query.substring(0, query.indexOf(' ')); // GET
          let url = query.substr(query.indexOf(' ') + 1);      // /api/tasks/$id
          // TODO: Optimize
          Object.keys(params).forEach((k) => {
            url = url.replace(`${k}`, params[k]);
          });
          return fetch(url, { method }).then(resp => resp.json());
        }),
      ]).then(([Page, ...data]) => {
        const props = keys.reduce((result, key, i) => ({ ...result, [key]: data[i] }), {});
        return <Page route={{ ...route, params }} error={context.error} {...props} />;
      });
    }

    return route.load().then(Page => <Page route={{ ...route, params }} error={context.error} />);
  }

  const error = new Error('Page not found');
  error.status = 404;
  return Promise.reject(error);
}

export default { resolve };
","Generate code that takes a list of defined routes, matches the user's current location to one of those routes, then loads the required data before instantiating and returning a dedicated React component for that route."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Helmet from 'react-helmet';

import Layout from '../components/layout';

export default class About extends Component {
  static async getInitialProps({ req }) {
    if (req) {
      Helmet.renderStatic();
    }
    return { title: 'About' };
  }

  static propTypes = {
    title: PropTypes.string.isRequired
  };

  render() {
    const { title } = this.props;
    return (
      <Layout>
        <Helmet title={title} />
        <h1 className=""cover-heading"">About</h1>
        <p className=""lead"">
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua.
        </p>
      </Layout>
    );
  }
}
","Generate the React code for an About page with a title, a primary heading, and a paragraph of text. Use the Layout component as the page template."
"import React from 'react';
// It's important to not define HelloWorld component right in this file
// because in that case it will do full page reload on change
import HelloWorld from './HelloWorld.jsx';

React.render(<HelloWorld />, document.getElementById('react-root'));
",Generate the code that imports a React component from another JSX file and renders it to the 'react-root' div element on the page.
"import React from 'react'
import PropTypes from 'prop-types'
import reactCSS from 'reactcss'
import merge from 'lodash/merge'

import { ColorWrap, Saturation, Hue, Alpha, Checkboard } from '../common'
import ChromeFields from './ChromeFields'
import ChromePointer from './ChromePointer'
import ChromePointerCircle from './ChromePointerCircle'

export const Chrome = ({ width, onChange, disableAlpha, rgb, hsl, hsv, hex, renderers,
  styles: passedStyles = {}, className = '', defaultView }) => {
  const styles = reactCSS(merge({
    'default': {
      picker: {
        width,
        background: '#fff',
        borderRadius: '2px',
        boxShadow: '0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)',
        boxSizing: 'initial',
        fontFamily: 'Menlo',
      },
      saturation: {
        width: '100%',
        paddingBottom: '55%',
        position: 'relative',
        borderRadius: '2px 2px 0 0',
        overflow: 'hidden',
      },
      Saturation: {
        radius: '2px 2px 0 0',
      },
      body: {
        padding: '16px 16px 12px',
      },
      controls: {
        display: 'flex',
      },
      color: {
        width: '32px',
      },
      swatch: {
        marginTop: '6px',
        width: '16px',
        height: '16px',
        borderRadius: '8px',
        position: 'relative',
        overflow: 'hidden',
      },
      active: {
        absolute: '0px 0px 0px 0px',
        borderRadius: '8px',
        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.1)',
        background: `rgba(${ rgb.r }, ${ rgb.g }, ${ rgb.b }, ${ rgb.a })`,
        zIndex: '2',
      },
      toggles: {
        flex: '1',
      },
      hue: {
        height: '10px',
        position: 'relative',
        marginBottom: '8px',
      },
      Hue: {
        radius: '2px',
      },
      alpha: {
        height: '10px',
        position: 'relative',
      },
      Alpha: {
        radius: '2px',
      },
    },
    'disableAlpha': {
      color: {
        width: '22px',
      },
      alpha: {
        display: 'none',
      },
      hue: {
        marginBottom: '0px',
      },
      swatch: {
        width: '10px',
        height: '10px',
        marginTop: '0px',
      },
    },
  }, passedStyles), { disableAlpha })

  return (
    <div style={ styles.picker } className={ `chrome-picker ${ className }` }>
      <div style={ styles.saturation }>
        <Saturation
          style={ styles.Saturation }
          hsl={ hsl }
          hsv={ hsv }
          pointer={ ChromePointerCircle }
          onChange={ onChange }
        />
      </div>
      <div style={ styles.body }>
        <div style={ styles.controls } className=""flexbox-fix"">
          <div style={ styles.color }>
            <div style={ styles.swatch }>
              <div style={ styles.active } />
              <Checkboard renderers={ renderers } />
            </div>
          </div>
          <div style={ styles.toggles }>
            <div style={ styles.hue }>
              <Hue
                style={ styles.Hue }
                hsl={ hsl }
                pointer={ ChromePointer }
                onChange={ onChange }
              />
            </div>
            <div style={ styles.alpha }>
              <Alpha
                style={ styles.Alpha }
                rgb={ rgb }
                hsl={ hsl }
                pointer={ ChromePointer }
                renderers={ renderers }
                onChange={ onChange }
              />
            </div>
          </div>
        </div>
        <ChromeFields
          rgb={ rgb }
          hsl={ hsl }
          hex={ hex }
          view={ defaultView }
          onChange={ onChange }
          disableAlpha={ disableAlpha }
        />
      </div>
    </div>
  )
}

Chrome.propTypes = {
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  disableAlpha: PropTypes.bool,
  styles: PropTypes.object,
  defaultView: PropTypes.oneOf([
    ""hex"",
    ""rgb"",
    ""hsl"",
  ]),
}

Chrome.defaultProps = {
  width: 225,
  disableAlpha: false,
  styles: {},
}

export default ColorWrap(Chrome)
","Generate the React Code for a Chrome Color Picker with the following specifications: 
- Component has a default width of 225px.
- Includes a saturation square with a pointer circle.
- Includes hue and alpha sliders with pointers.
- Includes text fields for hex, rgb, and hsl values that update as the user interacts with the picker.
- The component should be customizable with custom styles and a default view (hex, rgb, or hsl)."
"import React from 'react';
import { Router, Route, Link, History, Lifecycle } from 'react-router';

var App = React.createClass({
  render() {
    return (
      <div>
        <ul>
          <li><Link to=""/dashboard"">Dashboard</Link></li>
          <li><Link to=""/form"">Form</Link></li>
        </ul>
        {this.props.children}
      </div>
    );
  }
});

var Home = React.createClass({
  render() {
    return <h1>Home</h1>;
  }
});

var Dashboard = React.createClass({
  render() {
    return <h1>Dashboard</h1>;
  }
});

var Form = React.createClass({
  mixins: [ Lifecycle, History ],

  getInitialState() {
    return {
      textValue: 'ohai'
    };
  },

  routerWillLeave(nextLocation) {
    if (this.state.textValue)
      return 'You have unsaved information, are you sure you want to leave this page?';
  },

  handleChange(event) {
    this.setState({
      textValue: event.target.value
    });
  },

  handleSubmit(event) {
    event.preventDefault();

    this.setState({
      textValue: ''
    }, () => {
      this.history.pushState(null, '/');
    });
  },

  render() {
    return (
      <div>
        <form onSubmit={this.handleSubmit}>
          <p>Click the dashboard link with text in the input.</p>
          <input type=""text"" ref=""userInput"" value={this.state.textValue} onChange={this.handleChange} />
          <button type=""submit"">Go</button>
        </form>
      </div>
    );
  }
});

React.render((
  <Router>
    <Route path=""/"" component={App}>
      <Route path=""dashboard"" component={Dashboard} />
      <Route path=""form"" component={Form} />
    </Route>
  </Router>
), document.getElementById('example'));
","An example React application that demonstrates routing, Link, and History, with a Form component that uses Lifecyclemixins and History mixins to prevent user navigation away from the page if there is unsaved information."
"import React from 'react'
import PropTypes from 'prop-types'
import classNames from 'classnames'
import axios from 'axios'
// import { deserialize } from 'jsonapi-deserializer'

import { path } from '../../Routes'
import { useI18n } from '../../I18n'
import { useForm, Errors } from '../../Form'

import styles from './Password.module.css'
import page from '../../Page.module.css'
import form from '../../Form.module.css'
import buttons from '../../Buttons.module.css'

Password.propTypes = {
  user: PropTypes.object.isRequired,
  locale: PropTypes.string.isRequired
}

export default function Password ({ user: userJSON, locale }) {
  const I18n = useI18n(locale)

  const {
    values,
    // setValues,
    // saved,
    // setSaved,
    handleInputChange,
    errors,
    pending,
    setErrors,
    onSubmit,
    cancelToken
  } = useForm({ password: '', password_confirmation: '' })

  const handleSubmit = async e => {
    e.preventDefault()

    await axios.patch(
      path('account_user_path', { format: 'json' }),
      { user: values },
      { cancelToken: cancelToken.current.token }
    ).then(res => {
      if (res.headers.location) window.location = res.headers.location
      // setSaved(true)
    }).catch(error => {
      setErrors(error.response.data)
    })
  }

  return (
    <div className={page.gray}>
      <div className={page.title}>
        <h1>{I18n.t('accounts.users.password')}</h1>
      </div>

      <div className={styles.root}>
        <div className={form.tight}>
          <form className={classNames(form.root, styles.form)} onSubmit={onSubmit(handleSubmit)}>
            <Errors errors={errors.reset_password_token} />

            <div className={form.item}>
              <label>
                <div className={form.label}>
                  {I18n.t('accounts.passwords.password')}
                </div>

                <div className={form.input}>
                  <input
                    type=""password""
                    autoFocus
                    autoComplete=""new-password""
                    value={values.password}
                    name=""password""
                    onChange={handleInputChange}
                  />
                </div>
              </label>

              <Errors errors={errors.password} />
            </div>

            <div className={form.item}>
              <label>
                <div className={form.label}>
                  {I18n.t('accounts.passwords.password_confirmation')}
                </div>

                <div className={form.input}>
                  <input
                    type=""password""
                    autoComplete=""off""
                    value={values.password_confirmation}
                    name=""password_confirmation""
                    onChange={handleInputChange}
                  />
                </div>
              </label>

              <Errors errors={errors.password_confirmation} />
            </div>

            <div className={classNames(form.submit, styles.submit)}>
              <input
                type=""submit""
                value={pending ? I18n.t('accounts.passwords.submiting') : I18n.t('accounts.passwords.submit')}
                className={classNames(buttons.main, { [buttons.pending]: pending })}
                disabled={pending}
              />
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}
","Create a React component that allows a user to change their password, including the form fields and an error handling section."
"import React from 'react'

var Backbone = React.createClass({
    render: function () {
        return (
            <svg version=""1.1"" xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 129.08 162"" preserveAspectRatio=""xMinYMin meet"">
<polygon fill=""#0071B5"" points=""108.083,64.441 108.083,39.751 85.755,51.576 64.33,39.25 129.08,0 129.08,76.5 ""/>
<polygon fill=""#002A41"" points=""20.996,64.441 20.996,39.751 43.324,51.576 64.33,39.25 0,0 0,76.5 ""/>
<polygon fill=""#0071B5"" points=""96.331,82.055 64.33,100.625 85.8,112.587 108.08,100.625 108.08,88.5 ""/>
<polygon fill=""#002A41"" points=""32.329,82.055 64.33,100.625 42.859,112.587 20.58,100.625 20.58,88.5 ""/>
<polygon fill=""#0071B5"" points=""0,162 0,76.5 64.33,39.25 64.75,64.5 21,88.5 21,125 64.33,100.625 64.33,126 ""/>
<polygon fill=""#002A41"" points=""129.08,162 129.08,76.5 64.33,39.25 64.33,64.5 108.08,88.5 108.08,125 64.33,100.625 64.33,126 ""/>
</svg>
        )
    }
});


export default Backbone;

",Design an abstract svg image of a backbone using a blue and gray color scheme.
"'use strict';

import React from 'react';
import ReactDOM from 'react-dom';
import GoogleDriveMixin from '../../mixins/GoogleDriveMixin';

const DropFileComponent = React.createClass({
  mixins: [GoogleDriveMixin],

  uploadFile(e) {
    // console.log(e);
  },

  addLinkFromDrive(elem, params) {
    this.props.addLinkFromDrive(elem, params);
  },

  triggerFileUpload() {
    let uploadField = this.refs.upload;
    uploadField.click();
  },

  fileUploaded(event) {
    console.log(event);
  },

  render() {
    let addLinkButton = '';
    let googleDriveButton = '';
    let classes = 'downloadButtons';

    if (this.props.type === 'link') {
      addLinkButton = <button className='btn btn-default' onClick={this.props.addLink}>Add link</button>;
      classes += ' btn-group';
    }
    googleDriveButton = <button id='google-button' className='btn btn-default' onClick={this.addFilesFromGoogleDrive}>Add from Google Drive</button>;

    if (this.props.userIsAdmin) {
      return (
          <div className='text-center dropzone'>
            <a href='#'>
              <i className='fa fa-cloud-upload fa-3x' />
            </a>
            <h3>Drag & Drop</h3>
            <input id='upload' onChange={this.fileUploaded} type='file' ref='upload' style={{display: 'none'}} />
            <p>or <a href='#' onClick={this.triggerFileUpload}>browse</a></p>
            <div className={classes}>
              {addLinkButton}
              {googleDriveButton}
            </div>
           </div>
        );
    } else {
      return null;
    }
  }
});

module.exports = DropFileComponent;
","Generate the code snippet for a React component that allows users to upload files from their local computer or Google Drive. The component should include a drag and drop zone, a button to browse for files, and a button to add links to files. The component should also include logic to handle file uploads and add links to files from Google Drive."
"/* eslint-disable */

import React from 'react';
import Resizable from '../../src';

const style = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  border: 'solid 1px #ddd',
  background: '#f0f0f0',
};

export default () => (
  <Resizable
    style={style}
    defaultSize={{
      width: '30%',
      height: '20%',
    }}
  >
    001
  </Resizable>
);
",Design a React component that allows the user to resize a div by dragging its borders. The component should be styled with a solid border and a light gray background. The default size of the div should be 30% of the available width and 20% of the available height.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionBuild = (props) => (
  <SvgIcon {...props}>
    <path d=""M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z""/>
  </SvgIcon>
);
ActionBuild = pure(ActionBuild);
ActionBuild.displayName = 'ActionBuild';

export default ActionBuild;
","Generate the React component code for a Material Design icon, ActionBuild."
"import PropTypes from 'prop-types';
import React from 'react';
import classNames from 'classnames';
import { useTranslation } from 'react-i18next';
import { Button } from 'react-bootstrap';
import OverlayTrigger from '@talend/react-components/lib/OverlayTrigger';
import Icon from '@talend/react-components/lib/Icon';
import Message from '../../Message';
import { I18N_DOMAIN_FORMS } from '../../../constants';
import theme from './FieldTemplate.scss';

function Label({ id, label, ...rest }) {
	return (
		<label htmlFor={id} className=""control-label"" {...rest}>
			{label}
		</label>
	);
}

if (process.env.NODE_ENV !== 'production') {
	Label.propTypes = {
		id: PropTypes.string,
		label: PropTypes.string,
	};
}

function FieldTemplate(props) {
	const { t } = useTranslation(I18N_DOMAIN_FORMS);
	const groupsClassNames = classNames('form-group', theme.template, props.className, {
		'has-error': !props.isValid,
		required: props.required,
		[theme.updating]: props.valueIsUpdating,
	});

	let title = <Label id={props.id} label={props.label} {...props.labelProps} />;

	if (props.hint) {
		title = (
			<div className={theme['field-template-title']}>
				{title}
				<OverlayTrigger
					overlayId={`${props.id}-hint-overlay`}
					overlayPlacement={props.hint.overlayPlacement || 'right'}
					overlayComponent={props.hint.overlayComponent}
				>
					<Button
						id={`${props.id}-hint`}
						bsStyle=""link""
						className={props.hint.className}
						aria-label={t('FIELD_TEMPLATE_HINT_LABEL', {
							defaultValue: 'Display the input {{inputLabel}} hint',
							inputLabel: props.label,
						})}
						aria-haspopup
					>
						<Icon name={props.hint.icon || 'talend-info-circle'} />
					</Button>
				</OverlayTrigger>
			</div>
		);
	}
	const labelAfter = props.hint ? false : props.labelAfter;

	return (
		<div className={groupsClassNames} aria-busy={props.valueIsUpdating}>
			{props.label && !labelAfter && title}
			{props.children}
			{props.label && labelAfter && title}
			<Message
				description={props.description}
				descriptionId={props.descriptionId}
				errorId={props.errorId}
				errorMessage={props.errorMessage}
				isValid={props.isValid}
			/>
		</div>
	);
}

if (process.env.NODE_ENV !== 'production') {
	FieldTemplate.propTypes = {
		children: PropTypes.node,
		hint: PropTypes.shape({
			icon: PropTypes.string,
			className: PropTypes.string,
			overlayComponent: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,
			overlayPlacement: PropTypes.string,
		}),
		className: PropTypes.string,
		description: PropTypes.string,
		descriptionId: PropTypes.string.isRequired,
		errorId: PropTypes.string.isRequired,
		errorMessage: PropTypes.string,
		id: PropTypes.string,
		isValid: PropTypes.bool,
		label: PropTypes.string,
		labelProps: PropTypes.object,
		labelAfter: PropTypes.bool,
		required: PropTypes.bool,
		valueIsUpdating: PropTypes.bool,
	};
}

FieldTemplate.defaultProps = {
	isValid: true,
};
FieldTemplate.displayName = 'FieldTemplate';

export default FieldTemplate;
","Describe a design for a component that displays a field with label, hint button and description message.
The label can be positioned before or after the field, and the hint button should open an overlay component with additional information.
The component should handle validation states and display error or success messages below the field.
The design should be in the style of React Bootstrap and Talend's custom component library."
"import React from 'react';
import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';
import BoringSpellValueText from 'parser/ui/BoringSpellValueText';
import Statistic from 'parser/ui/Statistic';
import STATISTIC_ORDER from 'parser/ui/STATISTIC_ORDER';

import SPELLS from 'common/SPELLS';
import { SpellLink } from 'interface';

import { formatPercentage } from 'common/format';
import { t } from '@lingui/macro';
import Events from 'parser/core/Events';
import STATISTIC_CATEGORY from 'parser/ui/STATISTIC_CATEGORY';

const MS_BUFFER = 100;

class SpiritBombSoulsConsume extends Analyzer {

  get totalGoodCasts() {
    return this.soulsConsumedByAmount[4] + this.soulsConsumedByAmount[5];
  }

  get totalCasts() {
    return Object.values(this.soulsConsumedByAmount).reduce((total, casts) => total + casts, 0);
  }

  get percentGoodCasts() {
    return this.totalGoodCasts / this.totalCasts;
  }

  get suggestionThresholdsEfficiency() {
    return {
      actual: this.percentGoodCasts,
      isLessThan: {
        minor: 0.90,
        average: 0.85,
        major: .80,
      },
      style: 'percentage',
    };
  }

  castTimestamp = 0;
  castSoulsConsumed = 0;
  cast = 0;
  soulsConsumedByAmount = Array.from({ length: 6 }, x => 0);

  /* Feed The Demon talent is taken in defensive builds. In those cases you want to generate and consume souls as quickly
   as possible. So how you consume your souls down matter. If you dont take that talent your taking a more balanced
   build meaning you want to consume souls in a way that boosts your dps. That means feeding the souls into spirit
   bomb as efficiently as possible (cast at 4+ souls) for a dps boost and have soul cleave absorb souls as little as
   possible since it provides no extra dps.
*/
  constructor(...args) {
    super(...args);
    this.active = this.selectedCombatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id) && !this.selectedCombatant.hasTalent(SPELLS.FEED_THE_DEMON_TALENT.id);
    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SPIRIT_BOMB_TALENT), this.onCast);
    this.addEventListener(Events.changebuffstack.by(SELECTED_PLAYER).spell(SPELLS.SOUL_FRAGMENT_STACK), this.onChangeBuffStack);
    this.addEventListener(Events.fightend, this.onFightend);
  }

  onCast(event) {
    if (this.cast > 0) {
      this.countHits();
    }
    this.castTimestamp = event.timestamp;
    this.cast += 1;
  }

  onChangeBuffStack(event) {
    if (event.oldStacks < event.newStacks) {
      return;
    }
    if (event.timestamp - this.castTimestamp < MS_BUFFER) {
      const soulsConsumed = event.oldStacks - event.newStacks;
      this.castSoulsConsumed += soulsConsumed;
    }
  }

  countHits() {
    if (!this.soulsConsumedByAmount[this.castSoulsConsumed]) {
      this.soulsConsumedByAmount[this.castSoulsConsumed] = 1;
      this.castSoulsConsumed = 0;
      return;
    }
    this.soulsConsumedByAmount[this.castSoulsConsumed] += 1;
    this.castSoulsConsumed = 0;
  }

  onFightend() {
    this.countHits();
  }

  suggestions(when) {
    when(this.suggestionThresholdsEfficiency)
      .addSuggestion((suggest, actual, recommended) => suggest(<>Try to cast <SpellLink id={SPELLS.SPIRIT_BOMB_TALENT.id} /> at 4 or 5 souls.</>)
        .icon(SPELLS.SPIRIT_BOMB_TALENT.icon)
        .actual(t({
      id: ""demonhunter.vengeance.suggestions.spiritBomb.soulsConsumed"",
      message: `${formatPercentage(this.percentGoodCasts)}% of casts at 4+ souls.`
    }))
        .recommended(`>${formatPercentage(recommended)}% is recommended`));
  }

  statistic() {
    return (
      <Statistic
        position={STATISTIC_ORDER.CORE(6)}
        category={STATISTIC_CATEGORY.TALENTS}
        size=""flexible""
        dropdown={(
          <>
            <table className=""table table-condensed"">
              <thead>
                <tr>
                  <th>Stacks</th>
                  <th>Casts</th>
                </tr>
              </thead>
              <tbody>
                {Object.values(this.soulsConsumedByAmount).map((castAmount, stackAmount) => (
                  <tr key={stackAmount}>
                    <th>{stackAmount}</th>
                    <td>{castAmount}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </>
        )}
      >
        <BoringSpellValueText spell={SPELLS.SPIRIT_BOMB_TALENT}>
          <>
            {formatPercentage(this.percentGoodCasts)}% <small>good casts</small>
          </>
        </BoringSpellValueText>
      </Statistic>
    );
  }

}

export default SpiritBombSoulsConsume;
",Generate React component `SpiritBombSoulsConsume` with analysis data for Spirit Bomb spell used by the Vengeance Demon Hunter. The component should show the percentage of good casts (at 4 or 5 souls) and provide suggestions for improvement if the percentage is below thresholds. Include a dropdown table showing the number of casts at each stack amount.
"// @flow
import React, { Component } from 'react';
import Helmet from 'react-helmet';
import { connect } from 'react-redux';
import type { Connector } from 'react-redux';
import { fetchPosts, fetchPostsIfNeeded } from '../../state/modules/posts';
import Post from '../../components/Post';
import type { PostsReducer, Dispatch, Reducer } from '../../types';
// $FlowIssue
import styles from './style.scss';

type Props = {
  posts: PostsReducer,
  fetchPostsIfNeeded: () => void,
};

export class Home extends Component<Props, *> {
  static displayName = 'Home';

  static fetchData({ store }) {
    return store.dispatch(fetchPosts());
  }

  componentDidMount() {
    this.props.fetchPostsIfNeeded();
  }

  render() {
    return (
      <div>
        <Helmet title=""Home"" />
        <div className=""row"">
          <div className=""column"">
            <div className={styles.hero}>
              <h1>React Universal Boiler</h1>
              <p>A server rendering React project.</p>
            </div>
          </div>
        </div>

        <div className=""posts-list"">
          {this.props.posts.list.map(p => (
            <div className=""column column-30"" key={p.id}>
              <Post title={p.title} body={p.body} />
            </div>
          ))}
        </div>
      </div>
    );
  }
}

const connector: Connector<{}, Props> = connect(
  ({ posts }: Reducer) => ({ posts }),
  (dispatch: Dispatch) => ({
    fetchPostsIfNeeded: () => dispatch(fetchPostsIfNeeded()),
  }),
);

export default connector(Home);
","A React component that lists blog posts, using Redux for state management. The component should fetch posts on mount, and display a list of posts with title and body. The component should have a hero section with a title and description. The component should have a posts-list section with a list of posts, each post should be displayed in a column with a title and body."
"import React from 'react';

function H3(props) {
  return (
    <h3 {...props} />
  );
}

export default H3;
",Create a reusable React component named `H3` that renders an HTML `<h3>` element. It should accept any props passed to it.
"/* @flow */
import React from 'react';
import Icon from 'mineral-ui/Icon';

import type { IconProps } from 'mineral-ui/Icon/types';

/* eslint-disable prettier/prettier */
export default function IconAlarmAdd(props: IconProps) {
  const iconProps = {
    rtl: false,
    ...props
  };

  return (
    <Icon {...iconProps}>
      <g>
        <path d=""M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9a9 9 0 0 0 0-18zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm1-11h-2v3H8v2h3v3h2v-3h3v-2h-3V9z""/>
      </g>
    </Icon>
  );
}

IconAlarmAdd.displayName = 'IconAlarmAdd';
IconAlarmAdd.category = 'action';
",Design a React component that renders the Alarm Add icon from the mineral-ui library.
"import { TextField } from '@material-ui/core';
import React from 'react';
import cls from './style.module.scss';
import PropTypes from 'prop-types';
import clsx from 'clsx';

const CustomTime = ({ value, style, onChange, className }) => {
    return <TextField
        id=""time""
        type=""time""
        onChange={(e) => onChange(e.currentTarget.value)}
        value={value}
        className={clsx(cls.root, className)}
        fullWidth
        style={style}
        InputLabelProps={{
            shrink: true,
        }}
        inputProps={{
            step: 300, // 5 min
        }}
    />;
}

CustomTime.defaultProps = {
    value: '',
    className: null,
    table: false
};

CustomTime.propTypes = {
    title: PropTypes.string,
    attr: PropTypes.string,
    style: PropTypes.object,
    onChange: PropTypes.func
};

export default CustomTime;","Create a React component that uses Material UI's TextField to allow users to input a time value. The component should have customizable styling, including the ability to specify the class name and inline styles. It should also support controlled input, allowing the consumer to set and change the displayed time. Ensure that the user can only input time values in 5-minute intervals by setting the step attribute to 300 seconds (5 minutes)."
"import React from 'react';
import domUtils from './utils/domUtils';
import EventListener from './utils/EventListener';

const AffixMixin = {
  propTypes: {
    offset: React.PropTypes.number,
    offsetTop: React.PropTypes.number,
    offsetBottom: React.PropTypes.number
  },

  getInitialState() {
    return {
      affixClass: 'affix-top'
    };
  },

  getPinnedOffset(DOMNode) {
    if (this.pinnedOffset) {
      return this.pinnedOffset;
    }

    DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, '');
    DOMNode.className += DOMNode.className.length ? ' affix' : 'affix';

    this.pinnedOffset = domUtils.getOffset(DOMNode).top - window.pageYOffset;

    return this.pinnedOffset;
  },

  checkPosition() {
    let DOMNode, scrollHeight, scrollTop, position, offsetTop, offsetBottom,
        affix, affixType, affixPositionTop;

    // TODO: or not visible
    if (!this.isMounted()) {
      return;
    }

    DOMNode = React.findDOMNode(this);
    scrollHeight = document.documentElement.offsetHeight;
    scrollTop = window.pageYOffset;
    position = domUtils.getOffset(DOMNode);

    if (this.affixed === 'top') {
      position.top += scrollTop;
    }

    offsetTop = this.props.offsetTop != null ?
      this.props.offsetTop : this.props.offset;
    offsetBottom = this.props.offsetBottom != null ?
      this.props.offsetBottom : this.props.offset;

    if (offsetTop == null && offsetBottom == null) {
      return;
    }
    if (offsetTop == null) {
      offsetTop = 0;
    }
    if (offsetBottom == null) {
      offsetBottom = 0;
    }

    if (this.unpin != null && (scrollTop + this.unpin <= position.top)) {
      affix = false;
    } else if (offsetBottom != null && (position.top + DOMNode.offsetHeight >= scrollHeight - offsetBottom)) {
      affix = 'bottom';
    } else if (offsetTop != null && (scrollTop <= offsetTop)) {
      affix = 'top';
    } else {
      affix = false;
    }

    if (this.affixed === affix) {
      return;
    }

    if (this.unpin != null) {
      DOMNode.style.top = '';
    }

    affixType = 'affix' + (affix ? '-' + affix : '');

    this.affixed = affix;
    this.unpin = affix === 'bottom' ?
      this.getPinnedOffset(DOMNode) : null;

    if (affix === 'bottom') {
      DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, 'affix-bottom');
      affixPositionTop = scrollHeight - offsetBottom - DOMNode.offsetHeight - domUtils.getOffset(DOMNode).top;
    }

    this.setState({
      affixClass: affixType,
      affixPositionTop
    });
  },

  checkPositionWithEventLoop() {
    setTimeout(this.checkPosition, 0);
  },

  componentDidMount() {
    this._onWindowScrollListener =
      EventListener.listen(window, 'scroll', this.checkPosition);
    this._onDocumentClickListener =
      EventListener.listen(domUtils.ownerDocument(this), 'click', this.checkPositionWithEventLoop);
  },

  componentWillUnmount() {
    if (this._onWindowScrollListener) {
      this._onWindowScrollListener.remove();
    }

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }
  },

  componentDidUpdate(prevProps, prevState) {
    if (prevState.affixClass === this.state.affixClass) {
      this.checkPositionWithEventLoop();
    }
  }
};

export default AffixMixin;
","Generate the React component mixin for Affix, a Bootstrap component that locks an element's position to the screen. It should handle offset positions, different affix states, and responsive behavior."
"import React from 'react';
import ItemsTableCell from '../../../admin/client/components/ItemsTable/ItemsTableCell';
import ItemsTableValue from '../../../admin/client/components/ItemsTable/ItemsTableValue';
import displayName from 'display-name';

var NameColumn = React.createClass({
	displayName: 'NameColumn',
	propTypes: {
		col: React.PropTypes.object,
		data: React.PropTypes.object,
		linkTo: React.PropTypes.string,
	},
	renderValue () {
		var value = this.props.data.fields[this.props.col.path];
		if (!value || (!value.first && !value.last)) return '(no name)';
		return displayName(value.first, value.last);
	},
	render () {
		return (
			<ItemsTableCell>
				<ItemsTableValue href={this.props.linkTo} padded interior field={this.props.col.type}>
					{this.renderValue()}
				</ItemsTableValue>
			</ItemsTableCell>
		);
	},
});

module.exports = NameColumn;
",Create a table cell component for a list of items with columns that display a name and link to a resource based on that name.
"import React from 'react'

export default () => (
  <>
    <p>Testing!!!</p>
    <p className=""foo"">Bar</p>
    <>
      <h3 id=""head"">Title...</h3>
      <React.Fragment>
        <p>hello</p>
        <>
          <p>foo</p>
          <p>bar</p>
        </>
        <p>world</p>
      </React.Fragment>
    </>
    <style jsx>{`
      p {
        color: cyan;
      }
      .foo {
        font-size: 18px;
        color: hotpink;
      }
      #head {
        text-decoration: underline;
      }
    `}</style>
  </>
)

function Component1() {
  return (
    <>
      <div>test</div>
    </>
  )
}

function Component2() {
  return (
    <div>
      <style jsx>{`
        div {
          color: red;
        }
      `}</style>
    </div>
  )
}
","Create a React component with the following UI elements:
- A paragraph with the text ""Testing!!!""
- Another paragraph with the class name ""foo"" and the text ""Bar""
- A nested UI element with an h3 element with the id ""head"" and the text ""Title...""
- Inside the nested UI element, a React fragment containing a paragraph with the text ""hello,"" another nested UI element with two paragraphs (""foo"" and ""bar""), and a final paragraph with the text ""world""
- Style the component using JSX styles:
  - Set the color of all paragraphs to cyan
  - Set the font size and color of the paragraph with the class name ""foo"" to 18px and hotpink, respectively
  - Underline the h3 element with the id ""head""
- Include two additional React components, Component1 and Component2, each with their own styling using JSX styles."
"import React from 'react';
import PropTypes from 'prop-types';
import { defineMessages, injectIntl, FormattedMessage } from 'react-intl';
import Icon from 'mastodon/components/icon';

const tooltips = defineMessages({
  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },
  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favourites' },
  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },
  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },
  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },
  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },
});

export default @injectIntl
class FilterBar extends React.PureComponent {

  static propTypes = {
    selectFilter: PropTypes.func.isRequired,
    selectedFilter: PropTypes.string.isRequired,
    advancedMode: PropTypes.bool.isRequired,
    intl: PropTypes.object.isRequired,
  };

  onClick (notificationType) {
    return () => this.props.selectFilter(notificationType);
  }

  render () {
    const { selectedFilter, advancedMode, intl } = this.props;
    const renderedElement = !advancedMode ? (
      <div className='notification__filter-bar'>
        <button
          className={selectedFilter === 'all' ? 'active' : ''}
          onClick={this.onClick('all')}
        >
          <FormattedMessage
            id='notifications.filter.all'
            defaultMessage='All'
          />
        </button>
        <button
          className={selectedFilter === 'mention' ? 'active' : ''}
          onClick={this.onClick('mention')}
        >
          <FormattedMessage
            id='notifications.filter.mentions'
            defaultMessage='Mentions'
          />
        </button>
      </div>
    ) : (
      <div className='notification__filter-bar'>
        <button
          className={selectedFilter === 'all' ? 'active' : ''}
          onClick={this.onClick('all')}
        >
          <FormattedMessage
            id='notifications.filter.all'
            defaultMessage='All'
          />
        </button>
        <button
          className={selectedFilter === 'mention' ? 'active' : ''}
          onClick={this.onClick('mention')}
          title={intl.formatMessage(tooltips.mentions)}
        >
          <Icon id='reply-all' fixedWidth />
        </button>
        <button
          className={selectedFilter === 'favourite' ? 'active' : ''}
          onClick={this.onClick('favourite')}
          title={intl.formatMessage(tooltips.favourites)}
        >
          <Icon id='star' fixedWidth />
        </button>
        <button
          className={selectedFilter === 'reblog' ? 'active' : ''}
          onClick={this.onClick('reblog')}
          title={intl.formatMessage(tooltips.boosts)}
        >
          <Icon id='retweet' fixedWidth />
        </button>
        <button
          className={selectedFilter === 'poll' ? 'active' : ''}
          onClick={this.onClick('poll')}
          title={intl.formatMessage(tooltips.polls)}
        >
          <Icon id='tasks' fixedWidth />
        </button>
        <button
          className={selectedFilter === 'status' ? 'active' : ''}
          onClick={this.onClick('status')}
          title={intl.formatMessage(tooltips.statuses)}
        >
          <Icon id='home' fixedWidth />
        </button>
        <button
          className={selectedFilter === 'follow' ? 'active' : ''}
          onClick={this.onClick('follow')}
          title={intl.formatMessage(tooltips.follows)}
        >
          <Icon id='user-plus' fixedWidth />
        </button>
      </div>
    );
    return renderedElement;
  }

}
","Generate a React component that displays a filter bar for notifications. The filter bar should include buttons to filter notifications by type, such as mentions, favorites, boosts, polls, follows, updates, and all. When a button is clicked, it should call a function that updates the selected filter. The component should also display tooltips for each button that provide more information about the filter."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let DeviceSignalCellular3Bar = (props) => (
  <SvgIcon {...props}>
    <path fillOpacity="".3"" d=""M2 22h20V2z""/><path d=""M17 7L2 22h15z""/>
  </SvgIcon>
);
DeviceSignalCellular3Bar = pure(DeviceSignalCellular3Bar);
DeviceSignalCellular3Bar.displayName = 'DeviceSignalCellular3Bar';
DeviceSignalCellular3Bar.muiName = 'SvgIcon';

export default DeviceSignalCellular3Bar;
",Design a React component utilizing SVG to illustrate a mobile signal icon with three signal bars.
"import React from 'react'
import popup from '../popup.js';

const links = [
  {
    url: 'https://www.crateandbarrel.com/gift-registry/anna-hunter-and-blake-thomas/r5729048',
    imgSrc: 'https://images.crateandbarrel.com/is/image/Crate/WebsiteHeaderLogo/fmt=png-alpha/170805043136/WebsiteHeaderLogo.jpg'
  },
  {
    url: 'https://www.bedbathandbeyond.com/store/giftregistry/view_registry_guest.jsp?registryId=544926178&eventType=Wedding&pwsurl=&eventType=Wedding',
    imgSrc: 'https://www.bedbathandbeyond.com/_assets/global/images/logo/logo_bbb.png',
    id: 'bath'
  },
];

const RegistryPage = () => {

  return (
    <div className=""registry"">
      {links.map(link => {
        return (
          <a key={link.url} href={link.url} onClick={popup.bind(null, link.url)}>
            <img src={link.imgSrc} id={link.id}/>
          </a>
        );
      })}
    </div>
  );
}

export default RegistryPage;
","Generate a React component that displays a list of registry links with images as buttons. When a button is clicked, it should open a popup window with the registry URL. Include the necessary import statements for the popup function."
"// InputEditableDateTimeField.js

import React from 'react';
import {
  ButtonGroup,
  DropdownButton,
  MenuItem,
  Input,
  Glyphicon,
} from 'react-bootstrap';
import Dates from '../../common/Dates';

/**
*  Show current saved value for day/time and let user update data and submit changes
*
*  @prop title: form title of the element
*  @prop placeholder: placeholder to show in field
*  @prop verified: should show indicator that the value was successfully... whatever
*
*  @prop day: current saved day value
*  @prop time: current saved time value
*  @prop onDateSubmit -> function(day, time): parent's function to be called if 'Submit' is hit
*
*  @state day: current day value being entered
*  @state time: current time value being entered
*  @state editable: should let the user edit the field
*/
const InputEditableDateTimeField = React.createClass({
  getInitialState() {
    return { day: 'Mon', time: '10am', editable: false };
  },
  handleDayChange(e, day) {
    this.setState({ day });
  },
  handleTimeChange(e, time) {
    this.setState({ time });
  },
  toggleEditableField(e) {
    this.setState({
      day: this.props.day,
      time: this.props.time,
      editable: !this.state.editable,
    });
  },
  handleSubmit(e) {
    e.preventDefault();
    const day = this.state.day.trim();
    const time = this.state.time.trim();
    if (day && time) {
      this.props.onDateSubmit(day, time);
      this.setState({ day: 'Mon', time: '10am', editable: false });
    }
  },
  render() {
    const editButton = (
      <a className=""customInput"" onClick={this.toggleEditableField}>
        Edit
      </a>
    );
    // var cancelButton = <Button className=""cancelLink"" onClick={this.toggleEditableField}>Cancel</Button>;
    const actionButton = (
      <span>
        <a onClick={this.handleSubmit}>{this.props.buttonTitle || 'Update'}</a>
        &emsp;&emsp;&emsp;<a
          className=""cancelLink""
          onClick={this.toggleEditableField}>
          Cancel
        </a>
      </span>
    );
    const days = Dates.availableDays.map(day => (
      <MenuItem key={day} eventKey={day}>
        {Dates.dayFromVar(day)}
      </MenuItem>
    ));

    const times = Dates.availableTimes.map(time => (
      <MenuItem key={time} eventKey={time}>
        {time}
      </MenuItem>
    ));
    return (
      <div className=""inputEditableDateTimeField"">
        <form className=""form-horizontal"">
          <Input
            label={this.props.title}
            labelClassName=""col-xs-3""
            wrapperClassName=""inputEditWrapper col-xs-9""
            addonAfter={this.state.editable ? actionButton : editButton}>
            {this.state.editable ? (
              // field edit/submittable
              <ButtonGroup>
                <DropdownButton
                  id=""day""
                  title={
                    Dates.dayFromVar(this.state.day) || (
                      <span className=""placeholder"">Day</span>
                    )
                  }
                  onSelect={this.handleDayChange}
                  key={this.state.day}>
                  {days}
                </DropdownButton>
                <DropdownButton
                  id=""time""
                  title={
                    this.state.time || <span className=""placeholder"">Time</span>
                  }
                  onSelect={this.handleTimeChange}
                  key={this.state.time}>
                  {times}
                </DropdownButton>
              </ButtonGroup>
            ) : (
              // locked to user input
              <span className=""customInput"">
                {this.props.day && this.props.time ? (
                  <span>
                    {Dates.dayFromVar(this.props.day)} {this.props.time}{' '}
                    {this.props.verified ? (
                      <Glyphicon className=""verifiedGlyph"" glyph=""ok"" />
                    ) : (
                      ''
                    )}
                  </span>
                ) : (
                  <span className=""placeholder"">{this.props.placeholder}</span>
                )}
              </span>
            )}
          </Input>
        </form>
      </div>
    );
  },
});

export default InputEditableDateTimeField;
","Create a React component with an editable datetime field, including dropdown menus for selecting day and time. Add a button to toggle edit mode, as well as buttons to submit and cancel changes."
"/*
 * SonarQube
 * Copyright (C) 2009-2016 SonarSource SA
 * mailto:contact AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
import React, { Component } from 'react';

import { changePassword } from '../../../api/users';
import { translate } from '../../../helpers/l10n';

export default class Password extends Component {
  state = {
    success: false,
    errors: null
  };

  handleSuccessfulChange () {
    this.refs.oldPassword.value = '';
    this.refs.password.value = '';
    this.refs.passwordConfirmation.value = '';
    this.setState({ success: true, errors: null });
  }

  handleFailedChange (e) {
    e.response.json().then(r => {
      this.refs.oldPassword.focus();
      this.setErrors(r.errors.map(e => e.msg));
    });
  }

  setErrors (errors) {
    this.setState({
      success: false,
      errors
    });
  }

  handleChangePassword (e) {
    e.preventDefault();

    const { user } = this.props;
    const oldPassword = this.refs.oldPassword.value;
    const password = this.refs.password.value;
    const passwordConfirmation = this.refs.passwordConfirmation.value;

    if (password !== passwordConfirmation) {
      this.refs.password.focus();
      this.setErrors([translate('user.password_doesnt_match_confirmation')]);
    } else {
      changePassword(user.login, password, oldPassword)
          .then(this.handleSuccessfulChange.bind(this))
          .catch(this.handleFailedChange.bind(this));
    }
  }

  render () {
    const { success, errors } = this.state;

    return (
        <section>
          <h2 className=""spacer-bottom"">
            {translate('my_profile.password.title')}
          </h2>

          <form onSubmit={this.handleChangePassword.bind(this)}>
            {success && (
                <div className=""alert alert-success"">
                  {translate('my_profile.password.changed')}
                </div>
            )}

            {errors && errors.map((e, i) => (
                <div key={i} className=""alert alert-danger"">{e}</div>
            ))}

            <div className=""modal-field"">
              <label htmlFor=""old_password"">
                {translate('my_profile.password.old')}
                <em className=""mandatory"">*</em>
              </label>
              <input
                  ref=""oldPassword""
                  autoComplete=""off""
                  id=""old_password""
                  name=""old_password""
                  required={true}
                  type=""password""/>
            </div>
            <div className=""modal-field"">
              <label htmlFor=""password"">
                {translate('my_profile.password.new')}
                <em className=""mandatory"">*</em>
              </label>
              <input
                  ref=""password""
                  autoComplete=""off""
                  id=""password""
                  name=""password""
                  required={true}
                  type=""password""/>
            </div>
            <div className=""modal-field"">
              <label htmlFor=""password_confirmation"">
                {translate('my_profile.password.confirm')}
                <em className=""mandatory"">*</em>
              </label>
              <input
                  ref=""passwordConfirmation""
                  autoComplete=""off""
                  id=""password_confirmation""
                  name=""password_confirmation""
                  required={true}
                  type=""password""/>
            </div>
            <div className=""modal-field"">
              <button id=""change-password"" type=""submit"">
                {translate('my_profile.password.submit')}
              </button>
            </div>
          </form>
        </section>
    );
  }
}
","Generate a React component that allows a user to change their password. The component should have fields for the old password, the new password, and the new password confirmation. When the user submits the form, the component should call an API to change the user's password. If the password change is successful, the component should display a success message. If the password change is not successful, the component should display an error message. The component should also handle validation for empty fields and mismatched new password and confirmation."
"import React from 'react'
import { Image as ImageComponent, Item } from 'semantic-ui-react'

const paragraph = <ImageComponent src='/assets/images/wireframe/short-paragraph.png' />

const ItemExampleLink = () => (
  <Item.Group>
    <Item>
      <Item.Image size='tiny' src='/assets/images/wireframe/image.png' />

      <Item.Content>
        <Item.Header>Arrowhead Valley Camp</Item.Header>
        <Item.Meta>
          <span className='price'>$1200</span>
          <span className='stay'>1 Month</span>
        </Item.Meta>
        <Item.Description>{paragraph}</Item.Description>
      </Item.Content>
    </Item>

    <Item>
      <Item.Image size='tiny' src='/assets/images/wireframe/image.png' />

      <Item.Content>
        <Item.Header>Buck's Homebrew Stayaway</Item.Header>
        <Item.Meta content='$1000 2 Weeks' />
        <Item.Description>{paragraph}</Item.Description>
      </Item.Content>
    </Item>

    <Item>
      <Item.Image size='tiny' src='/assets/images/wireframe/image.png' />
      <Item.Content header='Arrowhead Valley Camp' meta='$1200 1 Month' />
    </Item>
  </Item.Group>
)

export default ItemExampleLink
","Create a React component that displays a list of items with images and text, including a short paragraph of text and a price and stay duration."
"/*
 * Copyright (C) Pootle contributors.
 * Copyright (C) Zing contributors.
 *
 * This file is a part of the Zing project. It is distributed under the GPL3
 * or later license. See the LICENSE file for a copy of the license and the
 * AUTHORS file for copyright and authorship information.
 */

import autosize from 'autosize';
import React from 'react';

const AutosizeTextarea = React.createClass({
  componentDidMount() {
    autosize(this.refs.textarea);
  },

  componentDidUpdate() {
    autosize.update(this.refs.textarea);
  },

  componentWillUnmount() {
    autosize.destroy(this.refs.textarea);
  },

  render() {
    return <textarea ref=""textarea"" {...this.props} />;
  },
});

export default AutosizeTextarea;
",Create a React component that uses the autosize library to automatically adjust the height of a textarea based on its content.
"import React from 'react';
import controlTypes from '../../../../CustomMetadataForm/controlTypes';
import getControl from '../../../../../utils/getControl';
import renderConstraintForm from './renderConstraintForm';
import Row from '../../../../form/Grid/Row';
import LeftColumn from '../../../../form/Grid/LeftColumn';
import RightColumn from '../../../../form/Grid/RightColumn';
import ComboBox from '../../../../form/ComboBox';

/**
 *
 * Takes care of rendering of the selection & constraint form for nested arrays
 *
 * The props should have the following structure:
 *
 * constraints: {
 *    controlType: ""arrayOf"",
 *    constraints: {
 *      controlType: ""string""
 *    }
 * }
 *
 * parsedMetadata: {
 *  name: ""arrayOf"",
 *  value: {
 *     name: ""string""
 *   }
 * }
 *
 *
 * @param constraints
 * @param parsedMetadata
 * @param onUpdate
 * @returns {Object}
 * @constructor
 */
const ConstraintsForm = ({ constraints, parsedMetadata, onUpdate, nestedLevel }) => {
  const onChange = (event) => {
    const controlType = event.value;
    // check if the control type has constraints
    // if the type doesn't have constraints neglect the existing constraints.
    const control = getControl({ name: controlType });
    const hasConstraints = control.type.ConstraintsForm;
    const newCustomMetadata = hasConstraints && constraints && constraints.constraints
      ? { ...constraints.constraints }
      : {};
    newCustomMetadata.controlType = controlType;
    onUpdate({ ...newCustomMetadata });
  };

  const renderControl = ({ controlType, constraint }) => (
    <Row>
      <LeftColumn nestedLevel={nestedLevel}>{controlType}</LeftColumn>
      <RightColumn>
        <ComboBox
          value={controlType}
          onChange={onChange}
          options={controlTypes.map((type) => ({ value: type }))}
        />
      </RightColumn>
      {renderConstraintForm(
        controlType,
        onUpdate,
        constraints,
        parsedMetadata
      )}
      {constraint && renderControl(constraint)}
    </Row>
  );

  return (
    <Row>
      {renderControl(constraints)}
    </Row>
  );
};

export default ConstraintsForm;
","Create a React component that handles rendering the selection form and constraint form for nested arrays. The component takes the following props: constraints (an object with a controlType and constraints), parsedMetadata (an object with a name and value), onUpdate (a function to update the state), and nestedLevel (a number representing the level of nesting)."
"// @flow
import React, { Component } from 'react';
import { Link } from 'react-router';
import styles from './Facebook.css';
import SortTable from './SortTable'
import { Button, FormControl, FormGroup, ControlLabel } from 'react-bootstrap';

export default class Home extends Component {

  constructor(props) {
    super(props);

    var queryString = this.props.location.query
    this.props.getFacebookDeveloperAsync(queryString.user)
    this.props.getFacebookJobAsync(queryString.user)

    this.onChange = this.onChange.bind(this);
    this.postComment = this.postComment.bind(this);

    this.comment = ''
  }

  postComment(evt) {
    this.props.postComment(this.props.developer.user_name, this.comment)
  }

  onChange(evt) {
    console.log(evt.target.value)
    this.comment = evt.target.value
  }

  render() {
    const columns = [
        {name: 'Company', key: 'company', width: 200},
        {name: 'Position', key: 'position', width: 200},
        {name: 'Duration', key: 'duration', width: 200},
    ];

    var comments = this.props.commentList.map(function(comment) { return comment.comment })
    var commentText = comments.join('\n\n')

    return (
      <div>
        <div className={styles.container}>
          <h2>Job Search Crawler -- 
            <Link to={{ pathname: '/' }}>
              HomePage
            </Link>
          </h2>
          <hr/>

          <div className={styles.userPanel}>
            <img src={this.props.developer.avatar} className={styles.avatar}/>
            <span className={styles.userName}>{this.props.developer.name}</span>
          </div>

          <div className={styles.repoTable}>
            <SortTable 
              dataList={this.props.facebookJobList} 
              columns={columns}
              onSortChange={this.props.sortFacebookJob}
              width={800}
              height={200}
            />
          </div>

          <div className={styles.email}>
            Email: {this.props.developer.email}
          </div>

          <div className={styles.phone}>
            Website: {this.props.developer.website}
          </div>

          <FormGroup controlId=""formControlsTextarea"">
            <FormControl
              componentClass=""textarea""
              value={commentText}
              readOnly
              className={styles.comments}/>
          </FormGroup>

          <FormGroup>
          <FormControl type=""text"" placeholder=""New Comment"" onChange={this.onChange}/>
          </FormGroup>
          {' '}
          <Button
            bsStyle=""primary"" 
            bsSize=""small"" 
            className={styles.filterButton}
            onClick={this.postComment}
          >
            Post
          </Button>

        </div>
      </div>
    );
  }
}
","Generate the React code for a Facebook developer profile page, including a sortable job history table, comments section, and the ability to post new comments."
"import React from 'react';
import { renderToStaticMarkup } from 'react-dom/server';

// renderReactView
export default (res, view, title, componentType, props) => {

  const element = React.createElement(componentType, props, null);
  const markup = renderToStaticMarkup(element);

  res.render(view, { title, markup });
};","Create a Node.js function that takes a React component and its properties, renders the component to a static HTML string, and then renders the HTML string in a specified view along with a title."
"import React from 'react';

import { FormattedMessage, injectIntl } from 'react-intl';
import * as paths from '../../../../paths';
import * as MobActions from '../../../../mobrender/redux/action-creators';
import { Loading } from '../../../../components/await';
import MobSelectors from '../../../../mobrender/redux/selectors';
import {
  PageCentralizedLayout,
  PageCentralizedLayoutTitle,
} from '../../../../components/layout';
import { Tabs, Tab } from '../../../../components/navigation/tabs';
import { Button, FlatForm } from '../../../../ux/components';
import { StepsContainerStack, StepContent } from '../../../../components/steps';
import { FormDomain, FormShare } from '../../../../mobilizations/components';

if (require('exenv').canUseDOM) {
  require('./form-domain.scss');
  require('./form-share.scss');
}

const FormShareImplementation = injectIntl(
  FormShare(
    (state) => ({ initialValues: MobSelectors(state).getMobilization() }),
    { submit: MobActions.asyncUpdateMobilization },
    (values, props) => {
      const errors = {};
      const messageRequired = props.intl.formatMessage({
        id: 'page--mobilizations-launch.form-share.validation.required',
        defaultMessage: 'Obrigatório',
      });

      if (!values.facebook_share_image) {
        errors.facebook_share_image = messageRequired;
      }
      if (!values.facebook_share_title) {
        errors.facebook_share_title = messageRequired;
      }
      if (!values.facebook_share_description) {
        errors.facebook_share_description = messageRequired;
      }
      if (!values.twitter_share_text) {
        errors.twitter_share_text = messageRequired;
      }
      return errors;
    }
  )
);

const MobilizationsLaunchPage = ({
  history,
  hostedZones,
  mobilization,
  isSaving,
  ...formProps
}) => {
  const stepDomainValidation = () => !!mobilization.custom_domain;
  const stepShareValidation = () =>
    !!mobilization.facebook_share_image &&
    !!mobilization.facebook_share_title &&
    !!mobilization.facebook_share_description &&
    !!mobilization.twitter_share_text;
  const stepFinishValidation = () =>
    mobilization.custom_domain &&
    mobilization.facebook_share_image &&
    mobilization.facebook_share_title &&
    mobilization.facebook_share_description &&
    mobilization.twitter_share_text;
  const savingButtonMessage = (
    <FormattedMessage
      id=""page--mobilizations-launch.button.saving""
      defaultMessage=""Salvando...""
    />
  );
  const launchButtonMessage = (
    <FormattedMessage
      id=""page--mobilizations-launch.button.launch""
      defaultMessage=""Lançar mobilização""
    />
  );
  const continueButtonMessage = (
    <FormattedMessage
      id=""page--mobilizations-launch.button.next""
      defaultMessage=""Continuar""
    />
  );

  return (
    <PageCentralizedLayout>
      <PageCentralizedLayoutTitle>
        <FormattedMessage
          id=""page--mobilizations-launch.title""
          defaultMessage=""Lançando sua mobilização""
        />
      </PageCentralizedLayoutTitle>

      <StepsContainerStack
        ComponentPointerContainer={Tabs}
        ComponentPointerChildren={Tab}
        pointerChildrenProps={({ index, step }) => ({
          isActive: index === step,
          index,
        })}
        progressValidations={[
          stepDomainValidation,
          stepShareValidation,
          stepFinishValidation,
        ]}
      >
        <StepContent>
          <FormDomain
            {...formProps}
            formComponent={FlatForm}
            titleText={
              <FormattedMessage
                id=""page--mobilizations-launch.steps.form-domain.title""
                defaultMessage=""Configure o endereço da mobilização""
              />
            }
            buttonText={
              isSaving
                ? savingButtonMessage
                : stepShareValidation()
                ? launchButtonMessage
                : continueButtonMessage
            }
            requiredField
            mobilization={mobilization}
            hostedZones={hostedZones}
            redirectToCreateDNS={() => {
              history.push(
                paths.communityDomainCreate(
                  `?next=${paths.mobilizationLaunch(mobilization.id)}`
                )
              );
            }}
          />
        </StepContent>

        <StepContent>
          <FormShareImplementation
            {...formProps}
            FormComponent={FlatForm}
            formClassNames=""mobilization-launch--form-share""
            titleText={
              <FormattedMessage
                id=""page--mobilizations-launch.steps.form-share.title""
                defaultMessage=""Configure as informações de compartilhamento""
              />
            }
            buttonText={isSaving ? savingButtonMessage : launchButtonMessage}
          />
        </StepContent>

        <StepContent>
          <div className=""ux--flat-form"">
            <h1>
              <FormattedMessage
                id=""page--mobilizations-launch.steps.done.title""
                defaultMessage=""Seu BONDE está pronto!""
              />
            </h1>
            <p className=""h5"">
              <FormattedMessage
                id=""page--mobilizations-launch.steps.done.helper-text""
                defaultMessage={
                  'Em uma nova aba, digite o endereço que cadastrou na mobilização ' +
                  'para se certificar de que ela já está no ar. Se ainda não estiver, ' +
                  'cheque se cadastrou os domínios corretamente. Está tudo certo? Então ' +
                  'é só esperar ele propagar pela internet!'
                }
              />
            </p>
            <Button
              href={`http://${mobilization.custom_domain}`}
              target=""_blank""
            >
              <FormattedMessage
                id=""page--mobilizations-launch.steps.done.button.open""
                defaultMessage=""Visualizar mobilização""
              />
            </Button>
          </div>
        </StepContent>
      </StepsContainerStack>

      {isSaving && <Loading />}
    </PageCentralizedLayout>
  );
};

export default MobilizationsLaunchPage;
",Generate a React component that takes care of the form share section of the mobilization launch flow. This form is the second step of three in a wizard that helps users launch a new mobilization. The form should validate that all the fields are filled in before submitting. The form should also be able to handle saving the data and redirecting the user to the next step in the wizard or displaying a loading indicator while saving.
"import React from 'react';
import Analyzer from 'parser/core/Analyzer';
import SPELLS from 'common/SPELLS';
import SpellIcon from 'common/SpellIcon';
import { formatDuration, formatPercentage } from 'common/format';
import { STATISTIC_ORDER } from 'interface/others/StatisticBox';
import StatisticBox from 'interface/others/StatisticBox';
import StatTracker from 'parser/shared/modules/StatTracker';
import BoneShieldTimesByStacks from './/BoneShieldTimesByStacks';


class BoneShield extends Analyzer {

  static dependencies = {
    statTracker: StatTracker,
    boneShieldTimesByStacks: BoneShieldTimesByStacks,
  };


  get boneShieldTimesByStack() {
    return this.boneShieldTimesByStacks.boneShieldTimesByStacks;
  }


  get uptime() {
    return this.selectedCombatant.getBuffUptime(SPELLS.BONE_SHIELD.id) / this.owner.fightDuration;
  }

  get uptimeSuggestionThresholds() {
    return {
      actual: this.uptime,
      isLessThan: {
        minor: 0.95,
        average: 0.9,
        major: .8,
      },
      style: 'percentage',
    };
  }

  suggestions(when) {
    when(this.uptimeSuggestionThresholds)
      .addSuggestion((suggest, actual, recommended) => {
        return suggest('Your Bone Shield uptime can be improved. Try to keep it up at all times.')
          .icon(SPELLS.BONE_SHIELD.icon)
          .actual(`${formatPercentage(actual)}% Bone Shield uptime`)
          .recommended(`>${formatPercentage(recommended)}% is recommended`);
      });
  }

  statistic() {

      return (
        <StatisticBox
          icon={<SpellIcon id={SPELLS.BONE_SHIELD.id} />}
          value={`${formatPercentage(this.uptime)} %`}
          label=""Bone Shield uptime""
        >
          <table className=""table table-condensed"">
            <thead>
              <tr>
                <th>Stacks</th>
                <th>Time (s)</th>
                <th>Time (%)</th>
              </tr>
            </thead>
            <tbody>
              {Object.values(this.boneShieldTimesByStack).map((e, i) => (
                <tr key={i}>
                  <th>{i}</th>
                  <td>{formatDuration(e.reduce((a, b) => a + b, 0) / 1000)}</td>
                  <td>{formatPercentage(e.reduce((a, b) => a + b, 0) / this.owner.fightDuration)}%</td>
                </tr>
              ))}
            </tbody>
          </table>
        </StatisticBox>

      );
  }
  statisticOrder = STATISTIC_ORDER.CORE(5);
}

export default BoneShield;
","Provide code that generates a UI element that displays Bone Shield uptime (percentage of time the ability is active) for a combatant in a game, with a table showing the uptime for each stack of the ability. Also include suggestions for improving uptime if it falls below certain thresholds."
"import React from 'react';
import PropTypes from 'prop-types';
import { FormattedNumber } from 'react-intl';
import TransitionMotion from 'react-motion/lib/TransitionMotion';
import spring from 'react-motion/lib/spring';
import { reduceMotion } from 'mastodon/initial_state';

const obfuscatedCount = count => {
  if (count < 0) {
    return 0;
  } else if (count <= 1) {
    return count;
  } else {
    return '1+';
  }
};

export default class AnimatedNumber extends React.PureComponent {

  static propTypes = {
    value: PropTypes.number.isRequired,
    obfuscate: PropTypes.bool,
  };

  state = {
    direction: 1,
  };

  componentWillReceiveProps (nextProps) {
    if (nextProps.value > this.props.value) {
      this.setState({ direction: 1 });
    } else if (nextProps.value < this.props.value) {
      this.setState({ direction: -1 });
    }
  }

  willEnter = () => {
    const { direction } = this.state;

    return { y: -1 * direction };
  }

  willLeave = () => {
    const { direction } = this.state;

    return { y: spring(1 * direction, { damping: 35, stiffness: 400 }) };
  }

  render () {
    const { value, obfuscate } = this.props;
    const { direction } = this.state;

    if (reduceMotion) {
      return obfuscate ? obfuscatedCount(value) : <FormattedNumber value={value} />;
    }

    const styles = [{
      key: `${value}`,
      data: value,
      style: { y: spring(0, { damping: 35, stiffness: 400 }) },
    }];

    return (
      <TransitionMotion styles={styles} willEnter={this.willEnter} willLeave={this.willLeave}>
        {items => (
          <span className='animated-number'>
            {items.map(({ key, data, style }) => (
              <span key={key} style={{ position: (direction * style.y) > 0 ? 'absolute' : 'static', transform: `translateY(${style.y * 100}%)` }}>{obfuscate ? obfuscatedCount(data) : <FormattedNumber value={data} />}</span>
            ))}
          </span>
        )}
      </TransitionMotion>
    );
  }

}
","Create a React component that animates numeric values on the screen. The component should use React Motion to handle the animation, and it should gracefully degrade to a static display when the user has reduced motion enabled. The component should take two props: `value`, which is the numeric value to be displayed, and `obfuscate`, which is a boolean indicating whether or not the value should be obfuscated (e.g., ""1+"" instead of ""2"")."
"import React from 'react';
import { render } from 'react-dom';
import { browserHistory } from 'react-router';
import { AppContainer } from 'react-hot-loader';
import Root from './container/Root';
import configureStore from './store/configureStore';

import { syncHistoryWithStore } from 'react-router-redux';
import injectTapEventPlugin from 'react-tap-event-plugin';
injectTapEventPlugin();
const store = configureStore();

const history = syncHistoryWithStore(browserHistory, store);

render(
    <AppContainer>
        <Root store={store} history={history} />
    </AppContainer>,
    document.getElementById('app')
);

if (module.hot) {
    module.hot.accept('./container/Root', () => {
        const NewRoot = require('./container/Root').default;
        render(
            <AppContainer>
                <NewRoot store={store} history={history} />
            </AppContainer>,
            document.getElementById('app')
        );
    });
}","Create a React application with the following components:
- A root component called `Root` that will act as the main application container.
- A store configured with the Redux library.
- A history object synchronized with the store using `syncHistoryWithStore` from `react-router-redux`.
- A hot reloading configuration for the `Root` component using `react-hot-loader`."
"import React from 'react'

export default ({ data }) => {
  return (
    <section id=""one"">
      <div className=""container"">
        <header className=""major"" style={{paddingBottom: '45vh'}}>
          <h2>404 error!</h2>
        </header>
      </div>
    </section>
  )
}
","Create a static React component that renders a 404 error page with a prominent ""404 error!"" header and a padding of 45vh for aesthetic purposes."
"import React from 'react';

{/* View for single project, /project/:id, imported into ManageProjectPage */}

const ProjectView = ({ project }) => {
 return (
    <form>
      <h1>{ project.title }</h1>
    </form>
  );
};

ProjectView.propTypes = {
  project: React.PropTypes.object.isRequired
};

export default ProjectView;
","Provide the code to render a form with a heading using React, taking in a project object as props and displaying the project's title as the heading."
"import React from 'react';
import invariant from 'invariant';
import { createRouteFromReactElement } from './RouteUtils';
import { component, components } from './PropTypes';
import warning from 'warning';

var { string, bool, func } = React.PropTypes;

/**
 * A <Route> is used to declare which components are rendered to the page when
 * the URL matches a given pattern.
 *
 * Routes are arranged in a nested tree structure. When a new URL is requested,
 * the tree is searched depth-first to find a route whose path matches the URL.
 * When one is found, all routes in the tree that lead to it are considered
 * ""active"" and their components are rendered into the DOM, nested in the same
 * order as they are in the tree.
 */
export var Route = React.createClass({

  statics: {

    createRouteFromReactElement(element) {
      var route = createRouteFromReactElement(element);

      if (route.handler) {
        warning(false, '<Route handler> is deprecated, use <Route component> instead');
        route.component = route.handler;
        delete route.handler;
      }

      return route;
    }
  
  },

  propTypes: {
    path: string,
    ignoreScrollBehavior: bool,
    handler: component,
    component,
    components,
    getComponents: func
  },

  render() {
    invariant(
      false,
      '<Route> elements are for router configuration only and should not be rendered'
    );
  }

});

export default Route;
",Describe the purpose of the React Route component and how it is used to map URLs to React components.
"import React from 'react';
import test from 'ava';
import { shallow } from 'enzyme';
import { Footer } from '../../components/Footer/Footer';

test('renders the footer properly', t => {
  const wrapper = shallow(
    <Footer />
  );

  t.is(wrapper.find('p').length, 2);
  t.is(wrapper.find('p').first().text(), '© 2016 · Hashnode · LinearBytes Inc.');
});
",Describe a test case for a React component that tests if it renders the correct number of paragraphs and verifies the text of the first paragraph.
"import React from 'react';
import { Route, IndexRoute } from 'react-router';

import App from './App';
import LoginPage from '../../pages/login/page';
import HomePage from '../../pages/home/page';


export default (
  <Route path=""/"" component={App}>
    <IndexRoute component={LoginPage} />
    <Route path=""home"" component={HomePage} />
  </Route>
);
","Create React Router routes for an application with a login page and a home page, and the home page is only accessible after logging in."
"import React from 'react'
import Prism from 'prismjs'
import { connect } from 'react-redux'
import FilterMenu from '../../components/FilterMenu'

import Button from '../../components/Button'
import Input from '../../components/forms/Input'


function VerificationView({app}){
  const [currentLang, setCurrentLang] = React.useState(""ruby"")
  const [show, setShow] = React.useState(false)

  function setupScript () {
    const hostname = window.location.hostname
    const port = window.location.port ? ':' + window.location.port : ''
    const secure = window.location.protocol === 'https:'
    const httpProtocol = window.location.protocol
    const wsProtocol = secure ? 'wss' : 'ws'
    const hostnamePort = `${hostname}${port}`
  
    const code = `
      <script>
        (function(d,t) {
          var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
          g.src=""${httpProtocol}//${hostnamePort}/embed.js""
          s.parentNode.insertBefore(g,s);
          g.onload=function(){
            new window.ChaskiqMessengerEncrypted({
              domain: '${httpProtocol}//${hostnamePort}',
              ws:  '${wsProtocol}://${hostnamePort}/cable',
              app_id: ""${app ? app.key : ''}"",
              data: {
                email: ""user@email.com"",
                identifier_key: ""INSERT_HMAC_VALUE_HERE"",
                properties: { }
              },
              lang: ""USER_LANG_OR_DEFAULTS_TO_BROWSER_LANG"" 
            })
          }
        })(document,""script"");
      </script>
    `
    return Prism.highlight(code, Prism.languages.javascript, 'javascript')
  }

  function keyGeneration () {

    const code = optionsForFilter().find(
      (o)=> o.id === currentLang
    ).code

    return Prism.highlight(code, Prism.languages.ruby, 'ruby')
  }

  function optionsForFilter(){
    return [
      {
        title: 'Ruby',
        description: 'ruby',
        id: 'ruby',
        state: 'archived',
        code: `
        OpenSSL::HMAC.hexdigest(
          'sha256', # hash function
          '${app.encryptionKey}', # secret key (keep safe!)
          current_user.email
        )`
      },
      {
        title: 'NodeJs',
        description: 'nodejs',
        id: 'nodejs',
        code: `
        const crypto = require('crypto');
        const hmac = crypto.createHmac('sha256', '${app.encryptionKey}');
        hmac.update('Message');
        console.log(hmac.digest('hex'));`
      },
      {
        title: 'PHP',
        description: 'PHP',
        id: 'php',
        code: `
        hash_hmac(
          'sha256', // hash function
          $user->email, // user's id
          '${app.encryptionKey}' // secret key (keep safe!)
        );`
      },
      {
        title: 'Python 3',
        description: 'python',
        id: 'python',
        code: `
        import hmac
        import hashlib
        hmac.new(
          b'${app.encryptionKey}', # secret key (keep safe!)
          bytes(request.user.id, encoding='utf-8'), # user's id
          digestmod=hashlib.sha256 # hash function
        ).hexdigest()
        `
      },
      {
        title: 'Golang',
        description: 'golang',
        id: 'golang',
        code: `
        package main

        import (
            ""crypto/hmac""
            ""crypto/sha256""
            ""encoding/hex""
            ""fmt""
        )

        func ComputeHmac256(message string, secret string) string {
            key := []byte(secret)
            h := hmac.New(sha256.New, key)
            h.Write([]byte(message))
            return hex.EncodeToString(h.Sum(nil))
        }

        func main() {
            fmt.Println(ComputeHmac256(""Message"", ""secret"")) // ${app.encryptionKey}
        }
        
        `
      }
    ]
  }

  function toggleButton(clickHandler) {
    return (
      <div>
        <Button 
          variant={'outlined'} 
          onClick={clickHandler}>
          {currentLang}
        </Button>
      </div>
    )
  }

  function changeLang(item){
    setCurrentLang(item.id)
  }

  return (
    <div className=""space-y-6 mx-10-- py-6 text-sm"">

      <h2 className=""text-lg font-bold-"">{I18n.t(""identified_users.title"")}</h2>
    
      <div className=""flex md:w-1/4 items-center"">

        <Input 
          label=""Identity verification secret"" 
          disabled={true}
          value={app.encryptionKey} 
          type={show ? 'text' : 'password'}
          helperText={
            ""Don't share this code""
          }
        />

        <Button 
          className=""ml-2""
          variant=""success""
          style={{
            marginTop: '-12px'
          }}
          onClick={()=>setShow(!show)}>
          show 
        </Button>
        
      </div>

    
      <p className="""">
        {I18n.t(""identified_users.hint1"")}
        To configure identity verification, you will need to generate an HMAC on your server for each logged in user and submit it to Chaskiq.
      </p>

      <p className=""font-bold"">{I18n.t(""identified_users.lang"")}</p>


      <div className=""flex justify-between items-center"">
        <p className=""font-bold text-lg"">{currentLang}:</p>

        <div className=""flex justify-end"">
          <FilterMenu
            options={optionsForFilter()}
            value={null}
            filterHandler={changeLang}
            triggerButton={toggleButton}
            position={'right'}
          />      
        </div>
      </div>

      <CodeBox content={keyGeneration()}/>

      <p 
        dangerouslySetInnerHTML={{__html: I18n.t(""identified_users.hint2"")
      }}/>

      <CodeBox content={setupScript()}/>

    </div>
  )
}

function CodeBox ({content}){
  return (
    <pre className=""p-3 bg-black rounded-md border-black border-2 dark:border-gray-100 text-white text-sm overflow-auto shadow-sm"">
      <div dangerouslySetInnerHTML={{__html: content }}/>    
    </pre>
  )
}


function mapStateToProps (state) {
  const { app } = state
  return {
    app
  }
}

export default connect(mapStateToProps)(VerificationView)

","Provide the code in a React functional component that:

1. Displays a label of ""Identity verification secret"" above a text input field.
2. Displays a button next to the input field with the text ""show"", which toggles the input field between showing the value as plain text or as a password.
3. When the button is clicked, it should reveal or hide the value in the input field, and update the button's text to ""hide"" or ""show"" accordingly."
"import React, { Component } from 'react';
import { Text } from 'react-native';
import firebase from 'firebase';
import { Button, Card, CardSection, Input, Spinner } from './common';

class LoginForm extends Component {
  state = { email: '', password: '', error: '', loading: false };

  onButtonPress(){
    const { email, password } = this.state;

    this.setState({ error: '', loading: true });

    firebase.auth().signInWithEmailAndPassword(email, password)
    .then(this.onLogInSuccess.bind(this))
    .catch(() => {
      firebase.auth().createUserWithEmailAndPassword(email, password)
      .then(this.onLogInSuccess.bind(this))
      .catch(this.onLogInFail.bind(this));
    });
  }

onLogInFail(){
  this.setState({
    error:'Authentication Failed',
     loading: false
  });
}


  onLogInSuccess(){
    this.setState({
      email: '',
       password: '',
        loading: false,
         error: ''
    });

  }

  renderButton(){
    if (this.state.loading){
      return <Spinner size=""small"" />;
    }

    return (
      <Button onPress={this.onButtonPress.bind(this)}>
      log in
      </Button>
    );
  }

  render(){
    return(
      <Card>

      <CardSection >
       <Input
       placeholder=""user@gmail.com""
       label=""Email""
       value={this.state.email}
         onChangeText={email => this.setState({ email })}
       />
      </CardSection>

      <CardSection>
       <Input
       secureTextEntry
         placeholder=""password""
          label=""Pasword""
         value={this.state.password}
         onChangeText={password => this.setState({password})}
      />
      </CardSection>

       <Text style={styles.errorTextStyle}>
      {this.state.error}
       </Text>

      <CardSection>


        {this.renderButton()}
      </CardSection>

      </Card>
    );
  }
 }

const styles ={
  errorTextStyle: {
    fontSize: 20,
    alignSelf: 'center',
    color: 'red'
  }
}

 export default LoginForm;
",Design a simple login form that allows users to log in or create new accounts using their email and password. Use React Native and Firebase for authentication. Display any errors or loading status during the process.
"import React from 'react'
import { render, mount } from 'enzyme'
import test from 'tape'

import Dropdown from '..'
import events from '../../util/events.js'

const defaultOptions = [
  { label: 'Foo', value: 'foo' },
  { label: 'Bar', value: 'bar' }
]

test('Dropdown', t => {
  t.ok(Dropdown, 'export')
  t.equal(Dropdown.displayName, 'FabricComponent(Dropdown)')

  t.end()
})

test('Dropdown#render - simple', t => {
  const container = render(
    <Dropdown options={defaultOptions} />
  ).contents()

  t.assert(container.is('div.ms-Dropdown', 'container'))
  t.assert(container.is('[data-fabric=""Dropdown""]'), 'data-fabric')
  t.equal(container.find('.ms-Dropdown-items > .ms-Dropdown-item').length, defaultOptions.length)

  t.end()
})

test('Dropdown lifecycle - unmount', t => {
  t.plan(1)

  const removeEventsFromDocument = events.removeEventsFromDocument

  events.removeEventsFromDocument = ({ click }) => {
    t.ok(click)
  }

  const wrapper = mount(
    <Dropdown active options={defaultOptions} />
  )

  wrapper.unmount()

  events.removeEventsFromDocument = removeEventsFromDocument
})

test('Dropdown lifecycle - update', t => {
  t.plan(2)

  const addEventsToDocument = events.addEventsToDocument
  const removeEventsFromDocument = events.removeEventsFromDocument

  events.addEventsToDocument = ({ click }) => {
    t.ok(click, 'add click handler')
  }
  events.removeEventsFromDocument = ({ click }) => {
    t.ok(click)
  }

  const wrapper = mount(
    <Dropdown options={defaultOptions} />
  )

  wrapper.setProps({ active: true })
  wrapper.setProps({ active: false })

  events.addEventsToDocument = addEventsToDocument
  events.removeEventsFromDocument = removeEventsFromDocument
})

test('Dropdown - blur', t => {
  t.plan(1)

  const handleBlur = e => t.ok(e, 'blur called')

  const wrapper = mount(
    <Dropdown onBlur={handleBlur}
      options={defaultOptions} />
  )

  wrapper.setProps({ active: true })

  const event = document.createEvent('HTMLEvents')
  event.initEvent('click', true, false)
  document.body.dispatchEvent(event)
})

test('Dropdown - focus', t => {
  t.plan(1)

  const handleFocus = e => t.ok(e, 'focus called')

  const wrapper = mount(
    <Dropdown onFocus={handleFocus}
      options={defaultOptions} />
  )

  wrapper.find('.ms-Dropdown-title').simulate('mouseDown')
})

test('Dropdown - select', t => {
  t.plan(2)

  const handleBlur = e => t.equal(e.target.value, 'foo', 'blur called')
  const handleChange = e => t.ok(e.target.value, 'foo', 'change called')

  const wrapper = mount(
    <Dropdown onBlur={handleBlur} onChange={handleChange} value={null}
      options={defaultOptions} />
  )

  wrapper.setProps({ active: true })

  wrapper.find('.ms-Dropdown-item > div').first().simulate('mouseDown')

  t.end()
})

","Describe tests for the following component:
- The component imports additional dependencies for testing purposes.
- It has a function called Dropdown.
- It has a render method which returns a container with data-fabric attribute.
- It has an unmount lifecycle method.
- It has an update lifecycle method.
- It has a blur event handler.
- It has a focus event handler.
- It has a select event handler.
- The component has default props to render with two options."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactDOMServer from 'react-dom/server';

import createElementFromString from 'utilities/createElementFromString';
import CustomMarker from 'components/CustomMarker';

/**
 * This component represents an overlay view.
 */
class RichMarker extends Component {
  // PropTypes
  static propTypes = {
    google: PropTypes.object.isRequired,
    map: PropTypes.object.isRequired,
    data: PropTypes.object.isRequired,
    handleClick: PropTypes.func
  };

  /**
   * On mount, initialize the factory OverlayView instance provided by google
   * and set the three default methods ""onAdd"", ""draw"" and ""onRemove"".
   */
  componentDidMount() {
    const { google, map } = this.props;

    this.richMarker = new google.maps.OverlayView();
    this.richMarker.onAdd = this.onAdd;
    this.richMarker.draw = this.draw;
    this.richMarker.onRemove = this.onRemove;
    this.richMarker.setMap(map);
  }

  /**
   * When the component unmounts, set the map of the overlayview to null.
   * This calls the ""onRemove"" method of this class.
   */
  componentWillUnmount() {
    this.richMarker.setMap(null);
  }

  /**
   * Google maps calls this method as soon as the overlayview can be drawn onto
   * the overlay map pane.
   *
   * This method gets called only once!
   */
  onAdd = () => {
    const { data, handleClick } = this.props;
   
    const html = ReactDOMServer.renderToStaticMarkup(
      <CustomMarker delay={Math.floor(Math.random() * 10) + 1} />
    );

    this.markerItem = createElementFromString(html);

    // Add a standard eventlistener for a click event of the static markup
    // react component, since a marker is not a seperate react app.
    this.markerItem.addEventListener('click', (e) => {
      // prevent event bubbling and propagation
      e.stopPropagation();
      e.preventDefault();
      // execute the custom click event handler which was passed down to the overlay component.
      handleClick(data.id)
    });
    
    const panes = this.richMarker.getPanes();
    panes.overlayMouseTarget.appendChild(this.markerItem);
  };

  /**
   * This method gets called each time the current maps viewport or zoom-level changes.
   * In here we convert the lat/lng values to pixel values and position the overlay.
   */
  draw = () => {
    const { google, data } = this.props;
    const latlng = new google.maps.LatLng(data.geometry.location.lat, data.geometry.location.lng);
    const point = this.richMarker.getProjection().fromLatLngToDivPixel(latlng);
    if (point) {
      this.markerItem.style.left = point.x + 'px';
      this.markerItem.style.top = point.y + 'px';
    }
  };

  /**
   * This method gets called as soon as we set the map property of
   * the overlayview to null. We remove all event listener and delete the
   * dom representation.
   */
  onRemove = () => {
    if (this.markerItem) {
      this.markerItem.parentNode.removeChild(this.markerItem);
      this.markerItem = null;
    }
  };

  render() {
    return null;
  }
}

export default RichMarker;
","Describe a component that represents an overlay view on a map, allowing the display of custom markers with click event handlers. The component should utilize React's server-side rendering to create a static HTML representation of the marker for overlaying on the map."
"import React from 'react';
import ReactDOM from 'react-dom';
import IndecisionApp from './components/IndecisionApp';
import 'normalize.css/normalize.css';
import './styles/styles.scss';

ReactDOM.render(<IndecisionApp />, document.getElementById('app'));
","Generate a React application with a component called IndecisionApp. The application should render the IndecisionApp component into the root element of a web page. Use React, React-DOM, normalize.css and styles.scss for styling."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let MapsTrain = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 2c-4 0-8 .5-8 4v9.5C4 17.43 5.57 19 7.5 19L6 20.5v.5h2.23l2-2H14l2 2h2v-.5L16.5 19c1.93 0 3.5-1.57 3.5-3.5V6c0-3.5-3.58-4-8-4zM7.5 17c-.83 0-1.5-.67-1.5-1.5S6.67 14 7.5 14s1.5.67 1.5 1.5S8.33 17 7.5 17zm3.5-7H6V6h5v4zm2 0V6h5v4h-5zm3.5 7c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z""/>
  </SvgIcon>
);
MapsTrain = pure(MapsTrain);
MapsTrain.displayName = 'MapsTrain';
MapsTrain.muiName = 'SvgIcon';

export default MapsTrain;
",Create a React component that defines an SVG icon for a train.
"/* Dependencies */
import React from 'react'
import PropTypes from 'prop-types'
import { sprintf } from 'sprintf-js'
/* Components */
import FontVariant from './FontVariant'
import AddUpdateFontFooter from './AddUpdateFontFooter'

/**
 * @package     Gravity PDF
 * @copyright   Copyright (c) 2021, Blue Liquid Designs
 * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License
 * @since       6.0
 */

/**
 * Display add font panel UI
 *
 * @param label
 * @param onHandleInputChange
 * @param onHandleUpload
 * @param onHandleDeleteFontStyle
 * @param onHandleSubmit
 * @param fontStyles
 * @param validateLabel
 * @param validateRegular
 * @param msg
 * @param loading
 * @param tabIndexFontName
 * @param tabIndexFontFiles
 * @param tabIndexFooterButtons
 *
 * @since 6.0
 */
export const AddFont = (
  {
    label,
    onHandleInputChange,
    onHandleUpload,
    onHandleDeleteFontStyle,
    onHandleSubmit,
    fontStyles,
    validateLabel,
    validateRegular,
    msg,
    loading,
    tabIndexFontName,
    tabIndexFontFiles,
    tabIndexFooterButtons
  }
) => {
  const fontNameLabel = sprintf(GFPDF.fontManagerFontNameLabel, ""<span class='required'>"", '</span>')

  return (
    <div data-test='component-AddFont' className='add-font'>
      <form onSubmit={onHandleSubmit}>
        <h2>{GFPDF.fontManagerAddTitle}</h2>

        <p>{GFPDF.fontManagerAddDesc}</p>

        <label htmlFor='gfpdf-font-name-input' dangerouslySetInnerHTML={{ __html: fontNameLabel }} />

        <p id='gfpdf-font-name-desc-add'>{GFPDF.fontManagerFontNameDesc}</p>

        <input
          type='text'
          id='gfpdf-add-font-name-input'
          className={!validateLabel ? 'input-label-validation-error' : ''}
          aria-describedby='gfpdf-font-name-desc-add'
          name='label'
          value={label}
          maxLength='60'
          onChange={e => onHandleInputChange(e, 'addFont')}
          tabIndex={tabIndexFontName}
        />

        <div aria-live='polite'>
          {!validateLabel && (
            <span className='required' role='alert'>
              <em>{GFPDF.fontManagerFontNameValidationError}</em>
            </span>
          )}
        </div>

        <label id='gfpdf-font-files-label-add' aria-labelledby='gfpdf-font-files-description-add'>{GFPDF.fontManagerFontFilesLabel}</label>

        <p id='gfpdf-font-files-description-add'>{GFPDF.fontManagerFontFilesDesc}</p>

        <FontVariant
          state='addFont'
          fontStyles={fontStyles}
          validateRegular={validateRegular}
          onHandleUpload={onHandleUpload}
          onHandleDeleteFontStyle={onHandleDeleteFontStyle}
          msg={msg}
          tabIndex={tabIndexFontFiles}
        />

        <AddUpdateFontFooter
          state='addFont'
          msg={msg}
          loading={loading}
          tabIndex={tabIndexFooterButtons}
        />
      </form>
    </div>
  )
}

/**
 * PropTypes
 *
 * @since 6.0
 */
AddFont.propTypes = {
  label: PropTypes.string.isRequired,
  onHandleInputChange: PropTypes.func.isRequired,
  onHandleUpload: PropTypes.func.isRequired,
  onHandleDeleteFontStyle: PropTypes.func.isRequired,
  onHandleSubmit: PropTypes.func.isRequired,
  validateLabel: PropTypes.bool.isRequired,
  validateRegular: PropTypes.bool.isRequired,
  fontStyles: PropTypes.object.isRequired,
  msg: PropTypes.object.isRequired,
  loading: PropTypes.bool.isRequired,
  tabIndexFontName: PropTypes.string.isRequired,
  tabIndexFontFiles: PropTypes.string.isRequired,
  tabIndexFooterButtons: PropTypes.string.isRequired
}

export default AddFont
","Generate the code snippet for a React component that allows users to add a new font to a system. The component should include fields for the font name, font files, and options for uploading and deleting font styles. It should also display validation errors and provide a submit button to save the font."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionNoteAdd = (props) => (
  <SvgIcon {...props}>
    <path d=""M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 14h-3v3h-2v-3H8v-2h3v-3h2v3h3v2zm-3-7V3.5L18.5 9H13z""/>
  </SvgIcon>
);
ActionNoteAdd = pure(ActionNoteAdd);
ActionNoteAdd.displayName = 'ActionNoteAdd';
ActionNoteAdd.muiName = 'SvgIcon';

export default ActionNoteAdd;
",Create a React component for an SVG icon with a specific design representing the action of adding a note with a plus sign.
"import React from 'react';
import { AppRegistry } from 'react-native';
import App from './src/mobile/App';

const LifeBalance = () => {
  return (
    <App />
  );
};

AppRegistry.registerComponent('LifeBalance', () => LifeBalance);

export default LifeBalance;
",Generate the React Native code to define a top-level component for the LifeBalance app that renders the App component and registers it with the AppRegistry.
"import React from 'react';
import range from '../misc/utils';

export class Button extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      label: props.label,
      click: props.click
    };
  }

  click (evt) {
    this.state.click(evt);
  }

  render() {
    return (
      <button onClick={(e) => this.click(e)}>{this.state.label}</button>
    );
  }
}
Button.propTypes = { label: React.PropTypes.string, click: React.PropTypes.function };
Button.defaultProps = { label: 'Button', click: () => {} };

export class Slider extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      defaultValue:props.defaultValue,
      orientation:props.orientation,
      min:props.min,
      max:props.max,
      onSlide:props.onSlide
    }
  }

  componentDidMount () {
    React.findDOMNode(this).style['-webkit-appearance'] = `slider-${this.props.orientation}`;
  }

  onSlide (evt) {
    this.props.onSlide(evt);
  }

  render () {
    return (
      <input type=""range""
          onChange={(e) => this.onSlide(e)}
          defaultValue={this.props.defaultValue}
          min={this.props.min}
          max={this.props.max}
          orientation={this.props.orientation} />
    );
  }
}
Slider.PropTypes = {
  defaultValue: React.PropTypes.int,
  orientation: React.PropTypes.string,
  min: React.PropTypes.integer,
  max: React.PropTypes.integer,
  onSlide: React.PropTypes.func
}
Slider.defaultProps = {
  defaultValue: 0,
  orientation: ""horizontal"",
  min: 0,
  max: 100,
  onSlide: (e) => {}
}

export class Timer extends React.Component {

  constructor(props) {
    super(props);
    this.state = {seconds: props.seconds};
  }

  onTimerTick (seconds) {}
  onTimerEnd () {}
  componentDidMount () {}

  stopTimer() {
    clearInterval(this.intervalID);
  }

  resetTimer() {
    this.stopTimer();
    this.setState({seconds:this.props.seconds});
    this.startTimer();
  }

  startTimer () {
    this.stopTimer();
    this.intervalID = setInterval(() => {
      if (this.state.seconds > 0) {
        this.onTimerTick(this.state.seconds);
        this.tick();
      } else {
        this.stopTimer();
        this.onTimerEnd();
      }
    }, 1000);
  }

  tick() {
    this.setState({ seconds: this.state.seconds - 1 });
  }

  render() {
    return (
      <div>
        Seconds left: {this.state.seconds}
      </div>
    );
  }
}
Timer.propTypes = { seconds: React.PropTypes.number };
Timer.defaultProps = { seconds: 10 };

export class Preview extends React.Component {

  startRecording () {
    navigator.webkitGetUserMedia({
      audio: false,
      video: {
        mandatory: {
          chromeMediaSource: 'screen',
          maxWidth: screen.availWidth,
          maxHeight: screen.availHeight,
          maxFrameRate: 25
        },
        optional: []
      }
    }, (stream) => this.onStartRecording(stream), (error) => this.onStreamError(error));
  }

  onStartRecording (stream) {
    this.video = React.findDOMNode(this.refs.video);
    this.video.style.display = 'none';
    this.video.muted = true;
    this.video.autoplay = true;
    this.video.src = URL.createObjectURL(stream);

    this.canvas = React.findDOMNode(this.refs.preview);
    this.context = this.canvas.getContext(""2d"");
    this.enrichenCanvasContext(this.context);

    requestAnimationFrame(() => {this.drawPreview()})
  }

  drawPreview() {
    requestAnimationFrame(() => {this.drawPreview()});
    this.context.drawImage(this.video, 0, 0);
  }

  onStreamError (error) {
    console.log(error);
  }

  componentDidMount () {
    this.startRecording();
  }

  onVideoClick (evt) {
    console.log(evt);
  }

  onWheel (evt) {
    var lastX=this.canvas.width/2, lastY=this.canvas.height/2;
    var pt = this.context.transformedPoint(lastX,lastY);
    console.log(evt.deltaY);
    if (evt.deltaY > 0) {
      var scale = 0.9;
    } else {
      var scale = 1.1;
    }
		this.context.translate(pt.x,pt.y);
    this.context.scale(scale, scale);
    this.context.translate(-pt.x,-pt.y);
  }

  enrichenCanvasContext(ctx) {
		var svg = document.createElementNS(""http://www.w3.org/2000/svg"",'svg');
		var xform = svg.createSVGMatrix();
		ctx.getTransform = function(){ return xform; };

		var savedTransforms = [];
		var save = ctx.save;
		ctx.save = function(){
			savedTransforms.push(xform.translate(0,0));
			return save.call(ctx);
		};
		var restore = ctx.restore;
		ctx.restore = function(){
			xform = savedTransforms.pop();
			return restore.call(ctx);
		};

		var scale = ctx.scale;
		ctx.scale = function(sx,sy){
			xform = xform.scaleNonUniform(sx,sy);
			return scale.call(ctx,sx,sy);
		};
		var rotate = ctx.rotate;
		ctx.rotate = function(radians){
			xform = xform.rotate(radians*180/Math.PI);
			return rotate.call(ctx,radians);
		};
		var translate = ctx.translate;
		ctx.translate = function(dx,dy){
			xform = xform.translate(dx,dy);
			return translate.call(ctx,dx,dy);
		};
		var transform = ctx.transform;
		ctx.transform = function(a,b,c,d,e,f){
			var m2 = svg.createSVGMatrix();
			m2.a=a; m2.b=b; m2.c=c; m2.d=d; m2.e=e; m2.f=f;
			xform = xform.multiply(m2);
			return transform.call(ctx,a,b,c,d,e,f);
		};
		var setTransform = ctx.setTransform;
		ctx.setTransform = function(a,b,c,d,e,f){
			xform.a = a;
			xform.b = b;
			xform.c = c;
			xform.d = d;
			xform.e = e;
			xform.f = f;
			return setTransform.call(ctx,a,b,c,d,e,f);
		};
		var pt  = svg.createSVGPoint();
		ctx.transformedPoint = function(x,y){
			pt.x=x; pt.y=y;
			return pt.matrixTransform(xform.inverse());
		}
  }

  render () {
    return (
      <div>
        <video ref=""video"" />
        <canvas ref=""preview"" width=""420"" height=""240"" onWheel={(evt) => this.onWheel(evt)} onClick={(evt) => this.onVideoClick(evt)} />
      </div>
    )
  }
}
","Generate a snippet with the following structure:

 - A class **`Button`** that:
    - Creates a button with a customizable label and action
    - Implements a click handler to execute the action
 - A class **`Slider`** that:
    - Creates a slider with a customizable orientation, min, max, and default value
    - Implements a slide handler to execute an action
 - A class **`Timer`** that:
    - Creates a timer with a customizable duration
    - Implements the logic to count down the duration and trigger events at specific intervals
 - A class **`Preview`** that:
    - Captures the screen and displays a live preview within a canvas
    - Allows for zooming and panning using mouse events"
"import React from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import escapeTextContentForBrowser from 'escape-html';
import PropTypes from 'prop-types';
import emojify from '../emoji';
import { isRtl } from '../rtl';
import { FormattedMessage } from 'react-intl';
import Permalink from './permalink';

export default class StatusContent extends React.PureComponent {

  static contextTypes = {
    router: PropTypes.object,
  };

  static propTypes = {
    status: ImmutablePropTypes.map.isRequired,
    expanded: PropTypes.bool,
    onExpandedToggle: PropTypes.func,
    onHeightUpdate: PropTypes.func,
    onClick: PropTypes.func,
  };

  state = {
    hidden: true,
  };

  componentDidMount () {
    const node  = this.node;
    const links = node.querySelectorAll('a');

    for (var i = 0; i < links.length; ++i) {
      let link    = links[i];
      let mention = this.props.status.get('mentions').find(item => link.href === item.get('url'));

      if (mention) {
        link.addEventListener('click', this.onMentionClick.bind(this, mention), false);
        link.setAttribute('title', mention.get('acct'));
      } else if (link.textContent[0] === '#' || (link.previousSibling && link.previousSibling.textContent && link.previousSibling.textContent[link.previousSibling.textContent.length - 1] === '#')) {
        link.addEventListener('click', this.onHashtagClick.bind(this, link.text), false);
      } else {
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener');
        link.setAttribute('title', link.href);
      }
    }
  }

  componentDidUpdate () {
    if (this.props.onHeightUpdate) {
      this.props.onHeightUpdate();
    }
  }

  onMentionClick = (mention, e) => {
    if (e.button === 0) {
      e.preventDefault();
      this.context.router.history.push(`/accounts/${mention.get('id')}`);
    }
  }

  onHashtagClick = (hashtag, e) => {
    hashtag = hashtag.replace(/^#/, '').toLowerCase();

    if (e.button === 0) {
      e.preventDefault();
      this.context.router.history.push(`/timelines/tag/${hashtag}`);
    }
  }

  handleMouseDown = (e) => {
    this.startXY = [e.clientX, e.clientY];
  }

  handleMouseUp = (e) => {
    if (!this.startXY) {
      return;
    }

    const [ startX, startY ] = this.startXY;
    const [ deltaX, deltaY ] = [Math.abs(e.clientX - startX), Math.abs(e.clientY - startY)];

    if (e.target.localName === 'button' || e.target.localName === 'a' || (e.target.parentNode && (e.target.parentNode.localName === 'button' || e.target.parentNode.localName === 'a'))) {
      return;
    }

    if (deltaX + deltaY < 5 && e.button === 0 && this.props.onClick) {
      this.props.onClick();
    }

    this.startXY = null;
  }

  handleSpoilerClick = (e) => {
    e.preventDefault();

    if (this.props.onExpandedToggle) {
      // The parent manages the state
      this.props.onExpandedToggle();
    } else {
      this.setState({ hidden: !this.state.hidden });
    }
  }

  setRef = (c) => {
    this.node = c;
  }

  render () {
    const { status } = this.props;

    const hidden = this.props.onExpandedToggle ? !this.props.expanded : this.state.hidden;

    const content = { __html: emojify(status.get('content')) };
    const spoilerContent = { __html: emojify(escapeTextContentForBrowser(status.get('spoiler_text', ''))) };
    const directionStyle = { direction: 'ltr' };

    if (isRtl(status.get('search_index'))) {
      directionStyle.direction = 'rtl';
    }

    if (status.get('spoiler_text').length > 0) {
      let mentionsPlaceholder = '';

      const mentionLinks = status.get('mentions').map(item => (
        <Permalink to={`/accounts/${item.get('id')}`} href={item.get('url')} key={item.get('id')} className='mention'>
          @<span>{item.get('username')}</span>
        </Permalink>
      )).reduce((aggregate, item) => [...aggregate, item, ' '], []);

      const toggleText = hidden ? <FormattedMessage id='status.show_more' defaultMessage='Show more' /> : <FormattedMessage id='status.show_less' defaultMessage='Show less' />;

      if (hidden) {
        mentionsPlaceholder = <div>{mentionLinks}</div>;
      }

      return (
        <div className='status__content status__content--with-action' ref={this.setRef} onMouseDown={this.handleMouseDown} onMouseUp={this.handleMouseUp}>
          <p style={{ marginBottom: hidden && status.get('mentions').isEmpty() ? '0px' : null }}>
            <span dangerouslySetInnerHTML={spoilerContent} />
            {' '}
            <button tabIndex='0' className='status__content__spoiler-link' onClick={this.handleSpoilerClick}>{toggleText}</button>
          </p>

          {mentionsPlaceholder}

          <div className={`status__content__text ${!hidden ? 'status__content__text--visible' : ''}`} style={directionStyle} dangerouslySetInnerHTML={content} />
        </div>
      );
    } else if (this.props.onClick) {
      return (
        <div
          ref={this.setRef}
          className='status__content status__content--with-action'
          style={directionStyle}
          onMouseDown={this.handleMouseDown}
          onMouseUp={this.handleMouseUp}
          dangerouslySetInnerHTML={content}
        />
      );
    } else {
      return (
        <div
          ref={this.setRef}
          className='status__content'
          style={directionStyle}
          dangerouslySetInnerHTML={content}
        />
      );
    }
  }

}
","Generate the React component code for displaying the content of a social media status. The component should handle mentions and hashtags, clicking on the status to perform an action, and expanding a spoiler text if it exists."
"import adaptReactLikeComponentSystem from './adaption/adaptReactLikeComponentSystem';

import React from 'react';
import ReactNative from 'react-native';

const {
    createElement,
    defineComponent,
    isElement,
    mount,
    unmount,
    Adapter,
    Config 
} = adaptReactLikeComponentSystem({
    name: 'react-native',
    api: { React, ReactNative },
    createElement: React.createElement,
    createFactory: React.createFactory,
    isValidElement: React.isValidElement,
    mount: reactNativeMount,
    Component: React.Component,
    browserBased: false
});

export {
    createElement,
    defineComponent,
    isElement,
    mount,
    unmount,
    Adapter,
    Config
};


function reactNativeMount(Component) {
    ReactNative.AppRegistry.registerComponent('AppMainComponent', () => Component);
}
","Adapt the React component system to integrate React Native as the rendering engine, including the necessary imports and configuration."
"/**
 * React Starter Kit (https://www.reactstarterkit.com/)
 *
 * Copyright © 2014-present Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

import React from 'react';
import PropTypes from 'prop-types';
import withStyles from 'isomorphic-style-loader/lib/withStyles';
import Contact from '../../components/Contact';
import Gallery from '../../components/Gallery';
import s from './Gallery.scss';

class GalleryR extends React.Component {

  render() {
    return (
      <div className={s.root}>
        <Gallery/>
        <Contact/>
      </div>
    );
  }
}

export default withStyles(s)(GalleryR);
",Generate the code snippet for a React component that displays a gallery and a contact form on the same page. The component should be styled using CSS modules and should use the `isomorphic-style-loader` to handle CSS on both the client and server. The component should also use the `withStyles` higher order component to apply styles to the component.
"import _$ from 'jquery';
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import jsdom from 'jsdom';
import chai, { expect } from 'chai';
import chaiJquery from 'chai-jquery';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import reducers from '../src/reducers';

global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
global.window = global.document.defaultView;
global.navigator = global.window.navigator;
const $ = _$(window);

chaiJquery(chai, chai.util, $);

function renderComponent(ComponentClass, props = {}, state = {}) {
  const componentInstance =  TestUtils.renderIntoDocument(
    <Provider store={createStore(reducers, state)}>
      <ComponentClass {...props} />
    </Provider>
  );

  return $(ReactDOM.findDOMNode(componentInstance));
}

$.fn.simulate = function(eventName, value) {
  if (value) {
    this.val(value);
  }
  TestUtils.Simulate[eventName](this[0]);
};

export {renderComponent, expect};
","Describe a way to test React components using ReactDOM, TestUtils, and a testing library."
"'use strict';

import React from 'react';

require('styles/cart/cartCheckOut/CartCheckOutListItem.scss');

class CartCheckOutListItemComponent extends React.Component {
  constructor(props) {
    super(props)
  }

  render() {
    return (
      <li className=""cartlistitem-component clearfix"">
        <img src={this.props.assets[this.props.item.fields.itemImage.sys.id]} />
        <div className=""cartlistitem-component__brief"">
          <h3>{this.props.item.fields.itemName}</h3>
          <p>{this.props.item.fields.itemShortDescription}</p>
          <p className=""cartlistitem-component__price"">${this.props.item.fields.price}</p>
        </div>
        <div className=""cartlistitem-component__price-section"">
          <button className=""small round alert"" onClick={this.props.removeItem.bind(this, this.props.item.id, this.props.itemIndex)}>删除</button>
        </div>
      </li>
    );
  }
}

CartCheckOutListItemComponent.displayName = 'CartCartCheckOutCartCheckOutListItemComponent';

// Uncomment properties you need
CartCheckOutListItemComponent.propTypes = {
  item : React.PropTypes.object.isRequired,
  removeItem : React.PropTypes.func.isRequired,
  itemIndex : React.PropTypes.number.isRequired
  // viewDetail : React.PropTypes.func.isRequired
};
// CartCheckOutListItemComponent.defaultProps = {};

export default CartCheckOutListItemComponent;
","Generate the React component code for rendering an item in a shopping cart checkout view. The component should have an image, a brief description, a price, and a button to remove the item from the cart."
"import classnames from 'classnames';
import React from 'react';

module.exports = React.createClass({
	displayName: 'SegmentedControl',

	propTypes: {
		className: React.PropTypes.string,
		equalWidthSegments: React.PropTypes.bool,
		onChange: React.PropTypes.func.isRequired,
		options: React.PropTypes.array.isRequired,
		type: React.PropTypes.oneOf(['default', 'muted', 'danger', 'info', 'primary', 'success', 'warning']),
		value: React.PropTypes.string
	},

	getDefaultProps () {
		return {
			type: 'default'
		};
	},

	onChange (value) {
		this.props.onChange(value);
	},

	render () {
		let componentClassName = classnames('SegmentedControl', ('SegmentedControl--' + this.props.type), {
			'SegmentedControl--equal-widths': this.props.equalWidthSegments
		}, this.props.className);

		let options = this.props.options.map((op) => {

			let buttonClassName = classnames('SegmentedControl__button', {
				'is-selected': op.value === this.props.value
			});

			return (
				<span key={'option-' + op.value} className=""SegmentedControl__item"">
					<button type=""button"" onClick={this.onChange.bind(this, op.value)} className={buttonClassName}>
						{op.label}
					</button>
				</span>
			);
		});

		return <div className={componentClassName}>{options}</div>;
	}
});
","Create a React component called `SegmentedControl` that behaves as follows:

- It should have several options, each with a label and a value.
- It should allow a single option to be selected at a time.
- It should have a type prop that can be set to one of several values, each of which corresponds to a different visual style.
- It should have an `onChange` prop that is called whenever the selected option changes.
- It should have an `equalWidthSegments` prop that determines whether the segments should all have the same width."
"import {connect} from 'react-redux';
import {List} from 'immutable';
import React from 'react';
import Promise from 'bluebird';
import PureComponent from 'react-pure-render/component';
import TestsService from './model/test';

import mapStateToProps from './lib/mapStateToProps';
import mapDispatchToProps from './lib/mapDispatchToProps';

import * as actions from './store/tests/actions';

import * as TestConstants from './model/test';
import Test from './model/test';
import * as TestsConstants from './store/tests/reducers';

import Tests from './components/runner/tests.react.js';
import Status from './components/runner/status.react';

@connect(mapStateToProps('tests'), mapDispatchToProps(actions))
export default class App extends PureComponent {
  static propTypes = {
    tests: React.PropTypes.object.isRequired,
    actions: React.PropTypes.object.isRequired
  };

  constructor() {
    super();
    this.run = this.run.bind(this); //So we don't break pure render
  }

  render() {
    const {tests} = this.props;

    return (
      <div>
        <div>
          <h1>Tests</h1>
          {tests.get('status') === TestsConstants.FINISHED &&
            <div>FINISHED!</div>
          }
          <Tests tests={tests.get('tests')} />
          <div>
            <button onClick={this.run} disabled={tests.get('status') === TestsConstants.RUNNING}>Run</button>
          </div>
          <Status
            running={tests.get('running')}
            failed={tests.get('failed')}
            passed={tests.get('passed')}
          />
        </div>
      </div>
    );
  }

  componentDidMount() {
    const {actions} = this.props;
    const tests = Test.all();
    actions.setTests(tests);
  }

  run(e) {
    e.preventDefault();

    const {actions} = this.props;
    const tests = this.props.tests.get('tests');

    tests.forEach(test => {
      actions.setStatus(test.get('id'), TestConstants.RUNNING);
      TestsService.run(test.get('id')).then(result => {
        actions.setStatus(test.get('id'), (result) ? TestConstants.PASSED : TestConstants.FAILED);
      });
    });
  }
}
","Create the React component App. It should have a button that calls the run() function. The run() function should iterate over a list of tests, set their status to running, call the run() function on the TestsService for each test, and update the status of the test to passed or failed based on the result."
"import React from 'react';
import {Form, InputNumber, Row, Col} from 'antd';
import styles from './Scheme.less';

const FormItem = Form.Item;
const formItemLayout = {
	labelCol: {
		xs: { span: 24 },
		sm: { span: 8 },
	},
	wrapperCol: {
		xs: { span: 24 },
		sm: { span: 16 },
	},
};

class HypertensionC extends React.Component {
	state = {
		scheme: {},
	};

	componentWillMount() {
		this.setState( { scheme: this.props.scheme } );
	}

	componentWillReceiveProps( nextProps ) {
		this.setState( { scheme: nextProps.scheme } );
	}

	render() {
		const { getFieldDecorator } = this.props.form;
		const disabled = this.props.disabled;
		const { scheme } = this.state;
		return (
			<div className={styles.need}>
				<div className={styles.title}>随访项目</div>
				<div className={styles.form}>
					<Row>
						<Col span={12}>
							<FormItem {...formItemLayout} label=""舒张压（mmHg）"">
								{getFieldDecorator( 'sbp', {
									initialValue: scheme.sbp
								} )(
									<InputNumber min={1} max={300} style={{ width: 200 }} disabled={disabled} placeholder=""请输入1-300之间的一个数值""/>
								)}
							</FormItem>
						</Col>
						<Col span={12}>
							<FormItem {...formItemLayout} label=""收缩压（mmHg）"">
								{getFieldDecorator( 'dbp', {
									initialValue: scheme.dbp
								} )(
									<InputNumber min={1} max={300} style={{ width: 200 }} disabled={disabled} placeholder=""请输入1-300之间的一个数值""/>
								)}
							</FormItem>
						</Col>
					</Row>
				</div>
			</div>
		);
	}
}
export default Form.create()( HypertensionC );

","Generate a code snippet for an Ant Design React component that displays two InputNumber fields labeled ""舒张压（mmHg）"" and ""收缩压（mmHg）"", and is used in a form with disabled state determined by props."
"import React from 'react';
import { Link } from 'react-router-dom';

const NotFoundPage = () => {
  return (
    <div>
      <h4>
        404 Page Not Found
      </h4>
      <Link to=""/""> Go back to homepage </Link>
    </div>
  );
};

export default NotFoundPage;
",Create a React component for a 404 error page that displays a message and a link to go back to the homepage.
"import React from 'react';
import AppConstants from 'AppConstants';

export default class RetroTitantic extends React.Component {

    constructor() {
        super();
    }

    componentWillMount() {
    }

    componentDidMount() {
    }

    render() {
        var titanticStyle;

        titanticStyle = {
            paddingTop: '2rem',
            paddingBottom: '1rem'
        };

        return (
            <article id=""retro_art""
                     className=""starfield parallax_scroll""
                     data-parallax-speed=""250""
                     ref=""starfield""
                     style={titanticStyle}>
                <h2>Here are some awesome thing!</h2>
                <section className=""bellmaker_container geocities_me"">
                    <h3>1997 was the best year ever!</h3>

                    <div className=""centered_image"">
                        {AppConstants.dataSprite('titanic_468x60')}
                    </div>
                </section>
            </article>
        );
    }
}

","Create a React component that displays a retro-style article with a parallax scrolling starfield background, a title, a section with a heading and a centered image, and a closing paragraph. Style the article with appropriate CSS properties and include a reference to an external image sprite."
"import React, { Component } from 'react';

class ClearCompleted extends Component {
  render() {
    let clearButton = null;

    if (this.props.itemCount > 0) {
      clearButton = (
        <button 
          className=""clear-completed""
          onClick={ this.props.onButtonClick }
        >Clear</button>
      );
    }

    return (
      <div>
        { clearButton }
      </div>
    );
  }
}

export default ClearCompleted;
","Provide a JavaScript React component that displays a ""Clear"" button which when clicked on triggers an `onButtonClick` event handler function. The button should only be displayed when there are one or more items present. The component should utilize lifecycle methods and handle any required state management."
"import chalk from 'chalk';
import { injectReducer } from './redux/reducers';

import React from 'react';
import { Route, IndexRoute } from 'react-router/es6';
import App from './App'
import GalleryView from './public/containers/GalleryView';
import ProfileView from './public/containers/ProfileView';
// import Home from './Home'
import UserInfo from './UserInfo'
import NotFound from './NotFound'

const errorLoading = (err) => {
  console.error(chalk.red(`==> 😭  Dynamic page loading failed ${err}`));
};

const loadModule = cb => (Component) => {
  cb(null, Component.default);
};




export default (
  <Route path=""/"" component={App}>
    <IndexRoute component={GalleryView} />
    <Route path=""/userinfo"" component={UserInfo} />
    <Route path=""/profile/:profileId"" component={ProfileView} />
    <Route path=""/*"" component={NotFound} />
  </Route>
)


// export default function createRoutes(store) {
//   return {
//     path: '/',
//     component: App,
//     indexRoute: Home,
//     childRoutes: [
//       {
//         path: 'UserInfo/:id',
//
//         getComponent(location, cb) {
//           const importModules = Promise.all([
//             System.import('./UserInfo'),
//             // System.import('./UserInfo/reducer'),
//           ]);
//
//           const renderRoute = loadModule(cb);
//
//           importModules
//             .then(([Component/*, reducer*/]) => {
//               // injectReducer(store, 'userInfo', reducer.default);
//
//               renderRoute(Component);
//             })
//             .catch(errorLoading);
//         },
//       },
//       {
//         path: '*',
//         getComponent(location, cb) {
//           System.import('./NotFound')
//             .then(loadModule(cb))
//             .catch(errorLoading);
//         },
//       },
//     ],
//   };
// }
",Generate a function that creates React Router routes from individual components.
"import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

export default class RadioButton extends React.PureComponent {

  static propTypes = {
    value: PropTypes.string.isRequired,
    checked: PropTypes.bool,
    name: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    label: PropTypes.node.isRequired,
  };

  render () {
    const { name, value, checked, onChange, label } = this.props;

    return (
      <label className='radio-button'>
        <input
          name={name}
          type='radio'
          value={value}
          checked={checked}
          onChange={onChange}
        />

        <span className={classNames('radio-button__input', { checked })} />

        <span>{label}</span>
      </label>
    );
  }

}
","Design a React component that provides a customizable radio button with a label. The component should support setting the value, whether it's checked or not, the name, the onChange handler, and the label text."
"import React from 'react';
import IconBase from './../components/IconBase/IconBase';

export default class AndroidAdd extends React.Component {
	render() {
if(this.props.bare) {
			return <g>

<g id=""Icon_7_"">
	<g>
		<path d=""M416,277.333H277.333V416h-42.666V277.333H96v-42.666h138.667V96h42.666v138.667H416V277.333z""></path>
	</g>
</g>

			</g>;
		}		return <IconBase>
<g id=""Icon_7_"">
	<g>
		<path d=""M416,277.333H277.333V416h-42.666V277.333H96v-42.666h138.667V96h42.666v138.667H416V277.333z""></path>
	</g>
</g>
</IconBase>;
	}
};AndroidAdd.defaultProps = {bare: false}","Create a React component that renders an icon representing the ""add"" action. The component should have a default size and the ability to be used without any additional styling."
"import React from 'react';

export default class GroceryList extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      clickedItems: []
    };

    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(e) {
    const clickedItems = this.state.clickedItems.slice();
    clickedItems.push(e.target.textContent);
    this.setState({ clickedItems: clickedItems });
  }

  render() {
    console.log('FE Render: GroceryList');
    return (
      <div className='component grocerylist'>
        <div>GroceryList Component</div>
        <h3>Ingredients:</h3>
        <div>
          <ol>
            {this.props.ingredients.map((ingredient) => {
              return <li onClick={this.handleClick}>{ingredient}</li>
            })}
          </ol>
        </div>
        <div>
          <h6>Things I need to buy:</h6>
          <ul>
          {this.state.clickedItems.map((item) => {
            return <li>{item}</li>
          })}
        </ul>
        </div>
      </div>
    );
  }
}

","React component that takes a list of ingredients as props and allows users to mark ingredients as ""needed"" by clicking on them, moving them to a separate list."
"import React from 'react'
import {connect} from 'react-redux'
import TableTop from './TableTop/TableTop'
import './Top10.scss'

import { fetchTop10 } from '../../ducks/top10.js'

let top10Dispatcher
const refreshTime = 60 * 30 * 1000 // Once per half-hour

class Top10 extends React.Component {
  componentDidMount () {
    this.props.dispatch(fetchTop10())

    top10Dispatcher = setInterval(() => this.props.dispatch(fetchTop10()), refreshTime)
  }

  componentWillUnmount () {
    clearInterval(top10Dispatcher)
  }

  render () {
    console.dir(this.props.top10)
    let html = ''
    if (this.props.top10.get('isFetching') === true) {
      html = 'Loading...'
    } else {
      html = (
        <div className='top10'>
          <div className='topbox'>
            <div className='title'>Top Departures</div>
            <TableTop data={this.props.top10.getIn(['data', 'departures'])} />
          </div>
          <div className='topbox'>
            <div className='title'>Top Arrivals</div>
            <TableTop data={this.props.top10.getIn(['data', 'arrivals'])} />
          </div>
        </div>
      )
    }
    return (
      <div className='topcontainer'>
        <p>Top 10 airports by types of operations within the past 7 days.</p>
        {html}
        <p>Last updated: {this.props.top10.getIn(['data', 'updated'])}Z</p>
      </div>
    )
  }
}
const mapStateToProps = state => {
  return {
    top10: state.get('top10')
  }
}

export default connect(mapStateToProps)(Top10)
","Create a React component that displays the top 10 airports by departures and arrivals within the past 7 days. The data should be fetched from a Redux store, and the component should update every half hour. The component should display a loading message while the data is being fetched, and show the last updated time."
"/**
 * React Static Boilerplate
 * https://github.com/kriasoft/react-static-boilerplate
 *
 * Copyright © 2015-present Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

import React from 'react';

function decodeParam(val) {
  if (!(typeof val === 'string' || val.length === 0)) {
    return val;
  }

  try {
    return decodeURIComponent(val);
  } catch (err) {
    if (err instanceof URIError) {
      err.message = `Failed to decode param '${val}'`;
      err.status = 400;
    }

    throw err;
  }
}

// Match the provided URL path pattern to an actual URI string. For example:
//   matchURI({ path: '/posts/:id' }, '/dummy') => null
//   matchURI({ path: '/posts/:id' }, '/posts/123') => { id: 123 }
function matchURI(route, path) {
  const match = route.pattern.exec(path);

  if (!match) {
    return null;
  }

  const params = Object.create(null);

  for (let i = 1; i < match.length; i += 1) {
    params[route.keys[i - 1].name] = match[i] !== undefined ? decodeParam(match[i]) : undefined;
  }

  return params;
}

// Find the route matching the specified location (context), fetch the required data,
// instantiate and return a React component
function resolve(routes, context) {
  for (const route of routes) { // eslint-disable-line no-restricted-syntax
    const params = matchURI(route, context.error ? '/error' : context.pathname);

    if (!params) {
      continue; // eslint-disable-line no-continue
    }

    // Check if the route has any data requirements, for example:
    // { path: '/tasks/:id', data: { task: 'GET /api/tasks/$id' }, page: './pages/task' }
    if (route.data) {
      // Load page component and all required data in parallel
      const keys = Object.keys(route.data);
      return Promise.all([
        route.load(),
        ...keys.map((key) => {
          const query = route.data[key];
          const method = query.substring(0, query.indexOf(' ')); // GET
          let url = query.substr(query.indexOf(' ') + 1);      // /api/tasks/$id
          // TODO: Optimize
          Object.keys(params).forEach((k) => {
            url = url.replace(`${k}`, params[k]);
          });
          return fetch(url, { method }).then(resp => resp.json());
        }),
      ]).then(([Page, ...data]) => {
        const props = keys.reduce((result, key, i) => ({ ...result, [key]: data[i] }), {});
        return <Page route={{ ...route, params }} error={context.error} {...props} />;
      });
    }

    return route.load().then(Page => <Page route={{ ...route, params }} error={context.error} />);
  }

  const error = new Error('Page not found');
  error.status = 404;
  return Promise.reject(error);
}

export default { resolve };
","Create a JavaScript function called `resolve` that takes two parameters: `routes` and `context`. The `routes` parameter is an array of objects, each representing a route in a React application. The `context` parameter is an object representing the current location and error state of the application. The `resolve` function should match the provided URL path pattern to an actual URI string, fetch the required data, instantiate and return a React component."
"import React from 'react';
import Dashboard from './Dashboard';
import Nav from './Nav';

var styles = {};

styles.sidebar = {
  float: 'left',
  width: 200,
  padding: 20,
  borderRight: '1px solid #aaa',
  marginRight: 20
};

class Course extends React.Component {
  render () {
    let { children, params } = this.props;
    let course = COURSES[params.courseId];

    return (
      <div>
        <h2>{course.name}</h2>
        <Nav course={course} />
        {children && children.sidebar && children.main ? (
          <div>
            <div className=""Sidebar"" style={styles.sidebar}>
              {children.sidebar}
            </div>
            <div className=""Main"" style={{padding: 20}}>
              {children.main}
            </div>
          </div>
        ) : (
          <Dashboard />
        )}
      </div>
    );
  }
}

export default Course;
","Create a React class component called Course that takes two props: children and params, and renders a sidebar and main section if children are provided, otherwise it renders a Dashboard. Style the sidebar to float left, have a width of 200px, padding of 20px, a right border of 1px solid #aaa, and a right margin of 20px. Style the main section to have padding of 20px."
"import PropTypes from 'prop-types';
import React from 'react';
import ReactDOM from 'react-dom';
import classNames from 'classnames';
import {navigateAction} from 'fluxible-router';
import {connectToStores} from 'fluxible-addons-react';
import checkEmail from '../../actions/user/registration/checkEmail';
import checkUsername from '../../actions/user/registration/checkUsername';
import UserRegistrationStore from '../../stores/UserRegistrationStore';
import SSOStore from '../../stores/SSOStore';
import common from '../../common';
import finalizeMergedUser from '../../actions/user/finalizeMergedUser';
import instances from '../../configs/instances.js';
import {FormattedMessage, defineMessages} from 'react-intl';

const headerStyle = {
    'textAlign': 'center'
};
const modalStyle = {
    top: '15%'
};

class ReviseUser extends React.Component {
    constructor(props) {
        super(props);

        this.errorMessages = defineMessages({
            error409: {
                id: 'SSOSignIn.errormessage.isForbidden',
                defaultMessage: 'Migration is not possible with this user. Please start all over again.'
            },
            error404: {
                id: 'SSOSignIn.errormessage.accountNotFound',
                defaultMessage: 'This account was not prepared for migration. Please start all over again.'
            },
            error500: {
                id: 'SSOSignIn.errormessage.badImplementation',
                defaultMessage: 'An unknown error occurred.'
            }
        });
    }

    componentDidMount() {
        //Form validation
        const validationRules = {
            fields: {

                username: {
                    identifier: 'username',
                    rules: [{
                        type: 'empty',
                        prompt: 'Please select your username'
                    }, {
                        type: 'uniqueUsername',
                        prompt: 'The username is already in use'
                    }, {
                        type   : 'maxLength[64]',
                        prompt : 'Your username can not be longer than 64 characters'
                    }, {
                        type   : 'regExp[/^[a-zA-Z0-9-.~_]+$/i]',
                        prompt : 'The username must contain only alphanumeric characters plus the following: _ . - ~'
                    }]
                },
                email: {
                    identifier: 'email',
                    rules: [{
                        type: 'empty',
                        prompt: 'Please enter your email address'
                    }, {
                        type: 'email',
                        prompt: 'Please enter a valid email address'
                    }, {
                        type: 'uniqueEmail',
                        prompt: 'The email address is already in use'
                    }]
                }
            },
            onSuccess: this.handleSignUp.bind(this)
        };

        $.fn.form.settings.rules.uniqueEmail = (() => {
            const emailNotAllowed = this.props.UserRegistrationStore.failures.emailNotAllowed;
            return (emailNotAllowed !== undefined) ? !emailNotAllowed : true;
        });
        $.fn.form.settings.rules.uniqueUsername = (() => {
            const usernameNotAllowed = this.props.UserRegistrationStore.failures.usernameNotAllowed;
            return (usernameNotAllowed !== undefined) ? !usernameNotAllowed : true;
        });

        $(ReactDOM.findDOMNode(this.refs.ReviseUser_form)).form(validationRules);

    }

    componentWillReceiveProps(nextProps) {
        console.log('ReviseUser componentWillReceiveProps()', this.props.UserRegistrationStore.socialuserdata, nextProps.UserRegistrationStore.socialuserdata, this.props.SSOStore.username, nextProps.SSOStore.username);
        if (nextProps.SSOStore.username !== this.props.SSOStore.username) {
            this.refs.username.value = nextProps.SSOStore.username;
            this.refs.email.value = nextProps.SSOStore.email;
            this.checkUsername();
            this.checkEmail();
        }
    }

    handleSignUp(e) {
        e.preventDefault();

        let user = {};
        user.email = this.refs.email.value;
        user.username = this.refs.username.value;
        user.hash = this.props.SSOStore.hash;

        let language = common.getIntlLanguage();
        user.language = language;

        user.url = instances[instances._self].finalize.replace('{hash}', user.hash);

        user.errorMessages = {
            error409: this.context.intl.formatMessage(this.errorMessages.error409),
            error404: this.context.intl.formatMessage(this.errorMessages.error404),
            error500: this.context.intl.formatMessage(this.errorMessages.error500)
        };

        this.context.executeAction(finalizeMergedUser, user);

        $(ReactDOM.findDOMNode(this.refs.ReviseUser_Modal)).modal('hide');

        return false;
    }

    checkEmail() {
        const email = this.refs.email.value;
        if (this.props.UserRegistrationStore.failures.usernameNotAllowed !== undefined || email !== '') {
            this.context.executeAction(checkEmail, {email: email});
        }
    }

    checkUsername() {
        const username = this.refs.username.value;
        if (this.props.UserRegistrationStore.failures.usernameNotAllowed !== undefined || username !== '') {
            this.context.executeAction(checkUsername, {username: username});
        }
    }

    render() {
        const signUpLabelStyle = {width: '150px'};

        const emailNotAllowed = this.props.UserRegistrationStore.failures.emailNotAllowed;
        let emailClasses = classNames({
            'ui': true,
            'field': true,
            'inline': true,
            'error': (emailNotAllowed !== undefined) ? emailNotAllowed : false
        });
        let emailIconClasses = classNames({
            'icon': true,
            'inverted circular red remove': (emailNotAllowed !== undefined) ? emailNotAllowed : false,
            'inverted circular green checkmark': (emailNotAllowed !== undefined) ? !emailNotAllowed : false
        });
        let emailToolTipp = emailNotAllowed ? 'This E-Mail has already been used by someone else. Please choose another one.' : undefined;

        const usernameNotAllowed = this.props.UserRegistrationStore.failures.usernameNotAllowed;
        let usernameClasses = classNames({
            'ui': true,
            'field': true,
            'inline': true,
            'error': (usernameNotAllowed !== undefined) ? usernameNotAllowed : false
        });
        let usernameIconClasses = classNames({
            'icon': true,
            'inverted circular red remove': (usernameNotAllowed !== undefined) ? usernameNotAllowed : false,
            'inverted circular green checkmark': (usernameNotAllowed !== undefined) ? !usernameNotAllowed : false
        });
        let usernameToolTipp = usernameNotAllowed ? 'This Username has already been used by someone else. Please choose another one.' : undefined;
        if (this.props.UserRegistrationStore.suggestedUsernames.length > 0) {
            usernameToolTipp += '\n Here are some suggestions: ' + this.props.UserRegistrationStore.suggestedUsernames;
        }
        return (
          <div>
            <div className=""ui ssoregistration modal"" id='signinModal' style={modalStyle} ref=""ReviseUser_Modal"" >
              <div className=""header"">
                  <h1 style={headerStyle}>Validate user information</h1>
                  <h2 style={headerStyle}>Your account could not migrated automatically. In order to finialize the migration, please change the data which is already in use.</h2>
                  <h3 style={headerStyle}>Hint: if your email or username is already in use, it could be possible that you have already an stand-alone account on this SlideWiki instance. In this case close the window and do a sign in.</h3>
              </div>
              <div className=""content"">
                  <form className=""ui ssoregistrationmodalform form"" ref=""ReviseUser_form"" >
                      <div className={usernameClasses} data-tooltip={usernameToolTipp} data-position=""top center"" data-inverted="""" onBlur={this.checkUsername.bind(this)}>
                          <label style={signUpLabelStyle}>Username * </label>
                          <div className=""ui icon input""><i className={usernameIconClasses}/><input type=""text"" name=""username"" ref=""username"" placeholder=""Username"" aria-required=""true"" /></div>
                      </div>
                      <div className={emailClasses} data-tooltip={emailToolTipp} data-position=""top center"" data-inverted="""" onBlur={this.checkEmail.bind(this)}>
                          <label style={signUpLabelStyle}>Email * </label>
                          <div className=""ui icon input""><i className={emailIconClasses}/><input type=""email"" name=""email"" ref=""email"" placeholder=""Email"" aria-required=""true"" /></div>
                      </div>
                      <div className=""ui error message"" role=""region"" aria-live=""polite""/>
                      <button type=""submit"" className=""ui blue labeled submit icon button"" >
                          <i className=""icon add user""/> Migrate User
                      </button>
                  </form>
              </div>
              <div className=""actions"">
                  <div className=""ui cancel button"">Cancel</div>
              </div>
            </div>
          </div>
        );
    }
}

ReviseUser.contextTypes = {
    executeAction: PropTypes.func.isRequired,
    intl: PropTypes.object.isRequired
};
ReviseUser = connectToStores(ReviseUser, [UserRegistrationStore, SSOStore], (context, props) => {
    return {
        UserRegistrationStore: context.getStore(UserRegistrationStore).getState(),
        SSOStore: context.getStore(SSOStore).getState()
    };
});
export default ReviseUser;
","Create a React component that allows users to revise their username and email address before finalizing their account migration. The component should validate the provided username and email address, ensuring they are not already in use. If the username or email is already taken, the component should display an error message and provide feedback to the user. The component should also disable form submission until both the username and email are valid."
"import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
//
import * as Basic from '../../basic';
import { ProfileManager } from '../../../redux';
import AbstractEntityInfo from '../EntityInfo/AbstractEntityInfo';
import EntityInfo from '../EntityInfo/EntityInfo';
import TwoFactorAuthenticationTypeEnum from '../../../enums/TwoFactorAuthenticationTypeEnum';
//
const manager = new ProfileManager();

/**
 * Component for rendering information about identity profile.
 *
 * @author Radek Tomiška
 * @since 12.0.0
 */
export class ProfileInfo extends AbstractEntityInfo {

  getManager() {
    return manager;
  }

  showLink() {
    return false;
  }

  /**
   * Returns entity icon (null by default - icon will not be rendered)
   *
   * @param  {object} entity
   */
  getEntityIcon() {
    return 'fa:cog';
  }

  getNiceLabel(entity) {
    const _entity = entity || this.getEntity();
    let label = this.i18n('entity.Profile._type');
    if (_entity && _entity._embedded && _entity._embedded.identity) {
      label = `${ label } - (${ _entity._embedded.identity.username })`;
    }
    return label;
  }

  /**
   * Returns popovers title
   *
   * @param  {object} entity
   */
  getPopoverTitle() {
    return this.i18n('entity.Profile._type');
  }

  getTableChildren() {
    // component are used in #getPopoverContent => skip default column resolving
    return [
      <Basic.Column property=""label""/>,
      <Basic.Column property=""value""/>
    ];
  }

  /**
   * Returns popover info content
   *
   * @param  {array} table data
   */
  getPopoverContent(entity) {
    return [
      {
        label: this.i18n('entity.Identity._type'),
        value: (
          <EntityInfo
            entityType=""identity""
            entity={ entity._embedded ? entity._embedded.identity : null }
            entityIdentifier={ entity.identity }
            face=""popover"" />
        )
      },
      {
        label: this.i18n('entity.Profile.preferredLanguage.label'),
        value: entity.preferredLanguage
      },
      {
        label: this.i18n('entity.Profile.systemInformation.label'),
        value: (entity.systemInformation ? this.i18n('label.yes') : this.i18n('label.no'))
      },
      {
        label: this.i18n('entity.Profile.twoFactorAuthenticationType.label'),
        value: (
          <Basic.EnumValue
            enum={ TwoFactorAuthenticationTypeEnum }
            value={ entity.twoFactorAuthenticationType }/>
        )
      }
    ];
  }
}

ProfileInfo.propTypes = {
  ...AbstractEntityInfo.propTypes,
  /**
   * Selected entity - has higher priority
   */
  entity: PropTypes.object,
  /**
   * Selected entity's id - entity will be loaded automatically
   */
  entityIdentifier: PropTypes.string,
  /**
   * Internal entity loaded by given identifier
   */
  _entity: PropTypes.object,
  _showLoading: PropTypes.bool
};
ProfileInfo.defaultProps = {
  ...AbstractEntityInfo.defaultProps,
  entity: null,
  face: 'link',
  _showLoading: true
};

function select(state, component) {
  return {
    _entity: manager.getEntity(state, component.entityIdentifier),
    _showLoading: manager.isShowLoading(state, null, component.entityIdentifier)
  };
}
export default connect(select)(ProfileInfo);
","Describe a React component named ProfileInfo that displays information about a user's profile. It should include details such as the preferred language, system information, and two-factor authentication type. The component should also display a link to the user's identity information."
"import React from 'react';

import createStore from 'lib/createStore';
import { Provider } from 'react-redux';

import HelloApp from 'components/HelloApp/HelloApp';

const store = createStore();

class App extends React.Component {

  render() {
    return (
      <Provider {...{ store }}>
        <HelloApp/>
      </Provider>
    );
  }
}

export default App;
",Create an App component that wraps the HelloApp component and provides access to the Redux store through the Provider component.
"import React from 'react';
import { createDevTools } from 'redux-devtools';
import LogMonitor from 'redux-devtools-log-monitor';
import DockMonitor from 'redux-devtools-dock-monitor';

export default createDevTools(
  <DockMonitor toggleVisibilityKey=""ctrl-H""
               changePositionKey=""ctrl-Q"">
    <LogMonitor />
  </DockMonitor>
);
",Create a debug tool for a React application that gives developers the ability to view the current state of the Redux store.
"import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import StatusListContainer from '../ui/containers/status_list_container';
import Column from '../ui/components/column';
import {
  refreshTimeline,
  updateTimeline,
  deleteFromTimelines,
  connectTimeline,
  disconnectTimeline,
} from '../../actions/timelines';
import { defineMessages, injectIntl, FormattedMessage } from 'react-intl';
import ColumnBackButtonSlim from '../../components/column_back_button_slim';
import createStream from '../../stream';

const messages = defineMessages({
  title: { id: 'column.community', defaultMessage: 'Local timeline' },
});

const mapStateToProps = state => ({
  hasUnread: state.getIn(['timelines', 'community', 'unread']) > 0,
  streamingAPIBaseURL: state.getIn(['meta', 'streaming_api_base_url']),
  accessToken: state.getIn(['meta', 'access_token']),
});

let subscription;

class CommunityTimeline extends React.PureComponent {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    intl: PropTypes.object.isRequired,
    streamingAPIBaseURL: PropTypes.string.isRequired,
    accessToken: PropTypes.string.isRequired,
    hasUnread: PropTypes.bool,
  };

  componentDidMount () {
    const { dispatch, streamingAPIBaseURL, accessToken } = this.props;

    dispatch(refreshTimeline('community'));

    if (typeof subscription !== 'undefined') {
      return;
    }

    subscription = createStream(streamingAPIBaseURL, accessToken, 'public:local', {

      connected () {
        dispatch(connectTimeline('community'));
      },

      reconnected () {
        dispatch(connectTimeline('community'));
      },

      disconnected () {
        dispatch(disconnectTimeline('community'));
      },

      received (data) {
        switch(data.event) {
        case 'update':
          dispatch(updateTimeline('community', JSON.parse(data.payload)));
          break;
        case 'delete':
          dispatch(deleteFromTimelines(data.payload));
          break;
        }
      },

    });
  }

  componentWillUnmount () {
    // if (typeof subscription !== 'undefined') {
    //   subscription.close();
    //   subscription = null;
    // }
  }

  render () {
    const { intl, hasUnread } = this.props;

    return (
      <Column icon='users' active={hasUnread} heading={intl.formatMessage(messages.title)}>
        <ColumnBackButtonSlim />
        <StatusListContainer {...this.props} scrollKey='community_timeline' type='community' emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />} />
      </Column>
    );
  }

}

export default connect(mapStateToProps)(injectIntl(CommunityTimeline));
","Generate a React component that displays a timeline of public statuses, with a header indicating whether there are unread statuses and a back button. The component should use the 'react-intl' library for internationalization and the 'react-redux' library for state management."
"import React, { Component } from 'react';
import Icon from 'react-fontawesome';

import { styles } from './styles';

/**
 * Thumbnail badge showing that the participant is the dominant speaker in
 * the conference.
 */
export class DominantSpeakerIndicator extends Component {
    /**
     * Implements React's {@link Component#render()}.
     *
     * @inheritdoc
     */
    render() {
        return (
            <div style = { styles.dominantSpeakerIndicatorBackground }>
                <Icon
                    name = 'bullhorn'
                    style = { styles.dominantSpeakerIndicator } />
            </div>
        );
    }
}
","Design a React component that displays a badge with a bullhorn inside, indicating that the participant is the dominant speaker in the conference."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvVideoLabel = (props) => (
  <SvgIcon {...props}>
    <path d=""M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 13H3V5h18v11z""/>
  </SvgIcon>
);
AvVideoLabel = pure(AvVideoLabel);
AvVideoLabel.displayName = 'AvVideoLabel';
AvVideoLabel.muiName = 'SvgIcon';

export default AvVideoLabel;
","Provide the necessary React code to define a functional component named `AvVideoLabel`, which extends the `SvgIcon` component, and renders an SVG path with specific coordinates to display a video label icon. Make sure to apply the `pure` HOC to optimize performance and set the `displayName` and `muiName` properties for better component identification."
"import React, { Component } from 'react';
import TodoApp from './TodoApp';
import { createStore, combineReducers } from 'redux';
import { Provider } from 'react-redux';
import rootReducer from '../reducers';

const store = createStore(rootReducer);

export default class Root extends Component {
  render() {
    return (
      <Provider store={store}>
        {() => <TodoApp /> }
      </Provider>
    );
  }
}
",Create a React Redux application that renders the TodoApp component using the Redux store.
"/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';

async function load() {
  return [
    { id: 1, name: '1' },
    { id: 2, name: '2' },
    { id: 3, name: '3' },
    { id: 4, name: '4' },
  ];
}

/* eslint-disable */
// Regression test for https://github.com/facebook/create-react-app/issues/3055
const x = async (
  /* prettier-ignore */
  y: void
) => {
  const z = await y;
};
/* eslint-enable */

export default class extends Component {
  static propTypes = {
    onReady: PropTypes.func.isRequired,
  };

  constructor(props) {
    super(props);
    this.state = { users: [] };
  }

  async componentDidMount() {
    const users = await load();
    this.setState({ users });
  }

  componentDidUpdate() {
    this.props.onReady();
  }

  render() {
    return (
      <div id=""feature-async-await"">
        {this.state.users.map(user => (
          <div key={user.id}>{user.name}</div>
        ))}
      </div>
    );
  }
}
",Write the code snippet for a React component that makes an asynchronous call using async/await and updates its state when the data is loaded.
"import React from 'react';
import { Text, View } from 'react-native';
import { storiesOf, action, linkTo, } from '@kadira/react-native-storybook';

import { Container, SearchHeader } from '../';

storiesOf('SearchHeader', module)
    .addDecorator(story => (
        <Container>
            {story()}
        </Container>
    ))
    .add('with left button', () => (
        <SearchHeader
            onLeftButtonClick={action('onLeftButtonClick')}
            leftButtonIcon='md-arrow-back'
            onSearch={action('onSearch')} />
    ))
    .add('with right button', () => (
        <SearchHeader
            onRightButtonClick={action('onRightButtonClick')}
            rightButtonIcon='md-qr-scanner'
            onSearch={action('onSearch')} />
    ))
    .add('with both buttons', () => (
        <SearchHeader
            onLeftButtonClick={action('onLeftButtonClick')}
            leftButtonIcon='md-arrow-back'
            onRightButtonClick={action('onRightButtonClick')}
            rightButtonIcon='md-qr-scanner'
            onSearch={action('onSearch')} />
    ))
    .add('with custom placeholder', () => (
        <SearchHeader
            placeholder='Custom Placeholder'
            onLeftButtonClick={action('onLeftButtonClick')}
            leftButtonIcon='md-arrow-back'
            onRightButtonClick={action('onRightButtonClick')}
            rightButtonIcon='md-qr-scanner'
            onSearch={action('onSearch')} />
    ))
    .add('with a backgroundColor/foregroundColor', () => (
        <SearchHeader
            onLeftButtonClick={action('onLeftButtonClick')}
            leftButtonIcon='md-menu'
            onRightButtonClick={action('onRightButtonClick')}
            rightButtonIcon='md-qr-scanner'
            backgroundColor='red'
            foregroundColor='silver' />
    ))","Generate a series of React Native Storybook stories for a SearchHeader component. Include stories for various button configurations, custom placeholders, and custom colors."
"/* eslint react/prop-types: 0 */

import React from 'react';
import ReactDOM from 'react-dom';
import Select from 'react-select';

import Contributors from './components/Contributors';
import GithubUsers from './components/GithubUsers';
import CustomComponents from './components/CustomComponents';
import CustomRender from './components/CustomRender';
import Multiselect from './components/Multiselect';
import NumericSelect from './components/NumericSelect';
import Virtualized from './components/Virtualized';
import States from './components/States';

ReactDOM.render(
	<div>
		<States label=""States"" searchable />
		<Multiselect label=""Multiselect"" />
		<Virtualized label=""Virtualized"" />
		<Contributors label=""Contributors (Async)"" />
		<GithubUsers label=""Github users (Async with fetch.js)"" />
		<NumericSelect label=""Numeric Values"" />
		<CustomRender label=""Custom Render Methods""/>
		<CustomComponents label=""Custom Placeholder, Option and Value Components"" />
		{/*
		<SelectedValuesField label=""Option Creation (tags mode)"" options={FLAVOURS} allowCreate hint=""Enter a value that's NOT in the list, then hit return"" />
		*/}
	</div>,
	document.getElementById('example')
);
","Generate a non-technical but specific prompt that can be inputted into an LLM to generate the code snippet.
Output only the description.

Description: Create a React app that demonstrates various features of the React-Select library, including different types of select components, options for customization, and support for asynchronous data fetching."
"import React from 'react';
import PropTypes from 'prop-types';
import { FormattedMessage } from 'react-intl';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import SettingsHeader from '../SettingsHeader';
import { ContentColumn } from '../../../styles/js/shared';

const TeamDataComponent = ({ dataReportUrl }) => (
  <ContentColumn large>
    <SettingsHeader
      title={
        <FormattedMessage
          id=""teamDataComponent.title""
          defaultMessage=""Workspace data""
          description=""Header for the stored data page of the current team""
        />
      }
      subtitle={
        <FormattedMessage
          id=""teamDataComponent.subtitle""
          defaultMessage=""Download data and metadata from Check. Get insight and analysis about workspace and tipline usage.""
        />
      }
      helpUrl=""https://help.checkmedia.org/en/articles/4511362""
    />
    <Card>
      <CardContent>
        { dataReportUrl ?
          <React.Fragment>
            <Typography variant=""body1"" component=""p"" paragraph>
              <FormattedMessage id=""teamDataComponent.notSet1"" defaultMessage=""Click the button below to open your data report in a new window."" />
            </Typography>
            <Box mt={2} mb={2}>
              <Button
                variant=""contained""
                color=""primary""
                onClick={() => { window.open(dataReportUrl); }}
              >
                <FormattedMessage id=""teamDataComponent.viewDataReport"" defaultMessage=""View data report"" />
              </Button>
            </Box>
            <Typography variant=""body1"" component=""p"" paragraph>
              <FormattedMessage id=""teamDataComponent.notSet2"" defaultMessage=""To request any customization of your data report, please reach out to support."" />
            </Typography>
          </React.Fragment> :
          <React.Fragment>
            <Typography variant=""body1"" component=""p"" paragraph>
              <FormattedMessage
                id=""teamDataComponent.set1""
                defaultMessage=""Fill {thisShortForm} to request access to your data report.""
                values={{
                  thisShortForm: (
                    <a href=""https://airtable.com/shrWpaztZ2SzD5TrA"" target=""_blank"" rel=""noopener noreferrer"">
                      <FormattedMessage id=""teamDataComponent.formLinkText"" defaultMessage=""this short form"" />
                    </a>
                  ),
                }}
              />
            </Typography>
            <Typography variant=""body1"" component=""p"" paragraph>
              <FormattedMessage id=""teamDataComponent.set2"" defaultMessage=""Your data report will be enabled within one business day."" />
            </Typography>
          </React.Fragment> }
      </CardContent>
    </Card>
  </ContentColumn>
);

TeamDataComponent.defaultProps = {
  dataReportUrl: null,
};

TeamDataComponent.propTypes = {
  dataReportUrl: PropTypes.string, // or null
};

export default TeamDataComponent;
","Create a React component that displays a card with information about a team's stored data. If the data report URL is available, display a button to open the report in a new window and a message explaining that users can request customization by reaching out to support. If the data report URL is not available, display a message explaining that users can fill out a form to request access to their data report, and that it will be enabled within one business day."
"import React from 'react';
import { Link } from 'react-router';
import Navbar from '../../src/Navbar';
import Nav from '../../src/Nav';

const NAV_LINKS = {
  'introduction': {
    link: 'introduction',
    title: 'Introduction'
  },
  'getting-started': {
    link: 'getting-started',
    title: 'Getting started'
  },
  'components': {
    link: 'components',
    title: 'Components'
  },
  'support': {
    link: 'support',
    title: 'Support'
  }
};

const NavMain = React.createClass({
  propTypes: {
    activePage: React.PropTypes.string
  },

  render() {
    let brand = <Link to='home' className=""navbar-brand"">React-Bootstrap</Link>;
    let links = Object.keys(NAV_LINKS).map(this.renderNavItem).concat([
      <li key='github-link'>
        <a href='https://github.com/react-bootstrap/react-bootstrap' target='_blank'>GitHub</a>
      </li>
    ]);

    return (
      <Navbar componentClass='header' brand={brand} staticTop className=""bs-docs-nav"" role=""banner"" toggleNavKey={0}>
        <Nav className=""bs-navbar-collapse"" role=""navigation"" eventKey={0} id=""top"">
          {links}
        </Nav>
      </Navbar>
    );
  },

  renderNavItem(linkName) {
    let link = NAV_LINKS[linkName];

    return (
        <li className={this.props.activePage === linkName ? 'active' : null} key={linkName}>
          <Link to={link.link}>{link.title}</Link>
        </li>
      );
  }
});

export default NavMain;
",Create a React app navigation bar with static navigation links and include a link to GitHub.
"/* eslint no-new: ""off"" */
import React from 'react'
import { v4 } from 'uuid'
import ChartKey from './ChartKey'
import Row from 'react-bootstrap/lib/Row'
import Col from 'react-bootstrap/lib/Col'
import ChartistGraph from 'react-chartist'

export default class BedChart extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      id: `chart_${v4().replace(/-/g, '')}`
    }
  }

  render() {
    const { total, available, pending } = this.props
    const data = {
      series: [total - available - pending, pending, available]
    }

    const options = {
      startAngle: 270,
      showLabel: false
    }

    return (
      <div className='summary-chart'>
        <Row>
          <Col md={3}>
            <ChartKey/>
          </Col>
          <Col md={3}>
            <ChartistGraph data={data} options={options} type='Pie'/>
          </Col>
        </Row>
      </div>
    )
  }
}
","Create a React component that displays a pie chart for bed availability. The component should include a legend and allow for the customization of the total number of beds, available beds, and pending beds."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from '../../../utils/griddleConnect';
import compose from 'recompose/compose';
import mapProps from 'recompose/mapProps';
import getContext from 'recompose/getContext';
import withHandlers from 'recompose/withHandlers';

const spacerRow = compose(
  getContext({
    selectors: PropTypes.object,
  }),
  connect((state, props) => {
    const { topSpacerSelector, bottomSpacerSelector } = props.selectors;
    const { placement } = props;

    return {
      spacerHeight: placement === 'top' ? topSpacerSelector(state, props) : bottomSpacerSelector(state, props),
    };
  }),
  mapProps(props => ({
    placement: props.placement,
    spacerHeight: props.spacerHeight,
  }))
)(class extends Component {
  static propTypes = {
    placement: PropTypes.string,
    spacerHeight: PropTypes.number,
  }
  static defaultProps = {
    placement: 'top'
  }

  // shouldComponentUpdate(nextProps) {
  //   const { currentPosition: oldPosition, placement: oldPlacement } = this.props;
  //   const { currentPosition, placement } = nextProps;
  //
  //   return oldPosition !== currentPosition || oldPlacement !== placement;
  // }

  render() {
    const { placement, spacerHeight } = this.props;
    let spacerRowStyle = {
      height: `${spacerHeight}px`,
    };

    return (
      <tr key={placement + '-' + spacerHeight} style={spacerRowStyle}></tr>
    );
  }
});

export default spacerRow;
","Create a React component that renders a spacer row in a table, given a height and a placement (top or bottom). The component should use the Griddle connect HOC and the Compose library."
"import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import classNames from 'classnames';
import React from 'react';
import elementType from 'react-prop-types/lib/elementType';

import { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';

var propTypes = {
  componentClass: elementType
};

var defaultProps = {
  componentClass: 'div'
};

var ModalBody = function (_React$Component) {
  _inherits(ModalBody, _React$Component);

  function ModalBody() {
    _classCallCheck(this, ModalBody);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  ModalBody.prototype.render = function render() {
    var _props = this.props,
        Component = _props.componentClass,
        className = _props.className,
        props = _objectWithoutProperties(_props, ['componentClass', 'className']);

    var _splitBsProps = splitBsProps(props),
        bsProps = _splitBsProps[0],
        elementProps = _splitBsProps[1];

    var classes = getClassSet(bsProps);

    return React.createElement(Component, _extends({}, elementProps, {
      className: classNames(className, classes)
    }));
  };

  return ModalBody;
}(React.Component);

ModalBody.propTypes = propTypes;
ModalBody.defaultProps = defaultProps;

export default bsClass('modal-body', ModalBody);",Create a React component called ModalBody that wraps any React element passed in as the componentClass prop and adds a 'modal-body' class to it.
"import React from 'react';
import PropTypes from 'prop-types';
import { Route, Redirect } from 'react-router-dom';

/*
const Authenticated = ({ layout: Layout, roles, authenticated, component, ...rest }) => (
  <Route
    {...rest}
    render={props => (
      authenticated ?
      (<Layout
        {...props}
        isAdmin={roles.indexOf('admin') !== -1}
        authenticated
        {...rest}
      >
        {(React.createElement(component, { ...props, authenticated, ...rest }))}
      </Layout>)
      :
      (<Redirect to=""/about"" />)
    )}
  />
);
*/

const Authenticated = ({
  layout: Layout, roles, authenticated, component: Component, ...rest
}) => (
  <Route
    {...rest}
    render={(props) => (
      authenticated
        ? (
          <Layout
            {...props}
            isAdmin={roles.indexOf('admin') !== -1}
            authenticated
            {...rest}
          >
            <Component {...props} authenticated {...rest} roles={roles} />
          </Layout>
        )
        : (<Redirect to=""/about"" />)
    )}
  />
);

Authenticated.propTypes = {
  routeName: PropTypes.string.isRequired,
  roles: PropTypes.array.isRequired,
  authenticated: PropTypes.bool.isRequired,
  component: PropTypes.func.isRequired,
  layout: PropTypes.node.isRequired,
};

export default Authenticated;
","Create a React component that renders a given component within a specified layout, but only if the user is authenticated. If the user is not authenticated, redirect the user to the ""/about"" page. The component should take the following props: routeName, roles, authenticated, component, and layout."
"import React from 'react';
import styled from 'styled-components';
import { storiesOf } from '@storybook/react';
import { withInfo } from '@storybook/addon-info';
import { action } from '@storybook/addon-actions';
import DataChannelCard from '../DataChannelCard';
import DATA_CHANNELS from './API';
import DataChannelAdapter from '.';

const CardWrapper = styled.div`
  display: flex;
  flex-wrap: wrap;

  > * {
    height: initial;
    padding: 8px 16px;
    margin: 4px;
    flex-basis: 100%;
  }

  > [data-width~=' half'] {
    flex-grow: 1;
    flex-basis: 40%;
  }
`;

storiesOf('DataChannelAdapter', module).add(
  'API',
  withInfo({
    text: `
      ~~~js
      type Event = {
        type: 'SUBMIT'|'CHANGE'|'CLEAR', // event type
        id: string,                      // data channel id
        values: {                        // datapoint values
          value: ?string|number,
          period: ?number,
        },
      }

      type DCEventHandler = DCEvent => void
      ~~~
    `,

    inline: true,
  })(() => (
    <CardWrapper>
      {DATA_CHANNELS.map(dataChannel => (
        <DataChannelCard
          key={dataChannel.id}
          data-width=""half""
          title={dataChannel.type}
          subtitle=""Last data point time : 2015-06-12 12:00""
          description=""You can input description of controller here. You can input description of You can input description of controller here. You can input description of""
          header={<a href=""."">Link</a>}
        >
          <DataChannelAdapter
            dataChannelProps={dataChannel}
            eventHandler={action(
              'DataChannelAdapter eventHandler(event: Event)',
            )}
          />
        </DataChannelCard>
      ))}
    </CardWrapper>
  )),
);
",Generate a React Storybook story for the DataChannelAdapter component. The story should demonstrate the usage of the component with different data channels. The component should be rendered within a DataChannelCard from the `data-card` package. The story should include a description of the DataChannelAdapter's event interface.
"// (C) Copyright 2014-2016 Hewlett Packard Enterprise Development LP

import React, { Component } from 'react';
import Header from 'grommet/components/Header';
import Title from 'grommet/components/Title';
import Search from 'grommet/components/Search';
import Menu from 'grommet/components/Menu';
import Box from 'grommet/components/Box';
import Anchor from 'grommet/components/Anchor';
import ActionsIcon from 'grommet/components/icons/base/Actions';
import InteractiveExample from '../../../components/InteractiveExample';

const PROPS_SCHEMA = {
  fixed: { value: true },
  float: { value: true },
  size: { options: ['small', 'medium', 'large', 'xlarge'] },
  splash: { value: true }
};

const CONTENTS_SCHEMA = {
  title: { value: <Title>Sample Title</Title>, initial: true },
  search: { value: (
    <Search inline={true} fill={true} size='medium' placeHolder='Search'
      dropAlign={{ right: 'right' }}/>
  ), initial: true },
  menu: { value: (
    <Menu icon={<ActionsIcon />} dropAlign={{right: 'right'}}>
      <Anchor href='#' className='active'>First</Anchor>
      <Anchor href='#'>Second</Anchor>
      <Anchor href='#'>Third</Anchor>
    </Menu>
  ), initial: true }
};

export default class HeaderExamplesDoc extends Component {

  constructor () {
    super();
    this.state = { contents: {}, elementProps: {} };
  }

  render () {
    let { contents, elementProps } = this.state;

    const element = (
      <Header {...elementProps}>
        {contents.title}
        <Box flex={true} justify='end' direction='row' responsive={false}>
          {contents.search}
          {contents.menu}
        </Box>
      </Header>
    );

    return (
      <InteractiveExample contextLabel='Header' contextPath='/docs/header'
        justify='start' align='stretch'
        preamble={`import Header from 'grommet/components/Header';`}
        propsSchema={PROPS_SCHEMA}
        contentsSchema={CONTENTS_SCHEMA}
        element={element}
        onChange={(elementProps, contents) => {
          this.setState({ elementProps, contents });
        }} />
    );
  }
};
","Provide a React code snippet that demonstrates the usage of the Grommet Header component, including props like fixed, float, size, and splash. Also include contents like a title, search bar, and menu. Allow for interactive customization of props and contents."
"/* eslint-disable no-param-reassign */
/* global document */

import React from 'react';
import ReactDOM from 'react-dom';
import App from './app/App';
import impl from './impl';
import Tree from './cases/Tree';
import SierpinskiTriangle from './cases/SierpinskiTriangle';

const implementations = impl;
const packageNames = Object.keys(implementations);

const createTestBlock = fn => {
  return packageNames.reduce((testSetups, packageName) => {
    const { name, components, version } = implementations[packageName];
    const { Component, getComponentProps, sampleCount, Provider, benchmarkType } = fn(components);

    testSetups[packageName] = {
      Component,
      getComponentProps,
      sampleCount,
      Provider,
      benchmarkType,
      version,
      name,
    };
    return testSetups;
  }, {});
};

const tests = {
  'Mount deep tree': createTestBlock(components => ({
    benchmarkType: 'mount',
    Component: Tree,
    getComponentProps: () => ({ breadth: 2, components, depth: 7, id: 0, wrap: 1 }),
    Provider: components.Provider,
    sampleCount: 500,
  })),
  'Mount wide tree': createTestBlock(components => ({
    benchmarkType: 'mount',
    Component: Tree,
    getComponentProps: () => ({ breadth: 6, components, depth: 3, id: 0, wrap: 2 }),
    Provider: components.Provider,
    sampleCount: 500,
  })),
  'Update dynamic styles': createTestBlock(components => ({
    benchmarkType: 'update',
    Component: SierpinskiTriangle,
    getComponentProps: ({ cycle }) => {
      return { components, s: 200, renderCount: cycle, x: 0, y: 0 };
    },
    Provider: components.Provider,
    sampleCount: 1000,
  })),
};

ReactDOM.render(<App tests={tests} />, document.querySelector('.root'));
","**Description**: Generate the React test setup code for a React app with multiple implementations and test cases that involves mounting and updating components. The code should include the creation of test setups for each implementation and test case, including the component to be tested, the function to get the component props, the sample count, the provider, and the benchmark type."
"import React from 'react'
import {observer} from 'mobx-react'
import {Route, Link} from 'react-router-dom'
import {IMAGE_DIR, TOKEN, GET_HOTEL_INFO, RESPONSE_CODE_SUCCESS} from 'macros'
import {setParamsToURL, dateToZh} from 'utils'
import './paySuccess.less'

export default observer(
  (props) => (
    <div className=""pay-success-container"">
      <div className=""hotel-info"">
        <i className=""iconfont icon-success"" />
        <h1>支付成功</h1>
        <div className=""hotel-name"">{props.store.hotelName}</div>
        <div className=""hotel-address"">{`酒店地址：${props.store.address}`}</div>
        <Link to={{pathname: `${props.match.url}/map`, search: `?longitude=${props.store.longitude}&latitude=${props.store.latitude}`}} className=""go-hotel"">前往酒店</Link>
      </div>
      <div className=""how-to-checking"">
        <h6>如何入住</h6>
        <p>  1.前往酒店，并找到自助入住登记机<br />
    2.在自助机登记证件，并进行脸部识别<br />
    3.收取入住短信通知(含房间号和密码)<br />
    *房门还可通过网络开锁功能开启</p>
      </div>
      <div className=""safety-tips"">
        <i className=""iconfont icon-tixing"" />根据公安部法律规定，住宿需登记身份证信息
      </div>




    </div>
  )
)
","Design a React component for a payment success page of a hotel reservation system. The page should include the following elements:
- A success icon and text indicating that the payment was successful
- Hotel information including the hotel name and address
- A button that links to a map view of the hotel's location
- A section with instructions on how to check into the hotel
- A section with safety tips regarding ID registration requirements"
"import React from 'react';
import {
  Table,
  TableBody,
  TableHeader,
  TableHeaderColumn,
  TableRow,
  TableRowColumn
} from 'material-ui/Table';
import TextField from 'material-ui/TextField';
import IconButton from 'material-ui/IconButton';
import Delete from 'material-ui/svg-icons/action/delete';
import Math from 'facturacion_common/src/Math.js';

const black54p = '#757575';
const noPaddingStyle = { padding: '0px' };

const RenderTableHeader = props => {
  let regSanCol = (
    <TableHeaderColumn width={80} style={noPaddingStyle}>
      Reg. Santario
    </TableHeaderColumn>
  );
  let loteCol = (
    <TableHeaderColumn width={60} style={noPaddingStyle}>
      Lote
    </TableHeaderColumn>
  );
  let fechaExpCol = (
    <TableHeaderColumn width={70} style={noPaddingStyle}>
      Fecha Exp.
    </TableHeaderColumn>
  );

  if (props.isExamen) {
    //ocultar columnas que no se usan en examenes
    regSanCol = null;
    loteCol = null;
    fechaExpCol = null;
  }

  return (
    <TableHeader displaySelectAll={false} adjustForCheckbox={false}>
      <TableRow>
        <TableHeaderColumn width={40} style={noPaddingStyle}>
          #
        </TableHeaderColumn>
        {regSanCol}
        <TableHeaderColumn width={170} style={noPaddingStyle}>
          Nombre
        </TableHeaderColumn>
        {loteCol}
        <TableHeaderColumn width={40} style={noPaddingStyle}>
          Cant.
        </TableHeaderColumn>
        {fechaExpCol}
        <TableHeaderColumn width={60} style={noPaddingStyle}>
          Precio
        </TableHeaderColumn>
        <TableHeaderColumn width={50} style={noPaddingStyle}>
          Importe
        </TableHeaderColumn>
        <TableHeaderColumn width={30} style={noPaddingStyle} />
      </TableRow>
    </TableHeader>
  );
};

export default class FacturaTable extends React.Component {
  renderRow = (facturable, i) => {
    const { isExamen, onFacturableChanged, onFacturableDeleted } = this.props;

    let regSanCol = (
      <TableRowColumn width={80} style={noPaddingStyle}>
        {facturable.codigo}
      </TableRowColumn>
    );
    let loteCol = (
      <TableRowColumn width={60} style={noPaddingStyle}>
        <TextField
          value={facturable.lote}
          style={{ width: '50px' }}
          name={'lote'}
          inputStyle={{ textAlign: 'right', fontSize: '13px' }}
          onChange={event => {
            onFacturableChanged(i, 'lote', event.target.value);
          }}
        />
      </TableRowColumn>
    );
    let fechaExpCol = (
      <TableRowColumn width={70} style={noPaddingStyle}>
        <TextField
          value={facturable.fechaExp}
          hintText={'expiración'}
          style={{ width: '70px', fontSize: '13px' }}
          onChange={(event, date) => {
            onFacturableChanged(i, 'fechaExp', date);
          }}
        />
      </TableRowColumn>
    );

    if (isExamen) {
      //ocultar columnas que no se usan en examenes
      regSanCol = null;
      loteCol = null;
      fechaExpCol = null;
    }

    return (
      <TableRow key={i}>
        <TableRowColumn width={40} style={noPaddingStyle}>
          {i + 1}
        </TableRowColumn>

        {regSanCol}

        <TableRowColumn width={170} style={noPaddingStyle}>
          {facturable.nombre}
        </TableRowColumn>

        {loteCol}

        <TableRowColumn width={40} style={noPaddingStyle}>
          <TextField
            style={{ width: '28px' }}
            value={facturable.countText}
            name={'count'}
            inputStyle={{ textAlign: 'right', fontSize: '13px' }}
            onChange={event => {
              onFacturableChanged(i, 'count', event.target.value);
            }}
          />
        </TableRowColumn>

        {fechaExpCol}

        <TableRowColumn width={60} style={noPaddingStyle}>
          ${' '}
          <TextField
            style={{ width: '50px' }}
            name={'precio'}
            value={facturable.precioVentaText}
            onChange={event => {
              onFacturableChanged(i, 'precioVenta', event.target.value);
            }}
            inputStyle={{ fontSize: '13px' }}
          />
        </TableRowColumn>

        <TableRowColumn
          width={50}
          style={{ padding: '0px', textOverflow: 'clip' }}
        >
          <span style={{ marginRight: '34px' }}>
            $ {Math.calcularImporteFacturable(facturable)}
          </span>
        </TableRowColumn>

        <TableRowColumn
          width={30}
          style={{ padding: '0px', textAlign: 'right' }}
        >
          <IconButton onTouchTap={() => onFacturableDeleted(i)}>
            <Delete color={black54p} />
          </IconButton>
        </TableRowColumn>
      </TableRow>
    );
  };

  render() {
    return (
      <Table height={'200px'} selectable={false}>
        {RenderTableHeader(this.props)}
        <TableBody displayRowCheckbox={false}>
          {this.props.items.map(this.renderRow)}
        </TableBody>
      </Table>
    );
  }
}

FacturaTable.propTypes = {
  isExamen: React.PropTypes.bool,
  items: React.PropTypes.array.isRequired,
  onFacturableChanged: React.PropTypes.func.isRequired,
  onFacturableDeleted: React.PropTypes.func.isRequired
};

FacturaTable.defaultProps = {
  isExamen: false
};
","Generate a React table with the following columns:
- # (number, width 40px)
- Reg. Santario (string, width 80px)
- Nombre (string, width 170px)
- Lote (string, width 60px)
- Cant. (number, width 40px)
- Fecha Exp. (date, width 70px)
- Precio (currency, width 60px)
- Importe (currency, width 50px)
- Actions (delete button, width 30px)"
"import React from 'react'
import { Route, DefaultRoute, NotFoundRoute, RouteHandler } from 'react-router'

import App from './components/App'
import DownloadPage from './components/DownloadPage'
import UploadPage from './components/UploadPage'
import ErrorPage from './components/ErrorPage'

export default (
  <Route handler={App}>
    <DefaultRoute handler={UploadPage} />
    <Route name=""download"" path=""/:a-:b-:c-:d"" handler={DownloadPage} />
    <Route name=""error"" path=""error"" handler={ErrorPage} />
    <NotFoundRoute handler={ErrorPage} />
  </Route>
)
","Generate React component for routing between UploadPage, DownloadPage, ErrorPage, and App components."
"import React from 'react';
import IframeExample from '../components/IframeExample';

function Highcharts() {
    return <IframeExample html={`<html><head>
    <script type=""text/javascript"" src=""https://code.jquery.com/jquery-1.9.1.js""></script>
    <script src=""https://code.highcharts.com/highcharts.js""></script>
    <script src=""https://code.highcharts.com/modules/exporting.js""></script>
</head><body>
<div id=""container"" style=""width: 100vw; height: 100vh; margin: 0 auto""></div>
<script>
    ${require('raw!./highcharts.example')}
</script>
</body></html>`}/>;
}

Highcharts.displayName = 'Highcharts';

module.exports = Highcharts;
",Create a React component that uses the Highcharts library to render an interactive chart on a webpage.
"import React from 'react';
import { render } from 'react-dom';
// It's important to not define HelloWorld component right in this file
// because in that case it will do full page reload on change
import HelloWorld from './HelloWorld.jsx';

render(<HelloWorld />, document.getElementById('react-root'));
","Generate a React application that renders a ""Hello World"" message to an HTML element with ID ""react-root"". Ensure that the ""Hello World"" component is imported from a separate file to avoid full page reloads on code changes."
"import React from 'react'
import { storiesOf } from '@storybook/react'
import Sprinkle from './Sprinkle'

export default storiesOf('Sprinkle', module)
.add('basic', () => {
  return (
    <svg viewport='0 0 60 60' width='60' height='60'>
      <Sprinkle />
    </svg>
  )
})
.add('rotated', () => {
  return (
    <svg viewport='0 0 60 60'>
      <Sprinkle deg={90} />
    </svg>
  )
})
.add('rotated & translated', () => {
  return (
    <svg viewport='0 0 60 60'>
      <g style={{ transform: `translate(${25}px, ${25}px)` }}>
        <Sprinkle deg={45} />
      </g>
    </svg>
  )
})
",Describe how to create a React Storybook component library for a confetti-like SVG animation with customizable rotation and translation. Include examples with various configurations.
"import _ from 'lodash';

import React from 'react';
import { PureRenderMixin } from 'react/addons';

import DialogActionCreators from 'actions/DialogActionCreators';

import LoginStore from 'stores/LoginStore';

import AvatarItem from 'components/common/AvatarItem.react';

const GroupProfileMembers = React.createClass({
  propTypes: {
    groupId: React.PropTypes.number,
    members: React.PropTypes.array.isRequired
  },

  mixins: [PureRenderMixin],

  onClick(id) {
    DialogActionCreators.selectDialogPeerUser(id);
  },

  onKickMemberClick(groupId, userId) {
    DialogActionCreators.kickMember(groupId, userId);
  },

  render() {
    let groupId = this.props.groupId;
    let members = this.props.members;
    let myId = LoginStore.getMyId();


    let membersList = _.map(members, (member, index) => {
      let controls;
      let canKick = member.canKick;

      if (canKick === true && member.peerInfo.peer.id !== myId) {
        controls = (
          <div className=""controls pull-right"">
            <a onClick={this.onKickMemberClick.bind(this, groupId, member.peerInfo.peer.id)}>Kick</a>
          </div>
        );
      }

      return (
        <li className=""profile__list__item row"" key={index}>
          <a onClick={this.onClick.bind(this, member.peerInfo.peer.id)}>
            <AvatarItem image={member.peerInfo.avatar}
                        placeholder={member.peerInfo.placeholder}
                        size=""small""
                        title={member.peerInfo.title}/>
          </a>

          <div className=""col-xs"">
            <a onClick={this.onClick.bind(this, member.peerInfo.peer.id)}>
              <span className=""title"">
                {member.peerInfo.title}
              </span>
            </a>
            {controls}
          </div>
        </li>
      );
    }, this);

    return (
        <ul className=""profile__list profile__list--members"">
          <li className=""profile__list__item profile__list__item--header"">{members.length} members</li>
          {membersList}
        </ul>
    );
  }
});

export default GroupProfileMembers;
","Generate the React component code for displaying a list of group members, including their profile pictures, names, and the ability to kick members and open a chat with them."
"import React from 'react';
import PropTypes from 'prop-types';
import {TableBody} from 'material-ui/Table';
import ClickAwayListener from 'material-ui/internal/ClickAwayListener';

class DataTablesTableBody extends TableBody {
  static muiName = 'TableBody';

  static propTypes = {
    /**
     * @ignore
     * Set to true to indicate that all rows should be selected.
     */
    allRowsSelected: PropTypes.bool,
    /**
     * Children passed to table body.
     */
    children: PropTypes.node,
    /**
     * The css class name of the root element.
     */
    className: PropTypes.string,
    /**
     * Controls whether or not to deselect all selected
     * rows after clicking outside the table.
     */
    deselectOnClickaway: PropTypes.bool,
    /**
     * Controls the display of the row checkbox. The default value is true.
     */
    displayRowCheckbox: PropTypes.bool,
    /**
     * @ignore
     * If true, multiple table rows can be selected.
     * CTRL/CMD+Click and SHIFT+Click are valid actions.
     * The default value is false.
     */
    multiSelectable: PropTypes.bool,
    /**
     * @ignore
     * Callback function for when a cell is clicked.
     */
    onCellClick: PropTypes.func,
    /**
     * @ignore
     * Customized handler
     * Callback function for when a cell is double clicked.
     */
    onCellDoubleClick: PropTypes.func,
    /**
     * @ignore
     * Called when a table cell is hovered. rowNumber
     * is the row number of the hovered row and columnId
     * is the column number or the column key of the cell.
     */
    onCellHover: PropTypes.func,
    /**
     * @ignore
     * Called when a table cell is no longer hovered.
     * rowNumber is the row number of the row and columnId
     * is the column number or the column key of the cell.
     */
    onCellHoverExit: PropTypes.func,
    /**
     * @ignore
     * Called when a table row is hovered.
     * rowNumber is the row number of the hovered row.
     */
    onRowHover: PropTypes.func,
    /**
     * @ignore
     * Called when a table row is no longer
     * hovered. rowNumber is the row number of the row
     * that is no longer hovered.
     */
    onRowHoverExit: PropTypes.func,
    /**
     * @ignore
     * Called when a row is selected. selectedRows is an
     * array of all row selections. IF all rows have been selected,
     * the string ""all"" will be returned instead to indicate that
     * all rows have been selected.
     */
    onRowSelection: PropTypes.func,
    /**
     * Controls whether or not the rows are pre-scanned to determine
     * initial state. If your table has a large number of rows and
     * you are experiencing a delay in rendering, turn off this property.
     */
    preScanRows: PropTypes.bool,
    /**
     * @ignore
     * If true, table rows can be selected. If multiple
     * row selection is desired, enable multiSelectable.
     * The default value is true.
     */
    selectable: PropTypes.bool,
    /**
     * If true, table rows will be highlighted when
     * the cursor is hovering over the row. The default
     * value is false.
     */
    showRowHover: PropTypes.bool,
    /**
     * If true, every other table row starting
     * with the first row will be striped. The default value is false.
     */
    stripedRows: PropTypes.bool,
    /**
     * Override the inline-styles of the root element.
     */
    style: PropTypes.object,
  };

  createRows() {
    const numChildren = React.Children.count(this.props.children);
    let rowNumber = 0;
    const handlers = {
      onCellClick: this.onCellClick,
      onCellDoubleClick: this.onCellDoubleClick,
      onCellHover: this.onCellHover,
      onCellHoverExit: this.onCellHoverExit,
      onRowHover: this.onRowHover,
      onRowHoverExit: this.onRowHoverExit,
      onRowClick: this.onRowClick,
    };

    return React.Children.map(this.props.children, (child) => {
      if (React.isValidElement(child)) {
        const props = {
          hoverable: this.props.showRowHover,
          selected: this.isRowSelected(rowNumber),
          striped: this.props.stripedRows && (rowNumber % 2 === 0),
          rowNumber: rowNumber++,
        };

        if (rowNumber === numChildren) {
          props.displayBorder = false;
        }

        const children = [
          this.createRowCheckboxColumn(props),
        ];

        React.Children.forEach(child.props.children, (child) => {
          children.push(child);
        });

        return React.cloneElement(child, {...props, ...handlers}, children);
      }
    });
  }

  onCellDoubleClick = (event, rowNumber, columnNumber) => {
    event.stopPropagation();
    if (this.props.onCellDoubleClick) {
      this.props.onCellDoubleClick(rowNumber, this.getColumnId(columnNumber), event);
    }
  };

  render() {
    const {
      style,
      allRowsSelected, // eslint-disable-line no-unused-vars
      multiSelectable, // eslint-disable-line no-unused-vars
      onCellClick, // eslint-disable-line no-unused-vars
      onCellDoubleClick, // eslint-disable-line no-unused-vars
      onCellHover, // eslint-disable-line no-unused-vars
      onCellHoverExit, // eslint-disable-line no-unused-vars
      onRowHover, // eslint-disable-line no-unused-vars
      onRowHoverExit, // eslint-disable-line no-unused-vars
      onRowSelection, // eslint-disable-line no-unused-vars
      selectable, // eslint-disable-line no-unused-vars
      deselectOnClickaway, // eslint-disable-line no-unused-vars
      showRowHover, // eslint-disable-line no-unused-vars
      stripedRows, // eslint-disable-line no-unused-vars
      displayRowCheckbox, // eslint-disable-line no-unused-vars
      preScanRows, // eslint-disable-line no-unused-vars
      ...other
    } = this.props;

    const {prepareStyles} = this.context.muiTheme;

    return (
      <ClickAwayListener onClickAway={this.handleClickAway}>
        <tbody style={prepareStyles(Object.assign({}, style))} {...other}>
          {this.createRows()}
        </tbody>
      </ClickAwayListener>
    );
  }
}

export default DataTablesTableBody;
","Design a React component for a data table body. The component should support row selection, hover effects, and custom handlers for cell and row events. It should also allow for customization of styles and row striping."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionSettingsBackupRestore = (props) => (
  <SvgIcon {...props}>
    <path d=""M14 12c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm-2-9c-4.97 0-9 4.03-9 9H0l4 4 4-4H5c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.51 0-2.91-.49-4.06-1.3l-1.42 1.44C8.04 20.3 9.94 21 12 21c4.97 0 9-4.03 9-9s-4.03-9-9-9z""/>
  </SvgIcon>
);
ActionSettingsBackupRestore = pure(ActionSettingsBackupRestore);
ActionSettingsBackupRestore.displayName = 'ActionSettingsBackupRestore';
ActionSettingsBackupRestore.muiName = 'SvgIcon';

export default ActionSettingsBackupRestore;
","Design an SVG icon representing the Restore settings action. The icon should depict a circular shape with two arrows pointing clockwise, indicating the restoration process."
"import React from 'react';
import Helmet from 'react-helmet';
import { renderToString, renderToStaticMarkup } from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';
import { ServerStyleSheet } from 'styled-components';

import config from '../../../config';

import ServerHTML from './ServerHTML';
import Application from '../../../app/components/Application';

export default function reactApplicationMiddleware(request, response) {
  // Ensure a nonce has been provided to us.
  // See the server/middleware/security.js for more info.
  if (typeof response.locals.nonce !== 'string') {
    throw new Error('A ""nonce"" value has not been attached to the response');
  }
  const nonce = response.locals.nonce;

  // It's possible to disable SSR, which can be useful in development mode.
  // In this case traditional client side only rendering will occur.
  if (config('disableSSR')) {
    if (process.env.BUILD_FLAG_IS_DEV === 'true') {
      // eslint-disable-next-line no-console
      console.log('==> Handling react route without SSR');
    }
    // SSR is disabled so we will return an ""empty"" html page and
    // rely on the client to initialize and render the react application.
    const html = renderToStaticMarkup(<ServerHTML nonce={nonce} />);
    response.status(200).send(`<!DOCTYPE html>${html}`);
    return;
  }

  // Create a context for <StaticRouter>, which will allow us to
  // query for the results of the render.
  const reactRouterContext = {};

  // Declare our React application.
  const app = (
    <StaticRouter location={request.url} context={reactRouterContext}>
      <Application />
    </StaticRouter>
  );


  const appString = renderToString(app);

  // Generate the html response.
  const html = renderToStaticMarkup(
    <ServerHTML
      reactAppString={appString}
      nonce={nonce}
      sheet={new ServerStyleSheet()}
      helmet={Helmet.rewind()}
    />,
  );

  // Check if the router context contains a redirect, if so we need to set
  // the specific status and redirect header and end the response.
  if (reactRouterContext.url) {
    response.status(302).setHeader('Location', reactRouterContext.url);
    response.end();
    return;
  }

  response
    .status(
      reactRouterContext.missed ? 404 : 200,
    )
    .send(`<!DOCTYPE html>${html}`);
}
",Describe how this code generates and returns the HTML response for a React application using server-side rendering.
"/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */

import React, { Component } from 'react';
import styles from './Feedback.css';
import withStyles from '../../decorators/withStyles';

@withStyles(styles)
class Feedback extends Component {

  render() {
    return (
      <div className=""Feedback"">
        <div className=""Feedback-container"">
          <a className=""Feedback-link"" href=""https://gitter.im/kriasoft/react-starter-kit"">Ask a question</a>
          <span className=""Feedback-spacer"">|</span>
          <a className=""Feedback-link"" href=""https://github.com/kriasoft/react-starter-kit/issues/new"">Report an issue</a>
        </div>
      </div>
    );
  }

}

export default Feedback;
",Generate a React component that renders a header bar with links to a chat forum and GitHub Issues page.
"import React from 'react'
import { Checkbox } from 'semantic-ui-react'

const CheckboxExampleToggle = () => (
  <Checkbox toggle />
)

export default CheckboxExampleToggle
",Create a React code snippet using the Semantic UI React component library to display a simple toggle checkbox.
"import React from 'react'
import { Feed } from 'shengnian-ui-react'

const FeedExampleImageLabelShorthand = () => (
  <Feed>
    <Feed.Event
      image='/assets/images/avatar/small/elliot.jpg'
      content='You added Elliot Fu to the group Coworkers'
    />
    <Feed.Event>
      <Feed.Label image='/assets/images/avatar/small/elliot.jpg' />
      <Feed.Content content='You added Elliot Fu to the group Coworkers' />
    </Feed.Event>
  </Feed>
)

export default FeedExampleImageLabelShorthand
",Generate a React code snippet that demonstrates the creation of a Semantic UI Feed component with an image label shorthand. Include both the long and shorthand syntax for adding an image to the Feed Event.
"/**
 * app.js
 *
 * This is the entry file for the application, only setup and boilerplate
 * code.
 */
import 'babel-polyfill';

/* eslint-disable import/no-unresolved, import/extensions */
// Load the manifest.json file and the .htaccess file
import '!file?name=[name].[ext]!./manifest.json';
import 'file?name=[name].[ext]!./.htaccess';
/* eslint-enable import/no-unresolved, import/extensions */

// Import all the third party stuff
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { applyRouterMiddleware, Router, browserHistory } from 'react-router';
import { syncHistoryWithStore } from 'react-router-redux';
import { useScroll } from 'react-router-scroll';
import LanguageProvider from 'containers/LanguageProvider';
import configureStore from './store';

// Import i18n messages
import { translationMessages } from './i18n';

// Import the CSS reset, which HtmlWebpackPlugin transfers to the build folder
import 'sanitize.css/sanitize.css';

// Create redux store with history
// this uses the singleton browserHistory provided by react-router
// Optionally, this could be changed to leverage a created history
// e.g. `const browserHistory = useRouterHistory(createBrowserHistory)();`
const initialState = {};
const store = configureStore(initialState, browserHistory);

// Sync history and store, as the react-router-redux reducer
// is under the non-default key (""routing""), selectLocationState
// must be provided for resolving how to retrieve the ""route"" in the state
import { selectLocationState } from 'containers/App/selectors';
const history = syncHistoryWithStore(browserHistory, store, {
  selectLocationState: selectLocationState(),
});

// Set up the router, wrapping all Routes in the App component
import App from 'containers/App';
import createRoutes from './routes';
const rootRoute = {
  component: App,
  childRoutes: createRoutes(store),
};


const render = (translatedMessages) => {
  ReactDOM.render(
    <Provider store={store}>
      <LanguageProvider messages={translatedMessages}>
        <Router
          history={history}
          routes={rootRoute}
          render={
            // Scroll to top when going to a new page, imitating default browser
            // behaviour
            applyRouterMiddleware(useScroll())
          }
        />
      </LanguageProvider>
    </Provider>,
    document.getElementById('app')
  );
};


// Hot reloadable translation json files
if (module.hot) {
  // modules.hot.accept does not accept dynamic dependencies,
  // have to be constants at compile-time
  module.hot.accept('./i18n', () => {
    render(translationMessages);
  });
}

// Chunked polyfill for browsers without Intl support
if (!window.Intl) {
  (new Promise((resolve) => {
    resolve(System.import('intl'));
  }))
    .then(() => Promise.all([
      System.import('intl/locale-data/jsonp/de.js'),
    ]))
    .then(() => render(translationMessages))
    .catch((err) => {
      throw err;
    });
} else {
  render(translationMessages);
}

// Install ServiceWorker and AppCache in the end since
// it's not most important operation and if main code fails,
// we do not want it installed
import { install } from 'offline-plugin/runtime';
install();
","Provide a code snippet for the entry file of a React application that uses Redux, React Router, and React Router Redux. The code should include the necessary imports, store configuration, router setup, and rendering logic, as well as hot reloading for translated messages and polyfills for browsers without Intl support. Finally, include the installation of ServiceWorker and AppCache."
"import React from 'react';
import PropTypes from 'prop-types';
import { StyleSheet, StatusBar, View } from 'react-native';
import { connect } from 'react-redux';
import { addNavigationHelpers } from 'react-navigation';
import AppNavigator from './routes';

const AppWithNavigationState = ({ dispatch, nav }) => (
  <View style={styles.container}>
    <StatusBar
      barStyle=""dark-content""
    />
    <AppNavigator navigation={addNavigationHelpers({ dispatch, state: nav })} />
  </View>
);

AppWithNavigationState.propTypes = {
  dispatch: PropTypes.func.isRequired,
  nav: PropTypes.object.isRequired,
};

const mapStateToProps = state => ({
  nav: state.nav,
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

export default connect(mapStateToProps)(AppWithNavigationState);
","Generate the React Native code for connecting a Redux store to a React Navigation application, allowing for navigation state management and access to Redux state within the application."
"/** @jsx h */
/* eslint-disable react/jsx-key */

import Html from '../..'
import React from 'react'
import h from '../../test/helpers/h'
import parse5 from 'parse5' // eslint-disable-line import/no-extraneous-dependencies

const html = new Html({
  parseHtml: parse5.parseFragment,
  rules: [
    {
      serialize(obj, children) {
        switch (obj.kind) {
          case 'block': {
            switch (obj.type) {
              case 'paragraph': return React.createElement('p', {}, children)
              case 'quote': return React.createElement('blockquote', {}, children)
            }
          }
          case 'mark': {
            switch (obj.type) {
              case 'bold': return React.createElement('strong', {}, children)
              case 'italic': return React.createElement('em', {}, children)
            }
          }
        }
      }
    }
  ]
})

export default function (state) {
  html.serialize(state)
}

export const input = (
  <state>
    <document>
      {Array.from(Array(10)).map(() => (
        <quote>
          <paragraph>
            This is editable <b>rich</b> text, <i>much</i> better than a textarea!
          </paragraph>
        </quote>
      ))}
    </document>
  </state>
)
",Describe a React code snippet that can render HTML nodes from a Slate editor state as React elements.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let MapsEditLocation = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 2C8.14 2 5 5.14 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.86-3.14-7-7-7zm-1.56 10H9v-1.44l3.35-3.34 1.43 1.43L10.44 12zm4.45-4.45l-.7.7-1.44-1.44.7-.7c.15-.15.39-.15.54 0l.9.9c.15.15.15.39 0 .54z""/>
  </SvgIcon>
);
MapsEditLocation = pure(MapsEditLocation);
MapsEditLocation.displayName = 'MapsEditLocation';

export default MapsEditLocation;
",Generate an SVG icon React component using Styled Components for the MapsEditLocation icon from Google's Material Design icon set.
"import React from 'react'
import { Image, List } from 'shengnian-ui-react'

const ListExampleRelaxed = () => (
  <List relaxed>
    <List.Item>
      <Image avatar src='/assets/images/avatar/small/daniel.jpg' />
      <List.Content>
        <List.Header as='a'>Daniel Louise</List.Header>
        <List.Description>Last seen watching <a><b>Arrested Development</b></a> just now.</List.Description>
      </List.Content>
    </List.Item>
    <List.Item>
      <Image avatar src='/assets/images/avatar/small/stevie.jpg' />
      <List.Content>
        <List.Header as='a'>Stevie Feliciano</List.Header>
        <List.Description>Last seen watching <a><b>Bob's Burgers</b></a> 10 hours ago.</List.Description>
      </List.Content>
    </List.Item>
    <List.Item>
      <Image avatar src='/assets/images/avatar/small/elliot.jpg' />
      <List.Content>
        <List.Header as='a'>Elliot Fu</List.Header>
        <List.Description>Last seen watching <a><b>The Godfather Part 2</b></a> yesterday.</List.Description>
      </List.Content>
    </List.Item>
  </List>
)

export default ListExampleRelaxed
","Create a React component that displays a list of people with their avatars, names, and a description of what they were last watching. Use the ""shengnian-ui-react"" library for styling."
"import React from 'react';
import ScrollBehavior from 'scroll-behavior';

import ScrollBehaviorContext from './ScrollBehaviorContext';

function defaultCreateScrollBehavior(config) {
  return new ScrollBehavior(config);
}

export default function useScroll(shouldUpdateScrollOrConfig) {
  let shouldUpdateScroll;
  let createScrollBehavior;

  if (
    !shouldUpdateScrollOrConfig ||
    typeof shouldUpdateScrollOrConfig === 'function'
  ) {
    shouldUpdateScroll = shouldUpdateScrollOrConfig;
    createScrollBehavior = defaultCreateScrollBehavior;
  } else {
    ({
      shouldUpdateScroll,
      createScrollBehavior = defaultCreateScrollBehavior,
    } = shouldUpdateScrollOrConfig);
  }

  return {
    renderRouterContext: (child, props) => (
      <ScrollBehaviorContext
        shouldUpdateScroll={shouldUpdateScroll}
        createScrollBehavior={createScrollBehavior}
        routerProps={props}
      >
        {child}
      </ScrollBehaviorContext>
    ),
  };
}
","Generate a React hook that handles scroll behavior in a React Router application. The hook should provide a context that allows components to interact with the scroll behavior. The hook should accept an optional configuration object that provides a function to determine when scroll behavior should be updated and a function to create the scroll behavior. If the configuration object is not provided, the hook should use default values for these functions."
"import ArticleSubheaderContainer from '@economist/component-articletemplate/lib/subheader';
import React from 'react';
import { defaultGenerateClassNameList } from '@economist/component-variantify';

const extendedSubheaderItemClasses = [
  'margin-l-1',
  'gutter-l',
];
export default function WinSubheader({
  generateClassNameList = defaultGenerateClassNameList,
  sectionName,
  byline,
  publishDate,
}) {
  return (
    <ArticleSubheaderContainer generateClassNameList={generateClassNameList}>
      <h2
        itemProp=""byline""
        className={[
          ...generateClassNameList('article-template__byline'),
          ...extendedSubheaderItemClasses,
        ].join(' ')}
      >
        {byline}
      </h2>
      <time
        itemProp=""publishDate""
        dateTime={publishDate.raw}
        className={[
          ...generateClassNameList('article-template__pubdate'),
          ...extendedSubheaderItemClasses,
        ].join(' ')}
      >
        {publishDate.formatted}
      </time>
      <h2
        itemProp=""section""
        className={[
          ...generateClassNameList('article-template__section-name'),
          ...extendedSubheaderItemClasses,
        ].join(' ')}
      >
        {sectionName}
      </h2>
    </ArticleSubheaderContainer>
  );
}

if (process.env.NODE_ENV !== 'production') {
  WinSubheader.propTypes = {
    generateClassNameList: React.PropTypes.func,
    sectionName: React.PropTypes.string,
    byline: React.PropTypes.string,
    publishDate: React.PropTypes.shape({
      raw: React.PropTypes.string,
      formatted: React.PropTypes.string,
    }),
  };
}
","Create a React component that displays a subheader for an article, consisting of the author byline, the publication date, and the article section name. The component should use CSS classes provided by the `@economist/component-articletemplate` library, with additional custom classes for the byline, publication date, and section name. The component should also handle prop types in a development environment."
"import React from 'react'
import Helmet from 'react-helmet'
import Layout from '../components/layout'

import pic11 from '../assets/images/pic11.jpg'

const Generic = (props) => (
    <Layout>
        <Helmet>
            <title>Generic - Forty by HTML5 UP</title>
            <meta name=""description"" content=""Generic Page"" />
        </Helmet>

        <div id=""main"" className=""alt"">
            <section id=""one"">
                <div className=""inner"">
                    <header className=""major"">
                        <h1>Generic</h1>
                    </header>
                    <span className=""image main""><img src={pic11} alt="""" /></span>
                    <p>Donec eget ex magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Pellentesque venenatis dolor imperdiet dolor mattis sagittis. Praesent rutrum sem diam, vitae egestas enim auctor sit amet. Pellentesque leo mauris, consectetur id ipsum sit amet, fergiat. Pellentesque in mi eu massa lacinia malesuada et a elit. Donec urna ex, lacinia in purus ac, pretium pulvinar mauris. Curabitur sapien risus, commodo eget turpis at, elementum convallis elit. Pellentesque enim turpis, hendrerit.</p>
                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis dapibus rutrum facilisis. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Etiam tristique libero eu nibh porttitor fermentum. Nullam venenatis erat id vehicula viverra. Nunc ultrices eros ut ultricies condimentum. Mauris risus lacus, blandit sit amet venenatis non, bibendum vitae dolor. Nunc lorem mauris, fringilla in aliquam at, euismod in lectus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. In non lorem sit amet elit placerat maximus. Pellentesque aliquam maximus risus, vel sed vehicula.</p>
                    <p>Interdum et malesuada fames ac ante ipsum primis in faucibus. Pellentesque venenatis dolor imperdiet dolor mattis sagittis. Praesent rutrum sem diam, vitae egestas enim auctor sit amet. Pellentesque leo mauris, consectetur id ipsum sit amet, fersapien risus, commodo eget turpis at, elementum convallis elit. Pellentesque enim turpis, hendrerit tristique lorem ipsum dolor.</p>
                </div>
            </section>
        </div>

    </Layout>
)

export default Generic","Compose the HTML, CSS, and JavaScript code, along with React components and libraries, to create a static generic page that utilizes images, text, a header with navigation, and overall consistent styling."
"import React from 'react'

import MD from './MD'
import Header from './Header'
import SessionTitle from './SessionTitle'

const Session = (session) =>
  <div>
    <Header><SessionTitle {...session} /></Header>
    <h2>Agenda</h2>
    {MD(session.agenda)}
  </div>

export default Session

","Create a React component that displays a session's details, including the session title, agenda, and any other relevant information. The component should be visually appealing and easy to read."
"import React from 'react';

class Announcements extends React.Component {
  render () {
    return (
      <div>
        <h3>Announcements</h3>
        {this.props.children || <p>Choose an announcement from the sidebar.</p>}
      </div>
    );
  }

}

export default Announcements;

","Generate a React class component called Announcements.
It should render a <h3> tag with the text ""Announcements"".
If there is a children prop, it should be rendered, otherwise render a <p> tag with the text ""Choose an announcement from the sidebar"".
Lastly, export the component."
"import React from 'react';
import Document, { Head, Main, NextScript } from 'next/document';
import { ServerStyleSheet } from 'styled-components';
import Analytics from '~/templates/global/Analytics';

export default class PageTemplate extends Document {
  render() {
    const stylesheet = new ServerStyleSheet();
    const main = stylesheet.collectStyles(<Main />);
    const styleTags = stylesheet.getStyleElement();

    return (
      <html lang=""en"">
        <Head>
          <meta charSet=""UTF-8"" />
          <meta name=""viewport"" content=""initial-scale=1.0, width=device-width"" />
          <meta name=""og:locale"" property=""og:locale"" content=""en_US"" />
          <link href=""https://fonts.googleapis.com/css?family=Inconsolata:400|PT+Sans:400,700"" rel=""stylesheet"" />
          <link rel=""icon"" type=""image/png"" sizes=""32x32"" href=""/images/favicon-32x32.png"" />
          <link rel=""icon"" type=""image/png"" sizes=""16x16"" href=""/images/favicon-16x16.png"" />
          <meta name=""twitter:card"" content=""summary"" />
          <meta name=""twitter:site"" content=""@popmotionjs"" />
          <link rel=""shortcut icon"" href=""/images/favicon.ico"" />
          {styleTags}
          <Analytics />
        </Head>
        <body id=""root"">
          {main}
          <NextScript />
        </body>
      </html>
    );
  }
}
","Create a React component template that includes head elements for font linking, meta tags for viewport, Twitter metadata, Google Analytics, icons, and collects styles using `styled-components`."
"import React from 'react';
import { withStyles } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import InboxIcon from '@material-ui/icons/MoveToInbox';
import DraftsIcon from '@material-ui/icons/Drafts';
import SendIcon from '@material-ui/icons/Send';

const StyledMenu = withStyles({
  paper: {
    border: '1px solid #d3d4d5',
  },
})((props) => (
  <Menu
    elevation={0}
    getContentAnchorEl={null}
    anchorOrigin={{
      vertical: 'bottom',
      horizontal: 'center',
    }}
    transformOrigin={{
      vertical: 'top',
      horizontal: 'center',
    }}
    {...props}
  />
));

const StyledMenuItem = withStyles((theme) => ({
  root: {
    '&:focus': {
      backgroundColor: theme.palette.primary.main,
      '& .MuiListItemIcon-root, & .MuiListItemText-primary': {
        color: theme.palette.common.white,
      },
    },
  },
}))(MenuItem);

export default function CustomizedMenus() {
  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <div>
      <Button
        aria-controls=""customized-menu""
        aria-haspopup=""true""
        variant=""contained""
        color=""primary""
        onClick={handleClick}
      >
        Open Menu
      </Button>
      <StyledMenu
        id=""customized-menu""
        anchorEl={anchorEl}
        keepMounted
        open={Boolean(anchorEl)}
        onClose={handleClose}
      >
        <StyledMenuItem>
          <ListItemIcon>
            <SendIcon fontSize=""small"" />
          </ListItemIcon>
          <ListItemText primary=""Sent mail"" />
        </StyledMenuItem>
        <StyledMenuItem>
          <ListItemIcon>
            <DraftsIcon fontSize=""small"" />
          </ListItemIcon>
          <ListItemText primary=""Drafts"" />
        </StyledMenuItem>
        <StyledMenuItem>
          <ListItemIcon>
            <InboxIcon fontSize=""small"" />
          </ListItemIcon>
          <ListItemText primary=""Inbox"" />
        </StyledMenuItem>
      </StyledMenu>
    </div>
  );
}
","Design a React component with a button that, when clicked, displays a menu of options to the user. The menu should have a border style and should open below and centered to the button. It should include three options, each with a different icon and text label, and when clicked, the menu should close."
"import React from 'react';


export class InputSSN extends React.Component {

	static propTypes = {
		onChange: React.PropTypes.func,
		value: React.PropTypes.string,
		name: React.PropTypes.string
	};

	onChange = (e) => {
		e.target.value = e.target.value.replace('-', '');
		e.target.value = e.target.value.replace('-', '');
		e.target.value = e.target.value.slice(0, 9);
		this.props.onChange(e);
	}

	render() {

		let ssn = this.props.value;

		if (ssn.length > 2) {
			ssn = ssn.slice(0,3) + '-' + ssn.slice(3);
		}

		if (ssn.length > 5) {
			ssn = ssn.slice(0,6) + '-' + ssn.slice(6);
		}		

		return <input type=""text"" name={this.props.name} value={ssn} onChange={this.onChange} />;

	}

}",Create a React component that takes a Social Security Number as input and formats it with dashes in the correct positions. The component should handle user input and update the displayed value accordingly.
"import React from 'react';

import {createSafexAddress, verify_safex_address, structureSafexKeys} from '../../utils/migration';
import {openMigrationAlert, closeMigrationAlert} from '../../utils/modals';

const fs = window.require('fs');
import {encrypt} from ""../../utils/utils"";
import MigrationAlert from ""../migration//partials/MigrationAlert"";

var swg = window.require('safex-addressjs');
const fileDownload = require('react-file-download');

//Set the Safex Address
export default class Migrate2 extends React.Component {
    constructor(props) {
        super(props);
        this.state =
            {
                loading: true,
                status_text: """",
                create_address: false,
                safex_address: """",
                safex_spend_pub: """",
                safex_spend_sec: """",
                safex_view_pub: """",
                safex_view_sec: """",
                safex_checksum: """",
                safex_key: {},
                safex_keys: {},
                migration_alert: false,
                migration_alert_text: '',
                all_field_filled: false,
                used_addresses: false,
                existing_addresses: false,
            };

        this.setSafexAddress = this.setSafexAddress.bind(this);
        this.createSafexKey = this.createSafexKey.bind(this);
        this.saveSafexKeys = this.saveSafexKeys.bind(this);
        this.setYourKeys = this.setYourKeys.bind(this);
        this.selectKey = this.selectKey.bind(this);
        this.setOpenMigrationAlert = this.setOpenMigrationAlert.bind(this);
        this.setCloseMigrationAlert = this.setCloseMigrationAlert.bind(this);
        this.startOver = this.startOver.bind(this);
        this.checkFields = this.checkFields.bind(this);
        this.usedAddresses = this.usedAddresses.bind(this);
        this.existingAddresses = this.existingAddresses.bind(this);
        this.exportNewWalletAddress = this.exportNewWalletAddress.bind(this);
    }

    componentDidMount() {
        try {
            var json = JSON.parse(localStorage.getItem('wallet'));
        } catch (e) {
            this.setOpenMigrationAlert('Error parsing the wallet data.');
        }
        this.setState({
            safex_keys: json.safex_keys,
            loading: false
        })
    }

    setSafexAddress(e) {
        e.preventDefault();
    }

    //generates a new random safex key set
    createSafexKey() {
        this.setState({create_address: true, loading: true});

        const safex_keys = createSafexAddress();
        localStorage.setItem('new_wallet_address', JSON.stringify(safex_keys));

        this.setState({
            safex_key: safex_keys,
            safex_address: safex_keys.public_addr,
            safex_spend_pub: safex_keys.spend.pub,
            safex_spend_sec: safex_keys.spend.sec,
            safex_view_pub: safex_keys.view.pub,
            safex_view_sec: safex_keys.view.sec,
            loading: false,
        });
    }

    //use this after safex keys were generated
    saveSafexKeys() {
        //in here do the logic for modifying the wallet file data info
        try {
            var json = JSON.parse(localStorage.getItem('wallet'));
        } catch (e) {
            this.setOpenMigrationAlert('Error parsing the wallet data.');
        }

        if (json.hasOwnProperty('safex_keys')) {
            json['safex_keys'].push(this.state.safex_key);
        } else {
            json['safex_keys'] = [];
            json['safex_keys'].push(this.state.safex_key);
        }

        var index = -1;

        for (var key in json.keys) {
            if (json.keys[key].public_key === this.props.data.address) {
                index = key;
                json.keys[key]['migration_data'] = {};
                json.keys[key]['migration_data'].safex_keys = this.state.safex_key;
                json.keys[key].migration_progress = 2;

            }
        }

        var algorithm = 'aes-256-ctr';
        var password = localStorage.getItem('password');
        var cipher_text = encrypt(JSON.stringify(json), algorithm, password);

        fs.writeFile(localStorage.getItem('wallet_path'), cipher_text, (err) => {
            if (err) {
                console.log('Problem communicating to the wallet file.');
                this.setOpenMigrationAlert('Problem communicating to the wallet file.');
            } else {
                try {
                    localStorage.setItem('wallet', JSON.stringify(json));
                    var json2 = JSON.parse(localStorage.getItem('wallet'));
                    console.log(json2.keys[index].migration_data);
                    this.exportNewWalletAddress();
                    this.props.setMigrationProgress(2);
                } catch (e) {
                    console.log(e);
                    this.setOpenMigrationAlert('An error adding a key to the wallet. Please contact team@safex.io');
                }
            }
        });
    }

    //use this if the keys are provided by the user
    setYourKeys(e) {
        e.preventDefault();
        if (e.target.spend_key.value === '' || e.target.view_key.value === '' || e.target.safex_address.value === '') {
            this.setOpenMigrationAlert('Fill out all the fields');
        } else {

            let duplicate = false;

            //here check for duplicates
            for (var key in this.state.safex_keys) {
                console.log(this.state.safex_keys[key].spend.sec)
                if (this.state.safex_keys[key].spend.sec === e.target.spend_key.value &&
                    this.state.safex_keys[key].view.sec === e.target.view_key.value &&
                    this.state.safex_keys[key].public_addr === e.target.safex_address.value) {
                    duplicate = true;
                    console.log(""duplicate detected"")
                }
            }



            if (verify_safex_address(e.target.spend_key.value,
                e.target.view_key.value,
                e.target.safex_address.value)) {
                const safex_keys = structureSafexKeys(e.target.spend_key.value, e.target.view_key.value);

                try {
                    var json = JSON.parse(localStorage.getItem('wallet'));
                } catch (e) {
                    console.log('Error parsing the wallet data.');
                    this.setOpenMigrationAlert('Error parsing the wallet data.');
                }
                if (json.hasOwnProperty('safex_keys') && duplicate === false) {
                    json['safex_keys'].push(safex_keys);
                } else if (duplicate === false) {
                    json['safex_keys'] = [];
                    json['safex_keys'].push(safex_keys);
                }

                var index = -1;

                for (var key in json.keys) {
                    if (json.keys[key].public_key === this.props.data.address) {
                        index = key;
                        json.keys[key]['migration_data'] = {};
                        json.keys[key]['migration_data'].safex_keys = safex_keys;
                        json.keys[key].migration_progress = 2;
                    }
                }

                var algorithm = 'aes-256-ctr';
                var password = localStorage.getItem('password');
                var cipher_text = encrypt(JSON.stringify(json), algorithm, password);

                fs.writeFile(localStorage.getItem('wallet_path'), cipher_text, (err) => {
                    if (err) {
                        console.log('Problem communicating to the wallet file.');
                        this.setOpenMigrationAlert('Problem communicating to the wallet file.');
                    } else {
                        try {
                            localStorage.setItem('wallet', JSON.stringify(json));
                            this.setState({
                                safex_key: safex_keys,
                                safex_address: safex_keys.public_addr,
                                safex_spend_pub: safex_keys.spend.pub,
                                safex_spend_sec: safex_keys.spend.sec,
                                safex_view_pub: safex_keys.view.pub,
                                safex_view_sec: safex_keys.view.sec,
                                loading: false,
                            });
                            this.props.setMigrationProgress(2);
                        } catch (e) {
                            console.log(e);
                            this.setOpenMigrationAlert('An error adding a key to the wallet. Please contact team@safex.io');
                        }
                    }
                });
            } else {
                console.log('Incorrect keys');
                this.setOpenMigrationAlert('Incorrect keys or duplicate');
            }
        }
    }

    //use this for selected key from dropdown menu
    selectKey(e) {
        e.preventDefault();
        if (e.target.address_selection.value.length > 0) {
            try {
                var json = JSON.parse(localStorage.getItem('wallet'));
            } catch (e) {
                console.log('Error parsing the wallet data.');
                this.setOpenMigrationAlert('Error parsing the wallet data.');
            }

            var key_index = -1;
            var x_index = -1;

            for (var key in json.keys) {
                if (json.keys[key].public_key === this.props.data.address) {
                    key_index = key;
                    for (var x_key in json.safex_keys) {
                        if (json.safex_keys[x_key].public_addr === e.target.address_selection.value) {
                            x_index = x_key;
                            json.keys[key_index]['migration_data'] = {};
                            json.keys[key_index]['migration_data'].safex_keys = json.safex_keys[x_index];
                            json.keys[key_index].migration_progress = 2;
                        }
                    }
                }
            }

            if (x_index != -1 && key_index != -1) {
                var algorithm = 'aes-256-ctr';
                var password = localStorage.getItem('password');
                var cipher_text = encrypt(JSON.stringify(json), algorithm, password);

                fs.writeFile(localStorage.getItem('wallet_path'), cipher_text, (err) => {
                    if (err) {
                        this.setOpenMigrationAlert('Problem communicating to the wallet file.');
                    } else {
                        try {
                            localStorage.setItem('wallet', JSON.stringify(json));
                            var json2 = JSON.parse(localStorage.getItem('wallet'));
                            this.setState({
                                safex_key: json2.safex_keys[x_index],
                                safex_address: json2.safex_keys[x_index].public_addr,
                                safex_spend_pub: json2.safex_keys[x_index].spend.pub,
                                safex_spend_sec: json2.safex_keys[x_index].spend.sec,
                                safex_view_pub: json2.safex_keys[x_index].view.pub,
                                safex_view_sec: json2.safex_keys[x_index].view.sec,
                                loading: false,
                            });
                            this.props.setMigrationProgress(2);
                        } catch (e) {
                            console.log(e);
                            this.setOpenMigrationAlert('An error adding a key to the wallet. Please contact team@safex.io');
                        }
                    }
                });
            } else {
                console.log('Key does not exist');
                this.setOpenMigrationAlert('Key does not exist');
            }
        } else {
            console.log('No key from your list has been selected');
            this.setOpenMigrationAlert('No key from your list has been selected');
        }
    }

    startOver() {
        this.setState({
            create_address: false,
            used_addresses: false,
            existing_addresses: false,
            all_field_filled: false,
        })
    }

    setOpenMigrationAlert(message) {
        openMigrationAlert(this, message);
    }

    setCloseMigrationAlert() {
        closeMigrationAlert(this);
    }

    checkFields() {
        var safex_address = document.getElementById('safex_address').value;
        var spend_key = document.getElementById('spend_key').value;
        var view_key = document.getElementById('view_key').value;

        if (safex_address !== '' && spend_key !== '' && view_key !== '') {
            this.setState({
                all_field_filled: true
            })
        } else {
            this.setState({
                all_field_filled: false
            })
        }
    }

    usedAddresses() {
        this.setState({
            used_addresses: true
        })
    }

    existingAddresses() {
        this.setState({
            existing_addresses: true
        })
    }

    exportNewWalletAddress() {
        var wallet_data = JSON.parse(localStorage.getItem('new_wallet_address'));
        var new_wallet = """";

        new_wallet += ""Public address: "" + wallet_data.public_addr + '\n';
        new_wallet += ""Spendkey "" + '\n';
        new_wallet += ""pub: "" + wallet_data.spend.pub + '\n';
        new_wallet += ""sec: "" + wallet_data.spend.sec + '\n';
        new_wallet += ""Viewkey "" + '\n';
        new_wallet += ""pub: "" + wallet_data.view.pub + '\n';
        new_wallet += ""sec: "" + wallet_data.view.sec + '\n';
        var date = Date.now();

        fileDownload(new_wallet, date + 'new_wallet_address.txt');
    }

    render() {
        var options = [];
        if (this.state.safex_keys) {
            Object.keys(this.state.safex_keys).map(key => {
                options.push(
                    <option
                        key={key}
                        value={this.state.safex_keys[key].public_addr}>
                        {this.state.safex_keys[key].public_addr}
                    </option>)
            });
        }

        return (
            <div>
                <p>Step 2/4 - Selecting The Safex Key</p>
                {
                    this.state.create_address
                        ?
                        <div>
                            <div className=""set-your-key-head"">
                                <div className=""set-your-key-left"">
                                    <img src=""images/migration/cube.png"" alt=""New Key""/>
                                </div>
                                <div className=""set-your-key-right"">
                                    <h3 className=""green-text"">Migrate to new Safex address</h3>
                                </div>
                            </div>
                            <p className=""red-text"">
                                The following wallet information is to control your coins, do not share it. <br/>
                                Sharing this information can and will result in total loss of your Safex Tokens and
                                Safex Cash.<br/>
                                Keep this information safe at all times!
                            </p>
                            <p>Wallet Address</p>
                            <input type=""text"" className=""new-address-input"" defaultValue={this.state.safex_address} />
                            {/* <p>{this.state.safex_address}</p> */}
                            <p>Spend Key</p>
                            <p>public: {this.state.safex_spend_pub}</p>
                            <p>secret: {this.state.safex_spend_sec}</p>
                            <p>View key</p>
                            <p>public: {this.state.safex_view_pub}</p>
                            <p>secret: {this.state.safex_view_sec}</p>

                            <button className=""button-shine"" onClick={this.startOver}>Go back</button>
                            <button className=""button-shine green-btn"" onClick={this.saveSafexKeys}>Back up my Safex
                                Keys and continue
                            </button>
                        </div>
                        :
                        <div>
                            {
                                this.state.used_addresses
                                    ?
                                    <div>
                                        <div className=""set-your-key-head"">
                                            <div className=""set-your-key-left"">
                                                <img src=""images/migration/my-keys.png"" alt=""My Keys""/>
                                            </div>
                                            <div className=""set-your-key-right"">
                                                <h3 className=""purple-text"">Your previously used Safex addresses</h3>
                                            </div>
                                        </div>
                                        <form className=""previuously-used-form"" onSubmit={this.selectKey}>
                                            <select name=""address_selection"">
                                                {options}
                                            </select>
                                            <button className=""button-shine green-btn"">Set address</button>
                                        </form>
                                        <button className=""button-shine"" onClick={this.startOver}>Go back</button>
                                    </div>
                                    :
                                    <div>
                                        {
                                            this.state.existing_addresses
                                                ?
                                                <div>
                                                    <div className=""set-your-key-head"">
                                                        <div className=""set-your-key-left"">
                                                            <img src=""images/migration/enter-key.png"" alt=""Enter Key""/>
                                                        </div>
                                                        <div className=""set-your-key-right"">
                                                            <h3 className=""blue-text"">Migration using my existing Safex
                                                                address</h3>
                                                        </div>
                                                    </div>

                                                    <form onSubmit={this.setYourKeys}>
                                                        <div className=""form-group"">
                                                            <input className=""col-xs-8"" name=""safex_address""
                                                                   placeholder=""Safex address"" id=""safex_address""
                                                                   onChange={this.checkFields}/>
                                                            <label className=""col-xs-4 col-form-label""
                                                                   htmlFor=""safex_address"">If you already have Safex
                                                                address, enter it here</label>
                                                        </div>
                                                        <div className=""form-group"">
                                                            <input className=""col-xs-8"" name=""spend_key""
                                                                   placeholder=""Secret spend key"" id=""spend_key""
                                                                   onChange={this.checkFields}/>
                                                            <label className=""col-xs-4 col-form-label""
                                                                   htmlFor=""spend_key"">Enter your Safex address secret
                                                                spend key here</label>
                                                        </div>
                                                        <div className=""form-group"">
                                                            <input className=""col-xs-8"" name=""view_key""
                                                                   placeholder=""Secret view key"" id=""view_key""
                                                                   onChange={this.checkFields}/>
                                                            <label className=""col-xs-4 col-form-label""
                                                                   htmlFor=""view_key"">Enter your Safex address secret
                                                                view key here</label>
                                                        </div>

                                                        <button
                                                            className={this.state.all_field_filled ? ""button-shine green-btn"" : ""button-shine""}>Set
                                                            your address
                                                        </button>
                                                    </form>
                                                    <button className=""button-shine"" onClick={this.startOver}>Go back
                                                    </button>
                                                </div>
                                                :
                                                <div className=""address-wrap-inner"">
                                                    <div className=""migrate-btns-wrap"">
                                                        <div className=""col-xs-4 btn-wrap"">
                                                            <button
                                                                className={this.state.create_address ? ""active"" : """"}
                                                                onClick={this.createSafexKey}>
                                                                <img src=""images/migration/cube.png"" alt=""Cube""/>
                                                                <span>New Address</span>
                                                            </button>
                                                            <p>Create new address</p>
                                                        </div>
                                                        <div className=""col-xs-4 btn-wrap"">
                                                            <button className={this.state.my_address ? ""active"" : """"}
                                                                    onClick={this.usedAddresses}>
                                                                <img src=""images/migration/my-keys.png"" alt=""My Keys""/>
                                                                <span>Previously Used</span>
                                                            </button>
                                                            <p>Previously used address</p>
                                                        </div>
                                                        <div className=""col-xs-4 btn-wrap"">
                                                            <button className={this.state.enter_address ? ""active"" : """"}
                                                                    onClick={this.existingAddresses}>
                                                                <img src=""images/migration/enter-key.png""
                                                                     alt=""Enter Key""/>
                                                                <span>My Address</span>
                                                            </button>
                                                            <p>Use My Safex address</p>
                                                        </div>
                                                    </div>
                                                </div>
                                        }
                                    </div>
                            }
                        </div>
                }

                <MigrationAlert
                    migrationAlert={this.state.migration_alert}
                    migrationAlertText={this.state.migration_alert_text}
                    closeMigrationAlert={this.setCloseMigrationAlert}
                />
            </div>
        )
    }
}","Input a prompt to output the code snippet that handles the different methods for setting a Safex address during migration: generating a new address, using a previously used address, or entering an existing Safex address."
"import React from 'react';
import { IndexRoute, Route } from 'react-router';
import { routerActions } from 'react-router-redux';
import { UserAuthWrapper } from 'redux-auth-wrapper';
import Root from './containers/Root';
import Home from './containers/Home';
import Users from './containers/Users';
import Login from './containers/Login';
import Signup from './containers/Signup';
import Profile from './containers/Profile';

const UserIsAuthenticated = UserAuthWrapper({
  authSelector: ({ user }) => user,
  predicate: ({ isAuthenticated }) => isAuthenticated,
  redirectAction: routerActions.replace,
  wrapperDisplayName: 'UserIsAuthenticated',
});

const UserIsNotAuthenticated = UserAuthWrapper({
  authSelector: ({ user }) => user,
  predicate: ({ isAuthenticated }) => !isAuthenticated,
  redirectAction: routerActions.replace,
  wrapperDisplayName: 'UserIsNotAuthenticated',
  failureRedirectPath: (state, ownProps) => ownProps.location.query.redirect || '/',
  allowRedirectBack: false,
});

export default (
  <Route path=""/"" component={Root}>
    <IndexRoute component={Home} />
    <Route path=""/users"" component={Users} />
    <Route path=""/login"" component={UserIsNotAuthenticated((Login))} />
    <Route path=""/signup"" component={UserIsNotAuthenticated(Signup)} />
    <Route path=""/profile"" component={UserIsAuthenticated(Profile)} />
  </Route>
);

// https://github.com/acdlite/redux-router
","Create a React application with the following routing structure:

- Root component (/): contains all other components
- Home component (/): Displays the home page
- Users component (/users): Displays a list of users
- Login component (/login): Allows users to log in
- Signup component (/signup): Allows users to sign up
- Profile component (/profile): Displays the user's profile
- Protect the Profile component by ensuring that the user is authenticated before accessing it."
"import ErrorStore from '../stores/ErrorStore'
import React from 'react'
import Spinner from './Spinner'

export default class ErrorPage extends React.Component {

  constructor() {
    super()
    this.state = ErrorStore.getState()

    this._onChange = () => {
      this.setState(ErrorStore.getState())
    }
  }

  componentDidMount() {
    ErrorStore.listen(this._onChange)
  }

  componentDidUnmount() {
    ErrorStore.unlisten(this._onChange)
  }

  render() {
    return <div className=""page"">

      <Spinner dir=""up"" />

      <h1 className=""with-subtitle"">FilePizza</h1>
      <p className=""subtitle"">
        <strong>{this.state.status}:</strong> {this.state.message}
      </p>

      {this.state.stack
        ? <pre>{this.state.stack}</pre>
        : null}

    </div>
  }

}
","Create a React component that displays an error page with a spinner, a title, a subtitle, and a stack trace if available. The component should listen to a store for state updates and update its state accordingly."
"import React from 'react';
import ReactDOM from 'react-dom';
import { browserHistory } from 'react-router';
import * as Styles from '/imports/modules/styles.js';
import { UpdateResident } from '/imports/api/residents/methods.js';

var DatePicker = require('react-datepicker');
var moment = require('moment');
require('/imports/ui/layouts/react-datepicker.css');

export class ContinuationTableBody extends React.Component {
  constructor(props) {
    super(props);
    this.keyPressed = this.keyPressed.bind(this);
    this.alterPaid = this.alterPaid.bind(this);
    this.submitForm = this.submitForm.bind(this);
    this.changeStartDate = this.changeStartDate.bind(this);
    this.changeEndDate = this.changeEndDate.bind(this);
    this.state = {
      IsPaid: null,
      StartDate: null,
      EndDate: null
     };
   }

  keyPressed(event) {
    if (event.key === ""Enter"") {
      this.submitForm(event);
     }
   }

  submitForm(e) {
    e.preventDefault();
    var startdate = moment.utc().utcOffset(+ 5.5).format('DD-MM-YYYY');
    var enddate = moment.utc().utcOffset(+ 5.5).format('DD-MM-YYYY');
    if (this.state.StartDate !== null) {
      startdate = this.state.StartDate.format('DD-MM-YYYY');
     } else {
      startdate = moment(this.props.bill.StartDate).format('DD-MM-YYYY');
     }
    if (this.state.EndDate !== null) {
      enddate = this.state.EndDate.format('DD-MM-YYYY');
     } else {
        enddate = moment(this.props.bill.EndDate).format('DD-MM-YYYY');
     }
    var paid = $('#IsPaid').is("":checked"");
    if (this.props.resident && this.props.bill) {
      var residentId = this.props.resident._id;
      var data = {
        ResidentId: residentId,
        PaBillId: this.props.bill._id,
        StartDate: startdate,
        EndDate: enddate,
        EditPaContinuationBill: true,
        IsPaid: paid
       }
      UpdateResident.call({ data: data });
      browserHistory.push('/resident-details/' + residentId);
     }
   }

  alterPaid(e) {
    if (e.target.checked) {
      this.setState({ IsPaid: true });
     }
    if (!e.target.checked) {
      this.setState({ IsPaid: false });
     }
   }

  changeStartDate(date) {
    this.setState({ StartDate: date });
   }

  changeEndDate(date) {
    this.setState({ EndDate: date });
   }

  render() {
    var startdate = null;
    var enddate = null;
    var ispaid = null;
    if (this.props.bill !== undefined) {
      ispaid = this.props.bill.IsPaid;
     }
    if (this.state.StartDate !== null) {
      startdate = this.state.StartDate;
     } else {
      startdate = moment.utc().utcOffset(+ 5.5);
     }
    if (this.state.EndDate !== null) {
      enddate = this.state.EndDate;
     } else {
      enddate = moment.utc().utcOffset(+ 5.5);
     }
    return (
      <tbody>
        <tr>
          <th>Start Date</th>
          <td>
            <DatePicker autoFocus=""autofocus"" tabIndex={ 1 } dateFormat=""DD-MM-YYYY"" selected={ startdate } onChange={ this.changeStartDate }/>
          </td>
        </tr>
        <tr>
          <th>End Date</th>
          <td>
            <DatePicker tabIndex={ 1 } dateFormat=""DD-MM-YYYY"" selected={ enddate } onChange={ this.changeEndDate }/>
          </td>
        </tr>
        <tr>
          <th>Is Paid</th>
          <td style={ Styles.PaddingThreeLeft }>
            <input style={ Styles.WidthEightyPaddingZeroLeft } type=""checkbox"" id=""IsPaid"" onKeyDown={ this.keyPressed } onChange={ this.alterPaid } defaultChecked={ ispaid }/>
          </td>
        </tr>
        <tr>
          <th className=""text-center"" colSpan=""2"">
            <a onClick={ this.submitForm } onKeyDown={ this.keyPressed } href="""">Save</a>
          </th>
        </tr>
      </tbody>
    )
   }
 }

ContinuationTableBody.propTypes = {
  bill: React.PropTypes.object,
  resident: React.PropTypes.object
 };
","Create a React component ContinuationTableBody that has the following features:
- It has a table body with 4 rows:
  - Row 1 has a label ""Start Date"" and a date picker that is auto-focused and has a tab index of 1.
  - Row 2 has a label ""End Date"" and a date picker that has a tab index of 1.
  - Row 3 has a label ""Is Paid"" and a checkbox with a tab index of 1.
  - Row 4 has a ""Save"" button that is centered and has a tab index of 1.
- The component has properties for ""bill"" and ""resident"", both of which are objects.
- The component maintains its own state for the ""IsPaid"", ""StartDate"", and ""EndDate"" properties.
- When the ""Save"" button is clicked, the component calls a method called ""UpdateResident"" with the data from the form, including the ""ResidentId"", ""PaBillId"", ""StartDate"", ""EndDate"", ""EditPaContinuationBill"", and ""IsPaid"" properties.
- When the checkbox for ""Is Paid"" is changed, the component updates its own ""IsPaid"" state.
- When the date pickers for ""Start Date"" and ""End Date"" are changed, the component updates its own ""StartDate"" and ""EndDate"" state.
- The component renders the table body with the data from its state and props."
"import React from 'react'
import {Link} from 'react-router'
import Firebase from 'firebase'

import EditImgUrl from './user_img_edit.js'
import CreateClass from './class_new.js'

export default React.createClass({
  contextTypes: {
    user: React.PropTypes.string,
    userid: React.PropTypes.string,
    userinfo: React.PropTypes.object,
    classes: React.PropTypes.object,
    router: React.PropTypes.object.isRequired,
  },

  renderClasses: function(key) {
    return(
      <Classes key={key} details={this.context.classes[key]} router={this.context.router}/>
    )
  },

  filterActive: function(key){
    return this.context.classes[key].active===true
  },

  filterInactive: function(key){
    return this.context.classes[key].active===false
  },

  render: function(){

    return(
      <div className=""container-fluid"">
        <div className=""row"">
          <div className=""col-md-3 imgdiv"">
            <img src={this.context.userinfo.imgurl} className=""profileimage""/>
            <br/>
            <br/>
            <EditImgUrl />
          </div>
          <div className=""col-md-4"">
            <p>Name: <strong>{this.context.userinfo.firstname} {this.context.userinfo.lastname}</strong></p>
            <p>Email: {this.context.userinfo.email}</p>
            <p>Instructor ID: {this.context.userinfo.instructorid}</p>
          </div>
          <div className=""col-md-5"">
            <button type=""button"" className=""btn btn-default btn-lg btn-block""> Create A Blog </button>
            <CreateClass />
          </div>
        </div>
        <hr/>
        <div>
          <div className=""container title"">
            <h3>My Classes</h3>
          </div>
          <div className=""row"">
            <div className=""col-md-6"">
              <h4>Active</h4>
              <div className=""renderclasses"">
                {Object.keys(this.context.classes)
                  .filter(this.filterActive)
                  .map(this.renderClasses)}
              </div>
            </div>
            <div className=""col-md-6"">
              <h4>Inactive</h4>
              <div className=""renderclasses"">
                {Object.keys(this.context.classes)
                  .filter(this.filterInactive)
                  .map(this.renderClasses)}
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }
})

const Classes = React.createClass({
  render: function(){
    return(
      <Link to={`/class/${this.props.details.id}`}>
        <div className=""row container-fluid"">
          <div className=""col-sm-3 borderline"">
            <p><strong>{this.props.details.name}</strong></p>
          </div>
          <div className=""col-sm-3 borderline"">
            <p>{this.props.details.semester} {this.props.details.year}</p>
          </div>
          <div className=""col-sm-6 borderline"">
            <p>{this.props.details.description}</p>
          </div>
        </div>
      </Link>
    )
  }
})
","Generate a React component that displays a user's profile information, including their name, email, and instructor ID, as well as a list of their active and inactive classes. The component should also include buttons for creating a new blog and a new class."
"import _$ from 'jquery';
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import jsdom from 'jsdom';
import chai, { expect } from 'chai';
import chaiJquery from 'chai-jquery';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import reducers from '../src/reducers';

global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
global.window = global.document.defaultView;
global.navigator = global.window.navigator;
const $ = _$(window);

chaiJquery(chai, chai.util, $);

function renderComponent(ComponentClass, props = {}, state = {}) {
  const componentInstance =  TestUtils.renderIntoDocument(
    <Provider store={createStore(reducers, state)}>
      <ComponentClass {...props} />
    </Provider>
  );

  return $(ReactDOM.findDOMNode(componentInstance));
}

$.fn.simulate = function(eventName, value) {
  if (value) {
    this.val(value);
  }
  TestUtils.Simulate[eventName](this[0]);
};

export {renderComponent, expect};
","Create a function that renders a React component into a DOM element, injects a mocked window and document object, and provides a wrapper for simulating events and getting the component's DOM node."
"/* @flow */
import React from 'react';
import Icon from 'mineral-ui/Icon';

import type { IconProps } from 'mineral-ui/Icon/types';

/* eslint-disable prettier/prettier */
export default function IconVerticalAlignTop(props: IconProps) {
  const iconProps = {
    rtl: false,
    ...props
  };

  return (
    <Icon {...iconProps}>
      <g>
        <path d=""M8 11h3v10h2V11h3l-4-4-4 4zM4 3v2h16V3H4z""/>
      </g>
    </Icon>
  );
}

IconVerticalAlignTop.displayName = 'IconVerticalAlignTop';
IconVerticalAlignTop.category = 'editor';
",Describe an accessibility icon for vertical text alignment at the top.
"import React from 'react';
import ReactDOM from 'react-dom';
import './example.css';
import './react-ds.css';
import Examples from './Examples';
import registerServiceWorker from './registerServiceWorker';

ReactDOM.render(<Examples />, document.getElementById('root'));
registerServiceWorker();
","A short React project that imports necessary modules, stylesheets, and components, and renders a component to the DOM using ReactDOM. Additionally, it registers a service worker for offline support."
"/**
 * Created by dengbingyu on 2016/10/28.
 */
require('normalize.css/normalize.css');
require('styles/App.scss');

import React from 'react';
import ReactDOM from 'react-dom';
//获取图片相关的数据
let imageDatas = require('json!../data/imageDatas.json');


imageDatas = ((imageDatasArr)=>{               // 将图片的url加入的图片object数组中
  for(var i=0,len=imageDatasArr.length;i<len;i++){
    let singleImgDate = imageDatasArr[i];
    singleImgDate.imageURL= require('../images/' + singleImgDate.fileName);

    imageDatasArr[i] = singleImgDate;
  }
  return imageDatasArr;
})(imageDatas);

// 拿到一个范围内的随机值
var getRandomPos = (low,high) => Math.floor(Math.random()*(high-low)+low);

// 拿到0-30度角里面的随机角度值
var getRandomRotate = ()=> {
  return (Math.random()>0.5?'':'-') + Math.ceil(Math.random()*30);
};

// 创建单个图片组件
class SingleImgComp extends React.Component {
  constructor(props){
    super(props);
    this.handleClick=this.handleClick.bind(this);     // 坑，为什么呢？
  }
  // 图片翻转点击事件
  handleClick(e){

   this.props.inverse();   // 执行翻转动作

   e.stopPropagation();
   e.preventDefault();
  }
  render(){
    let styleObj = {};   // 样式对象

    if(this.props.arragneStyle.pos){
      styleObj = this.props.arragneStyle.pos;
    }
    if(this.props.arragneStyle.rotate){
      // ['-webkit-','-moz-','-o-',''].forEach((value)=>{
      //   styleObj[value+'transform'] = 'rotate(' + this.props.arragneStyle.rotate + 'deg)';
      // });
      styleObj['transform'] = 'rotate(' + this.props.arragneStyle.rotate + 'deg)';
    }

    var figureClassName = 'img-figure';
    figureClassName += this.props.arragneStyle.isInverse?' is-Inverse':'';
    return (
      <figure className={ figureClassName } style={styleObj} onClick={this.handleClick}>
        <img src={this.props.data.imageURL} alt={this.props.data.title} />
        <figcaption>
          <h2 className=""img-title"">{this.props.data.title}</h2>
          <div className=""img-back"" onClick={this.handleClick}>
            <p>{this.props.data.desc}</p>
          </div>
        </figcaption>
      </figure>
    );
  }
}


class GalleryByReactApp extends React.Component {
  constructor(props){
    super(props);

    this.Constant = {       // 初始化每张图片的坐标范围，用于盛放各个分区的坐标范围
      centerPos: {
        left:0,
        top:0
      },
      hsec:{        // 水平区域坐标
        hLeftSecX:[0,0],                // 水平区域左分区x轴的坐标范围
        hRightSecX:[0,0],               // 水平区域右分区x轴的坐标范围
        hY: [0,0]                      // 水平区域y的取值相同
      },
      vsec:{                           // 垂直方向只有上分区
        leftX: [0,0],
        topY: [0,0]
      }
    };
    this.state = {             // 真正的图片坐标
      imgsArrangeArr: [             // 图片坐标数组
        // {
        //   pos:{
        //     top:0,
        //     left:0
        //   },
        //   rotate:0,
        //   isInverse: false   // 是否翻转
        // }
      ]
    };
  }

  inverse(index){              // 翻转图片的函数
    return () => {
      let imgsArrangeArr = this.state.imgsArrangeArr;
      imgsArrangeArr[index].isInverse = !imgsArrangeArr[index].isInverse;

      this.setState({
        imgsArrangeArr: imgsArrangeArr
      });
    }
  }

  // 布局页面图片的坐标
  rearrange(centerIndex){
    let arrangeImgArr = this.state.imgsArrangeArr,
        Constant = this.Constant,
        centerPos = Constant.centerPos,
        hLeftSecRangeX = Constant.hsec.hLeftSecX,
        hRightSecRangeX = Constant.hsec.hRightSecX,
        hY = Constant.hsec.hY,
        vLeftX = Constant.vsec.leftX,      // 上分区
        vTopY = Constant.vsec.topY;

        // 根据居中图片的下标，插入中心图片的坐标
       let centerImgPosArr = arrangeImgArr.splice(centerIndex,1);  // 取出了中心图片的元素
        centerImgPosArr[0] = {
          pos : centerPos           // 将中心图片的坐标插入,居中的图片不需要旋转
        };

        // 上分区图片位置
        let imgTopArr = [],  //用于放置上分区图片
            topNum = Math.floor(Math.random()*2);   // 上分区图片的个数，0或者1

        let topImgIndex = Math.floor(Math.random()*(arrangeImgArr.length - topNum));   // 随机取出放置在上分区图片的下标
            imgTopArr = arrangeImgArr.splice(topImgIndex,topNum);   // 位于上分区的图片数组

        imgTopArr && imgTopArr.forEach((value,index)=>{     // 填充上分区图片的位置信息
          imgTopArr[index] = {
            pos:{
              top: getRandomPos(vTopY[0],vTopY[1]),
              left: getRandomPos(vLeftX[0],vLeftX[1])
            },
            rotate: getRandomRotate()
          }
        });

    // 左分区和右分区图片位置信息
    for (let i=0,len=arrangeImgArr.length,k=len/2;i<len;i++){
      let secLOR = null;        // 存放左分区或者右分区x的坐标
      if(i<k){   // 左分区
        secLOR = hLeftSecRangeX;
      }else {
        secLOR = hRightSecRangeX;
      }
      arrangeImgArr[i]={
        pos : {
          top: getRandomPos(hY[0],hY[1]),
          left: getRandomPos(secLOR[0],secLOR[1])
        },
        rotate: getRandomRotate()
      }

    }

    //前面分割了arrangeImgArr，取居中和上分区图片元素出来，现在合并进去
    if(imgTopArr && imgTopArr){        // 填充上分区图片位置信息
      arrangeImgArr.splice(topImgIndex,0,imgTopArr[0]);
    }
    arrangeImgArr.splice(centerIndex,0,centerImgPosArr[0]);      // 填充居中图片的位置信息

    this.setState({
      imgsArrangeArr: arrangeImgArr
    });
  }


  componentDidMount(){       // 给初始化的变量赋值
    let stageDom = ReactDOM.findDOMNode(this.refs.stage),   // 舞台dom元素
        stageWidth = stageDom.scrollWidth,   // 舞台宽度
        stageHeight = stageDom.scrollHeight,    // 舞台高度
        halfStageW = Math.ceil(stageWidth / 2),   // 舞台宽一半
        halfStageH = Math.ceil(stageHeight/2);     // 舞台高一半

    let imgFigDom = ReactDOM.findDOMNode(this.refs.imgFigure0),   // 图片的dom元素，因为每张图片的宽高相同，所以这里取imgFigure0
        imgFigWidth = imgFigDom.scrollWidth,         // 图片宽
        imgFigHeight = imgFigDom.scrollHeight,
        halfImgW = Math.ceil(imgFigWidth/2),
        halfImgH = Math.ceil(imgFigHeight/2);

    let centerPos = {                    // 中心图片的坐标
      left: halfStageW - halfImgW,
      top: halfStageH - halfImgH
    };
    this.Constant.centerPos = centerPos;

    // 水平方向--左侧分区x的坐标范围
    this.Constant.hsec.hLeftSecX[0] = - halfImgW;
    this.Constant.hsec.hLeftSecX[1] = halfStageW - halfImgW*3;

    // 水平方向--右侧分区x的坐标范围
    this.Constant.hsec.hRightSecX[0] = halfStageW + halfImgW;
    this.Constant.hsec.hRightSecX[1] = stageWidth - halfImgW;

    // 水平方向--y的取值方位
    this.Constant.hsec.hY[0] = - halfImgH;
    this.Constant.hsec.hY[1] = stageHeight - halfImgH;

    // 垂直方向--上分区x的取值范围
    this.Constant.vsec.leftX[0] = halfStageW - halfImgW;
    this.Constant.vsec.leftX[1] = halfStageW;

    // 垂直方向--上分区y的取值范围
    this.Constant.vsec.topY[0] = -halfImgH;
    this.Constant.vsec.topY[1] = halfStageH - halfImgH*3;

    this.rearrange(0);   // 将第0张图片作为中心图片布局页面
  }

  render(){

    let controllerUtils = [];
    let imgFigures = [];

    imageDatas.forEach((value,index)=>{
      if(!this.state.imgsArrangeArr[index]){      // 如果对应下标中午位置信息，则填充
        this.state.imgsArrangeArr[index] = {
          pos: {
            left:0,
            top:0
          },
          rotate:0,
          isInverse: false          // 默认为正面
        }
      }
      imgFigures.push(<SingleImgComp data={value} arragneStyle={this.state.imgsArrangeArr[index]} inverse={this.inverse(index)} ref={'imgFigure'+index} />)
    });


    return (
      <section className=""stage"" ref=""stage"">
        <section className=""img-sec"">
          {imgFigures}
        </section>
        <nav className=""controller-nav"">
          {controllerUtils}
        </nav>
      </section>
    );
  }
}

GalleryByReactApp.defaultProps = {};

export default GalleryByReactApp;
","Generate the React App code to create a gallery in which each image is displayed within an individual container with a caption and description, and is positioned randomly within the gallery space."
"import 'babel/polyfill';
import React from 'react';
import { render } from 'react-dom';
import injectTapEventPlugin from 'react-tap-event-plugin';
import createHashHistory from 'history/lib/createHashHistory';
import Root from './Root';

/*
  Needed for onTouchTap
  Can go away when react 1.0 release
  Check this repo:
  https://github.com/zilverline/react-tap-event-plugin
*/
injectTapEventPlugin();

render(<Root />, document.getElementById('root'));
",Generate a minimal example to demonstrate rendering a React root page with simple initialization and browser history support.
"import React from 'react'
import ReactDOM from 'react-dom'
import { Provider } from 'react-redux'
import { Router, browserHistory } from 'react-router'
import { syncHistoryWithStore } from 'react-router-redux'
import routes from './routes'
import configureStore from './store/configureStore'
import './styles/app.scss'

const store = configureStore()

const history = syncHistoryWithStore(browserHistory, store)

ReactDOM.render(
  <Provider store={store}>
    <Router history={history} routes={routes} />
  </Provider>,
  document.getElementById('root')
)
",Create a React application with Redux for state management and React Router for routing. Include a custom stylesheet for the application.
"// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import CSSClassnames from '../../../utils/CSSClassnames';
import Intl from '../../../utils/Intl';
import Props from '../../../utils/Props';

const CLASS_ROOT = CSSClassnames.CONTROL_ICON;
const COLOR_INDEX = CSSClassnames.COLOR_INDEX;

export default class Icon extends Component {
  render () {
    const { className, colorIndex } = this.props;
    let { a11yTitle, size, responsive } = this.props;
    let { intl } = this.context;

    const classes = classnames(
      CLASS_ROOT,
      `${CLASS_ROOT}-sync`,
      className,
      {
        [`${CLASS_ROOT}--${size}`]: size,
        [`${CLASS_ROOT}--responsive`]: responsive,
        [`${COLOR_INDEX}-${colorIndex}`]: colorIndex
      }
    );

    a11yTitle = a11yTitle || Intl.getMessage(intl, 'sync');

    const restProps = Props.omit(this.props, Object.keys(Icon.propTypes));
    return <svg {...restProps} version=""1.1"" viewBox=""0 0 24 24"" width=""24px"" height=""24px"" role=""img"" className={classes} aria-label={a11yTitle}><path fill=""none"" stroke=""#000"" strokeWidth=""2"" d=""M5,19 L16,19 C19.866,19 23,15.866 23,12 L23,9 M8,15 L4,19 L8,23 M19,5 L8,5 C4.134,5 1,8.134 1,12 L1,15 M16,1 L20,5 L16,9""/></svg>;
  }
};

Icon.contextTypes = {
  intl: PropTypes.object
};

Icon.defaultProps = {
  responsive: true
};

Icon.displayName = 'Sync';

Icon.icon = true;

Icon.propTypes = {
  a11yTitle: PropTypes.string,
  colorIndex: PropTypes.string,
  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'huge']),
  responsive: PropTypes.bool
};

","Create an SVG icon with a circular arrow and export it as a React component called Icon. The icon should have a 24x24 viewBox, a role of img, and an aria label. The icon should also be accessible with an a11yTitle prop. The component should accept props for className, colorIndex, size, and responsive. The default size should be medium and responsive should default to true."
"import React, { Component } from 'react';
import { reduxForm, Field, propTypes } from 'redux-form';
import loginValidation from './loginValidation';
import ValidationInput from '../ValidationInput/ValidationInput';

@reduxForm({
  form: 'login',
  validate: loginValidation
})
export default class LoginForm extends Component {
  static propTypes = {
    ...propTypes
  };

  render() {
    const { handleSubmit, error } = this.props;

    return (
      <form className=""form-horizontal"" onSubmit={handleSubmit}>
        <Field name=""email"" type=""text"" component={ValidationInput} label=""Email"" />
        <Field name=""password"" type=""password"" component={ValidationInput} label=""Password"" />
        {error && <p className=""text-danger""><strong>{error}</strong></p>}
        <div className=""row"">
          <div className=""col-xs-2"">
            <button className=""btn btn-success"" type=""submit"">
              <i className=""fa fa-sign-in"" />{' '}Log In
            </button>
          </div>
          <div className=""col-xs-10"">
            <a className=""btn btn-warning"" href=""/forgotpassword"">
              Forgot Password
            </a>
          </div>
        </div>
      </form>
    );
  }
}
",Create a React form with validation using redux-form. The form should have two fields: email and password. Use the loginValidation function for validation. Display an error message if there are any validation errors. The form should also have a submit button and a link to a forgot password page.
"import React from 'react';
import NotesList from './NotesList';
import AddNote from './AddNote';

class Notes extends React.Component{
  render(){
    return (
      <div>
        <h3> Notes for {this.props.username} </h3>
        <AddNote username={this.props.username} addNote={this.props.addNote} />
        <NotesList notes={this.props.notes} />
      </div>
    )
  }
};

Notes.propTypes = {
  username: React.PropTypes.string.isRequired,
  notes: React.PropTypes.array.isRequired,
  addNote: React.PropTypes.func.isRequired
};

export default Notes;
","Create a JavaScript class component named ""Notes"" that renders a notes management interface. It should display the user's username and provide an ""Add Note"" form and a list of existing notes. The component should receive props for the username, notes array, and an ""addNote"" function to update the notes."
"import React, { Component } from 'react';

export default class App extends Component {
  render() {
    return (
      <div>React simple starter</div>
    );
  }
}
","Create a React application that displays the text ""React simple starter"" in a div. Use functional components."
"import React from 'react';
import ReduxTableSelect from 'components/Form/NoLabel/ReduxTableSelect';
import MonthRangePicker from 'components/DatePicker/MonthRangePicker';
import {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';
import moment from 'moment';
import Modal from 'react-bootstrap/lib/Modal';
import Button from 'react-bootstrap/lib/Button';
import {connect} from 'react-redux';
import {getCSMInfo} from 'redux/modules/csm';

const styles = {
  header: {
    height: 34,
    position: 'relative'
  },
  Menu: {
    left: 20,
    width: 210,
    float: 'left',
    position: 'relative'
  },
  time: {
    width: 200,
    float: 'left'
  },
  div: {
    float: 'none',
    position: 'relative',
    top: 20,
    width: 1200
  },
  root: {
    backgroundColor: 'white',
    width: '100%',
    minHeight: '660px',
    position: 'absolute'
  }
};

@connect((state) => ({
  csmInfo: state.csm.csmInfo || {},
}), {
  getCSMInfo,
})
export default class CSM extends React.Component {
  static propTypes = {
    name: React.PropTypes.string,
    csmInfo: React.PropTypes.object,
    getCSMInfo: React.PropTypes.func,
  };

  constructor(props) {
    super(props);
    this.state = {
      showTips: false,
      startDate: null,
      endDate: null,
      type: 0,
      defaultStart: null,
      defaultEnd: null,
      tableData: [],
      userNumStart: null, // 规模起始值
      userNumEnd: null // 规模最大值
    };
  }

  componentWillMount() {
    const nowdays = new Date();
    let year = nowdays.getFullYear();
    let month = nowdays.getMonth();
    if ( month === 0) {
      month = 12;
      year = year - 1;
    }
    if (month < 10) {
      month = '0' + month;
    }
    const myDate = new Date(year, month, 0);
    const lastDay = year + '-' + month + '-' + myDate.getDate();
    const end = moment(new Date(lastDay));
    const start = moment(new Date(lastDay)).add(-6, 'months').add(5, 'days');
    const startDate = moment(start).format('YYYY-MM');
    const endDate = moment(end).format('YYYY-MM');
    this.setState({defaultStart: start, defaultEnd: end, startDate: startDate, endDate: endDate});
    this.props.getCSMInfo(this.state.type, startDate, endDate);
  }


  // 时间段变化进行查询
  CSMInfo = (start, end) => {
    this.setState({startDate: start, endDate: end});
    this.props.getCSMInfo(this.state.type, this.state.startDate, this.state.endDate, this.state.userNumStart, this.state.userNumEnd);
  }

  // type 变化进行查询
  changeValue = (type) => {
    this.setState({type: type});
    this.props.getCSMInfo(type, this.state.startDate, this.state.endDate, this.state.userNumStart, this.state.userNumEnd);
  }

  // 规模变化查询
  changeScale = (value) => {
    const getCsmInfo = () => this.props.getCSMInfo(this.state.type, this.state.startDate, this.state.endDate, this.state.userNumStart, this.state.userNumEnd);
    switch (value) {
      case '0':
        this.setState({userNumStart: 1, userNumEnd: 20});
        break;
      case '1':
        this.setState({userNumStart: 21, userNumEnd: 100});
        break;
      case '2':
        this.setState({userNumStart: 101, userNumEnd: 999999});
        break;
      default:
        break;
    }
    // 事件队列 加入最后 等待上面的 setState 完成再执行 不需要使用异步
    setTimeout(getCsmInfo);
  }

  defaultMonthRange = () => {
    return {
      start: this.state.defaultStart,
      end: this.state.defaultEnd
    };
  }

  close = () => {
    this.setState({showTips: false});
  }
  render() {
    const headConfig = this.props.csmInfo.titles || [];
    const tableData = this.props.csmInfo.rows || [];
    const tableOption = {
      noDataText: '无数据'
    };
    const options = [
      {value: '0', label: '客户总使用次数'},
      {value: '1', label: '客户当月活跃人数'},
      {value: '2', label: '人均使用次数'}
    ];
    const scaleOptions = [
      {value: '0', label: '1 ~ 20人'},
      {value: '1', label: '21 ~ 100人'},
      {value: '2', label: '100人以上'}
    ];
    return (
      <div style={styles.root}>
        <div style={styles.header}>
          <div style={styles.Menu}>
            <ReduxTableSelect getInfo={this.changeValue} name=""csm"" options={options} defaultValue=""0""/>
          </div>
          {
            <div style={styles.Menu}>
              <ReduxTableSelect getInfo={this.changeScale} name=""scale"" options={scaleOptions} placeholder=""请选择客户规模""/>
            </div>
          }
          <div style={styles.Menu}>
            <MonthRangePicker onSelect={this.CSMInfo} defaultValue={this.defaultMonthRange()}/>
          </div>
        </div>
        <div style={styles.div}>
          <BootstrapTable options={tableOption} bodyStyle={{height: 530, overflow: 'auto'}} data={tableData} headerStyle={{background: '#e6e7e8'}}>
            <TableHeaderColumn dataField=""support_mananger_name"" isKey width=""100"">客成经理</TableHeaderColumn>
            {
              headConfig.map((item, index) => <TableHeaderColumn key={index} dataField={item.title} dataSort width=""100"">{item.title}</TableHeaderColumn>)
            }
          </BootstrapTable>
        </div>
        <Modal show={this.state.showTips} onHide={this.close}>
          <Modal.Header closeButton>
            <Modal.Title>请选择结单状态</Modal.Title>
          </Modal.Header>

          <Modal.Body >
            您选择的时间范围有误,时间范围必须在6-12个月之间,请重新选择!
          </Modal.Body>

          <Modal.Footer>
            <Button onClick={this.close}>关闭</Button>
          </Modal.Footer>
        </Modal>
      </div>
    );
  }
}
","Generate a React component that displays a table of data. The component should have a header with a dropdown menu to select the type of data to display, a dropdown menu to select the scale of the data, and a month range picker to select the time period of the data. The component should also have a button to trigger a modal that displays a message."
"import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

import {
  baseColor,
  black,
} from '../../variables';

const FormError = styled.span`
  margin: 0;
  padding: 0.5em 1em;
  font-size: 0.8em;
  font-family: $text-font-stack;
  float: left;
  color: ${baseColor};
  width: 100%;
`;

const FormWarning = styled.span`
  margin: 0;
  padding: 0.5em 1em;
  font-size: 0.8em;
  font-family: $text-font-stack;
  float: left;
  color: ${black};
  width: 100%;
`;

export function ErrorMessage(props) {
  return (
    <FormError>
      <strong>{props.error}</strong>
    </FormError>
  );
}

ErrorMessage.propTypes = {
  error: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
};

export function WarningMessage(props) {
  return (
    <FormWarning>
      <strong>{props.warning}</strong>
    </FormWarning>
  );
}

WarningMessage.propTypes = {
  warning: PropTypes.string,
};
",Create an error message and warning message component that take a string as an argument and display it using specific styling.
"import React from 'react';
import ReactDOM from 'react-dom';
import Todo from './components/todo';
import csss from './style/main.css';

ReactDOM.render(
  <Todo>
  </Todo>,
  document.querySelector('#app')
);","Generate the React code to render a simple Todo component with no props in the document element with id 'app', using a separate CSS file for styles."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NotificationMore = (props) => (
  <SvgIcon {...props}>
    <path d=""M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.97.89 1.66.89H22c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 13.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm5 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm5 0c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z""/>
  </SvgIcon>
);
NotificationMore = pure(NotificationMore);
NotificationMore.displayName = 'NotificationMore';
NotificationMore.muiName = 'SvgIcon';

export default NotificationMore;
","Create a React component to render an SVG icon that displays a bell with three dots inside, and export it as NotificationMore."
"/* @flow */

import React from 'react';

import invariant from 'fbjs/lib/invariant';

import AnimatedValueSubscription from './AnimatedValueSubscription';

import type {
  NavigationSceneRendererProps,
} from '../TypeDefinition';

type Props = NavigationSceneRendererProps;

const MIN_POSITION_OFFSET = 0.01;

/**
 * Create a higher-order component that automatically computes the
 * `pointerEvents` property for a component whenever navigation position
 * changes.
 */
export default function create(
  Component: ReactClass<*>,
): ReactClass<*> {
  class Container extends React.Component<any, Props, any> {
    _component: any;
    _onComponentRef: (view: any) => void;
    _onPositionChange: (data: {value: number}) => void;
    _pointerEvents: string;
    _positionListener: ?AnimatedValueSubscription;

    props: Props;

    constructor(props: Props, context: any) {
      super(props, context);
      this._pointerEvents = this._computePointerEvents();
    }

    componentWillMount(): void {
      this._onPositionChange = this._onPositionChange.bind(this);
      this._onComponentRef = this._onComponentRef.bind(this);
    }

    componentDidMount(): void {
      this._bindPosition(this.props);
    }

    componentWillUnmount(): void {
      this._positionListener && this._positionListener.remove();
    }

    componentWillReceiveProps(nextProps: Props): void {
      this._bindPosition(nextProps);
    }

    render() {
      this._pointerEvents = this._computePointerEvents();
      return (
        <Component
          {...this.props}
          pointerEvents={this._pointerEvents}
          onComponentRef={this._onComponentRef}
        />
      );
    }

    _onComponentRef(component: any): void {
      this._component = component;
      if (component) {
        invariant(
          typeof component.setNativeProps === 'function',
          'component must implement method `setNativeProps`',
        );
      }
    }

    _bindPosition(props: NavigationSceneRendererProps): void {
      this._positionListener && this._positionListener.remove();
      this._positionListener = new AnimatedValueSubscription(
        props.position,
        this._onPositionChange,
      );
    }

    _onPositionChange(): void {
      if (this._component) {
        const pointerEvents = this._computePointerEvents();
        if (this._pointerEvents !== pointerEvents) {
          this._pointerEvents = pointerEvents;
          this._component.setNativeProps({ pointerEvents });
        }
      }
    }

    _computePointerEvents(): string {
      const {
        navigationState,
        position,
        scene,
      } = this.props;

      if (scene.isStale || navigationState.index !== scene.index) {
        // The scene isn't focused.
        return scene.index > navigationState.index ?
          'box-only' :
          'none';
      }

      const offset = position.__getAnimatedValue() - navigationState.index;
      if (Math.abs(offset) > MIN_POSITION_OFFSET) {
        // The positon is still away from scene's index.
        // Scene's children should not receive touches until the position
        // is close enough to scene's index.
        return 'box-only';
      }

      return 'auto';
    }
  }
  return Container;
}
",Create a component that takes a React component and automatically computes the `pointerEvents` property for the component whenever the navigation position changes.
"import React from 'react';
import { css } from 'glamor';
import Text from './Text';

const styles = {
  container: css({
    background: '#fff',
    width: '100vw',
    paddingBottom: '2em',
    alignItems: 'center',
    '@media(max-width: 720px)': {
      alignSelf: 'auto',
    },
  }),
  list: css({
    listStyle: 'none',
    padding: 0,
    maxWidth: '1000px',
    margin: '0 auto',
  }),
  disclaimer: css({
    padding: 0,
    maxWidth: '1000px',
    margin: '30px auto',
    textAlign: 'right',
  }),
  event: css({
    display: 'flex',
    borderTop: '1px solid #333',
    padding: '1em 0 0.5em',
    justifyContent: 'space-around',
    ' div': {},
    ' h2': {
      margin: '0 0 0.3em 0',
      ' span': {
        fontSize: '0.7em',
      },
    },
    ' h3': {
      fontWeight: 'lighter',
      fontSize: '1.3em',
      margin: 0,
    },
  }),
  time: css({
    fontSize: '1.7em',
    paddingLeft: '1.3em',
    whiteSpace: 'nowrap',
  }),
  desc: css({
    width: '100%',
    padding: '0.2em 1.3em',
  }),
};

const eventsList = [
  {
    title: 'Abertura do Teatro e Credenciamento',
    time: '8:00 am',
  },
  {
    title: 'Welcome Coffee',
    time: '8:30 am',
  },
  {
    title: 'Abertura React Brasil',
    time: '9:00 am',
  },
  {
    title: 'Raphael Amorim',
    description: 'Scratching React Fiber',
    time: '9:10 am',
  },
  {
    title: 'Fernando Daciuk',
    description: 'The magic world of tests with Jest',
    time: '9:40 am',
  },
  {
    title: 'Kete Rufino e Christino Milfont',
    description: 'Transformando um front-end legado em uma React SPA',
    time: '10:10 am',
  },
  {
    title: 'Marcelo Camargo',
    description: ""Let's dive into Babel: How everything works"",
    time: '10:35 am',
  },
  {
    title: 'James Baxley',
    description: 'Statically Typing your GraphQL App',
    time: '10:55 am',
  },
  {
    title: 'Desconferência: Fishbowl',
    time: '11:30 am',
  },
  {
    title: 'Almoço',
    time: '12:00 pm',
  },
  {
    title: 'Clara Battesini',
    description: 'MobX: The light side of the force',
    time: '1:30 pm',
  },
  {
    title: 'Henrique Sosa',
    description: 'Gorgeous Apps with React Motion and Animations',
    time: '1:40 pm',
  },
  {
    title: 'João Gonçalves',
    description: 'Show do Milhão React PWA (Caso de Sucesso)',
    time: '1:50 pm',
  },
  {
    title: 'Raphael Costa',
    description:
      'Building the Pipefy mobile app in 3 weeks with React Native, GraphQL and Apollo',
    time: '2:00 pm',
  },
  {
    title: 'Sashko Stubailo',
    description: 'The GraphQL and Apollo stack: connecting everything together',
    time: '2:25 pm',
  },
  {
    title: 'Sebastian Ferrari',
    description: 'Why React is good for business',
    time: '3:05 pm',
  },
  {
    title: 'Coffee Break',
    time: '3:30 pm',
  },
  {
    title: 'Matheus Marsiglio',
    description: 'Isomorphic React + Redux App',
    time: '4:00 pm',
  },
  {
    title: 'Matheus Lima',
    description: 'O que tem de Funcional no React',
    time: '4:25 pm',
  },
  {
    title: 'Keuller Magalhães',
    description: 'React Performance from Scratch',
    time: '4:35 pm',
  },
  {
    title: 'Geisy Domiciano',
    description:
      'Continuos Integration / Continuos Deployment com create-react-app',
    time: '4:45 pm',
  },
  {
    title: 'Sibelius Seraphini',
    description: 'Relay Modern',
    time: '4:55 pm',
  },
  {
    title: 'Desconferência: Fishbowl',
    time: '5:15 pm',
  },
  {
    title: 'Sorteios',
    time: '5:45 pm',
  },
  {
    title: 'Encerramento',
    time: '6:00 pm',
  },
  {
    title: 'AfterParty',
    description: 'Mono Club by An English Thing',
    time: '6:30 pm',
  },
];

const Event = ({ title, time, worksIn = false, worksLink, description }) =>
  <li {...styles.event}>
    <div {...styles.time}>
      {time}
    </div>
    <div {...styles.desc}>
      <h2>
        {title}
        {worksIn &&
          <span>
            {worksIn}
          </span>}
      </h2>
      {description &&
        <h3>
          {description}
        </h3>}
    </div>
  </li>;

const Schedule = ({ events = eventsList }) =>
  <section {...styles.container}>
    <Text title=""Programa"" />
    <ol {...styles.list}>
      {events.map(event => <Event {...event} />)}
    </ol>
    <p {...styles.disclaimer}>Horário sujeito a alteração sem aviso prévio</p>
  </section>;

export default Schedule;
","Generate a React component using Glamor CSS that takes an array of events as props and displays them in a list. Each event should include the event title, time and optionally a description. The event list should also include a disclaimer that the schedule is subject to change without notice."
"/**
 * Asynchronously loads the component for HomePage
 */

import React from 'react';
import loadable from 'utils/loadable';
import LoadingIndicator from 'components/LoadingIndicator';

export default loadable(() => import('./index'), {
  fallback: <LoadingIndicator />,
});
",Generate a React component that lazily loads a component called HomePage. Use the 'loadable' function from the 'utils' package and display a 'LoadingIndicator' component while the HomePage component is loading.
"import React from 'react'
import { Layout, Panel } from 'react-toolbox'
import Header from '../../components/Header'
import './CoreLayout.scss'
import '../../styles/core.scss'
import GlobalMessage from 'components/GlobalMessage'

export const CoreLayout = ({ children }) => (
  <Layout>
    <Panel>
      <Header />
      <GlobalMessage />
      {children}
    </Panel>
  </Layout>
)

export default CoreLayout
","Generate a React component that serves as a page layout for a web application. The component should include a header, a global message area, and a main content area. The component should use the react-toolbox library for styling and should import it from the project's node_modules directory."
"import React, { Component } from 'react';
import {
  SearchBar,
} from 'react-native-elements';

export default class RepoSearchBar extends Component {
  constructor(props) {
    super(props)
    this.handleChangeText = this.handleChangeText.bind(this);
  }

  render() {
    return (
      <SearchBar 
        lightTheme
        placeholder='Search for user...'
        autoCapitalize='none'
        onChangeText={this.handleChangeText} />
    );
  }

  handleChangeText(newUsername) {
    this.props.onChangeText(newUsername);
  }
}

","Create a React component that renders a search bar with a light theme and placeholder text ""Search for user..."" It should be able to receive a callback function as a prop to handle text changes."
"import React from 'react'
import RadioGroup from 'react-ions/lib/components/Radio/RadioGroup'
import Radio from 'react-ions/lib/components/Radio/Radio'
import Input from 'react-ions/lib/components/Input'
import style from './style.scss'

const radioOptions = [
  {
    value: 'welcome_email',
    label: 'Send welcome email',
    description: 'Send an email welcoming your contact to your program.'
  }, {
    value: 'payment_update_email',
    label: 'Send update payment email',
    description: 'Send a payment update email to your contact.'
  }
]

class ExampleRadioGroupDescription extends React.Component {
  constructor(props) {
    super(props)
  }

  getRadioBlocks = () => {
    return radioOptions.map((option, index) => {
      return <Radio key={index} value={option.value} label={option.label} description={option.description} />
    })
  }

  render() {
    return (
      <div>
        <RadioGroup name='child-description-group' changeCallback={this.handleChange}>
          {this.getRadioBlocks()}
        </RadioGroup>
      </div>
    )
  }
}

export default ExampleRadioGroupDescription
","Create a React component that renders a group of radio buttons with descriptions. The radio buttons should have the following properties:
- value: A unique value for each radio button.
- label: The text label for the radio button.
- description: A description of the radio button."
"import React, { Component } from 'react';
import { ActivityIndicator } from 'react-native';
import { View, Text, TouchableOpacity, Image } from 'react-native';
import XDate from 'xdate';
import PropTypes from 'prop-types';
import styleConstructor from './style';
import { weekDayNames } from '../../dateutils';
import Icon from 'react-native-vector-icons/Ionicons';
import theme from '../../../../../components/theme';
import moment from 'moment';


class CalendarHeader extends Component {
  static propTypes = {
    theme: PropTypes.object,
    hideArrows: PropTypes.bool,
    month: PropTypes.instanceOf(XDate),
    addMonth: PropTypes.func,
    showIndicator: PropTypes.bool,
    firstDay: PropTypes.number,
    renderArrow: PropTypes.func,
    hideDayNames: PropTypes.bool,
  };

  constructor(props) {
    super(props);
    this.style = styleConstructor(props.theme);
    this.addMonth = this.addMonth.bind(this);
    this.substractMonth = this.substractMonth.bind(this);
  }

  nextMonth(next){
    var month = [""Feb"",""Mar"",""Apr"",""May"",""Jun"",""Jul"",""Aug"",""Sep"",""Oct"",""Nov"",""Dec"",""Jan""];

      return month[next-1];
  }

  twoMonth(next){
    var month = [""Mar"",""Apr"",""May"",""Jun"",""Jul"",""Aug"",""Sep"",""Oct"",""Nov"",""Dec"",""Jan"",""Feb""];
      return month[next-1];
  }

  addMonth() {
    this.props.addMonth(1);
  }

  substractMonth() {
    this.props.addMonth(-1);
  }

  shouldComponentUpdate(nextProps) {
    if (
      nextProps.month.toString('yyyy MM') !==
      this.props.month.toString('yyyy MM')
    ) {
      return true;
    }
    if (nextProps.showIndicator !== this.props.showIndicator) {
      return true;
    }
    return false;
  }

  render() {
    let leftArrow = <View />;
    let rightArrow = <View />;
    let weekDaysNames = weekDayNames(this.props.firstDay);
    if (!this.props.hideArrows) {
      leftArrow = (
        <TouchableOpacity
          onPress={this.substractMonth}
          style={this.style.arrow}
        >
          {this.props.renderArrow
            ? this.props.renderArrow('left')
            : <Image
                source={require('../img/previous.png')}
                style={this.style.arrowImage}
              />}
        </TouchableOpacity>
      );
      rightArrow = (
        <TouchableOpacity onPress={this.addMonth} style={this.style.arrow}>
          {this.props.renderArrow
            ? this.props.renderArrow('right')
            : <Image
                source={require('../img/next.png')}
                style={this.style.arrowImage}
              />}
        </TouchableOpacity>
      );
    }
    let indicator;
    if (this.props.showIndicator) {
      indicator = <ActivityIndicator />;
    }
    return (
      <View style={{}}>
      <Image style={this.style.proBg} source={require('../img/proBgg.png')}>
        <View style={{flex:1,flexDirection:'row',alignSelf:'center',marginBottom:-25}}>
          {leftArrow}
          <Text style={{color:""#fff"",fontSize:18,alignSelf:'flex-end',marginBottom:35,marginRight:25,borderBottomWidth:1,borderColor:'#fff'}}>
            {this.props.month.toString(this.props.monthFormat ? this.props.monthFormat : 'MMM')}
          </Text>
          <Text style={{color:""#DBAEAF"",fontSize:18,alignSelf:'flex-end',marginBottom:35,marginRight:25}}>
            {this.nextMonth(this.props.month.toString(this.props.monthFormat ? this.props.monthFormat : 'M'))}
          </Text>
          <Text style={{color:""#C36D6F"",fontSize:18,alignSelf:'flex-end',marginBottom:35,}}>
            {this.twoMonth(this.props.month.toString(this.props.monthFormat ? this.props.monthFormat : 'M'))}
          </Text>
          {rightArrow}
          <View style={{flexDirection:'column',flex:1}}>
            <View style={{alignSelf:'flex-end'}}>
              <Text style={{fontSize:18,alignSelf:'center',color:""#fff""}}>
                {moment().format(""MMMM"")}
              </Text>
              <Text style={{fontSize:22,alignSelf:'center',color:""#fff""}}>
                {moment().format(""DD, YYYY"")}
              </Text>
              <View style={{width: 80, alignSelf:'center',height:80,borderRadius:40,backgroundColor:""white"",borderRadius:40,borderWidth:5,borderColor:'rgba(193, 192, 192, 0.53)',justifyContent:'center'}}>
                <Icon size={42} name=""ios-calendar"" style={{color: theme.themeColor, alignSelf:'center' }} />
              </View>
            </View>
          </View>
        </View>
      </Image>
      <View style={{borderBottomWidth:1,borderColor:'#ECECEC',marginBottom:10,paddingBottom:10,backgroundColor:""#F9F9F9""}}>
        {
          !this.props.hideDayNames &&
          <View style={this.style.week}>
            {weekDaysNames.map((day, idx) => {
              if(moment().format(""ddd"") == day){
                return(
                  <View key={idx} style={{flexDirection:'column'}}>
                    <View style={{height:15,width:15,borderRadius:10,backgroundColor:""#E81B21"",alignSelf:'center',borderWidth:2,borderColor:""#F6CDCE"",marginBottom:10,paddingBottom:10}}></View>
                    <Text  style={[this.style.dayHeader,{color:""#E81B21""}]} numberOfLines={1}>{day.toUpperCase()}</Text>
                  </View>
                )
              }
              else {
                return(
                <View key={idx} style={{flexDirection:'column'}}>
                  <View style={{height:15,width:15,borderRadius:10,backgroundColor:""#BBBBBB"",alignSelf:'center',marginBottom:10,paddingBottom:10}}></View>
                  <Text  style={[this.style.dayHeader,{color:""#626262""}]} numberOfLines={1}>{day.toUpperCase()}</Text>
                </View>
              )}
            })}
          </View>
        }
        </View>
      </View>
    );
  }
}

export default CalendarHeader;
","Create a React Native component that displays a calendar header with the following features:

- Customizable month and year display format
- Arrows to navigate between months
- Optional activity indicator to show while fetching data
- Optional hiding of day names
- Custom day name rendering function
- Custom arrow rendering function
- Option to hide the arrows
- Display the current month, year, and day in a separate section
- Highlight the current day with a colored circle
- Add a calendar icon to the current day section"
"import PropTypes from 'prop-types'
import React from 'react'
import { accountActions, accountStore } from 'stores/account'
import { withStyles } from '@material-ui/core/styles'
import shallowCompare from 'react-addons-shallow-compare'
import DoneIcon from '@material-ui/icons/Done'
import ServiceInfoPanelActionButton from 'wbui/ServiceInfoPanelActionButton'
import ServiceInfoPanelActions from 'wbui/ServiceInfoPanelActions'
import ServiceInfoPanelBody from 'wbui/ServiceInfoPanelBody'
import ServiceInfoPanelContent from 'wbui/ServiceInfoPanelContent'
import ServiceReducer from 'shared/AltStores/Account/ServiceReducers/ServiceReducer'
import ReactMarkdown from 'react-markdown'
import WBRPCRenderer from 'shared/WBRPCRenderer'

const styles = {
  markdown: {
    '& img': {
      maxWidth: '100%'
    }
  },
  buttonIcon: {
    marginRight: 6
  }
}

class Link extends React.Component {
  render () {
    const { href, children, ...passProps } = this.props
    return (
      <a
        {...passProps}
        href='#'
        onClick={() => WBRPCRenderer.wavebox.openExternal(href)}>
        {children}
      </a>
    )
  }
}

@withStyles(styles)
class ServiceInstallInfo extends React.Component {
  /* **************************************************************************/
  // Class
  /* **************************************************************************/

  static propTypes = {
    serviceId: PropTypes.string.isRequired
  }

  /* **************************************************************************/
  // Component Lifecycle
  /* **************************************************************************/

  componentDidMount () {
    accountStore.listen(this.accountUpdated)
  }

  componentWillUnmount () {
    accountStore.unlisten(this.accountUpdated)
  }

  componentWillReceiveProps (nextProps) {
    if (this.props.serviceId !== nextProps.serviceId) {
      this.setState({
        ...this.deriveServiceInfo(nextProps.serviceId, accountStore.getState())
      })
    }
  }

  /* **************************************************************************/
  // Data lifecycle
  /* **************************************************************************/

  state = (() => {
    return {
      ...this.deriveServiceInfo(this.props.serviceId, accountStore.getState())
    }
  })()

  accountUpdated = (accountState) => {
    this.setState({
      ...this.deriveServiceInfo(this.props.serviceId, accountState)
    })
  }

  /**
  * Gets the service info from the account state
  * @param serviceId: the id of the service
  * @param accountState: the current account state
  * @return a state update object
  */
  deriveServiceInfo (serviceId, accountState) {
    const service = accountState.getService(serviceId)
    return {
      installText: service ? service.installText : ''
    }
  }

  /* **************************************************************************/
  // UI Events
  /* **************************************************************************/

  /**
  * Handles a link being clicked
  */
  handleLinkClick = (url, text, title) => {
    WBRPCRenderer.wavebox.openExternal(url)
  }

  /* **************************************************************************/
  // Rendering
  /* **************************************************************************/

  shouldComponentUpdate (nextProps, nextState) {
    return shallowCompare(this, nextProps, nextState)
  }

  render () {
    const {
      serviceId,
      classes,
      ...passProps
    } = this.props
    const {
      installText
    } = this.state

    return (
      <ServiceInfoPanelContent {...passProps}>
        <ServiceInfoPanelBody actions={1}>
          <ReactMarkdown
            className={classes.markdown}
            source={installText}
            skipHtml
            renderers={{
              link: Link,
              linkReference: Link
            }} />
        </ServiceInfoPanelBody>
        <ServiceInfoPanelActions actions={1}>
          <ServiceInfoPanelActionButton
            color='primary'
            variant='contained'
            onClick={() => {
              accountActions.reduceService(serviceId, ServiceReducer.setHasSeenInstallInfo, true)
            }}>
            <DoneIcon className={classes.buttonIcon} />
            Done
          </ServiceInfoPanelActionButton>
        </ServiceInfoPanelActions>
      </ServiceInfoPanelContent>
    )
  }
}

export default ServiceInstallInfo
","Provide a React component that displays the ""install text"" for a given service. The component should include a button that, when clicked, marks the install info as seen for the service. The component should use the `ServiceReducer` to update the service's `hasSeenInstallInfo` property."
"import PropTypes from 'prop-types';
import React from 'react';
import { Text, View, StyleSheet, TouchableOpacity } from 'react-native';
import colors from '../config/colors';

const Badge = props => {
  const {
    containerStyle,
    textStyle,
    wrapperStyle,
    onPress,
    component,
    value,
    children,
    element,
    ...attributes
  } = props;

  if (element) return element;

  let Component = View;
  let childElement = (
    <Text style={[styles.text, textStyle && textStyle]}>{value}</Text>
  );

  if (children) {
    childElement = children;
  }

  if (children && value) {
    console.error('Badge can only contain either child element or value');
  }

  if (!component && onPress) {
    Component = TouchableOpacity;
  }

  if (React.isValidElement(component)) {
    Component = component;
  }

  return (
    <View style={[styles.container && wrapperStyle && wrapperStyle]}>
      <Component
        style={[styles.badge, containerStyle && containerStyle]}
        onPress={onPress}
        {...attributes}
      >
        {childElement}
      </Component>
    </View>
  );
};

Badge.propTypes = {
  containerStyle: View.propTypes.style,
  wrapperStyle: View.propTypes.style,
  textStyle: Text.propTypes.style,
  children: PropTypes.element,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  onPress: PropTypes.func,
  component: PropTypes.func,
  element: PropTypes.element,
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
  },
  badge: {
    padding: 12,
    paddingTop: 3,
    paddingBottom: 3,
    backgroundColor: colors.grey1,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    fontSize: 14,
    color: 'white',
  },
});

export default Badge;
","Generate a React Native component based on the description. The component should be called ""Badge"" and should have the following properties:
- a containerStyle prop to style the container view
- a wrapperStyle prop to style the wrapper view
- a textStyle prop to style the text
- a children prop to specify a custom child element
- a value prop to specify the text to display
- an onPress prop to specify an onPress handler
- a component prop to specify a custom component to use
- an element prop to specify a custom element to use"
"import React from 'react';
import ReactDOM from 'react-dom';

import JqxKanban from '../../../jqwidgets-react/react_jqxkanban.js';

class App extends React.Component {
    render() {
        let fields = [
            { name: 'id', type: 'string' },
            { name: 'status', map: 'state', type: 'string' },
            { name: 'text', map: 'label', type: 'string' },
            { name: 'tags', type: 'string' },
            { name: 'color', map: 'hex', type: 'string' },
            { name: 'resourceId', type: 'number' }
        ];
        let source =
            {
                localData: [
                    { id: '1161', state: 'new', label: 'Make a new Dashboard', tags: 'dashboard', hex: '#36c7d0', resourceId: 3 },
                    { id: '1645', state: 'work', label: 'Prepare new release', tags: 'release', hex: '#ff7878', resourceId: 1 },
                    { id: '9213', state: 'new', label: 'One item added to the cart', tags: 'cart', hex: '#96c443', resourceId: 3 },
                    { id: '6546', state: 'done', label: 'Edit Item Price', tags: 'price, edit', hex: '#ff7878', resourceId: 4 },
                    { id: '9034', state: 'new', label: 'Login 404 issue', tags: 'issue, login', hex: '#96c443' }
                ],
                dataType: 'array',
                dataFields: fields
            };
        let dataAdapter = new $.jqx.dataAdapter(source);
        let resourcesAdapterFunc = () => {
            let resourcesSource =
                {
                    localData: [
                        { id: 0, name: 'No name', image: '../../jqwidgets/styles/images/common.png', common: true },
                        { id: 1, name: 'Andrew Fuller', image: '../../images/andrew.png' },
                        { id: 2, name: 'Janet Leverling', image: '../../images/janet.png' },
                        { id: 3, name: 'Steven Buchanan', image: '../../images/steven.png' },
                        { id: 4, name: 'Nancy Davolio', image: '../../images/nancy.png' },
                        { id: 5, name: 'Michael Buchanan', image: '../../images/Michael.png' },
                        { id: 6, name: 'Margaret Buchanan', image: '../../images/margaret.png' },
                        { id: 7, name: 'Robert Buchanan', image: '../../images/robert.png' },
                        { id: 8, name: 'Laura Buchanan', image: '../../images/Laura.png' },
                        { id: 9, name: 'Laura Buchanan', image: '../../images/Anne.png' }
                    ],
                    dataType: 'array',
                    dataFields: [
                        { name: 'id', type: 'number' },
                        { name: 'name', type: 'string' },
                        { name: 'image', type: 'string' },
                        { name: 'common', type: 'boolean' }
                    ]
                };
            let resourcesDataAdapter = new $.jqx.dataAdapter(resourcesSource);
            return resourcesDataAdapter;
        }

        let columns =
            [
                { text: 'Backlog', dataField: 'new', maxItems: 4 },
                { text: 'In Progress', dataField: 'work', maxItems: 2 },
                { text: 'Done', dataField: 'done', collapsible: false, maxItems: 5 }
            ];

        let columnRenderer = (element, collapsedElement, column) => {
            setTimeout(() => {
                let columnItems = this.refs.myKanban.getColumnItems(column.dataField).length;
                // update header's status.
                element.find('.jqx-kanban-column-header-status').html(' (' + columnItems + '/' + column.maxItems + ')');
                // update collapsed header's status.
                collapsedElement.find('.jqx-kanban-column-header-status').html(' (' + columnItems + '/' + column.maxItems + ')');
            });
        };
        return (
            <JqxKanban ref='myKanban'
                resources={resourcesAdapterFunc()} source={dataAdapter}
                columns={columns} columnRenderer={columnRenderer}
            />
        )
    }
}

ReactDOM.render(<App />, document.getElementById('app'));","Create a React app that uses the JQXKanban widget to display a Kanban board with the following features:
- Data is loaded from a local data source.
- The Kanban board has three columns: Backlog, In Progress, and Done.
- Each column has a maximum number of items that can be displayed.
- The header of each column displays the number of items in the column and the maximum number of items allowed.
- The column header is updated when the number of items in the column changes.
- The Kanban board uses resources to assign items to specific individuals."
"import React from 'react';
import DatePicker from 'material-ui/DatePicker';

/**
 * Inline Date Pickers are displayed below the input, rather than as a modal dialog.
 */
const DatePickerExampleInline = () => (
  <div>
    <DatePicker hintText=""Portrait Inline Dialog"" container=""inline"" />
    <DatePicker hintText=""Landscape Inline Dialog"" container=""inline"" mode=""landscape"" />
  </div>
);

export default DatePickerExampleInline;
","Create a React component that utilizes the Material-UI Date Picker component to display inline date pickers both in portrait and landscape orientations. The inline date pickers should be displayed below the input field, and not as a modal dialog."
"// @flow
import React from 'react'
import classNames from 'classnames'

import type { Props } from './BackgroundTypes'
import classes from './Background.scss'

export const Background = ({ backgroundImage }: Props) => (
  <div
    className={classes.background__container}>
    <div
      className={classNames(classes.background__poster, 'animated fadeIn')}
      style={{ backgroundImage: `url(${backgroundImage})` }}>

      <div className={classes.background__overlay} />
    </div>
  </div>
)

export default Background
","Create a React component that uses a background image in CSS and displays it inside of a div with class 'background__container'. Inside the div, add another div with class 'background__poster' and set the background image through a prop called 'backgroundImage'. Apply a CSS class ('fadeIn') to trigger fade-in animation on the div with 'background__poster' class. Additionally, add a div with class 'background__overlay' within the 'background__poster' div."
"import React from 'react'

type Props = {

};
export class <%= pascalEntityName %> extends React.Component {
  props: Props;

  render () {
    return (
      <div></div>
    )
  }
}

export default <%= pascalEntityName %>
",Create a React class component with the specified name that renders an empty div.
"import React from 'react';

import AvatarItem from 'components/common/AvatarItem.react';

class ContactItem extends React.Component {
  static propTypes = {
    contact: React.PropTypes.object,
    onToggle: React.PropTypes.func
  }

  constructor(props) {
    super(props);

    this.onToggle = this.onToggle.bind(this);
    this.state = {
      isSelected: false
    };
  }

  onToggle() {
    const isSelected = !this.state.isSelected;

    this.setState({
      isSelected: isSelected
    });

    this.props.onToggle(this.props.contact, isSelected);
  }

  render() {
    let contact = this.props.contact;

    let icon;

    if (this.state.isSelected) {
      icon = 'check_box';
    } else {
      icon = 'check_box_outline_blank';
    }

    return (
      <li className=""contacts__list__item row"">
        <AvatarItem image={contact.avatar}
                    placeholder={contact.placeholder}
                    size=""small""
                    title={contact.name}/>

        <div className=""col-xs"">
          <span className=""title"">
            {contact.name}
          </span>
        </div>

        <div className=""controls"">
          <a className=""material-icons"" onClick={this.onToggle}>{icon}</a>
        </div>
      </li>
    );
  }
}

export default ContactItem;
","Generate a React code snippet for a list item that displays a contact's avatar, name, and a checkbox that allows users to toggle the contact's selection. The code should include a function for handling checkbox clicks and should update the component state to reflect the selection status."
"import React from 'react';
import SvgIcon from '../../SvgIcon';

const CommunicationVpnKey = (props) => (
  <SvgIcon {...props}>
    <path d=""M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z""/>
  </SvgIcon>
);
CommunicationVpnKey.displayName = 'CommunicationVpnKey';
CommunicationVpnKey.muiName = 'SvgIcon';

export default CommunicationVpnKey;
","Generate a React component that displays the 'Vpn Key' icon. The icon should be composed of an SVG path, and the component should have a display name and a muiName property."
"import React from 'react';
import PropTypes from 'prop-types';
import { canUseDOM } from 'exenv';
import { createComponent } from 'cf-style-container';

import DropdownRegistry from './DropdownRegistry';

const styles = ({ theme, align }) => ({
  position: 'absolute',
  zIndex: 1,
  minWidth: '10.66667rem',
  margin: '0.5em 0 0',
  padding: '0.33333rem 0',
  listStyle: 'none',
  background: theme.colorWhite,
  border: `1px solid ${theme.colorGrayLight}`,
  borderRadius: theme.borderRadius,
  boxShadow: '0 3px 10px rgba(0, 0, 0, 0.2)',

  left: align === 'left' ? 0 : 'initial',
  right: align === 'right' ? 0 : 'initial',

  textAlign: theme.textAlign,

  animationName: {
    '0%': {
      display: 'none',
      opacity: 0
    },
    '1%': {
      display: 'block',
      opacity: 0,
      top: '80%'
    },
    '100%': {
      display: 'none',
      opacity: 1,
      top: '102%'
    }
  },
  animationDuration: '150ms',
  animationTimingFunction: 'ease-out',

  '&::before': {
    content: ""''"",
    display: 'block',
    position: 'absolute',
    bottom: '100%',
    border: 'solid transparent',
    borderWidth: '10px',
    borderTopWidth: 0,
    borderBottomColor: theme.colorWhite,
    left: align === 'left' ? '10px' : 'initial',
    right: align === 'right' ? '10px' : 'initial'
  }
});

class Dropdown extends React.Component {
  getChildContext() {
    return {
      dropdownRegistry: this.dropdownRegistry
    };
  }

  constructor(props, context) {
    super(props, context);
    this.dropdownRegistry = new DropdownRegistry();
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.handleDocumentKeydown = this.handleDocumentKeydown.bind(this);
  }

  componentDidMount() {
    if (canUseDOM) {
      global.document.addEventListener('keydown', this.handleDocumentKeydown);
      global.document.addEventListener('click', this.handleDocumentClick);
    }
  }

  componentWillUnmount() {
    if (canUseDOM) {
      global.document.removeEventListener(
        'keydown',
        this.handleDocumentKeydown
      );
      global.document.removeEventListener('click', this.handleDocumentClick);
    }
  }

  handleDocumentKeydown(event) {
    const keyCode = event.keyCode;

    if (keyCode === 40) {
      // down
      event.preventDefault();
      this.dropdownRegistry.focusNext();
    } else if (keyCode === 38) {
      // up
      event.preventDefault();
      this.dropdownRegistry.focusPrev();
    } else if (keyCode === 27) {
      // esc
      this.props.onClose();
    }
  }

  handleDocumentClick() {
    this.props.onClose();
  }

  render() {
    return (
      <ul className={this.props.className} role=""menu"">
        {this.props.children}
      </ul>
    );
  }
}

Dropdown.propTypes = {
  onClose: PropTypes.func.isRequired,
  align: PropTypes.oneOf(['left', 'right']),
  children: PropTypes.node
};

Dropdown.defaultProps = {
  align: 'left'
};

Dropdown.childContextTypes = {
  dropdownRegistry: PropTypes.instanceOf(DropdownRegistry).isRequired
};

export default createComponent(styles, Dropdown);
","Create a React component called `Dropdown` that represents a dropdown menu. It should have the following features:

* Accepts an `onClose` prop that is called when the dropdown is closed.
* Accepts an `align` prop that can be either 'left' or 'right', determining the alignment of the dropdown.
* Maintains a list of its child menu items using a `DropdownRegistry` and allows them to be focused using keyboard navigation (up and down arrows).
* Renders a list element with the role 'menu' and the specified alignment.
* Closes the dropdown when the user clicks outside of it or presses the escape key."
"import React from 'react';

import { storiesOf } from '@storybook/react';
import { action } from '@storybook/addon-actions';
import { linkTo } from '@storybook/addon-links';

import { Button, Welcome } from '@storybook/react/demo';

storiesOf('Welcome', module).add('to Storybook', () => <Welcome showApp={linkTo('Button')} />);

storiesOf('Button', module)
  .add('with text', () => <Button onClick={action('clicked')}>Hello Button</Button>)
  .add('with some emoji', () => <Button onClick={action('clicked')}>😀 😎 👍 💯</Button>);
",Create a Storybook story for a button component with two example variations: one with sample text and one with emoji.
"/* @flow */
import React from 'react';
import Icon from 'mineral-ui/Icon';

import type { IconProps } from 'mineral-ui/Icon/types';

/* eslint-disable prettier/prettier */
export default function IconImageAspectRatio(props: IconProps) {
  const iconProps = {
    rtl: false,
    ...props
  };

  return (
    <Icon {...iconProps}>
      <g>
        <path d=""M16 10h-2v2h2v-2zm0 4h-2v2h2v-2zm-8-4H6v2h2v-2zm4 0h-2v2h2v-2zm8-6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V6h16v12z""/>
      </g>
    </Icon>
  );
}

IconImageAspectRatio.displayName = 'IconImageAspectRatio';
IconImageAspectRatio.category = 'image';
","Design an SVG icon of the aspect ratio option in image editing software. It should depict two overlapping rectangles, one with a shorter length."
"/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule throwOnWrongReactAPI
 * @flow
 */

'use strict';

function throwOnWrongReactAPI(key: string) {
  throw new Error(
`Seems you're trying to access 'ReactNative.${key}' from the 'react-native' package. Perhaps you meant to access 'React.${key}' from the 'react' package instead?

For example, instead of:

  import React, { Component, View } from 'react-native';

You should now do:

  import React, { Component } from 'react';
  import { View } from 'react-native';

Check the release notes on how to upgrade your code - https://github.com/facebook/react-native/releases/tag/v0.25.1
`);
}

module.exports = throwOnWrongReactAPI;
","Provide a specific error message that should be thrown when a user tries to access a React API from the ""react-native"" package, informing them that they should be using the ""react"" package instead and providing a link to the release notes for the upgrade."
"import React from 'react';
import { connect } from 'react-redux';

import { setVisibilityFilter } from '../actions/actions';
import { SHOW_ALL,SHOW_ACTIVE,SHOW_COMPLETED } from '../constants/ActionTypes';
import Link from './Link';

const mapStateProps = (
  state,
  ownProps
) => {
  return {
    active:
      ownProps.filter ===
      state.visibilityFilter
  };
};
const mapDispatchProps = (
  dispatch,
  ownProps
) => {
  return {
    onClick: () => {
      dispatch(
        setVisibilityFilter(ownProps.filter)
      );
    }
  };
};

const FilterLink = connect(
  mapStateProps,
  mapDispatchProps
)(Link);

const Footer = () => (
  <p>
    Show:
    {' '}
    <FilterLink filter={SHOW_ALL}>
      All
    </FilterLink>
    {', '}
    <FilterLink filter={SHOW_ACTIVE}>
      Active
    </FilterLink>
    {', '}
    <FilterLink filter={SHOW_COMPLETED}>
      Completed
    </FilterLink>
  </p>
);

export default Footer;
","Create a React component that handles filtering items based on supplied filters. The component should take in a parameter 'filter' that can be either 'All', 'Active', or 'Completed'. If the filter parameter matches the current visibility filter in the Redux store, the component should be active. When the component is clicked, it should dispatch an action to update the visibility filter based on the supplied 'filter' parameter."
"import React from 'react'
import { render } from 'react-dom'
import { hashHistory } from 'react-router'

import RouteMap from './router/routeMap'

render(
  <RouteMap history={hashHistory}/>,
  document.getElementById('app')
);
",Generate a React application entry point that uses hashHistory for routing.
"import React, { Component } from 'react';
import PropTypes from 'prop-types';

import './notification.css';


class Notification extends Component {
  static propTypes = {
    action: PropTypes.func.isRequired,
    actionLabel: PropTypes.string.isRequired,
    dismiss: PropTypes.func.isRequired,
    display: PropTypes.bool.isRequired,
    duration: PropTypes.number,
    message: PropTypes.string.isRequired
  };

  componentDidMount() {
    this.startTimer();
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.display) {
      this.startTimer();
    }
  }

  componentWillUnmount() {
    this.clearTimer();
  }

  clearTimer() {
    if (this.timerId) {
      clearTimeout(this.timerId);
    }
  }

  startTimer() {
    this.clearTimer();
    this.timerId = setTimeout(() => {
      this.props.dismiss();
    }, this.props.duration || 5000);
  }

  render() {
    return (
      <div className=""notification"">
        <p className=""notification__message"" ref={c => this.message = c}>{this.props.message}</p>
        <button
          className=""btn notification__button""
          onClick={this.props.action}
          ref={c => this.button = c}
          type=""button"">{this.props.actionLabel}</button>
      </div>
    );
  }
}

export default Notification;
","Create a React component that displays a notification message for a specified duration and allows the user to dismiss the notification. When the message is displayed, a timer starts running. When the timer expires, the message should be dismissed. The component should take in props for the message, the action button label, the action to be performed when the button is clicked, and the duration of the timer."
"import React from 'react';
import classNames from 'classnames';
import BootstrapMixin from './BootstrapMixin';

const Well = React.createClass({
  mixins: [BootstrapMixin],

  getDefaultProps() {
    return {
      bsClass: 'well'
    };
  },

  render() {
    let classes = this.getBsClassSet();

    return (
      <div {...this.props} className={classNames(this.props.className, classes)}>
        {this.props.children}
      </div>
    );
  }
});

export default Well;
","Create a React component that displays a well, a container that has rounded corners and a light background, with a specified class name. The component should have the ability to specify the class name to be used for the well, and should render the well with any specified child components."
"// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import CSSClassnames from '../../../utils/CSSClassnames';
import Intl from '../../../utils/Intl';
import Props from '../../../utils/Props';

const CLASS_ROOT = CSSClassnames.CONTROL_ICON;
const COLOR_INDEX = CSSClassnames.COLOR_INDEX;

export default class Icon extends Component {
  render () {
    const { className, colorIndex } = this.props;
    let { a11yTitle, size, responsive } = this.props;
    let { intl } = this.context;

    const classes = classnames(
      CLASS_ROOT,
      `${CLASS_ROOT}-book`,
      className,
      {
        [`${CLASS_ROOT}--${size}`]: size,
        [`${CLASS_ROOT}--responsive`]: responsive,
        [`${COLOR_INDEX}-${colorIndex}`]: colorIndex
      }
    );

    a11yTitle = a11yTitle || Intl.getMessage(intl, 'book');

    const restProps = Props.omit(this.props, Object.keys(Icon.propTypes));
    return <svg {...restProps} version=""1.1"" viewBox=""0 0 24 24"" width=""24px"" height=""24px"" role=""img"" className={classes} aria-label={a11yTitle}><path fill=""none"" stroke=""#000"" strokeWidth=""2"" d=""M10,1 L10,11 L13,9 L16,11 L16,1 M5.5,18 C4.11928813,18 3,19.1192881 3,20.5 C3,21.8807119 4.11928813,23 5.5,23 L22,23 M3,20.5 L3,3.5 C3,2.11928813 4.11928813,1 5.5,1 L21,1 L21,18.0073514 L5.49217286,18.0073514 M20.5,18 C19.1192881,18 18,19.1192881 18,20.5 C18,21.8807119 19.1192881,23 20.5,23 L20.5,23""/></svg>;
  }
};

Icon.contextTypes = {
  intl: PropTypes.object
};

Icon.defaultProps = {
  responsive: true
};

Icon.displayName = 'Book';

Icon.icon = true;

Icon.propTypes = {
  a11yTitle: PropTypes.string,
  colorIndex: PropTypes.string,
  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'huge']),
  responsive: PropTypes.bool
};

",Generate a React component for an icon representing a book. The component should include an SVG element with a path for the book's shape and styling for the size and color of the icon. The component should also support setting accessibility properties such as 'aria-label' and 'role'.
"
import React from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import CardForm from '../components/CardForm'
import * as ActionCreators from '../actions'
import _ from 'underscore'

function mapStateToProps (state, ownProps) {
    const card = _.find(state.cards, {id: ownProps.cardId})
    return card ? card : {}
}
const CardFormWrapper = connect(
    mapStateToProps,
    dispatch => bindActionCreators(ActionCreators, dispatch)
)(CardForm)

export default CardFormWrapper
","Connect a React component to a Redux store, passing specific props to the component based on the state of the store."
"/* @flow */

import * as url from 'url'
import React from 'react'
import marked from 'marked'

import { visitMessage, openExternally, openFile, applySolution, getActiveTextEditor, sortSolutions } from '../helpers'
import type TooltipDelegate from './delegate'
import type { Message, LinterMessage } from '../types'
import FixButton from './fix-button'

function findHref(el: ?Element): ?string {
  while (el && !el.classList.contains('linter-line')) {
    if (el instanceof HTMLAnchorElement) {
      return el.href
    }
    el = el.parentElement
  }
  return null
}

type Props = {
  message: Message,
  delegate: TooltipDelegate,
}

type State = {
  description?: string,
  descriptionShow?: boolean,
}

class MessageElement extends React.Component<Props, State> {
  state: State = {
    description: '',
    descriptionShow: false,
  }

  componentDidMount() {
    this.props.delegate.onShouldUpdate(() => {
      this.setState({})
    })
    this.props.delegate.onShouldExpand(() => {
      if (!this.state.descriptionShow) {
        this.toggleDescription()
      }
    })
    this.props.delegate.onShouldCollapse(() => {
      if (this.state.descriptionShow) {
        this.toggleDescription()
      }
    })
  }

  // NOTE: Only handling messages v2 because v1 would be handled by message-legacy component
  onFixClick(): void {
    const message = this.props.message
    const textEditor = getActiveTextEditor()
    if (message.version === 2 && message.solutions && message.solutions.length) {
      applySolution(textEditor, message.version, sortSolutions(message.solutions)[0])
    }
  }

  openFile = (ev: Event) => {
    if (!(ev.target instanceof HTMLElement)) {
      return
    }
    const href = findHref(ev.target)
    if (!href) {
      return
    }
    // parse the link. e.g. atom://linter?file=<path>&row=<number>&column=<number>
    const { protocol, hostname, query } = url.parse(href, true)
    const file = query && query.file
    if (protocol !== 'atom:' || hostname !== 'linter' || !file) {
      return
    }
    const row = query && query.row ? parseInt(query.row, 10) : 0
    const column = query && query.column ? parseInt(query.column, 10) : 0
    openFile(file, { row, column })
  }

  canBeFixed(message: LinterMessage): boolean {
    if (message.version === 1 && message.fix) {
      return true
    } else if (message.version === 2 && message.solutions && message.solutions.length) {
      return true
    }
    return false
  }

  toggleDescription(result: ?string = null) {
    const newStatus = !this.state.descriptionShow
    const description = this.state.description || this.props.message.description

    if (!newStatus && !result) {
      this.setState({ descriptionShow: false })
      return
    }
    if (typeof description === 'string' || result) {
      const descriptionToUse = marked(result || description)
      this.setState({ descriptionShow: true, description: descriptionToUse })
    } else if (typeof description === 'function') {
      this.setState({ descriptionShow: true })
      if (this.descriptionLoading) {
        return
      }
      this.descriptionLoading = true
      new Promise(function(resolve) {
        resolve(description())
      })
        .then(response => {
          if (typeof response !== 'string') {
            throw new Error(`Expected result to be string, got: ${typeof response}`)
          }
          this.toggleDescription(response)
        })
        .catch(error => {
          console.log('[Linter] Error getting descriptions', error)
          this.descriptionLoading = false
          if (this.state.descriptionShow) {
            this.toggleDescription()
          }
        })
    } else {
      console.error('[Linter] Invalid description detected, expected string or function but got:', typeof description)
    }
  }

  props: Props
  descriptionLoading: boolean = false

  render() {
    const { message, delegate } = this.props

    return (
      <linter-message class={message.severity} onClick={this.openFile}>
        {message.description && (
          <a href=""#"" onClick={() => this.toggleDescription()}>
            <span className={`icon linter-icon icon-${this.state.descriptionShow ? 'chevron-down' : 'chevron-right'}`} />
          </a>
        )}
        <linter-excerpt>
          {this.canBeFixed(message) && <FixButton onClick={() => this.onFixClick()} />}
          {delegate.showProviderName ? `${message.linterName}: ` : ''}
          {message.excerpt}
        </linter-excerpt>{' '}
        {message.reference &&
          message.reference.file && (
            <a href=""#"" onClick={() => visitMessage(message, true)}>
              <span className=""icon linter-icon icon-alignment-aligned-to"" />
            </a>
          )}
        {message.url && (
          <a href=""#"" onClick={() => openExternally(message)}>
            <span className=""icon linter-icon icon-link"" />
          </a>
        )}
        {this.state.descriptionShow && (
          <div
            dangerouslySetInnerHTML={{
              __html: this.state.description || 'Loading...',
            }}
            className=""linter-line""
          />
        )}
      </linter-message>
    )
  }
}

module.exports = MessageElement
",Design a React component that displays a message with a toggleable description and fix button.
"import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import ReactRoutes from './routes/routes.js';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';

import reducers from './reducers';

const createStoreWithMiddleware = applyMiddleware()(createStore);

ReactDOM.render(
  <Provider store={createStoreWithMiddleware(reducers)}>
    {ReactRoutes}
  </Provider>
, document.getElementById('app'));","A React application that utilizes Redux for state management. The code snippet should include the import of necessary React and Redux libraries, the definition of a root reducer, and the creation of a Redux store with middleware. Finally, the application should render the React routes within a Redux Provider component."
"/* eslint max-len: 0 */
import React from 'react';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';


const products = [];

function addProducts(quantity) {
  const startId = products.length;
  for (let i = 0; i < quantity; i++) {
    const id = startId + i;
    products.push({
      id: id,
      name: 'Item name ' + id,
      price: 2100 + i
    });
  }
}

addProducts(100);

export default class ExternallyManagedSelection extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      selected: [],
      currPage: 1
    };
  }

  render() {
    const {
      currPage
    } = this.state;
    const onRowSelect = ({ id }, isSelected) => {
      if (isSelected && this.state.selected.length !== 2) {
        this.setState({
          selected: [ ...this.state.selected, id ].sort(),
          currPage: this.refs.table.state.currPage
        });
      } else {
        this.setState({ selected: this.state.selected.filter(it => it !== id) });
      }
      return false;
    };

    const selectRowProp = {
      mode: 'checkbox',
      clickToSelect: true,
      onSelect: onRowSelect,
      selected: this.state.selected
    };

    const options = {
      sizePerPageList: [ 5, 10, 15, 20 ],
      sizePerPage: 10,
      page: currPage,
      sortName: 'id',
      sortOrder: 'desc'
    };

    return (
      <BootstrapTable ref='table' data={ products } selectRow={ selectRowProp } pagination={ true } options={ options }>
        <TableHeaderColumn dataField='id' isKey={ true }>Product ID</TableHeaderColumn>
        <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>
        <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
      </BootstrapTable>
   );
  }
}
","Create a React component that renders a table with checkbox selection. When a checkbox is clicked, update the component state to update the array of selected IDs and the current page number. Use `react-bootstrap-table` to handle the table rendering."
"import React from 'react'

class Profile extends React.Component {
  render() {
    return (
      <div>
        <h2>Profile</h2>
      </div>
    )
  }
}

export default Profile
","Create a React component named 'Profile' which displays the heading ""Profile"" in a 'div' container."
"import React from 'react';
// It's important to not define HelloWorld component right in this file
// because in that case it will do full page reload on change
import HelloWorld from './HelloWorld.jsx';

React.render(<HelloWorld />, document.getElementById('react-root'));
","Generate the React code to render a component called HelloWorld in the div element with id react-root, but import the component from a different file."
"
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Container, Header, Title, Button, Icon, Tabs, Tab, Text, Right, Left, Body, TabHeading } from 'native-base';
import { Actions } from 'react-native-router-flux';

import { actions } from 'react-native-navigation-redux-helpers';
import myTheme from '../../themes/base-theme';

import TabOne from './tabOne';
import TabTwo from './tabTwo';
import TabThree from './tabThree';

const {
  popRoute,
} = actions;

class ConfigTab extends Component {  // eslint-disable-line

  static propTypes = {
    popRoute: React.PropTypes.func,
    navigation: React.PropTypes.shape({
      key: React.PropTypes.string,
    }),
  }
  popRoute() {
    this.props.popRoute(this.props.navigation.key);
  }

  render() {
    return (
      <Container>
        <Header hasTabs>
          <Left>
            <Button transparent onPress={() => Actions.pop()}>
              <Icon name=""arrow-back"" />
            </Button>
          </Left>
          <Body>
            <Title> Advanced Tabs</Title>
          </Body>
          <Right />
        </Header>
        <Tabs style={{ elevation: 3 }}>
          <Tab heading={<TabHeading><Icon name=""camera"" /><Text>Camera</Text></TabHeading>}>
            <TabOne />
          </Tab>
          <Tab heading={<TabHeading><Text>No Icon</Text></TabHeading>}>
            <TabTwo />
          </Tab>
          <Tab heading={<TabHeading><Icon name=""apps"" /></TabHeading>}>
            <TabThree />
          </Tab>
        </Tabs>
      </Container>
    );
  }
}

function bindAction(dispatch) {
  return {
    popRoute: key => dispatch(popRoute(key)),
  };
}

const mapStateToProps = state => ({
  navigation: state.cardNavigation,
  themeState: state.drawer.themeState,
});

export default connect(mapStateToProps, bindAction)(ConfigTab);
","Create a React Native app with three tabs: Camera, No Icon, and Apps. The Camera tab should have an icon, while the No Icon tab should not. The Apps tab should have an icon but no text. The header should have a back button and the title ""Advanced Tabs"". The tabs should be elevated by 3."
"import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { expandPublicTimeline, expandCommunityTimeline } from 'mastodon/actions/timelines';
import Masonry from 'react-masonry-infinite';
import { List as ImmutableList, Map as ImmutableMap } from 'immutable';
import DetailedStatusContainer from 'mastodon/features/status/containers/detailed_status_container';
import { debounce } from 'lodash';
import LoadingIndicator from 'mastodon/components/loading_indicator';

const mapStateToProps = (state, { local }) => {
  const timeline = state.getIn(['timelines', local ? 'community' : 'public'], ImmutableMap());

  return {
    statusIds: timeline.get('items', ImmutableList()),
    isLoading: timeline.get('isLoading', false),
    hasMore: timeline.get('hasMore', false),
  };
};

export default @connect(mapStateToProps)
class PublicTimeline extends React.PureComponent {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    statusIds: ImmutablePropTypes.list.isRequired,
    isLoading: PropTypes.bool.isRequired,
    hasMore: PropTypes.bool.isRequired,
    local: PropTypes.bool,
  };

  componentDidMount () {
    this._connect();
  }

  componentDidUpdate (prevProps) {
    if (prevProps.local !== this.props.local) {
      this._connect();
    }
  }

  _connect () {
    const { dispatch, local } = this.props;

    dispatch(local ? expandCommunityTimeline() : expandPublicTimeline());
  }

  handleLoadMore = () => {
    const { dispatch, statusIds, local } = this.props;
    const maxId = statusIds.last();

    if (maxId) {
      dispatch(local ? expandCommunityTimeline({ maxId }) : expandPublicTimeline({ maxId }));
    }
  }

  setRef = c => {
    this.masonry = c;
  }

  handleHeightChange = debounce(() => {
    if (!this.masonry) {
      return;
    }

    this.masonry.forcePack();
  }, 50)

  render () {
    const { statusIds, hasMore, isLoading } = this.props;

    const sizes = [
      { columns: 1, gutter: 0 },
      { mq: '415px', columns: 1, gutter: 10 },
      { mq: '640px', columns: 2, gutter: 10 },
      { mq: '960px', columns: 3, gutter: 10 },
      { mq: '1255px', columns: 3, gutter: 10 },
    ];

    const loader = (isLoading && statusIds.isEmpty()) ? <LoadingIndicator key={0} /> : undefined;

    return (
      <Masonry ref={this.setRef} className='statuses-grid' hasMore={hasMore} loadMore={this.handleLoadMore} sizes={sizes} loader={loader}>
        {statusIds.map(statusId => (
          <div className='statuses-grid__item' key={statusId}>
            <DetailedStatusContainer
              id={statusId}
              compact
              measureHeight
              onHeightChange={this.handleHeightChange}
            />
          </div>
        )).toArray()}
      </Masonry>
    );
  }

}
",Describe the functionality of the React component and its connection to a Redux store.
"import React from 'react';
import PropTypes from 'prop-types';
import { stringIsEmpty } from 'helpers/stringHelpers';

Body.propTypes = {
  emptyMessage: PropTypes.string,
  searchQuery: PropTypes.string,
  isSearching: PropTypes.bool,
  isEmpty: PropTypes.bool,
  loadMoreButtonShown: PropTypes.bool,
  statusMsgStyle: PropTypes.string,
  content: PropTypes.node
};

export default function Body({
  emptyMessage,
  searchQuery,
  isSearching,
  isEmpty,
  statusMsgStyle,
  content,
  loadMoreButtonShown
}) {
  return (
    <div>
      {(!stringIsEmpty(searchQuery) && isSearching) ||
      (isEmpty && !loadMoreButtonShown) ? (
        <div className={statusMsgStyle}>
          {searchQuery && isSearching
            ? 'Searching...'
            : searchQuery
            ? 'No Results'
            : emptyMessage}
        </div>
      ) : (
        content
      )}
    </div>
  );
}
","Generate a React component called Body that displays different messages based on the props it receives. For example, if the prop isSearching is true and searchQuery is not empty, it should display ""Searching..."". If isSearching is false and searchQuery is not empty, it should display ""No Results"". If both isSearching and searchQuery are empty and isEmpty is true, it should display the value of the emptyMessage prop. Otherwise, it should display the content prop."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NavigationClose = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z""/>
  </SvgIcon>
);
NavigationClose = pure(NavigationClose);
NavigationClose.displayName = 'NavigationClose';
NavigationClose.muiName = 'SvgIcon';

export default NavigationClose;
","Design a React component that uses an SVG icon to represent the action of closing an interface element, such as a dialog box or menu. The component should be pure, have a display name, and a material UI name."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvNote = (props) => (
  <SvgIcon {...props}>
    <path d=""M22 10l-6-6H4c-1.1 0-2 .9-2 2v12.01c0 1.1.9 1.99 2 1.99l16-.01c1.1 0 2-.89 2-1.99v-8zm-7-4.5l5.5 5.5H15V5.5z""/>
  </SvgIcon>
);
AvNote = pure(AvNote);
AvNote.displayName = 'AvNote';
AvNote.muiName = 'SvgIcon';

export default AvNote;
","Generate the code for an SVG icon component that displays a musical note, using the React framework. The component should handle variations in props passed to it and ensure a consistent presentation."
"import React from 'react';
import { View, Text } from 'react-native';

const Header = (props) => {
  const { viewStyle, textStyle } = styles;
  return (
    <View style={viewStyle}>
      <Text style={textStyle}>{props.headerText}</Text>
    </View>
  );
};

const styles = {
  viewStyle: {
    backgroundColor: '#F8F8F8',
    justifyContent: 'center',
    alignItems: 'center',
    height: 60,
    paddingTop: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    elevation: 2,
    position: 'relative'
  },
  textStyle: {
    fontSize: 20
  }
};

export { Header };
","Generate a React Native component that renders a header with a centered text. The header should have a background color, a shadow, and a specific height and padding. The text should be of a specific font size."
"/* @flow */
import React, { Component } from 'react';
import { connect } from 'react-redux';
import Box from 'grommet/components/Box';
import Button from 'grommet/components/Button';
import Layer from 'grommet/components/Layer';
import { AssetTile } from 'grommet-cms/components/Dashboard';
import { getAssets } from 'grommet-cms/containers/Assets/actions';
import AssetForm from 'grommet-cms/containers/Dashboard/DashboardAssetPage';
import { PageHeader } from 'grommet-cms/components';
import type { Asset } from 'grommet-cms/containers/Assets/flowTypes';

type Props = {
  error: string,
  posts: Array<Asset>,
  request: boolean
};

export class DashboardAssetsLayer extends Component {
  state: {
    addNewAsset: boolean
  };

  _onAssetFormSubmit: () => void;
  _onAddAssetClick: () => void;

  constructor(props: Props) {
    super(props);

    this.state = {
      addNewAsset: false
    };

    this._onAssetFormSubmit = this._onAssetFormSubmit.bind(this);
    this._onAddAssetClick = this._onAddAssetClick.bind(this);
  }

  componentDidMount() {
    this.props.dispatch(getAssets());
  }

  _onAddAssetClick() {
    this.setState({ addNewAsset: true });
  }

  _onAssetFormSubmit() {
    // Refresh Assets list.
    this.props.dispatch((getAssets()))
      .then(() => {
        this.setState({ addNewAsset: false });
      });
  }

  render() {
    const assets = (
      this.props.posts
      && this.props.posts.length > 0
      && !this.state.addNewAsset)
      ? this.props.posts.map(({_id, path, title}) =>
        <AssetTile
          id={_id}
          title={title}
          path={path}
          key={`asset-${_id}`}
          size=""small""
          showControls={false}
          onClick={this.props.onAssetSelect.bind(this, {_id, path, title})}
        />)
      : undefined;

    const assetForm = (this.state.addNewAsset)
      ?
      <AssetForm
        params={{ id: 'create' }}
        onSubmit={this._onAssetFormSubmit}
      />
      : undefined;

    return (
      <Layer flush={true} onClose={this.props.onClose}>
        <PageHeader title=""Assets"" controls={
            <Box direction=""row"" pad={{ between: 'medium' }}>
              <Button onClick={this._onAddAssetClick}>
                Add Asset
              </Button>
              <Button onClick={this.props.onClose}>
                Exit
              </Button>
            </Box>
          }
        />
        {assetForm}
        <Box full=""horizontal"" direction=""row"" pad=""medium""
          justify=""center"" wrap={true}>
          {assets}
        </Box>
      </Layer>
    );
  }
};

function mapStateToProps(state, props) {
  const { error, posts, request } = state.assets;
  return {
    error,
    posts,
    request
  };
}

export default connect(mapStateToProps)(DashboardAssetsLayer);
","Generate a React component that displays a layer with a list of assets and a form to add new assets. The component should use the grommet-cms library and redux for state management. The layer should have a header with a title and controls. The controls should include an ""Add Asset"" button and an ""Exit"" button. The list of assets should be displayed as a grid of tiles. The form to add new assets should be displayed when the ""Add Asset"" button is clicked. The component should handle the submission of the asset form and refresh the list of assets."
"// import React from 'react'
// import Enzyme, {mount} from 'enzyme'
// import Adapter from 'enzyme-adapter-react-16'
// import Calendar from '../Calendar'
// import DayWrapper from '../DayWrapper'
// import toJson from 'enzyme-to-json'
// import {equals, range, inc} from 'ramda'
// import jsdom from 'jsdom'

// Enzyme.configure({ adapter: new Adapter() })
// var exposedProperties = ['window', 'navigator', 'document']

// global.document = jsdom.jsdom('')
// global.window = document.defaultView
// Object.keys(document.defaultView).forEach((property) => {
//   if (typeof global[property] === 'undefined') {
//     exposedProperties.push(property)
//     global[property] = document.defaultView[property]
//   }
// })

// global.navigator = {
//   userAgent: 'node.js',
// }

// // const dayPicker = mount(<Calendar />)

","Set up the testing environment for a React component named Calendar, using Enzyme and JSDOM."
"import React from 'react';
import PropTypes from 'prop-types';
import paths from './paths';
import Face from '../common/face/Face';
import getUniqueId from '../../utils/getUniqueId';
import Wrapper from '../common/wrapper/Wrapper';

import Svg, { G, Path, Use, Defs, Mask } from 'react-native-svg';

const SpeechBubble = ({ size, color, mood, className }) => (
  <Wrapper className={className}>
    <Svg
      width={size}
      height={size}
      version=""1.1""
      viewBox=""0 0 134 134""
      xmlns=""http://www.w3.org/2000/svg""
      xmlnsXlink=""http://www.w3.org/1999/xlink""
    >
      <Defs>
        <Path d={paths.shape} id=""kawaii-speechBubble__shape--path"" />
        <Path d={paths.shadow} id=""kawaii-speechBubble__shadow--path"" />
      </Defs>
      <G id=""Kawaii-speechBubble"">
        <G id=""Kawaii-speechBubble__body"">
          <Mask fill=""#fff"">
            <Use
              xlinkHref=""#kawaii-speechBubble__shape--path""
              href=""#kawaii-speechBubble__shape--path""
            />
          </Mask>
          <Use
            id=""Kawaii-speechBubble__shape""
            fill={color}
            xlinkHref=""#kawaii-speechBubble__shape--path""
            href=""#kawaii-speechBubble__shape--path""
          />
          <Mask fill=""#fff"">
            <Use
              xlinkHref=""#kawaii-speechBubble__shadow--path""
              href=""#kawaii-speechBubble__shadow--path""
            />
          </Mask>
          <Use
            id=""Kawaii-speechBubble__shadow""
            fill=""#000""
            opacity="".1""
            xlinkHref=""#kawaii-speechBubble__shadow--path""
            href=""#kawaii-speechBubble__shadow--path""
          />
        </G>
        <Face
          mood={mood}
          transform=""translate(34 57)""
          uniqueId={getUniqueId()}
        />
      </G>
    </Svg>
  </Wrapper>
);

SpeechBubble.propTypes = {
  /**
   * Size of the width
   * */
  size: PropTypes.number,
  mood: PropTypes.oneOf([
    'sad',
    'shocked',
    'happy',
    'blissful',
    'lovestruck',
    'excited',
    'ko'
  ]),

  /**
   * Hex color
   */
  color: PropTypes.string
};

SpeechBubble.defaultProps = {
  size: 150,
  mood: 'blissful',
  color: '#83D1FB'
};

export default SpeechBubble;
","Create a React Native SVG component called `SpeechBubble` that renders a speech bubble shape with a customizable size, color, and mood. The bubble should have a gradient fill and a glossy highlight effect. Include a `Face` component inside the bubble that displays the specified mood."
"import React from 'react';
import { Link } from 'react-router';
import { Table, Button, Row, Col } from 'react-bootstrap';
import styles from './style.css';
import CustomAxios from '../../common/components/CustomAxios';
import NewClientForm from '../../common/components/NewClientForm';
import LoadingGifModal from '../../common/components/LoadingGifModal';
import dateFormat from 'dateFormat';

export default class ClientListPage extends React.Component {
  constructor() {
    super()
    this.state = {
      data: [],
      modalShow: false,
      loadingShow: false
    }

    this.showModal = this.showModal.bind(this);
    this.closeModal = this.closeModal.bind(this);
    this.refreshData = this.refreshData.bind(this);
    this.showLoading = this.showLoading.bind(this);
    this.hideLoading = this.hideLoading.bind(this);
  }

  componentDidMount() {
    this.getData();
  }
  
  getData() {
    this.showLoading();
    const axios = CustomAxios.wAxios;    
    axios.get('/basic_clients_data/')
      .then(function (response) {
        const results = response.data.results;
        var data = [];
        results.forEach(function(client,index) {
          data.push(
            <tr key={index}>
              <th>{index + 1}</th>
              <th><Link to={'/home/client/'+ client.pk} >{client.first_name + ' ' + client.last_name}</Link></th>
              <th>{client.atoll.name}</th>
              <th>{dateFormat(client.created_at, 'fullDate')}</th>
            </tr>
          );
        });
        this.setState({ data:data });
        this.hideLoading();
      }.bind(this))
      .catch(function (error) {
        console.log(error);
      });
  }

  showModal() {
    this.setState(() => ({
      modalShow: true
    }))
  }

  closeModal() {
    this.setState(() => ({
      modalShow: false
    }))
  }

  showLoading() {
    this.setState({
      loadingShow: true
    });
  }

  hideLoading() {
    this.setState({
      loadingShow: false
    });
  }

  refreshData() {
    this.setState(() => ({
      modalShow: false
    }))

    // Refresh data from Database
    this.getData();
    console.log('data refreshed');
  }

  render() {
    
    return (
      <div className={styles.content}>
        <h1 className={styles.heading}>Client Listing</h1>
        <Row>
          <Button bsStyle=""success"" className={styles.addButton} onClick={this.showModal}>+</Button>
        </Row>
        <Row>
          <Table striped bordered condensed hover responsive>
            <thead>
              <tr>
                <th>#</th>
                <th>Name</th>
                <th>Atoll</th>
                <th>Input Date</th>
              </tr>
            </thead>
            <tbody>
              {this.state.data}
            </tbody>
          </Table>
        </Row>
        <NewClientForm show={this.state.modalShow} onHide={this.closeModal} onAdd={()=>this.refreshData()} />
        <LoadingGifModal show={this.state.loadingShow} onHide={this.hideLoading} label='Loading Clients...'/>
      </div>
    );
  }
}
","Generate a React component that lists clients in a table with the following details: name, atoll, and input date. The component should also have a button to add a new client, which will open a modal form for inputting the client's details. The data should be fetched from an external API endpoint using Axios, and a loading indicator should be displayed while the data is being fetched."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let DeviceAddAlarm = (props) => (
  <SvgIcon {...props}>
    <path d=""M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm1-11h-2v3H8v2h3v3h2v-3h3v-2h-3V9z""/>
  </SvgIcon>
);
DeviceAddAlarm = pure(DeviceAddAlarm);
DeviceAddAlarm.displayName = 'DeviceAddAlarm';

export default DeviceAddAlarm;
","Provide an SVG React component that renders the ""Device Add Alarm"" icon from Google's Material Design library."
"import React from 'react';
import Comment from './CommentItem';
import moment from 'moment';

const CommentList = (props) => {
  return (
    <div className=""ui segment"">
      <div className=""ui comments"">
        <h3 className=""ui dividing header"">Comments</h3>
        {
          props.commentData.map((comment) => {
            return (
              <Comment
                username={comment.username}
                timeCreated={moment(comment.timeCreated).calendar()}
                text={comment.text}
              />
            );
          })
        }
        <form 
          className=""ui reply form"" 
          onSubmit={props.preventDefaultSubmit}
        >
          <div className=""field"">
            <label></label>
            <textarea
              rows=""2""
              value={props.reply}
              onChange={props.handleReplyChange}
            ></textarea>
          </div>
          <div 
            className=""ui labeled submit icon button""
            onClick={props.handleSubmit}
          >
            <i className=""icon edit""></i> Add Reply
          </div>
        </form>

      </div>
    </div>
  );
};

module.exports = CommentList;
","Create a React component to display a list of comments, including a submitted time and username. The component should also include a simple form for adding a new comment."
"import React, { Component } from 'react';
import { FormattedMessage } from 'react-intl';
import Input from '../../components/SweetInput/SweetInput';
import FormGroup from '../../components/Form/FormGroup';

class SelectTarget extends Component {
  constructor(props) {
    super(props);

    this.state = {
      searching: false,
      not_found: false,
      postcode: '',
      targets: [],
    };
  }

  getTarget = postcode => {
    this.setState({ postcode: postcode });

    if (!postcode) return;
    if (postcode.length < 5) return;

    this.setState({ searching: true, not_found: false });
    fetch(`${this.props.endpoint}${postcode}`)
      .then(resp => {
        if (resp.ok) {
          return resp.json();
        }
        throw new Error('not found.');
      })
      .then(json => {
        this.setState({ targets: json, searching: false });
        const data = { postcode, targets: json };
        this.props.handler(data);
      })
      .catch(e => {
        this.setState({ not_found: true, targets: [], searching: false });
        console.log('error', e);
      });
  };

  renderTarget({ id, title, first_name, last_name }) {
    return (
      <p key={id}>
        {title} {first_name} {last_name}
      </p>
    );
  }

  render() {
    let targets;

    if (this.state.not_found) {
      targets = (
        <FormattedMessage
          id=""email_tool.form.representative.not_found""
          defaultMessage=""Sorry, we couldn't find a target with this location.""
        />
      );
    } else {
      targets = this.state.targets.length ? (
        this.state.targets.map(target => this.renderTarget(target))
      ) : (
        <FormattedMessage
          id=""email_tool.form.representative.search_pending""
          defaultMessage=""Please enter your postal code above.""
        />
      );
    }

    return (
      <div>
        <FormGroup>
          <Input
            name=""postcode""
            type=""text""
            label={
              <FormattedMessage
                id=""email_tool.form.representative.postal_code""
                defaultMessage=""Enter your postal code""
              />
            }
            value={this.state.postcode}
            onChange={value => this.getTarget(value)}
            errorMessage={this.props.error}
          />
        </FormGroup>
        <FormGroup>
          <div className=""target-panel"">
            <h3>
              <FormattedMessage
                id=""email_tool.form.representative.selected_targets""
                defaultMessage=""Representatives""
              />
            </h3>
            <div className=""target-panel-body"">
              {this.state.searching ? (
                <FormattedMessage
                  id=""email_tool.form.representative.searching""
                  defaultMessage=""Searching for your representative""
                />
              ) : (
                targets
              )}
            </div>
          </div>
        </FormGroup>
      </div>
    );
  }
}

export default SelectTarget;
","Generate a React component that allows users to enter a postal code and displays a list of representatives for that location. The component should include a label for the input field, an input field for the postal code, a button to submit the form, and a list of representatives. The component should use a RESTful API to fetch the list of representatives."
"import React from 'react';
import IconBase from '@suitejs/icon-base';

function MdSettingsBluetooth(props) {
  return (
    <IconBase viewBox=""0 0 48 48"" {...props}>
      <path d=""M23 48h4v-4h-4v4zm-8 0h4v-4h-4v4zm16 0h4v-4h-4v4zm5.41-36.59L27.83 20l8.58 8.59L25 40h-2V24.83L13.83 34 11 31.17 22.17 20 11 8.83 13.83 6 23 15.17V0h2l11.41 11.41zM27 7.66v7.51l3.76-3.75L27 7.66zm3.76 20.93L27 24.83v7.51l3.76-3.75z"" />
    </IconBase>
  );
}

export default MdSettingsBluetooth;
",Design an SVG icon of a Bluetooth settings symbol for a React application.
"// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import CSSClassnames from '../../../utils/CSSClassnames';
import Intl from '../../../utils/Intl';
import Props from '../../../utils/Props';

const CLASS_ROOT = CSSClassnames.CONTROL_ICON;
const COLOR_INDEX = CSSClassnames.COLOR_INDEX;

export default class Icon extends Component {
  render () {
    const { className, colorIndex } = this.props;
    let { a11yTitle, size, responsive } = this.props;
    let { intl } = this.context;

    const classes = classnames(
      CLASS_ROOT,
      `${CLASS_ROOT}-diamond`,
      className,
      {
        [`${CLASS_ROOT}--${size}`]: size,
        [`${CLASS_ROOT}--responsive`]: responsive,
        [`${COLOR_INDEX}-${colorIndex}`]: colorIndex
      }
    );

    a11yTitle = a11yTitle || Intl.getMessage(intl, 'diamond');

    const restProps = Props.omit(this.props, Object.keys(Icon.propTypes));
    return <svg {...restProps} version=""1.1"" viewBox=""0 0 24 24"" width=""24px"" height=""24px"" role=""img"" className={classes} aria-label={a11yTitle}><path fill=""none"" stroke=""#000"" strokeWidth=""2"" d=""M6,3 L18,3 L22,9 L12,21 L2,9 L6,3 Z M2,9 L22,9 M11,3 L7,9 L12,20 M13,3 L17,9 L12,20""/></svg>;
  }
};

Icon.contextTypes = {
  intl: PropTypes.object
};

Icon.defaultProps = {
  responsive: true
};

Icon.displayName = 'Diamond';

Icon.icon = true;

Icon.propTypes = {
  a11yTitle: PropTypes.string,
  colorIndex: PropTypes.string,
  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'huge']),
  responsive: PropTypes.bool
};

",Describe an SVG React component that renders the diamond icon as an SVG using the classnames library. The component should be responsive by default. It should accept an optional accessibility title. The SVG should be 24px by 24px and use a black stroke with a 2px width. The component should accept an optional colorIndex prop to change the color of the stroke.
"import React from 'react'
import PropTypes from 'prop-types'

import { isValueEqual } from '../utils'

function OptionGroupRenderer(props) {
  const { groupTitleKey, groupValueKey, option, optionDisabledKey, value, valueKey } = props
  const checked =
    value &&
    value.length &&
    value.some(
      (val) =>
        isValueEqual(option, val, groupValueKey) ||
        (option.options &&
          option.options.length &&
          option.options.some((opt) => isValueEqual(opt, val, valueKey)))
    )
  const isDisabled = option[optionDisabledKey]

  const onChange = (e) => {
    e.preventDefault()
  }
  const controlId = `group-${option[groupValueKey]}`

  return (
    <span>
      <label htmlFor={controlId}>
        <input
          id={controlId}
          checked={checked}
          disabled={isDisabled}
          onChange={onChange}
          type=""checkbox""
        />
        {option[groupTitleKey]}
      </label>
    </span>
  )
}

OptionGroupRenderer.propTypes = {
  groupTitleKey: PropTypes.string.isRequired,
  groupValueKey: PropTypes.string.isRequired,
  option: PropTypes.object.isRequired,
  optionDisabledKey: PropTypes.string,
  value: PropTypes.oneOfType([
    PropTypes.array,
    PropTypes.number,
    PropTypes.object,
    PropTypes.string
  ]).isRequired,
  valueKey: PropTypes.string.isRequired
}

OptionGroupRenderer.defaultProps = {
  optionDisabledKey: 'isDisabled'
}

export default OptionGroupRenderer
",Create a React component that renders a checkbox input for an option group and sets the checked state based on the provided value.
"import React from 'react';
import ReactDOM from 'react-dom';
import Layout from './containers/layout';
import LeftPanel from './containers/left_panel';
import DownPanel from './containers/down_panel';
import ShortcutsHelp from './containers/shortcuts_help';
import SearchBox from './containers/search_box';

export default function(injectDeps, { clientStore, provider, domNode }) {
  // generate preview
  const Preview = () => {
    const state = clientStore.getAll();
    const preview = provider.renderPreview(state.selectedKind, state.selectedStory);
    return preview;
  };

  const root = (
    <div>
      <Layout
        leftPanel={() => <LeftPanel />}
        preview={() => <Preview />}
        downPanel={() => <DownPanel />}
      />
      <ShortcutsHelp />
      <SearchBox />
    </div>
  );
  ReactDOM.render(root, domNode);
}
","Create a React application with components for a layout, left panel, down panel, shortcuts help, and search box."
"import React from 'react';

import SPELLS from 'common/SPELLS';
import SpellIcon from 'common/SpellIcon';
import SpellLink from 'common/SpellLink';
import { formatNumber } from 'common/format';

import Module from 'Parser/Core/Module';
import AbilityTracker from 'Parser/Core/Modules/AbilityTracker';

import StatisticBox, { STATISTIC_ORDER } from 'Main/StatisticBox';

class AuraOfMercy extends Module {
  static dependencies = {
    abilityTracker: AbilityTracker,
  };

  on_initialized() {
    if (!this.owner.error) {
      this.active = this.owner.selectedCombatant.hasTalent(SPELLS.AURA_OF_MERCY_TALENT.id);
    }
  }

  get healing() {
    const abilityTracker = this.abilityTracker;
    const getAbility = spellId => abilityTracker.getAbility(spellId);

    return (getAbility(SPELLS.AURA_OF_MERCY_HEAL.id).healingEffective + getAbility(SPELLS.AURA_OF_MERCY_HEAL.id).healingAbsorbed);
  }
  get hps() {
    return this.healing / this.owner.fightDuration * 1000;
  }

  suggestions(when) {
    when(this.auraOfSacrificeHps).isLessThan(30000)
      .addSuggestion((suggest, actual, recommended) => {
        return suggest(<span>The healing done by your <SpellLink id={SPELLS.AURA_OF_SACRIFICE_TALENT.id} /> is low. Try to find a better moment to cast it or consider changing to <SpellLink id={SPELLS.AURA_OF_MERCY_TALENT.id} /> or <SpellLink id={SPELLS.DEVOTION_AURA_TALENT.id} /> which can be more reliable.</span>)
          .icon(SPELLS.AURA_OF_SACRIFICE_TALENT.icon)
          .actual(`${formatNumber(actual)} HPS`)
          .recommended(`>${formatNumber(recommended)} HPS is recommended`)
          .regular(recommended - 5000).major(recommended - 10000);
      });
  }
  statistic() {
    return (
      <StatisticBox
        icon={<SpellIcon id={SPELLS.AURA_OF_MERCY_TALENT.id} />}
        value={`${formatNumber(this.hps)} HPS`}
        label=""Healing done""
      />
    );
  }
  statisticOrder = STATISTIC_ORDER.OPTIONAL();
}

export default AuraOfMercy;
","Describe a code snippet that creates a React component to display statistics about the Healing per Second (HPS) of a spell called ""Aura of Mercy"" in a game. The component should include a suggestion if the HPS is below a certain threshold, recommending switching to other spells."
"import React from 'react';
import PropTypes from 'prop-types';
import { Box } from '@strapi/design-system/Box';
import { Flex } from '@strapi/design-system/Flex';
import { Link } from '@strapi/design-system/Link';
import { Typography } from '@strapi/design-system/Typography';
import Cog from '@strapi/icons/Cog';
import { useIntl } from 'react-intl';
import get from 'lodash/get';
import { Grid, GridItem } from '@strapi/design-system/Grid';
import useLayoutDnd from '../../../hooks/useLayoutDnd';
import getTrad from '../../../utils/getTrad';

const ComponentFieldList = ({ componentUid }) => {
  const { componentLayouts } = useLayoutDnd();
  const { formatMessage } = useIntl();
  const componentData = get(componentLayouts, [componentUid], {});
  const componentLayout = get(componentData, ['layouts', 'edit'], []);

  return (
    <Box padding={3}>
      {componentLayout.map((row, index) => (
        // eslint-disable-next-line react/no-array-index-key
        <Grid gap={4} key={index}>
          {row.map(rowContent => (
            <GridItem key={rowContent.name} col={rowContent.size}>
              <Box paddingTop={2}>
                <Flex
                  alignItems=""center""
                  background=""neutral0""
                  paddingLeft={3}
                  paddingRight={3}
                  height={`${32 / 16}rem`}
                  hasRadius
                  borderColor=""neutral200""
                >
                  <Typography textColor=""neutral800"">{rowContent.name}</Typography>
                </Flex>
              </Box>
            </GridItem>
          ))}
        </Grid>
      ))}
      <Box paddingTop={2}>
        <Link
          startIcon={<Cog />}
          to={`/content-manager/components/${componentUid}/configurations/edit`}
        >
          {formatMessage({
            id: getTrad('components.FieldItem.linkToComponentLayout'),
            defaultMessage: ""Set the component's layout"",
          })}
        </Link>
      </Box>
    </Box>
  );
};

ComponentFieldList.propTypes = {
  componentUid: PropTypes.string.isRequired,
};

export default ComponentFieldList;
",Create the React component that displays the fields of a component. It should allow the user to view the configured fields and navigate to the component layout configuration page. Ensure that the component is well-structured and follows the Strapi design guidelines.
"import React, { Component } from 'react';
import classNames from 'classnames';

import mergeStyles from '../lib/mergeStyles';


export default class SongInput extends Component {
  handleChange(event) {
    this.props.updateSong({
      idx: this.props.songIdx,
      key: this.props.label,
      val: event.target.value
    });
  }

  render() {
    let gridStyle = mergeStyles({
      marginTop: 5
    });

    let labelId = ""label-"" + this.props.label;

    return (
      <div
        style={ gridStyle }>
        <div className=""input-group"">
          <span
            className=""input-group-addon""
            id={ labelId }>{ this.props.label }</span>
            <input
              type=""text""
              tabIndex='2'
              className={ ""form-control "" +  labelId }
              aria-describedby={ labelId }
              value={ this.props.val }
              onChange={ (e) => this.handleChange(e) }
              />
        </div>
      </div>
    );
  }
}
",Describe the functionality of the following React component: SongInput.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let FileFileDownload = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z""/>
  </SvgIcon>
);
FileFileDownload = pure(FileFileDownload);
FileFileDownload.displayName = 'FileFileDownload';
FileFileDownload.muiName = 'SvgIcon';

export default FileFileDownload;
","Design an SVG icon that represents downloading a file. The icon should display a vertical arrow pointing downward on the right side, centered within a rectangular file outline."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';

class Separator extends Component{

    getStyle(){
        return {
            color : ""#f4f5f8"",
            margin: ""20px -10px"",
            width : ""100%""
        };
    }

    render(){

        const { style } = this.props;

        return(
            <hr  style = {style ? style : this.getStyle()}/>
        );

    }
}

Separator.propTypes = {
    /**
     * Style
     */
    style : PropTypes.object
};

export default Separator;",Create a React component named `Separator`  that draws a horizontal line across the page. The line should have a color of `#f4f5f8` and margins of `20px -10px`. The component should accept a `style` prop that allows users to override the default styles.
"import React from 'react';
import TimePicker from 'material-ui/TimePicker';

const TimePickerExampleSimple = () => (
  <div>
    <TimePicker
      hintText=""12hr Format""
    />
    <TimePicker
      format=""24hr""
      hintText=""24hr Format""
    />
    <TimePicker
      disabled={true}
      format=""24hr""
      hintText=""Disabled TimePicker""
    />
  </div>
);

export default TimePickerExampleSimple;
","Create a React component that displays three time pickers: one in 12-hour format, one disabled in 24-hour format, and one in 24-hour format. Use the Material-UI library for React."
"import React from 'react';
import classNames from 'classnames';
import BootstrapMixin from './BootstrapMixin';

const Alert = React.createClass({
  mixins: [BootstrapMixin],

  propTypes: {
    onDismiss: React.PropTypes.func,
    dismissAfter: React.PropTypes.number,
    closeLabel: React.PropTypes.string
  },

  getDefaultProps() {
    return {
      bsClass: 'alert',
      bsStyle: 'info',
      closeLabel: 'Close Alert'
    };
  },

  renderDismissButton() {
    return (
      <button
        type=""button""
        className=""close""
        onClick={this.props.onDismiss}
        aria-hidden=""true"">
        <span>&times;</span>
      </button>
    );
  },

  renderSrOnlyDismissButton() {
    return (
      <button
        type=""button""
        className=""close sr-only""
        onClick={this.props.onDismiss}>
        {this.props.closeLabel}
      </button>
    );
  },

  render() {
    let classes = this.getBsClassSet();
    let isDismissable = !!this.props.onDismiss;

    classes['alert-dismissable'] = isDismissable;

    return (
      <div {...this.props} role=""alert"" className={classNames(this.props.className, classes)}>
        {isDismissable ? this.renderDismissButton() : null}
        {this.props.children}
        {isDismissable ? this.renderSrOnlyDismissButton() : null}
      </div>
    );
  },

  componentDidMount() {
    if (this.props.dismissAfter && this.props.onDismiss) {
      this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
    }
  },

  componentWillUnmount() {
    clearTimeout(this.dismissTimer);
  }
});

export default Alert;
",Design a React component that displays a dismissible alert message with a close button that triggers an `onDismiss` callback function and supports automatic dismissal after a specified time. The component should render a visually appealing alert box with appropriate styling and ARIA roles.
"/**
 * Copyright 2017 Red Hat Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import { defineMessages, injectIntl } from 'react-intl';
import { Field } from 'redux-form';
import { format, required } from 'redux-form-validators';
import PropTypes from 'prop-types';
import React from 'react';

import HorizontalInput from '../../../ui/reduxForm/HorizontalInput';
import HorizontalTextarea from '../../../ui/reduxForm/HorizontalTextarea';
import { IPV4_REGEX, FQDN_REGEX, PORT_REGEX } from '../../../../utils/regex';

const messages = defineMessages({
  ipOrFqdnValidatorMessage: {
    id: 'DriverFields.ipOrFqdnValidatorMessage',
    defaultMessage: 'Please enter a valid IPv4 Address or a valid FQDN.'
  },
  portValidationMessage: {
    id: 'DriverFields.portValidationMessage',
    defaultMessage: 'Please enter valid Port number (0 - 65535)'
  }
});

export const DriverFields = ({
  addressLabel,
  intl: { formatMessage },
  passwordLabel,
  portLabel,
  node,
  userLabel
}) => (
  <div>
    <Field
      name={`${node}.pm_addr`}
      component={HorizontalInput}
      id={`${node}.pm_addr`}
      label={addressLabel}
      validate={[
        format({
          with: new RegExp(IPV4_REGEX.source + '|' + FQDN_REGEX.source),
          message: formatMessage(messages.ipOrFqdnValidatorMessage)
        }),
        required()
      ]}
      required
    />
    <Field
      name={`${node}.pm_port`}
      component={HorizontalInput}
      id={`${node}.pm_port`}
      label={portLabel}
      type=""number""
      min={0}
      max={65535}
      validate={[
        format({
          with: PORT_REGEX,
          message: formatMessage(messages.portValidationMessage),
          allowBlank: true
        })
      ]}
    />
    <Field
      name={`${node}.pm_user`}
      component={HorizontalInput}
      id={`${node}.pm_user`}
      label={userLabel}
      validate={required()}
      required
    />
    <Field
      name={`${node}.pm_password`}
      component={HorizontalTextarea}
      id={`${node}.pm_password`}
      label={passwordLabel}
      validate={required()}
      required
    />
  </div>
);
DriverFields.propTypes = {
  addressLabel: PropTypes.string.isRequired,
  intl: PropTypes.object.isRequired,
  node: PropTypes.string.isRequired,
  passwordLabel: PropTypes.string.isRequired,
  portLabel: PropTypes.string.isRequired,
  userLabel: PropTypes.string.isRequired
};

export default injectIntl(DriverFields);
","Generate the code snippet for a React component that displays a form with fields for a Power Management IP address/FQDN, port, user, and password. The component should use redux-form for validation. The IP address/FQDN field should validate for valid IPv4 addresses or FQDNs, and the port field should validate for valid port numbers within a specified range."
"import React from 'react';
import { connect } from 'react-redux';
import { Link, browserHistory } from 'react-router';
import { bindActionCreators } from 'redux';
import Dialog from 'material-ui/Dialog';
import FlatButton from 'material-ui/FlatButton';
import RaisedButton from 'material-ui/RaisedButton';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import PropTypes from 'prop-types';
import toastr from 'toastr';
import { Input } from '../../containers';
import * as roleAction from '../../actions/roleAction';
import DashboardHeader from '../common/DashboardHeader';

export class RoleUpdate extends React.Component {
  /**
    * RoleUpdate class
    * It is for updating role description
  */
  constructor(props) {
    super(props);
    this.state = {
      roles: {
        roleId: this.props.params.roleId
      },
      open: true
    };
    this.onRoleChange = this.onRoleChange.bind(this);
    this.onRoleUpdate = this.onRoleUpdate.bind(this);
    this.handleClose = this.handleClose.bind(this);
  }

  componentWillMount() {
    this.props.actions.loadRole(this.props.params);
  }

  componentWillReceiveProps(nextProps) {
    const role = nextProps.roles;
    this.setState({
      roles: role
    });
  }

  onRoleChange(event) {
    event.preventDefault();
    const field = event.target.name;
    const roles = this.state.roles;
    roles[field] = event.target.value;
    return this.setState({ roles });
  }

  onRoleUpdate(event) {
    event.preventDefault();
    this.props.actions.updateRole(this.state.roles)
      .then(() => {
        this.setState({ open: false });
        browserHistory.push('/roles');
      })
      .catch((error) => {
        toastr.error(error.response.data.message);
      });
  }

  handleClose() {
    this.setState({ open: false });
    browserHistory.push('/roles');
  }

  render() {
    console.log(this.props, ""llll"")
    const { roles } = this.props;
    const actions = [
      <FlatButton
        style={{ color: ""red"", margin: "" 0 15% 0 15%"", padding: "" 0 4% 0 4% "" }}
        label=""Cancel""
        primary={true}
        onClick={this.handleClose}
      />,
      <FlatButton
        style={{ color: ""green"", margin: "" 0 15% 0 15%"", padding: "" 0 4% 0 4% "" }}
        label=""Update""
        primary={true}
        keyboardFocused={true}
        onClick={this.onRoleUpdate}
      />];
    return (
      <div>
        <DashboardHeader />
        <div>
          <MuiThemeProvider>
            <Dialog
              actions={actions}
              modal={false}
              open={this.state.open}
              onRequestClose={this.handleClose}
            >
              <div className=""row"">
                <div className=""col s10 offset-m1"">
                  <p>Role: {this.state.roles.title}</p>
                </div>
              </div>
              <form>
                <Input
                  name=""description""
                  label=""Description""
                  type=""text""
                  value={this.state.roles.description}
                  onChange={this.onRoleChange}
                />
              </form>
            </Dialog>
          </MuiThemeProvider>
        </div>
      </div>
    );
  }
}
RoleUpdate.propTypes = {
  roles: PropTypes.object,
  actions: PropTypes.object,
  params: PropTypes.object,
};

const mapStateToProps = (state, ownProps) => ({
  roles: state.roles
});

const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(roleAction, dispatch)
});

export default connect(mapStateToProps, mapDispatchToProps)(RoleUpdate);
","Generate the React component code for a form to update a role's description. The page includes a prepopulated field with the current description and an update button. If the update is successful, display a success message and redirect to the roles page. If there's an error, display an error message. Include the necessary imports, actions, and propTypes."
"import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/Application';
import ContentContainer from './containers/Content';
import NotesList from './components/NotesList';
import ChangesetsList from './components/ChangesetsList';
import { Router, Route, IndexRoute, Redirect } from 'react-router';
import createHistory from 'history/lib/createHashHistory';

const history = createHistory({
    queryKey: false
});

const routes = (
    <Router history={history}>
        <Redirect from=""/"" to=""changesets/"" />
        <Route path=""/"" component={App}>
            <Route path=""notes/"" component={NotesList} />
            <Route path=""changesets/"" component={ChangesetsList} />
        </Route>
    </Router>
);

ReactDOM.render(routes, document.getElementById('application'));
","Create a React application with a router that includes a welcome page, a notes page, and a changesets page. The welcome page should redirect to the changesets page. The notes page and changesets page should be accessible via the 'notes/' and 'changesets/' routes respectively."
"import React from 'react'

const Bar = () => <strong>bar</strong>

export default Bar
","Create a React component named `Bar` that displays the text ""bar"" in bold within a strong element."
"// It is important to import the Editor which accepts plugins.
// eslint-disable-next-line import/no-unresolved
import Editor from 'draft-js-plugins-editor';
// eslint-disable-next-line import/no-unresolved
import createImagePlugin from 'draft-js-image-plugin';
import React from 'react';

const imagePlugin = createImagePlugin();

// The Editor accepts an array of plugins. In this case, only the imagePlugin
// is passed in, although it is possible to pass in multiple plugins.
const MyEditor = ({ editorState, onChange }) => (
  <Editor
    editorState={editorState}
    onChange={onChange}
    plugins={[imagePlugin]}
  />
);

export default MyEditor;
",Create a React component using draft-js-plugins-editor and draft-js-image-plugin that allows users to enter and edit rich text with embedded images.
"import React from 'react';

const FocusTrap = React.createClass({

  propTypes: {
    onFocus: React.PropTypes.func,
    onBlur: React.PropTypes.func,
    focusName: React.PropTypes.string, // Currently unused
    component: React.PropTypes.any
  },

  getDefaultProps() {
    return {
      component: 'div'
    }
  },

  render() {
    const Component = this.props.component;

    return (
      <Component tabIndex=""-1"" {...this.props}>
        {this.props.children}
      </Component>
    );
  }

});

export default FocusTrap;
",Create a React component that prevents focus from leaving it.
"import React from 'react';
import classNames from 'classnames';

const PageHeader = React.createClass({
  render() {
    return (
      <div {...this.props} className={classNames(this.props.className, 'page-header')}>
        <h1>{this.props.children}</h1>
      </div>
    );
  }
});

export default PageHeader;
","Describe in detail a React component that represents a page header, including the usage of the classNames library to combine its own class with a provided one."
"import React from 'react';

// TODO: extract to core
const withProtectedView = (
  ProtectedComponent,
  ProtectionComponent,
  protectionFn,
  extraProtectionProps = {}
) => props =>
  protectionFn(props) ? (
    <ProtectedComponent {...props} />
  ) : (
    <ProtectionComponent {...props} {...extraProtectionProps} />
  );

export default withProtectedView;
","Create a React higher-order component that decides which component to render based on a protection function, taking in a protected component, a protection component, a protection function, and an object of extra props to pass specifically to the protection component."
"/*
 * Copyright (C) 2019 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import React from 'react'

export const StudentViewContextDefaults = {
  // Controls for moving back and forth between displayed submissions
  nextButtonAction: () => {},
  nextButtonEnabled: false,
  prevButtonAction: () => {},
  prevButtonEnabled: false,
  startNewAttemptAction: () => {},

  // Used to display the most current grade in the header, regardless of the
  // current attempt being displayed in the student view
  latestSubmission: {}
}

const StudentViewContext = React.createContext(StudentViewContextDefaults)

export default StudentViewContext
","Provide React code to create a context with default values for navigating through student submissions, such as next and previous buttons."
"/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';

export default class extends Component {
  static propTypes = {
    onReady: PropTypes.func.isRequired,
  };

  users = [
    { id: 1, name: '1' },
    { id: 2, name: '2' },
    { id: 3, name: '3' },
    { id: 4, name: '4' },
  ];

  componentDidMount() {
    this.props.onReady();
  }

  render() {
    return (
      <div id=""feature-class-properties"">
        {this.users.map(user => <div key={user.id}>{user.name}</div>)}
      </div>
    );
  }
}
",Describe a React component that renders a list of users taken from the component's `users` property. The component should have one required prop called `onReady` that is a function. The component should call the `onReady` function when the component mounts.
"import { Router, Route, IndexRoute, Redirect, Link, browserHistory } from 'react-router'
import React from 'react'

import SysTpl from './artboardtabs/SysTpl'

export default class ArtBoardTabs extends React.Component {
  constructor() {
    super();
    this.addTpl = this.addTpl.bind(this);

    this.state = {
      activeId: 0,
      tabs: [
        {name: '系统模版', id: 0, icon: 'fa-paper-plane', children: <SysTpl addTpl={this.addTpl} />},
        {name: '草稿箱', id: 1, icon: 'fa-archive'}
      ]
    }

    this.handleTabClick = this.handleTabClick.bind(this);
  }
  
  addTpl(tpl) {
    this.props.addTpl(tpl);
  }

  handleTabClick(tab) {
    return () => {
      if (tab.id != this.state.activeId) {
        this.setState({
          activeId: tab.id
        });
      }
    }
  }

  render() {
    let createItem = (tab) => {
      let className = 'item';

      if (tab.id == this.state.activeId) {
        this.children = tab.children;
        className = 'item active';
      }

      return (
        <li key={tab.id} className={className} onClick={this.handleTabClick(tab)} >
          <i className={'fa ' + tab.icon}></i><span className=""title"">{tab.name}</span>
        </li>
      )
    }

    return (
      <aside className=""sidebar"">
        <ul className=""tabs"">{this.state.tabs.map(createItem)}</ul>
        <div className=""tab-body"">
        {this.children}
        </div>
      </aside>
    )
  }
}
","Design a responsive sidebar for a web application that contains a list of tabs. When a tab is clicked, it should highlight the tab and display the corresponding content in the main area. The sidebar should be on the left side of the page and the content area should be on the right side."
"import PropTypes from 'prop-types';
import React from 'react';
import styles from './VirtualTableHeader.css';

function VirtualTableHeader({ children }) {
  return (
    <div className={styles.header}>
      {children}
    </div>
  );
}

VirtualTableHeader.propTypes = {
  children: PropTypes.node
};

export default VirtualTableHeader;
",Create a React component that takes children as its props and renders a header with the children as its content. The header should be styled using a CSS file called VirtualTableHeader.css.
"import React from 'react';
import {Navbar, Grid, Row, Col} from 'react-bootstrap';
import {Formulario} from './form';
import {Resultado} from './resultado';
export class Tabela extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      formData: {}
    };
    this.handleUserInput = this.handleUserInput.bind(this);
  }
  handleUserInput(data) {
    this.setState({formData: data.formData});
  }
  render() {
    return (
      <div>
        <Navbar>
          <Navbar.Header>
            <Navbar.Brand>
              <a href=""#"">Simulador EBTT</a>
            </Navbar.Brand>
          </Navbar.Header>
        </Navbar>
        <Grid>
          <Row className=""show-grid"">
            <Col xs={12} md={6}>
              <Formulario formData={this.state.formData} onUserInput={this.handleUserInput}/>
            </Col>
            <Col xs={12} md={6}>
              <Resultado formData={this.state.formData} onUserInput={this.handleUserInput}/>
            </Col>
          </Row>
        </Grid>
      </div>
    );
  }
}

",Design a React application with a form and a results section. The form should capture user input and pass it to the results section to display the output. Use React Bootstrap for layout and styling.
"import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
import Flag from './Flag'
import ColorPicker from './ColorPicker'

class App extends Component {
  constructor(props) {
        super(props);
    const defaultColor= ""blue""
    this.state = {
      color: defaultColor 
    }
  };

  updateColor(color) {
   this.setState ({
       color: color
      });
 };


  render() {
    const onChangeColor= this.updateColor.bind(this);
    return (
      <div className=""App"">
        <div className=""App-header"">
          <img src={logo} className=""App-logo"" alt=""logo"" />
          <h2>Welcome to React</h2>
        </div>
        <div className=""Primary-flag"">
          <Flag color={this.state.color} editable={true} />
        </div>
        <ColorPicker color={this.state.color} onChange={onChangeColor}/>

      </div>
    );
  }
}

export default App;
",Create a React application with a flag component that can change its color. Add a color picker component that allows the user to select a new color for the flag. The flag component should display the selected color and the color picker component should update the flag's color when a new color is selected.
"import classNames from 'classnames';
import React from 'react';

import CustomPropTypes from './utils/CustomPropTypes';

export default class Tooltip extends React.Component {
  render() {
    const {
      placement,
      positionLeft,
      positionTop,
      arrowOffsetLeft,
      arrowOffsetTop,
      className,
      style,
      children,
      ...props
    } = this.props;

    return (
      <div
        role=""tooltip""
        {...props}
        className={classNames(className, 'tooltip', placement)}
        style={{left: positionLeft, top: positionTop, ...style}}
      >
        <div
          className=""tooltip-arrow""
          style={{left: arrowOffsetLeft, top: arrowOffsetTop}}
        />

        <div className=""tooltip-inner"">
          {children}
        </div>
      </div>
    );
  }
}

Tooltip.propTypes = {
  /**
   * An html id attribute, necessary for accessibility
   * @type {string}
   * @required
   */
  id: CustomPropTypes.isRequiredForA11y(
    React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.number
    ])
  ),

  /**
   * The direction the tooltip is positioned towards
   */
  placement: React.PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

  /**
   * The `left` position value for the tooltip
   */
  positionLeft: React.PropTypes.number,
  /**
   * The `top` position value for the tooltip
   */
  positionTop: React.PropTypes.number,
  /**
   * The `left` position value for the tooltip arrow
   */
  arrowOffsetLeft: React.PropTypes.oneOfType([
    React.PropTypes.number, React.PropTypes.string
  ]),
  /**
   * The `top` position value for the tooltip arrow
   */
  arrowOffsetTop: React.PropTypes.oneOfType([
    React.PropTypes.number, React.PropTypes.string
  ])
};

Tooltip.defaultProps = {
  placement: 'right'
};
",Describe a reusable React component for creating tooltips that can be positioned anywhere around an element and can be customized with various styles and arrow offsets.
"import React from 'react';
import { View, TabBarIOS } from 'react-native';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as githubActions from './githubActions';
import {onLogout} from './../Login/loginActions';
import routes from './../../scripts/routes';

import Loading from './Loading';
import Feed from './Feed';
import User from './User';

class TabsScreen extends React.Component {
    static propTypes = {
        state: React.PropTypes.object.isRequired,
        user: React.PropTypes.object,
        loggedIn: React.PropTypes.bool,
        navigator: React.PropTypes.object.isRequired,

        onLogout: React.PropTypes.func.isRequired,
        onGithubLoad: React.PropTypes.func.isRequired,
        onLoadMore: React.PropTypes.func.isRequired,
        onChangeTab: React.PropTypes.func.isRequired
    };

    componentDidMount() {
        if (this.props.loggedIn) {
            this.props.onGithubLoad(this.props.user);
        }
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.loggedIn !== nextProps.loggedIn && !nextProps.loggedIn) {
            let route = routes.getLoginRoute();
            this.props.navigator.replace(route);
        }
    }

    render() {
        if (this.props.state.loading) {
            return <Loading />;
        }

        return (
            <TabBarIOS>
                <TabBarIOS.Item
                    title='Github Feed'
                    selected={this.props.state.selectedTab === 'feed'}
                    onPress={this.changeTab.bind(this, 'feed')}
                    icon={require('./feed.png')}
                >
                    <View style={styles.view}>
                        <Feed
                            navigator={this.props.navigator}
                            feed={this.props.state.feed}
                            onLoadMore={this.props.onLoadMore}
                        />
                    </View>
                </TabBarIOS.Item>
                <TabBarIOS.Item
                    title='User Info'
                    selected={this.props.state.selectedTab === 'user'}
                    onPress={this.changeTab.bind(this, 'user')}
                    icon={require('./user.png')}
                >
                    <View style={styles.view}>
                        <User
                            user={this.props.user}
                            repos={this.props.state.repos}
                        />
                    </View>
                </TabBarIOS.Item>
                <TabBarIOS.Item
                    title='Log out'
                    selected={false}
                    icon={require('./signout.png')}
                    onPress={::this.logout}
                >
                </TabBarIOS.Item>
            </TabBarIOS>
        );
    }

    logout() {
        this.props.onLogout();
    }

    changeTab(tab) {
        this.props.onChangeTab(tab);
    }
}

const styles = {
    view: {
        flex: 1
    }
};

function mapStateToProps(state) {
    return {
        state: state.github,
        user: state.login.user,
        loggedIn: state.login.loggedIn
    };
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(Object.assign(githubActions, {onLogout}), dispatch);
}

export default connect(mapStateToProps, mapDispatchToProps)(TabsScreen);

","Create a tabbed interface for a mobile application that displays data from different sources. The tabs should be named ""Github Feed"", ""User Info"", and ""Log out"". The ""Github Feed"" tab should display a list of items with the ability to load more. The ""User Info"" tab should display information about the current user, including their repositories. The ""Log out"" tab should log the user out of the application."
"import React from 'react'
import PropTypes from 'prop-types'

import Link from './../../utils/Link'

const ControlSidebarToggle = ({href, onToggle}) => {
  return (
    <li>
      <Link href={href} onClick={onToggle}>
        <i className='fa fa-gears' />
      </Link>
    </li>
  )
}

ControlSidebarToggle.propTypes = {
  href: PropTypes.string,
  onToggle: PropTypes.func
}

export default ControlSidebarToggle
","Create a React component called `ControlSidebarToggle` that receives two props: `href`, a link to navigate to when the component is clicked, and `onToggle`, a function to execute when the component is clicked. The component should contain a link with an onClick event that triggers both the `href` navigation and the `onToggle` function. The link should display a gear icon."
"import React from 'react';
import ReactDOM from 'react-dom';
import ClickOutside from 'react-click-outside';
import PropTypes from 'prop-types';
import {default as Component} from '../Common/plugs/index.js'; //提供style, classname方法

import Button from '../Button/Button';
import ButtonGroup from '../Button/ButtonGroup';
import '../Common/css/Dropdown.css'
Button.Group = ButtonGroup;
class Dropdown extends Component {

  constructor(props) {
    super(props);

    this.state = {
      visible: false
    }
  }

  getChildContext() {
    return {
      component: this
    };
  }

  componentDidMount() {
    this.initEvent();
  }

  componentWillUpdate(props, state) {
    if (state.visible !== this.state.visible) {
      this.refs.dropdown.onVisibleChange(state.visible);

      if (this.props.onVisibleChange) {
        this.props.onVisibleChange(state.visible);
      }
    }
  }

  handleClickOutside() {
    if (this.state.visible) {
      this.setState({ visible: false });
    }
  }

  show() {
    clearTimeout(this.timeout);
    this.timeout = setTimeout(() => this.setState({ visible: true }), 250);
  }

  hide() {
    clearTimeout(this.timeout);
    this.timeout = setTimeout(() => this.setState({ visible: false }), 150);
  }

  handleClick() {
    this.setState({ visible: !this.state.visible });
  }

  initEvent() {
    const { trigger, splitButton } = this.props;
    const triggerElm = ReactDOM.findDOMNode(splitButton ? this.refs.trigger : this.refs.default);

    if (trigger === 'hover') {
      triggerElm.addEventListener('mouseenter', this.show.bind(this));
      triggerElm.addEventListener('mouseleave', this.hide.bind(this));

      let dropdownElm = ReactDOM.findDOMNode(this.refs.dropdown);

      dropdownElm.addEventListener('mouseenter', this.show.bind(this));
      dropdownElm.addEventListener('mouseleave', this.hide.bind(this));
    } else if (trigger === 'click') {
      triggerElm.addEventListener('click', this.handleClick.bind(this));
    }
  }

  handleMenuItemClick(command, instance) {
    if (this.props.hideOnClick) {
      this.setState({
        visible: false
      });
    }

    if (this.props.onCommand) {
      setTimeout(() => {
        this.props.onCommand(command, instance);
      });
    }
  }

  render(){
    const { splitButton, type, size, menu } = this.props;

    return (
      <div style={this.style()} className={this.className('ishow-dropdown')}>
        {
          splitButton ?  (
            <Button.Group>
              <Button type={type} size={size} onClick={this.props.onClick.bind(this)}>
                {this.props.children}
              </Button>
              <Button ref=""trigger"" type={type} size={size} className=""ishow-dropdown__caret-button"">
                <i className=""ishow-dropdown__icon ishow-icon-caret-bottom""></i>
              </Button>
            </Button.Group>
          ) : React.cloneElement(this.props.children, { ref: 'default' })
        }
        {
          React.cloneElement(menu, {
            ref: 'dropdown'
          })
        }
      </div>
    )
  }
}

Dropdown.childContextTypes = {
  component: PropTypes.any
};

Dropdown.propTypes = {
  menu: PropTypes.node.isRequired,
  type: PropTypes.string,
  size: PropTypes.string,
  trigger: PropTypes.oneOf(['hover', 'click']),
  menuAlign: PropTypes.oneOf(['start', 'end']),
  splitButton: PropTypes.bool,
  hideOnClick: PropTypes.bool,
  onClick: PropTypes.func,
  onCommand: PropTypes.func,
  onVisibleChange: PropTypes.func
}

Dropdown.defaultProps = {
  hideOnClick: true,
  trigger: 'hover',
  menuAlign: 'end'
}

export default ClickOutside(Dropdown);
","Generate the React component code for a Dropdown, including event handling for showing and hiding the dropdown, handling menu item clicks, and supporting various trigger modes and button options. The component should have customizable CSS classes for styling."
"/**
*
* ProfileCompleted
*
*/

import React from 'react';
import { FormattedMessage } from 'react-intl';
import { Row, Col } from 'react-flexbox-grid';
import moment from 'moment';
import styled from 'styled-components';

import HOCAuth from 'features/user/hoc/HOCAuth';

import { UserPropTypes } from 'features/user/constants';
import Box from 'features/common_ui/components/Box';
import Text from 'features/common_ui/components/Text';
import { GreenButton } from 'features/common_ui/components/Button';

import messages from './messages';

const StyledProfileCompleted = styled.div`
  height: 100%;
  width: 100%;

  .title {
    margin-bottom: 30px;
  }

  .continue {
    margin-top: 30px;
  }
`;

const ProfileCompleted = ({ user }) => (
  <StyledProfileCompleted>
    {user && (
      <div>
        <Row>
          <Col xs={12}>
            <Text className=""title"" tag=""h1"" size={Theme.Metrics.title} message={messages.title} />
          </Col>
        </Row>
        <Row>
          <Col xs={12}>
            <Text tag=""p"" message={messages.body} />
          </Col>
        </Row>
        <Row>
          <Col>
            <GreenButton className=""continue"" linkTo={'/profile'} message={messages.continue} />
          </Col>
        </Row>
      </div>
    )}
  </StyledProfileCompleted>
);

ProfileCompleted.defaultProps = {
  user: undefined,
};

ProfileCompleted.propTypes = {
  user: UserPropTypes,
};

export default HOCAuth(ProfileCompleted);
","Generate the React component ""ProfileCompleted"" that will display a message to the user indicating that their profile is complete. The component should have a title, body text, and a continue button that links to the user's profile page. Style the component using styled-components and ensure it is responsive for different screen sizes."
"/**
 * mSupply Mobile
 * Sustainable Solutions (NZ) Ltd. 2021
 */

import React from 'react';
import { StyleSheet } from 'react-native';
import PropTypes from 'prop-types';
import { RNCamera } from 'react-native-camera';
import BarcodeMask from 'react-native-barcode-mask';
import { ModalContainer } from './ModalContainer';
import { SUSSOL_ORANGE } from '../../globalStyles/colors';
import { modalStrings } from '../../localization/index';
import { FlexRow } from '../FlexRow';

export const QrScannerModal = ({ isOpen, onClose, onBarCodeRead }) => (
  <ModalContainer
    isVisible={isOpen}
    onBarcodeRead={onBarCodeRead}
    onClose={onClose}
    title={modalStrings.qr_scanner_header}
  >
    <FlexRow flex={1} justifyContent=""center"">
      <RNCamera
        androidCameraPermissionOptions={{
          title: 'Camera access is required to scan QR codes',
          message: 'Your device will prompt you for access on the next screen.',
          buttonPositive: 'Ok',
          buttonNegative: 'Cancel',
        }}
        barCodeTypes={[RNCamera.Constants.BarCodeType.qr]}
        captureAudio={false}
        flashMode={RNCamera.Constants.FlashMode.on}
        onBarCodeRead={onBarCodeRead}
        style={localStyles.preview}
      >
        <BarcodeMask edgeColor={SUSSOL_ORANGE} showAnimatedLine={false} outerMaskOpacity={0.0} />
      </RNCamera>
    </FlexRow>
  </ModalContainer>
);

const localStyles = StyleSheet.create({
  preview: {
    alignItems: 'center',
    flexGrow: 0.5,
  },
});

QrScannerModal.defaultProps = {};

QrScannerModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onBarCodeRead: PropTypes.func.isRequired,
  onClose: PropTypes.func.isRequired,
};
",Create a React component that displays a QR code scanner using RNCamera. The component should include a barcode mask and handle barcode scanning.
"import { Editor } from 'slate-react'
import { Value } from 'slate'

import Prism from 'prismjs'
import React from 'react'
import initialValue from './value.json'

/**
 * Define our code components.
 *
 * @param {Object} props
 * @return {Element}
 */

function CodeBlock(props) {
  const { editor, node } = props
  const language = node.data.get('language')

  function onChange(event) {
    editor.change(c =>
      c.setNodeByKey(node.key, { data: { language: event.target.value } })
    )
  }

  return (
    <div style={{ position: 'relative' }}>
      <pre>
        <code {...props.attributes}>{props.children}</code>
      </pre>
      <div
        contentEditable={false}
        style={{ position: 'absolute', top: '5px', right: '5px' }}
      >
        <select value={language} onChange={onChange}>
          <option value=""css"">CSS</option>
          <option value=""js"">JavaScript</option>
          <option value=""html"">HTML</option>
        </select>
      </div>
    </div>
  )
}

function CodeBlockLine(props) {
  return <div {...props.attributes}>{props.children}</div>
}

/**
 * The code highlighting example.
 *
 * @type {Component}
 */

class CodeHighlighting extends React.Component {
  /**
   * Deserialize the raw initial value.
   *
   * @type {Object}
   */

  state = {
    value: Value.fromJSON(initialValue),
  }

  /**
   * On change, save the new value.
   *
   * @param {Change} change
   */

  onChange = ({ value }) => {
    this.setState({ value })
  }

  /**
   * On key down inside code blocks, insert soft new lines.
   *
   * @param {Event} event
   * @param {Change} change
   * @return {Change}
   */

  onKeyDown = (event, change) => {
    const { value } = change
    const { startBlock } = value
    if (event.key != 'Enter') return
    if (startBlock.type != 'code') return
    if (value.isExpanded) change.delete()
    change.insertText('\n')
    return true
  }

  /**
   * Render.
   *
   * @return {Component}
   */

  render = () => {
    return (
      <div className=""editor"">
        <Editor
          placeholder=""Write some code...""
          value={this.state.value}
          onChange={this.onChange}
          onKeyDown={this.onKeyDown}
          renderNode={this.renderNode}
          renderMark={this.renderMark}
          decorateNode={this.decorateNode}
        />
      </div>
    )
  }

  /**
   * Render a Slate node.
   *
   * @param {Object} props
   * @return {Element}
   */

  renderNode = props => {
    switch (props.node.type) {
      case 'code':
        return <CodeBlock {...props} />
      case 'code_line':
        return <CodeBlockLine {...props} />
    }
  }

  /**
   * Render a Slate mark.
   *
   * @param {Object} props
   * @return {Element}
   */

  renderMark = props => {
    const { children, mark } = props
    switch (mark.type) {
      case 'comment':
        return <span style={{ opacity: '0.33' }}>{children}</span>
      case 'keyword':
        return <span style={{ fontWeight: 'bold' }}>{children}</span>
      case 'tag':
        return <span style={{ fontWeight: 'bold' }}>{children}</span>
      case 'punctuation':
        return <span style={{ opacity: '0.75' }}>{children}</span>
    }
  }

  tokenToContent = token => {
    if (typeof token == 'string') {
      return token
    } else if (typeof token.content == 'string') {
      return token.content
    } else {
      return token.content.map(this.tokenToContent).join('')
    }
  }

  /**
   * Decorate code blocks with Prism.js highlighting.
   *
   * @param {Node} node
   * @return {Array}
   */

  decorateNode = node => {
    if (node.type != 'code') return

    const language = node.data.get('language')
    const texts = node.getTexts().toArray()
    const string = texts.map(t => t.text).join('\n')
    const grammar = Prism.languages[language]
    const tokens = Prism.tokenize(string, grammar)
    const decorations = []
    let startText = texts.shift()
    let endText = startText
    let startOffset = 0
    let endOffset = 0
    let start = 0

    for (const token of tokens) {
      startText = endText
      startOffset = endOffset

      const content = this.tokenToContent(token)
      const newlines = content.split('\n').length - 1
      const length = content.length - newlines
      const end = start + length

      let available = startText.text.length - startOffset
      let remaining = length

      endOffset = startOffset + remaining

      while (available < remaining && texts.length > 0) {
        endText = texts.shift()
        remaining = length - available
        available = endText.text.length
        endOffset = remaining
      }

      if (typeof token != 'string') {
        const range = {
          anchorKey: startText.key,
          anchorOffset: startOffset,
          focusKey: endText.key,
          focusOffset: endOffset,
          marks: [{ type: token.type }],
        }

        decorations.push(range)
      }

      start = end
    }

    return decorations
  }
}

/**
 * Export.
 */

export default CodeHighlighting
","Generate the React component that showcases code highlighting using the Slate editor, Prism.js library and React."
"import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';

import store from './store';
import AppLocalizationProvider from './l10n';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <AppLocalizationProvider>
      <App />
    </AppLocalizationProvider>
  </Provider>,
  document.getElementById('root')
);
","Create a React application that imports the Redux store, a localization provider, and renders the App component within the localization provider, and mounts the application to the root element."
"import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/App';

ReactDOM.render(<App />, document.getElementById('content'));
","Create a React application with a root component called App and mount it to an element with the ID ""content""."
"// @flow
import React from 'react'
import { Container, Divider } from 'semantic-ui-react'
import AddTodo from './AddTodo'
import TodoList from './TodoList'

const RemoteTodoApp = () => (
  <Container text className=""main main-content"">
    <h1>Todo Example (GraphQL)</h1>
    <AddTodo />
    <Divider />
    <TodoList />
  </Container>
)

export default RemoteTodoApp
","Create a React component that incorporates the ""AddTodo"" and ""TodoList"" components within a container with a heading, divider, and specific class names."
"'use strict';

import React from 'react';
import { View, StyleSheet, Alert } from 'react-native';
import { Actions } from 'react-native-router-flux';
import Button from 'react-native-button';
import Icon from 'react-native-vector-icons/Ionicons';

export default class AddButton extends React.Component {
  render() {
    return (
      <Button onPress={ Actions.weeklyPlan }>
        <Icon name='md-add-circle' size={ 50 } color='#efbe14' />
      </Button>
    )
  }
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});
","A React Native component that renders a button with an ""Add"" icon that, when pressed, navigates to the ""weeklyPlan"" route."
"import React from 'react';

const Anchor = React.createClass({
  propTypes: {
    id: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.number
    ])
  },
  render() {
    return (
      <a id={this.props.id} href={'#' + this.props.id} className=""anchor"">
        <span className=""anchor-icon"">#</span>
        {this.props.children}
      </a>
    );
  }
});

export default Anchor;
","Create a React component called Anchor that generates an anchor tag with an ID, an href, and an anchor icon. The component should take an ID as a prop and use it for both the ID and href attributes of the anchor tag."
"import React, { Component } from 'react';
import { Session } from 'meteor/session';
import { createContainer } from 'meteor/react-meteor-data';
import { Collections } from '../../../../api/common/collections.js';
import {Meteor} from 'meteor/meteor';
import moment from 'moment';

import Board  from './Board.js';
import FeedbackMessage  from '../misc/FeedbackMessage';
import Box from '../misc/Box';
import BoxHeader from '../misc/BoxHeader';
import BoxBody from '../misc/BoxBody';
import BoxFooter from '../misc/BoxFooter';
import Loading from '../misc/Loading';

class ScrumBoard extends Component {

  constructor(props) {
    super(props);
  }

  isPaOrPm(){
    return (this.props.currentProject.roles[Meteor.userId()] === 'pa' || this.props.currentProject.roles[Meteor.userId()] === 'pm');
  }

  currentSprintTasks(){
    let currentSprintTasks = [];
    for (sprint of this.props.sprints){
      if (moment(sprint.end).isBefore(moment())){
        for (usId of sprint.userstory){
          for (task of this.props.tasks){
            if ((task.state < 4) && (task.userstory.indexOf(usId) > -1) &&
          (currentSprintTasks.indexOf(task) === -1)){
              task.isLate = true;
              currentSprintTasks.push(task);
            }
          }
        }
      }
      else if (moment(sprint.start).isBefore(moment())) {
        for (usId of sprint.userstory){
          for (task of this.props.tasks){
            if ((task.userstory.indexOf(usId) > -1) &&
          (currentSprintTasks.indexOf(task) === -1)){
              task.isLate = false;
              currentSprintTasks.push(task);
            }
          }
        }
      }
    }

    return currentSprintTasks;
  }

  getColor(id){
    for (userstory of this.props.userstories)
      if (id === userstory.id)
      return userstory.color;
  }

  renderUs(userstories){
    return userstories.sort().map((userstory) => (<span className='badge' style={{backgroundColor: this.getColor(userstory)}} >#{userstory}</span>));
  }

  render() {

    return (
      <div>
      {!this.props.loaded ? <div></div> :
          <Board currentProject={this.props.currentProject}
            currentSprintTasks = {this.currentSprintTasks()}
            userstories = {this.props.userstories}
            tasks = {this.props.tasks}
            isPaOrPm={this.isPaOrPm}/>
      }
      <div className=""modal fade"" id=""myModal"" tabIndex=""-1"" role=""dialog"" aria-labelledby=""myModalLabel"" aria-hidden=""true"">
         <div className=""modal-dialog"" role=""document"">
           <div className=""modal-content"">
             <div className=""modal-header"">
               <button type=""button"" className=""close"" data-dismiss=""modal"" aria-label=""Close"">
                 <span aria-hidden=""true"">×</span>
               </button>
               <h4 className=""modal-title"">You must add traceability for the following US :</h4>
             </div>
             <div className=""modal-body"">
             {(this.props.usFinished) ? this.renderUs(this.props.usFinished) : ''}
             </div>
             <div className=""modal-footer"">
               <button type=""button"" className=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
             </div>
           </div>
         </div>
       </div>
      </div>
    );
  }
}

export default createContainer((props) => {
  const subscribeSprints = Meteor.subscribe('sprints', props.currentProject.name);
  const subscribeUS = Meteor.subscribe('userstories', props.currentProject.name);
  const subscribeTasks = Meteor.subscribe('tasks', props.currentProject.name);
  const subscribeUsers = Meteor.subscribe('users', props.currentProject.name);
  const sprints = Collections.Sprints.find({}).fetch();
  const userstories = Collections.UserStories.find({}).fetch();
  const tasks = Collections.Tasks.find({}).fetch();
  const loaded = !!subscribeUS && !!subscribeUsers && !!subscribeSprints && !!subscribeTasks && !!sprints && !!tasks && !!userstories;
  return {
    error: Session.get('error'),
    success: Session.get('success'),
    warning: Session.get('warning'),
    usFinished: Session.get('usTrace'),
    loaded,
    userstories: loaded ? userstories : [],
    sprints: loaded ? sprints : [],
    tasks: loaded ? tasks : []
  };
}, ScrumBoard);
","Generate the React code for a Scrum board that can display the tasks in a project across columns representing the different stages of the Scrum workflow (e.g. ""To do"", ""In progress"", ""Done""). The board should retrieve the relevant data from a database and update it when changes are made. The design of the board must be user friendly and facilitate efficient task management."
"import React from 'react';
import { render } from 'react-dom';
// It's important to not define HelloWorld component right in this file
// because in that case it will do full page reload on change
import HelloWorld from './HelloWorld.jsx';

render(<HelloWorld />, document.getElementById('react-root'));
","Create a React application that will render the `HelloWorld` component within a DOM node with `id=react-root`, but the HelloWorld component should be defined in a separate JSX file."
"import React from 'react'
import EditableHtmlElement from './editableHtmlElement'
import {langs} from 'i18n/lang'
import _ from 'lodash'

let SkewControl = class extends React.Component {
  onBlur = (p, v) => {
    if (isNaN(v)) {
      return
    }
    let newPropObj = _.cloneDeep(this.props.component.skew || {})
    newPropObj[p] = parseInt(v) % 360 * Math.PI / 180
    this.props.onSelectedWidgetUpdated(
      {
        container: this.props.container,
        index: this.props.idx
      },
      { skew: newPropObj },
      langs[this.props.language].skewComponents
    )
  }
  onDoubleClick = () => {
    let newPropObj = _.cloneDeep(this.props.component.skew || {})
    newPropObj[this.props.axis] = 0
    this.props.onSelectedWidgetUpdated(
      {
        container: this.props.container,
        index: this.props.idx
      },
      { skew: newPropObj },
      langs[this.props.language].skewComponents
    )
  }
  onMouseDown = ev => {
    this.props.onRotateMouseDown(ev, this.props.idx, this.props.axis, 'skew')
  }
  render() {
    let skew = 0
    try {
      skew = this.props.component.skew[this.props.axis] || 0
    } catch (ex) {}
    return (
      <span className={'skew-' + this.props.axis}>
        <span
          onMouseDown={this.onMouseDown}
          onTouchStart={this.onMouseDown}
          className={'sp-skew-' + this.props.axis + '-icon'}
          onDoubleClick={this.onDoubleClick}
          title={langs[this.props.language].skew + '-' + this.props.axis}
        >
          ♢
        </span>
        <EditableHtmlElement
          eleNm=""span""
          idx={this.props.idx}
          onBlur={ev => this.onBlur(this.props.axis, ev.target.innerHTML)}
          dangerouslySetInnerHTML={{
            __html: Math.round(skew * 180 / Math.PI) % 360
          }}
        />
        <span contentEditable={false}>°</span>
      </span>
    )
  }
}
module.exports = SkewControl
","Generate the code for a React component called `SkewControl` that allows users to edit the skew property of a component. The component should have the following features:

- Two editable text inputs for the skew values along the x and y axes.
- Buttons to reset the skew values to 0.
- Event handling for mouse and touch events to allow for interactive skew manipulation."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from 'material-ui/SvgIcon';

let Textsms = props =>
  <SvgIcon {...props}>
    <path d=""M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM9 11H7V9h2v2zm4 0h-2V9h2v2zm4 0h-2V9h2v2z"" />
  </SvgIcon>;

Textsms = pure(Textsms);
Textsms.muiName = 'SvgIcon';

export default Textsms;
","Create a React component using Material-UI's `SvgIcon` that renders the ""Textsms"" icon. The icon should have pure rendering (`recompose/pure`) and export it with the default name `Textsms`."
"/* @flow */
import React from 'react';
import Icon from 'mineral-ui/Icon';

import type { IconProps } from 'mineral-ui/Icon/types';

/* eslint-disable prettier/prettier */
export default function IconTabletMac(props: IconProps) {
  const iconProps = {
    rtl: false,
    ...props
  };

  return (
    <Icon {...iconProps}>
      <g>
        <path d=""M18.5 0h-14A2.5 2.5 0 0 0 2 2.5v19A2.5 2.5 0 0 0 4.5 24h14a2.5 2.5 0 0 0 2.5-2.5v-19A2.5 2.5 0 0 0 18.5 0zm-7 23c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm7.5-4H4V3h15v16z""/>
      </g>
    </Icon>
  );
}

IconTabletMac.displayName = 'IconTabletMac';
IconTabletMac.category = 'hardware';
",Create an icon component for the Mineral UI library in React that renders as a tablet Mac icon.
"import React from 'react'
import { Grid, Row, Navbar, Panel, Button } from 'react-bootstrap'

import Drawer from './Drawer.react'
import ControlPanel from './ControlPanel.react'

const App = () => (
  <div>
    <Navbar>
      <Navbar.Header>
        <Navbar.Brand>Arevelk</Navbar.Brand>
      </Navbar.Header>
    </Navbar>

    <Grid>
      <Row style={{textAlign: 'center'}}>
        <Drawer />
      </Row>

      <Row>
        <ControlPanel />
      </Row>
    </Grid>
  </div>
)

export default App

// vim: set ts=2 sw=2 et:
","Create a simple React app with a navigation bar at the top of the page, a drawer component that slides in from the left, and a control panel component that is centered below the drawer."
"import './style/Footer.scss';

import React, { Component } from 'react';

export default class Footer extends Component {
  render() {
    return (
      <footer>
        <div className='container'>
          This is a footer.<br />
          A test footer. :P
        </div>
      </footer>
    );
  }
}
","Design a React component that displays a minimal footer content with the following properties:
- A container div with a class name of ""container""
- Text within the container that says ""This is a footer.""
- Another line of text within the container that says ""A test footer. :P"""
"import React from 'react';
import DuckImage from '../assets/Duck.jpg';
import './HomeView.scss';

export const HomeView = () => (
  <div>
    <h4>Welcome!</h4>
    <img
      alt='This is a duck, because Redux!'
      className='duck'
      src={DuckImage} />
  </div>
);

export default HomeView;
","Design a React component using emotion styles, with an image of a duck as the background and the text 'Welcome!' above it. Name the component HomeView and export it as the default export."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionViewArray = (props) => (
  <SvgIcon {...props}>
    <path d=""M4 18h3V5H4v13zM18 5v13h3V5h-3zM8 18h9V5H8v13z""/>
  </SvgIcon>
);
ActionViewArray = pure(ActionViewArray);
ActionViewArray.displayName = 'ActionViewArray';

export default ActionViewArray;
",Design a React component that displays an icon of three rectangles aligned vertically.
"import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { DragDropContext }from 'react-dnd';
import HTML5Backend from 'react-dnd-html5-backend';

import { DnDItem, DropPositions } from '../src/index';

@DragDropContext(HTML5Backend)
class ExampleDnD extends Component {
  constructor(props) {
    super(props);
    this.state = {
      somethings: [
        {id: '1', name: 'somethigs1'},
        {id: '2', name: 'somethigs2'},
        {id: '3', name: 'somethigs3'},
        {id: '4', name: 'somethigs4'},
        {id: '5', name: 'somethigs5'},
        {id: '6', name: 'somethigs6'}
      ],
      message: """"
    };
  }

  dropAction(position, sourceId, targetId) {
    const {
      TOP_LEFT,
      TOP_CENTER,
      TOP_RIGHT,
      MIDDLE_LEFT,
      MIDDLE_CENTER,
      MIDDLE_RIGHT,
      BOTTOM_LEFT,
      BOTTOM_CENTER,
      BOTTOM_RIGHT
    } = DropPositions;

    switch (position) {
    case TOP_LEFT:
      return this.setState({ message: `TOP_LEFT ${sourceId} dropped on ${targetId}` });
    case TOP_CENTER:
      return this.setState({ message: `TOP_CENTER ${sourceId} dropped on ${targetId}` });
    case TOP_RIGHT:
      return this.setState({ message: `TOP_RIGHT ${sourceId} dropped on ${targetId}` });
    case MIDDLE_LEFT:
      return this.setState({ message: `MIDDLE_LEFT ${sourceId} dropped on ${targetId}` });
    case MIDDLE_CENTER:
      return this.setState({ message: `MIDDLE_CENTER ${sourceId} dropped on ${targetId}` });
    case MIDDLE_RIGHT:
      return this.setState({ message: `MIDDLE_RIGHT ${sourceId} dropped on ${targetId}` });
    case BOTTOM_LEFT:
      return this.setState({ message: `BOTTOM_LEFT ${sourceId} dropped on ${targetId}` });
    case BOTTOM_CENTER:
      return this.setState({ message: `BOTTOM_CENTER ${sourceId} dropped on ${targetId}` });
    case BOTTOM_RIGHT:
      return this.setState({ message: `BOTTOM_RIGHT ${sourceId} dropped on ${targetId}` });
    default:
      return false;
    }
  }

  hoverAction(position, sourceId, targetId) {
    const {
      TOP_LEFT,
      TOP_CENTER,
      TOP_RIGHT,
      MIDDLE_LEFT,
      MIDDLE_CENTER,
      MIDDLE_RIGHT,
      BOTTOM_LEFT,
      BOTTOM_CENTER,
      BOTTOM_RIGHT
    } = DropPositions;

    switch (position) {
    case TOP_LEFT:
      return this.setState({ message: `TOP_LEFT ${sourceId} hover on ${targetId}` });
    case TOP_CENTER:
      return this.setState({ message: `TOP_CENTER ${sourceId} hover on ${targetId}` });
    case TOP_RIGHT:
      return this.setState({ message: `TOP_RIGHT ${sourceId} hover on ${targetId}` });
    case MIDDLE_LEFT:
      return this.setState({ message: `MIDDLE_LEFT ${sourceId} hover on ${targetId}` });
    case MIDDLE_CENTER:
      return this.setState({ message: `MIDDLE_CENTER ${sourceId} hover on ${targetId}` });
    case MIDDLE_RIGHT:
      return this.setState({ message: `MIDDLE_RIGHT ${sourceId} hover on ${targetId}` });
    case BOTTOM_LEFT:
      return this.setState({ message: `BOTTOM_LEFT ${sourceId} hover on ${targetId}` });
    case BOTTOM_CENTER:
      return this.setState({ message: `BOTTOM_CENTER ${sourceId} hover on ${targetId}` });
    case BOTTOM_RIGHT:
      return this.setState({ message: `BOTTOM_RIGHT ${sourceId} hover  on ${targetId}` });
    default:
      return false;
    }
  }

  render() {
    const {
      somethings,
      message
    } = this.state;
    const dropAction = ::this.dropAction;
    const hoverAction = ::this.hoverAction;
    const style = {
      background: ""skyblue"",
      width: ""400px"",
      height: ""100px"",
      margin: ""5px 5px""
    };

    return (
      <div>
        <h1>{ message }</h1>
        {somethings.map(something =>
          <DnDItem dropAction={dropAction} hoverAction={hoverAction} id={something.id} key={something.id}>
            <div style={style}>{something.name}</div>
          </DnDItem>
        )}
      </div>
    );
  }
}

ReactDOM.render(<ExampleDnD />, document.getElementById('example'));
","Generate a React DnD example with a list of draggable items that can be dropped in various positions onto each other, with custom drop and hover actions that display messages in the `<h1>` tag."
"import React from 'react';

import StateMachine from 'components/StateMachine';

import { addClass } from 'utils/Common';
import { UPDATE_STATUS } from 'utils/Thrift';
import { getClassForUpdateStatus } from 'utils/Update';

export default function UpdateStateMachine({ update }) {
  const events = update.updateEvents;
  const states = events.map((e, i) => ({
    className: addClass(
      getClassForUpdateStatus(e.status),
      (i === events.length - 1) ? ' active' : ''),
    state: UPDATE_STATUS[e.status],
    message: e.message,
    timestamp: e.timestampMs
  }));
  const className = getClassForUpdateStatus(events[events.length - 1].status);
  return <StateMachine className={addClass('update-state-machine', className)} states={states} />;
}
","Create a React component called UpdateStateMachine that takes an update object as a prop. The update object should contain a list of update events. The component should render a StateMachine component, passing in the states and className props. The states prop should be an array of objects, each representing a state in the state machine. Each state object should contain a className, state, message, and timestamp property. The className property should be the CSS class name to apply to the state, the state property should be the name of the state, the message property should be the message associated with the state, and the timestamp property should be the timestamp of the state. The className prop passed to the StateMachine component should be the CSS class name to apply to the state machine."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Nav, NavItem } from 'react-bootstrap';
import { LinkContainer } from 'react-router-bootstrap';


/*
|--------------------------------------------------------------------------
| Global View
|--------------------------------------------------------------------------
*/

export default class Settings extends Component {
  static propTypes = {
    config: PropTypes.object,
    library: PropTypes.object,
    children: PropTypes.object,
  }

  constructor(props) {
    super(props);
  }

  render() {
    const config = this.props.config;

    return (
      <div className='view view-settings'>
        <div className='settings-switcher'>
          <Nav bsStyle=""pills"" activeKey={1} onSelect={undefined}>
            <LinkContainer to='/settings/library'>
              <NavItem eventKey={1}>Library</NavItem>
            </LinkContainer>
            <LinkContainer to='/settings/audio'>
              <NavItem eventKey={2}>Audio</NavItem>
            </LinkContainer>
            <LinkContainer to='/settings/interface'>
              <NavItem eventKey={3}>Interface</NavItem>
            </LinkContainer>
            <LinkContainer to='/settings/advanced'>
              <NavItem eventKey={4}>Advanced</NavItem>
            </LinkContainer>
            <LinkContainer to='/settings/about'>
              <NavItem eventKey={5}>About</NavItem>
            </LinkContainer>
          </Nav>
          <div className=""tab-content"">
            { React.cloneElement(
              this.props.children, {
                config,
                library: this.props.library,
              })
            }
          </div>
        </div>
      </div>
    );
  }
}
","Create a React component that displays a navigation bar with links to different pages, each with a corresponding content section. When a link is clicked, the content section should switch to display the content for the new page."
"/**
*
* ToggleOption
*
*/

import React from 'react';
import { injectIntl, intlShape } from 'react-intl';

const ToggleOption = ({ value, message, intl }) => (
  <option value={value}>
    {message ? intl.formatMessage(message) : value}
  </option>
);

ToggleOption.propTypes = {
  value: React.PropTypes.string.isRequired,
  message: React.PropTypes.object,
  intl: intlShape.isRequired,
};

export default injectIntl(ToggleOption);
","Create a React component that can be used to render an option element in a select list. The component should take the following properties:
- value: The value of the option
- message: A message object used to format the option's text using intl.formatMessage
- intl: An intl context object"
"/**
 * EmergencyAlerts module.
 * @module @massds/mayflower-react/EmergencyAlerts
 * @requires module:@massds/mayflower-assets/scss/03-organisms/emergency-alerts
 * @requires module:@massds/mayflower-assets/scss/02-molecules/emergency-alert
 * @requires module:@massds/mayflower-assets/scss/02-molecules/emergency-header
 */
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import is from 'is';
import Collapse from 'MayflowerReactAnimations/Collapse';
import ButtonAlert from 'MayflowerReactButtons/ButtonAlert';
import EmergencyAlert from 'MayflowerReactMolecules/EmergencyAlert';
import EmergencyHeader from 'MayflowerReactMolecules/EmergencyHeader';

const EmergencyAlerts = ({
  id, emergencyHeader, buttonAlert, alerts, theme, buttonClose, onButtonAlertClick, onButtonCloseClick
}) => {
  const [state, setState] = React.useState({
    open: false,
    close: false
  });
  const handleClick = (e) => {
    const { currentTarget } = e;
    setState({
      open: !state.open
    });
    if (is.fn(onButtonAlertClick)) {
      onButtonAlertClick({ open: state.open, currentTarget });
    }
  };

  const handleClose = (e) => {
    const { currentTarget } = e;
    setState({
      close: !state.close
    });
    if (is.fn(onButtonCloseClick)) {
      onButtonCloseClick({ close: state.close, currentTarget });
    }
  };

  const sectionClasses = classNames({
    'ma__emergency-alerts': true,
    [`ma__emergency-alerts--${theme}`]: theme
  });
  const alertsWrapperClasses = classNames({
    'ma__emergency-alerts__content': true,
    'js-accordion-content': true,
    [`ma__emergency-alerts__content--${theme}`]: theme
  });
  const headerClasses = classNames({
    'ma__emergency-alerts__header': true,
    [`ma__emergency-alerts__header--${theme}`]: theme
  });
  const interfaceClasses = classNames({
    'ma__emergency-alerts__interface': true,
    'js-accordion-link': true,
    [`ma__emergency-alerts__interface--${theme}`]: theme,
    open: state.open,
    closed: !state.open
  });
  const hideButtonClasses = classNames({
    'ma__emergency-alerts__hide': true,
    'js-emergency-alerts-link': true,
    [`ma__emergency-alerts__hide--${theme}`]: theme
  });
  return(
    <Collapse in={!state.close} dimension=""height"">
      <section className={sectionClasses} data-id={id}>
        <div className={headerClasses}>
          <div className=""ma__emergency-alerts__container"">
            {emergencyHeader && <EmergencyHeader {...emergencyHeader} theme={theme} />}
            { alerts ? (
              <div className=""ma__emergency-alerts__header-interface js-accordion-link"">
                {buttonAlert && <ButtonAlert {...buttonAlert} onClick={handleClick} isOpen={state.open} />}
              </div>
            ) : (buttonClose && (
              <button
                type=""button""
                className={hideButtonClasses}
                title=""hide alert""
                aria-label=""hide alert""
                onClick={handleClose}
              >
                +
              </button>
            )
            )}
          </div>
        </div>
        { alerts && (
          <>
            <Collapse in={state.open} dimension=""height"">
              <div className={alertsWrapperClasses}>
                <div className=""ma__emergency-alerts__container"">
                  {
                    /* eslint-disable-next-line react/no-array-index-key */
                    alerts.map((alert, i) => <EmergencyAlert {...alert} theme={theme} key={`alert-nested--${i}`} />)
                  }
                </div>
              </div>
            </Collapse>
            <div className={interfaceClasses}>
              {buttonAlert && <ButtonAlert {...buttonAlert} onClick={handleClick} isOpen={state.open} />}
            </div>
          </>
        )}
      </section>
    </Collapse>
  );
};

EmergencyAlerts.propTypes = {
  /** The data-id of the organism */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  /** A string that controls different color themes for the component. */
  theme: PropTypes.oneOf(['c-warning', 'c-primary-alt', 'c-primary', 'c-gray', 'c-error']),
  /** An on button alert click callback function */
  onButtonAlertClick: PropTypes.func,
  /** An on button close click callback function */
  onButtonCloseClick: PropTypes.func,
  /** The emergency header props */
  emergencyHeader: PropTypes.shape(EmergencyHeader.propTypes),
  /** The props for the button alert */
  buttonAlert: PropTypes.shape(ButtonAlert.propTypes),
  /** An array of alert messages: <br />
   * `message:` A message describing the event.<br />
   * `timeStamp:` A string representing the time of the event.<br />
   * `link:` An optional function whose return value is a link to take the user to page with more information.
  */
  alerts: PropTypes.arrayOf(PropTypes.shape({
    message: PropTypes.string.isRequired,
    timeStamp: PropTypes.string,
    link: PropTypes.func
  })),
  /** Whether or not to render a close button if not alerts are provided */
  buttonClose: PropTypes.bool
};

EmergencyAlerts.defaultProps = {
  theme: 'c-warning',
  buttonClose: true
};

export default EmergencyAlerts;
","Create a React component that displays a container with an emergency header and a set of emergency alerts. The container should have a toggle which expands and collapses the alert content. If no alerts are provided, a close button should be displayed instead. Provide type definitions for all props and default values for any optional props."
"/*
 * Copyright (C) 2015 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import _ from 'underscore'
import I18n from 'i18n!external_tools'
import React from 'react'
import PropTypes from 'prop-types'
import ReactModal from 'react-modal'
import store from 'jsx/external_apps/lib/ExternalAppsStore'
import 'compiled/jquery.rails_flash_notifications'

  const modalOverrides = {
    overlay : {
      backgroundColor: 'rgba(0,0,0,0.5)'
    },
    content : {
      position: 'static',
      top: '0',
      left: '0',
      right: 'auto',
      bottom: 'auto',
      borderRadius: '0',
      border: 'none',
      padding: '0'
    }
  };

export default React.createClass({
    displayName: 'ExternalToolPlacementButton',

    componentDidUpdate: function() {
      const _this = this;
      window.requestAnimationFrame(function() {
        if (_this.refs.closex) {
          _this.refs.closex.focus();
        }
      });
    },

    propTypes: {
      tool: PropTypes.object.isRequired,
      type: PropTypes.string, // specify ""button"" if this is not a menu item
      onClose: PropTypes.func
    },

    getInitialState() {
      return {
        tool: this.props.tool,
        modalIsOpen: false
      }
    },

    openModal(e) {
      e.preventDefault();
      if (this.props.tool.app_type === 'ContextExternalTool') {
        store.fetchWithDetails(this.props.tool).then(function(data) {
          var tool = _.extend(data, this.props.tool);
          this.setState({
            tool: tool,
            modalIsOpen: true
          });
        }.bind(this));
      } else {
        this.setState({
          tool: this.props.tool,
          modalIsOpen: true
        });
      }
    },

    closeModal() {
      this.setState({ modalIsOpen: false }, () => {
        if (this.props.onClose) this.props.onClose()
      })
    },

    placements() {
      var allPlacements = {
        ""account_navigation"":I18n.t(""Account Navigation""),
        ""assignment_selection"":I18n.t(""Assignment Selection""),
        ""similarity_detection"":I18n.t(""Similarity Detection""),
        ""assignment_menu"":I18n.t(""Assignment Menu""),
        ""collaboration"":I18n.t(""Collaboration""),
        ""course_assignments_menu"":I18n.t(""Course Assignments Menu""),
        ""course_home_sub_navigation"":I18n.t(""Course Home Sub Navigation""),
        ""course_navigation"":I18n.t(""Course Navigation""),
        ""course_settings_sub_navigation"":I18n.t(""Course Settings Sub Navigation""),
        ""discussion_topic_menu"":I18n.t(""Discussion Topic Menu""),
        ""editor_button"":I18n.t(""Editor Button""),
        ""file_menu"":I18n.t(""File Menu""),
        ""global_navigation"":I18n.t(""Global Navigation""),
        ""homework_submission"":I18n.t(""Homework Submission""),
        ""link_selection"":I18n.t(""Link Selection""),
        ""migration_selection"":I18n.t(""Migration Selection""),
        ""module_menu"":I18n.t(""Module Menu""),
        ""post_grades"":I18n.t(""Sync Grades""),
        ""quiz_menu"":I18n.t(""Quiz Menu""),
        ""tool_configuration"":I18n.t(""Tool Configuration""),
        ""user_navigation"":I18n.t(""User Navigation""),
        ""wiki_page_menu"":I18n.t(""Wiki Page Menu""),
      };

      var tool = this.state.tool;
      var hasPlacements = false;
      var appliedPlacements = _.map(allPlacements, function(value, key){
        if (tool[key] || (tool[""resource_selection""] && key == ""assignment_selection"") ||
          (tool[""resource_selection""] && key == ""link_selection"")) {
          hasPlacements = true;
          return <div>{ value }</div>;
        }
      });
      return hasPlacements ? appliedPlacements : null;
    },

    getModal() {
      return(
        <ReactModal
          ref='reactModal'
          isOpen={this.state.modalIsOpen}
          onRequestClose={this.closeModal}
          style={modalOverrides}
          className='ReactModal__Content--canvas ReactModal__Content--mini-modal'
          overlayClassName='ReactModal__Overlay--canvas'
          >
          <div id={this.state.tool.name + ""Heading""}
               className=""ReactModal__Layout""
            >
            <div className=""ReactModal__Header"">
              <div className=""ReactModal__Header-Title"">
                <h4 tabIndex=""-1"">{I18n.t('App Placements')}</h4>
              </div>
              <div className=""ReactModal__Header-Actions"">
                <button  className=""Button Button--icon-action"" type=""button"" ref='closex'  onClick={this.closeModal} >
                  <i className=""icon-x""></i>
                  <span className=""screenreader-only"">Close</span>
                </button>
              </div>
            </div>
            <div tabIndex=""-1"" className=""ReactModal__Body"" >
              <div id={ this.state.tool.name.replace(/\s/g,'') + 'Placements' } >
                { this.placements() || I18n.t(""No Placements Enabled"")}
              </div>
            </div>
            <div className=""ReactModal__Footer"">
              <div className=""ReactModal__Footer-Actions"">
                <button
                  ref=""btnClose"" type=""button"" className=""btn btn-default""
                  id={ 'close' + this.state.tool.name }
                  onClick={this.closeModal}>
                  {I18n.t('Close')}
                </button>
              </div>
            </div>
          </div>
        </ReactModal>
      );
    },

    getButton() {
      var editAriaLabel = I18n.t('View %{toolName} Placements', { toolName: this.state.tool.name });

      if (this.props.type === ""button"") {
        return(
          <a href=""#"" ref=""placementButton"" role=""button"" aria-label={editAriaLabel} className=""btn long"" onClick={this.openModal} >
            <i className=""icon-info"" data-tooltip=""left"" title={I18n.t('Tool Placements')}></i>
            { this.getModal() }
          </a>
        );
      } else {
        return(
          <li role=""presentation"" className=""ExternalToolPlacementButton"">
            <a href=""#"" tabIndex=""-1"" ref=""placementButton"" role=""menuitem"" aria-label={editAriaLabel} className=""icon-info"" onClick={this.openModal}>
              {I18n.t('Placements')}
            </a>
            { this.getModal() }
          </li>
        );
      }
    },

    render() {
      if (this.state.tool.app_type === 'ContextExternalTool') {
        return (
          this.getButton()
        );
      }
      return false;
    }
  });
","Generate a React component that displays a customizable button and modal to manage placement options for an external tool. The button should have an info icon, and the modal should display a list of available placements and their descriptions. The button should also be accessible via keyboard and screen readers."
"import React from 'react';

class WindowControls extends React.Component {

	constructor(props){
		super(props);
	}

	closeWindow = (remote) => {
		remote.getCurrentWindow().close();
	}

	minimize = (remote) => {
		remote.getCurrentWindow().minimize();
	}

	maximize = (remote) => {
		let window = remote.getCurrentWindow();

		if(window.isMaximized())
			window.unmaximize();
		else
			window.maximize();
	}


	render () {
		const {remote} = this.props;
		return (
			<ul className=""windowControls"">
				<li onClick={ () => this.closeWindow(remote) } className=""windowControlsButtons closeButton""></li>
				<li onClick={ () => this.minimize(remote) } className=""windowControlsButtons minButton""></li>
				<li onClick={ () => this.maximize(remote) } className=""windowControlsButtons maxButton""></li>
			</ul>
		)
	}
}

export default WindowControls;","Write a React component class named WindowControls that have three buttons that perform the following operations: close the window, minimize the window, maximize or unmaximize the window."
"import React, { Component } from 'react';
import './Nav.css';
import NavItem from './NavItem';
import SearchBar from './SearchBar';

/* Nav component for a standard style navbar */
class Nav extends Component {
    render() {
        return (
            <nav className=""nav"">
                <div className=""container nav-container"">
                    <div className=""nav-start nav-section"">
                        <NavItem text=""gamingdb"" link=""/"" bold={true}/>
                    </div>
                    <SearchBar/>
                    <div className=""nav-end nav-section"">
                        <div className=""nav-menu"">
                            <NavItem text=""Games"" link=""/games""/>
                            <NavItem text=""Developers"" link=""/developers""/>
                            <NavItem text=""Platforms"" link=""/platforms""/>
                            <NavItem text=""Characters"" link=""/characters""/>
                            <NavItem text=""About"" link=""/about""/>
                        </div>
                    </div>
                </div>
            </nav>
        );
    }
}

export default Nav;


","Design a React component that creates a horizontal navbar with a logo on the left, a search bar in the middle, and a menu with navigation links on the right. The logo should have a custom text value, and the menu links should have their own text values and links. Style the navbar with custom CSS classes."
"import React from 'react';

class Greetings extends React.Component {
  render() {
    return (
      <div className=""jumbotron"">
        <h1>Hi!</h1>
      </div>
    );
  }
}

export default Greetings;
","Create a React component that displays a greeting message, ""Hi!"", inside a jumbotron container."
"import React from 'react';
import CloseIcon from './CloseIcon';

export const symbols = {
  'CloseIcon': <CloseIcon />
};
","Create a JavaScript object called ""symbols"" that contains an ""CloseIcon"" property. The value of this property should be a React component named ""CloseIcon"" that you created in a separate file."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ContentFlag = (props) => (
  <SvgIcon {...props}>
    <path d=""M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z""/>
  </SvgIcon>
);
ContentFlag = pure(ContentFlag);
ContentFlag.displayName = 'ContentFlag';
ContentFlag.muiName = 'SvgIcon';

export default ContentFlag;
",Create a React component that renders an SVG icon with a flag shape.
"import React from 'react';
import PropTypes from 'prop-types';
import { Pagination as CorePagination } from 'wix-ui-core/dist/src/components/pagination';
import { withFocusable } from 'wix-ui-core/dist/src/hocs/Focusable/FocusableHOC';
import ChevronLeft from 'wix-ui-icons-common/ChevronLeft';
import ChevronRight from 'wix-ui-icons-common/ChevronRight';

import { st, classes } from './Pagination.st.css';

const coreComponentDefaults = {
  showFirstPage: true,
  showLastPage: true,
  responsive: false,
  showFirstLastNavButtons: false,
  showInputModeTotalPages: false,
  paginationMode: 'pages',
  nextLabel: <ChevronRight className={classes.arrow} />,
  previousLabel: <ChevronLeft className={classes.arrow} />,
};

/** Component for pagination */
class Pagination extends React.PureComponent {
  static displayName = 'Pagination';

  static propTypes = {
    /** Applied as data-hook HTML attribute that can be used in the tests */
    dataHook: PropTypes.string,
    /** A css class to be applied to the component's root element */
    className: PropTypes.string,
    /** Total available pages to show */
    totalPages: PropTypes.number,
    /** Currently selected page */
    currentPage: PropTypes.number,
    /** Returns selected page or arrow ({event,page})  */
    onChange: PropTypes.func,
  };

  static defaultProps = {
    currentPage: 1,
  };

  _getMaxPagesToShow = () => {
    const { currentPage, totalPages } = this.props;
    const absoluteNumDistance = Math.min(
      Math.abs(1 - currentPage),
      Math.abs(currentPage - totalPages),
    );

    if (absoluteNumDistance >= 4) {
      return 9;
    } else if (absoluteNumDistance === 3) {
      return 8;
    }
    return 7;
  };

  render() {
    const {
      dataHook,
      currentPage,
      totalPages,
      onChange,
      nextLabel,
      previousLabel,
      className,
    } = this.props;

    return (
      <div
        className={st(classes.root, className)}
        data-hook={dataHook}
        onFocus={this.props.focusableOnFocus}
        onBlur={this.props.focusableOnBlur}
      >
        <CorePagination
          className={classes.pagination}
          {...coreComponentDefaults}
          previousLabel={previousLabel || coreComponentDefaults.previousLabel}
          nextLabel={nextLabel || coreComponentDefaults.nextLabel}
          onChange={onChange}
          totalPages={totalPages}
          currentPage={currentPage}
          maxPagesToShow={this._getMaxPagesToShow()}
          showNextLabel={currentPage !== totalPages}
          showPreviousLabel={currentPage !== 1}
        />
      </div>
    );
  }
}

export default withFocusable(Pagination);
",Provide me with the code snippet for a React Pagination component that displays a number of pages based on the max number of pages to show and the current page number. Allow the component to receive a total number of pages and a callback to update the current page.
"import React from 'react';

const NotFound = () => (
  <div>
    <h3>404 page not found</h3>
    <p>We are sorry but the page you are looking for does not exist.</p>
  </div>
);

export default NotFound;
","Provide a React component that displays a not found page. The component should display a title of ""404 page not found"" and a description that says ""We are sorry but the page you are looking for does not exist."""
"import React from 'react';
import { Tabs, Tab } from '../../components/tabs';

class TabsTest extends React.Component {
  state = {
    index: 1,
    fixedIndex: 1,
    inverseIndex: 1
  };

  handleTabChange = (index) => {
    this.setState({index});
  };

  handleFixedTabChange = (index) => {
    this.setState({fixedIndex: index});
  };

  handleInverseTabChange = (index) => {
    this.setState({inverseIndex: index});
  };

  handleActive = () => {
    console.log('Special one activated');
  };

  render () {
    return (
      <section>
        <h5>Tabs</h5>
        <p>This tabs can be disabled or hidden</p>
        <Tabs disableAnimatedBottomBorder index={this.state.index} onChange={this.handleTabChange}>
          <Tab label='Primary'><small>Primary content</small></Tab>
          <Tab label='Secondary' onActive={this.handleActive}><small>Secondary content</small></Tab>
          <Tab label='Third' disabled><small>Disabled content</small></Tab>
          <Tab label='Fourth' hidden><small>Fourth content hidden</small></Tab>
          <Tab label='Fifth'><small>Fifth content</small></Tab>
        </Tabs>
        <h5>Fixed Tabs</h5>
        <p>These tabs fill the given space.</p>
        <Tabs index={this.state.fixedIndex} onChange={this.handleFixedTabChange} fixed>
          <Tab label='First'><small>First Content</small></Tab>
          <Tab label='Second'><small>Second Content</small></Tab>
          <Tab label='Third'><small>Third Content</small></Tab>
        </Tabs>
        <h5>Inverse Tabs</h5>
        <p>These tabs have an inverted theme.</p>
        <Tabs index={this.state.inverseIndex} onChange={this.handleInverseTabChange} inverse>
          <Tab label='First'><small>First Content</small></Tab>
          <Tab label='Second'><small>Second Content</small></Tab>
          <Tab label='Third'><small>Third Content</small></Tab>
          <Tab label='Disabled' disabled><small>Disabled Content</small></Tab>
        </Tabs>
        <h5>Inverse Tabs with labels and icons</h5>
        <Tabs index={this.state.inverseIndex} onChange={this.handleInverseTabChange} inverse>
          <Tab label='Home' icon='home'><small>First Content</small></Tab>
          <Tab label='Favorite' icon='favorite'><small>Second Content</small></Tab>
          <Tab label='Call' icon='call'><small>Third Content</small></Tab>
        </Tabs>
        <h5>Inverse Tabs with icons</h5>
        <Tabs index={this.state.inverseIndex} onChange={this.handleInverseTabChange} inverse>
          <Tab icon='home'><small>First Content</small></Tab>
          <Tab icon='favorite'><small>Second Content</small></Tab>
          <Tab icon='call'><small>Third Content</small></Tab>
        </Tabs>
      </section>
    );
  }
}

export default TabsTest;
","Create a React component with different tabs, including primary, secondary, disabled, and hidden tabs. Also include fixed and inverse tabs with various labels and icons. Handle tab changes and display messages for special events like tab activation."
"import 'babel-polyfill';

import React from 'react';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import promise from 'redux-promise';
import createSagaMiddleware from 'redux-saga';
import { Router, hashHistory } from 'react-router';

import reducers from './reducers';
import routes from './routes';
import { runDraw } from './sagas';

import './styles/main.css';

const store = createStore(
    reducers,
    applyMiddleware(
        promise,
        createSagaMiddleware(runDraw)
    )
);

render(
    <Provider store={store}>
        <Router history={hashHistory} routes={routes} />
    </Provider>,
    document.getElementById('root')
);
","Create a React application using Redux, Redux Saga, and React Router. The application should have a single store that uses Redux Promise and Redux Saga middleware. The store should be provided to the React application using a Provider component. The application should use React Router with hash history to manage navigation. Finally, the application should include a CSS file named ""main.css"" which is imported into the application."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionRemoveShoppingCart = (props) => (
  <SvgIcon {...props}>
    <path d=""M22.73 22.73L2.77 2.77 2 2l-.73-.73L0 2.54l4.39 4.39 2.21 4.66-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h7.46l1.38 1.38c-.5.36-.83.95-.83 1.62 0 1.1.89 2 1.99 2 .67 0 1.26-.33 1.62-.84L21.46 24l1.27-1.27zM7.42 15c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h2.36l2 2H7.42zm8.13-2c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H6.54l9.01 9zM7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2z""/>
  </SvgIcon>
);
ActionRemoveShoppingCart = pure(ActionRemoveShoppingCart);
ActionRemoveShoppingCart.displayName = 'ActionRemoveShoppingCart';
ActionRemoveShoppingCart.muiName = 'SvgIcon';

export default ActionRemoveShoppingCart;
",Design a reusable React component using Material UI's SvgIcon and recompose's pure function for the following SVG element that represents a shopping cart with an 'x' over it.
"import React, { Component } from 'react';
import { Button, Toolbar, Spacer } from '@extjs/ext-react';
import { PivotD3Container } from '@extjs/ext-react-pivot-d3';
import salesData from './salesData';

Ext.require('Ext.pivot.d3.HeatMap');

const regions = {
    ""Belgium"": 'Europe',
    ""Netherlands"": 'Europe',
    ""United Kingdom"": 'Europe',
    ""Canada"": 'North America',
    ""United States"": 'North America',
    ""Australia"": 'Australia'
};

export default class ConfigurablePivotHeatmap extends Component {

    store = Ext.create('Ext.data.Store', {
        fields: [
            {name: 'id',        type: 'string'},
            {name: 'company',   type: 'string'},
            {name: 'country',   type: 'string'},
            {name: 'person',    type: 'string'},
            {name: 'date',      type: 'date', dateFormat: 'c'},
            {name: 'value',     type: 'float'},
            {name: 'quantity',  type: 'float'},
            {
                name: 'year',
                calculate: function(data){
                    return parseInt(Ext.Date.format(data.date, ""Y""), 10);
                }
            },{
                name: 'month',
                calculate: function(data){
                    return parseInt(Ext.Date.format(data.date, ""m""), 10) - 1;
                }
            },{
                name: 'continent',
                calculate: function(data){
                    return regions[data.country];
                }
            }
        ],
        data: salesData
    })

    showConfigurator = () => {
        this.refs.mainCtn.showConfigurator();
    }

    onBeforeAddConfigField = (panel, config) => {
        const dest = config.toContainer,
            store = dest.getStore()

        if(dest.getFieldType() !== 'all' && store.getCount() >= 1) {
            // this will force single fields on both axis and aggregate
            store.removeAll();
        }
    }

    onShowFieldSettings = (panel, config) => {
        const align = config.container.down('[name=align]');

        // hide the alignment field in settings since it's useless
        if(align) {
            align.hide();
        }
    }

    onTooltip = (component, tooltip, datum) => {
        const d = datum.data,
            x = component.getXAxis().getField(),
            y = component.getYAxis().getField(),
            z = component.getColorAxis().getField();

        tooltip.setHtml(
            '<div>X: ' + d[x] + '</div>' +
            '<div>Y: ' + d[y] + '</div>' +
            '<div>Z: ' + d[z] + '</div>' +
            '<div>Records: ' + d.records + '</div>'
        );
    }

    state = {
        theme: 'default'
    }

    changeTheme = (select, choice) => {
        this.setState({ theme: choice.get('value') });
    }

    render() {
        const { theme } = this.state;

        return (
            <PivotD3Container
                ref=""mainCtn""
                shadow
                layout=""fit""
                onBeforeMoveConfigField={this.onBeforeAddConfigField}
                onShowConfigFieldSettings={this.onShowFieldSettings}
                matrix={{
                    store: this.store,
                    aggregate: [{
                        dataIndex: 'value',
                        header: 'Value',
                        aggregator: 'avg'
                    }],

                    leftAxis: [{
                        dataIndex: 'person',
                        header: 'Person'
                    }],

                    topAxis: [{
                        dataIndex: 'year',
                        header: 'Year'
                    }]
                }}
                drawing={{
                    xtype: 'pivotheatmap',

                    legend: {
                        items: {
                            count: 10
                        }
                    },

                    tooltip: {
                        renderer: this.onTooltip
                    },

                    platformConfig: {
                        phone: {
                            tiles: {
                                cls: 'phone-tiles'
                            }
                        },
                        tablet: {
                            tiles: {
                                cls: 'tablet-tiles'
                            }
                        }
                    }
                }}
                configurator={{
                    // It is possible to configure a list of fields that can be used to configure the pivot matrix
                    // If no fields list is supplied then all fields from the Store model are fetched automatically
                    fields: [{
                        dataIndex:  'quantity',
                        header:     'Qty',
                        // You can even provide a default aggregator function to be used when this field is dropped
                        // on the agg dimensions
                        aggregator: 'sum',
                        formatter: 'number(""0"")',

                        settings: {
                            // Define here in which areas this field could be used
                            allowed: ['aggregate'],
                            // Set a custom style for this field to inform the user that it can be dragged only to ""Values""
                            style: {
                                fontWeight: 'bold'
                            },
                            // Define here custom formatters that ca be used on this dimension
                            formatters: {
                                '0': 'number(""0"")',
                                '0%': 'number(""0%"")'
                            }
                        }
                    }, {
                        dataIndex:  'value',
                        header:     'Value',

                        settings: {
                            // Define here in which areas this field could be used
                            allowed: 'aggregate',
                            // Define here what aggregator functions can be used when this field is
                            // used as an aggregate dimension
                            aggregators: ['sum', 'avg', 'count'],
                            // Set a custom style for this field to inform the user that it can be dragged only to ""Values""
                            style: {
                                fontWeight: 'bold'
                            },
                            // Define here custom formatters that ca be used on this dimension
                            formatters: {
                                '0': 'number(""0"")',
                                '0.00': 'number(""0.00"")',
                                '0,000.00': 'number(""0,000.00"")',
                                '0%': 'number(""0%"")',
                                '0.00%': 'number(""0.00%"")'
                            }
                        }
                    }, {
                        dataIndex:  'company',
                        header:     'Company',

                        settings: {
                            // Define here what aggregator functions can be used when this field is
                            // used as an aggregate dimension
                            aggregators: ['count']
                        }
                    }, {
                        dataIndex:  'country',
                        header:     'Country',

                        settings: {
                            // Define here what aggregator functions can be used when this field is
                            // used as an aggregate dimension
                            aggregators: ['count']
                        }
                    }, {
                        dataIndex: 'person',
                        header: 'Person',

                        settings: {
                            // Define here what aggregator functions can be used when this field is
                            // used as an aggregate dimension
                            aggregators: 'count'
                        }
                    }, {
                        dataIndex:  'year',
                        header:     'Year',

                        settings: {
                            // Define here in which areas this field could be used
                            allowed: ['leftAxis', 'topAxis']
                        }
                    }, {
                        dataIndex:      'month',
                        header:         'Month',
                        labelRenderer:  'monthLabelRenderer',

                        settings: {
                            // Define here in which areas this field could be used
                            allowed: ['leftAxis', 'topAxis']
                        }
                    }]
                }}
            >
                <Toolbar docked=""top"">
                    <Spacer/>
                    <Button handler={this.showConfigurator} text=""Show configurator""/>
                </Toolbar>
            </PivotD3Container>
        )
    }
}","Generate a React application that includes a pivot heatmap with configurable fields, tooltips, and a theme switcher. The data should be grouped by person, year, and month, and the heatmap should display the average value for each group. When a user hovers over a tile in the heatmap, a tooltip should appear with the X, Y, and Z values for that tile. The user should be able to toggle between different themes for the heatmap."
"import Button from '@material-ui/core/Button';
import MenuItem from '@material-ui/core/MenuItem/index';
import Paper from '@material-ui/core/Paper/index';
import MaterialTextField from '@material-ui/core/TextField';
import Downshift from 'downshift';
import PropTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { Field, reduxForm } from 'redux-form';
import actions from 'redux-form/es/actions';
import styled from 'styled-components';
import TextField from '../../formHelpers/textField';
import { TagPropType } from '../../propTypes';
import { createLoadTags } from '../adminActions';
import TagService from './tagService';

const { initialize } = actions;

const FormContainer = styled.form`
  padding: 24px;
`;

const ClearButton = styled(Button)`
  margin-right: 10px !important;
`;

const formName = 'tags';

class TagForm extends React.Component {
  constructor(props) {
    super(props);

    this.downshiftInstance = React.createRef();
  }

  render() {
    const {
      handleSubmit,
      onSubmit,
      selectTag,
      clearForm,
      savedTags: tags,
    } = this.props;

    return (
      <FormContainer
        name={formName}
        onSubmit={(...props) => {
          handleSubmit(onSubmit)(...props);
          this.downshiftInstance.current.clearSelection();
        }}
      >
        <Downshift
          onSelect={selectTag}
          itemToString={tag => (tag ? tag.name : '')}
          ref={this.downshiftInstance}
        >
          {({ getInputProps, getItemProps, isOpen, inputValue, highlightedIndex }) => (
            <div>
              <MaterialTextField
                InputProps={{
                  ...getInputProps({
                    placeholder: 'Create New',
                    id: 'select-tag',
                  }),
                }}
              />
              {isOpen ? (
                <Paper square>
                  {tags
                    .filter(({ name }) => name.toLowerCase().includes(inputValue.toLowerCase()))
                    .map((tag, index) => (
                      <MenuItem
                        {...getItemProps({ item: tag })}
                        key={tag.name}
                        selected={highlightedIndex === index}
                        component=""div""
                      >
                        {tag.name}
                      </MenuItem>
                    ))
                  }
                </Paper>
              ) : null}
            </div>
          )}
        </Downshift>
        <br />
        <Field
          component={TextField}
          name=""_id""
          label=""""
          type=""text""
          style={{ display: 'none' }}
        />
        <Field
          component={TextField}
          name=""name""
          label=""Name""
          type=""text""
        />
        <br />
        {this.downshiftInstance.current && this.downshiftInstance.current.state.inputValue && (
          <ClearButton
            onClick={() => {
              this.downshiftInstance.current.clearSelection();
              clearForm();
            }}
            variant=""contained""
            type=""button""
          >
            Clear
          </ClearButton>
        )}
        <Button variant=""contained"" color=""primary"" type=""submit"">
          Save
        </Button>
      </FormContainer>
    );
  }
}

TagForm.propTypes = {
  handleSubmit: PropTypes.func.isRequired,
  onSubmit: PropTypes.func.isRequired,
  selectTag: PropTypes.func.isRequired,
  clearForm: PropTypes.func.isRequired,
  savedTags: PropTypes.arrayOf(TagPropType).isRequired,
};

export default connect(
  state => state.forms,
  (dispatch) => {
    function clearForm() {
      dispatch(initialize(formName));
    }

    function loadTags() {
      dispatch(createLoadTags());
    }

    return {
      clearForm,
      selectTag(tag) {
        dispatch(initialize(formName, tag));
      },
      onSubmit(tag) {
        TagService
          .saveTag(tag)
          .then(loadTags)
          .then(clearForm);
      },
    };
  },
)(reduxForm({
  form: formName,
  destroyOnUnmount: false,
})(TagForm));
","Generate the React code for a component that allows users to create and save new tags. The component should include a dropdown that lists existing tags and an input field for creating new tags. When a user enters a new tag name and clicks the save button, the component should submit the new tag to a REST API and update the list of tags."
"import { hooks } from 'botframework-webchat-api';
import PropTypes from 'prop-types';
import React from 'react';

import ScreenReaderText from '../../ScreenReaderText';
import useForceRenderAtInterval from '../../hooks/internal/useForceRenderAtInterval';

const { useDateFormatter, useLocalizer, useRelativeTimeFormatter } = hooks;

const TIMER_INTERVAL = 60000;

const RelativeTime = ({ value }) => {
  const formatDate = useDateFormatter();
  const formatRelativeTime = useRelativeTimeFormatter();
  const localize = useLocalizer();

  useForceRenderAtInterval(value, TIMER_INTERVAL);

  return (
    <React.Fragment>
      <ScreenReaderText text={localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENT_AT', formatDate(value))} />
      <span aria-hidden={true}>{formatRelativeTime(value)}</span>
    </React.Fragment>
  );
};

RelativeTime.propTypes = {
  value: PropTypes.string.isRequired
};

export default RelativeTime;
","Create a React component that takes a timestamp and displays it as a relative time, using the `useRelativeTimeFormatter` hook from the `botframework-webchat-api` library. Ensure the component updates the relative time every 60 seconds using the `useForceRenderAtInterval` hook. Include accessibility features such as a screen reader text that announces the full timestamp."
"/* eslint-disable global-require */
import React from 'react';
import { Route, IndexRoute } from 'react-router';
import cookie from 'react-cookie';
import App from './modules/App/App';
import PhotoDetailPageContainer from './modules/Photo/pages/PhotoDetailPage/PhotoDetailPageContainer';
import PhotoAddPageContainer from './modules/Photo/pages/PhotoAddPage/PhotoAddPageContainer';
import PhotoGalleryPage from './modules/Photo/pages/PhotoGalleryPage/PhotoGalleryPage';
import LoginPage from './modules/User/pages/LoginPage/LoginPage';
import PhotoListPage from './modules/Photo/pages/PhotoListPage/PhotoListPage';
import RegisterPage from './modules/User/pages/RegisterPage/RegisterPage';

// require.ensure polyfill for node
if (typeof require.ensure !== 'function') {
  require.ensure = function requireModule(deps, callback) {
    callback(require);
  };
}

const requireLoggedIn = (nextState, replace, cb) => {
  const authCookie = cookie.load('mernAuth');
  if (!authCookie || !authCookie.t) {
    replace('/login');
  }
  cb();
};
const requireNotLoggedIn = (nextState, replace, cb) => {
  const authCookie = cookie.load('mernAuth');
  if (authCookie && authCookie.t) {
    replace('/');
  }
  cb();
};

// react-router setup with code-splitting
// More info: http://blog.mxstbr.com/2016/01/react-apps-with-pages/
export default (
  <Route path=""/"" component={App}>
    <IndexRoute component={PhotoListPage} />
    <Route
      path=""/photos/:cuid"" component={PhotoDetailPageContainer}
    />
    <Route
      path=""/add""
      onEnter={requireLoggedIn}
      component={PhotoAddPageContainer}
    />
    <Route
      path=""/gallery""
      component={PhotoGalleryPage}
    />
    <Route
      path=""/login"" component={LoginPage}
    />
    <Route
      path=""/register"" component={RegisterPage}
    />
  </Route>
);
","Generate the React-router setup code for a photo gallery app. Implement code-splitting for all pages except the App component. Include routes for a dedicated gallery page. Additionally, add logic to conditionally render the login and registration pages based on the user's authentication status, using the `requireLoggedIn` and `requireNotLoggedIn` functions."
"import React from 'react'
import PropTypes from 'prop-types'
import clamp from 'lodash/clamp'
import PlayerModel from './player_model'
import { formatTime } from './utils'
import ModelBinding from './model_binding';

class PositionControl extends React.PureComponent
{
    constructor(props)
    {
        super(props);

        this.state = this.getStateFromModel();
        this.handleClick = this.handleClick.bind(this);
    }

    getStateFromModel()
    {
        const { position, duration } = this.props.playerModel.activeItem;

        return { duration, position };
    }

    handleClick(e)
    {
        if (e.button !== 0)
            return;

        const rect = e.target.getBoundingClientRect();
        const positionPercent = (e.clientX - rect.left) / rect.width;
        const newPosition = this.state.duration * positionPercent;

        if (newPosition >= 0)
            this.props.playerModel.setPosition(newPosition);
    }

    render()
    {
        var position = this.state.position;
        var duration = this.state.duration;
        var positionPercent = '0%';
        var timeInfo = '';

        if (position >= 0 && duration > 0)
        {
            positionPercent = '' + clamp(100 * position / duration, 0, 100) + '%';
            timeInfo = formatTime(position) + ' / ' + formatTime(duration);
        }

        return (
            <div className='position-control'>
                <div className='progress-bar' onClick={this.handleClick}>
                    <div className='progress-bar-gauge' style={{width: positionPercent}}></div>
                    <div className='progress-bar-text'>{timeInfo}</div>
                </div>
            </div>
        );
    }
}

PositionControl.propTypes = {
    playerModel: PropTypes.instanceOf(PlayerModel).isRequired
};

export default ModelBinding(PositionControl, { playerModel: 'change' });
",Generate a React component that displays a seek bar that has a percentage value of the current time within a media file and its total length. Include click handling on the seek bar to update the media file's playback position.
"import React from 'react';
import ReactDOM from 'react-dom';

import { FormField, FormInput, FormRow, FormSelect } from 'elemental';

const MODE_OPTIONS = [
	{ label: 'Exactly', value: 'equals' },
	{ label: 'Greater Than', value: 'gt' },
	{ label: 'Less Than', value: 'lt' },
	{ label: 'Between', value: 'between' },
];

const PRESENCE_OPTIONS = [
	{ label: 'At least one element', value: 'some' },
	{ label: 'No element', value: 'none' },
];

function getDefaultValue () {
	return {
		mode: MODE_OPTIONS[0].value,
		presence: PRESENCE_OPTIONS[0].value,
		value: '',
	};
}

var NumberArrayFilter = React.createClass({
	propTypes: {
		filter: React.PropTypes.shape({
			mode: React.PropTypes.oneOf(MODE_OPTIONS.map(i => i.value)),
			presence: React.PropTypes.oneOf(PRESENCE_OPTIONS.map(i => i.value)),
			value: React.PropTypes.oneOf(
				React.PropTypes.string,
				React.PropTypes.shape({
					min: React.PropTypes.number,
					max: React.PropTypes.number,
				})
			),
		}),
	},
	statics: {
		getDefaultValue: getDefaultValue,
	},
	getDefaultProps () {
		return {
			filter: getDefaultValue(),
		};
	},
	// Returns a function that handles a specific type of onChange events for
	// either 'minValue', 'maxValue' or simply 'value'
	handleValueChangeBuilder (type) {
		var self = this;
		return function (e) {
			switch (type) {
				case 'minValue':
					self.updateFilter({
						value: {
							min: e.target.value,
							max: self.props.filter.value.max,
						},
					});
					break;
				case 'maxValue':
					self.updateFilter({
						value: {
							min: self.props.filter.value.min,
							max: e.target.value,
						},
					});
					break;
				case 'value':
					self.updateFilter({
						value: e.target.value,
					});
					break;
			}
		};
	},
	// Update the props with this.props.onChange
	updateFilter (changedProp) {
		this.props.onChange({ ...this.props.filter, ...changedProp });
	},
	// Update the filter mode
	selectMode (mode) {
		this.updateFilter({ mode });
		ReactDOM.findDOMNode(this.refs.focusTarget).focus();
	},
	// Update the presence selection
	selectPresence (presence) {
		this.updateFilter({ presence });
		ReactDOM.findDOMNode(this.refs.focusTarget).focus();
	},
	// Render the controls, showing two inputs when the mode is ""between""
	renderControls (presence, mode) {
		let controls;
		const placeholder = presence.label + ' is ' + mode.label.toLowerCase() + '...';

		if (mode.value === 'between') {
			// Render ""min"" and ""max"" input
			controls = (
				<FormRow>
					<FormField width=""one-half"" style={{ marginBottom: 0 }}>
						<FormInput
							type=""number""
							ref=""focusTarget""
							placeholder=""Min.""
							onChange={this.handleValueChangeBuilder('minValue')}
							value={this.props.filter.value.min}
						/>
					</FormField>
					<FormField width=""one-half"" style={{ marginBottom: 0 }}>
						<FormInput
							type=""number""
							placeholder=""Max.""
							onChange={this.handleValueChangeBuilder('maxValue')}
							value={this.props.filter.value.max}
						/>
					</FormField>
				</FormRow>
			);
		} else {
			// Render one number input
			controls = (
				<FormField>
					<FormInput
						type=""number""
						ref=""focusTarget""
						placeholder={placeholder}
						onChange={this.handleValueChangeBuilder('value')}
						value={this.props.filter.value}
					/>
				</FormField>
			);
		}

		return controls;
	},
	render () {
		const { filter } = this.props;
		// Get mode and presence based on their values with .filter
		const mode = MODE_OPTIONS.filter(i => i.value === filter.mode)[0];
		const presence = PRESENCE_OPTIONS.filter(i => i.value === filter.presence)[0];

		return (
			<div>
				<FormSelect options={PRESENCE_OPTIONS} onChange={this.selectPresence} value={presence.value} />
				<FormSelect options={MODE_OPTIONS} onChange={this.selectMode} value={mode.value} />
				{this.renderControls(presence, mode)}
			</div>
		);
	},

});

module.exports = NumberArrayFilter;
","Create React component that filters a list of numbers by their values. The component should allow users to choose the filter mode from a list of options (e.g., ""equals"", ""greater than"", ""less than"", ""between"") and the presence of the value (e.g., ""at least one element"", ""no element""). The component should also allow users to specify the value or range of values to filter by."
"import React from 'react'
import Link from './Link'

const IndexLink = React.createClass({

  render() {
    return <Link {...this.props} onlyActiveOnIndex={true} />
  }

})

export default IndexLink
","Create a customizable React component that wraps around the Link component and only becomes active when the current location is the ""/"" path."
"// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the ""Software""), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import React from 'react';

import Axis from './axis';
import {ORIENTATION} from '../../utils/axis-utils';

const {LEFT, RIGHT} = ORIENTATION;

const propTypes = {
  ...Axis.propTypes,
  orientation: React.PropTypes.oneOf([
    LEFT, RIGHT
  ])
};

const defaultProps = {
  orientation: LEFT,
  attr: 'y'
};

function YAxis(props) {
  return (
    <Axis {...props} />
  );
}

YAxis.displayName = 'YAxis';
YAxis.propTypes = propTypes;
YAxis.defaultProps = defaultProps;
YAxis.requiresSVG = true;

export default YAxis;
","Provide code to build a Y-axis component for a React D3 visualization. The component should inherit properties and methods from the base Axis component and have the following specific features:

- Orientation: The axis should be vertically oriented.
- Attribute: The axis should use the 'y' attribute for data binding.
- Default orientation: If no orientation is specified, the axis should default to a left-hand orientation."
"import React from 'react';
import CategoryEdit from 'modules/productCategories/edit';
import Categories from 'modules/productCategories/list';

export default () => (
	<div className=""row row--no-gutter col-full-height"">
		<div className=""col-xs-12 col-sm-4 col-md-3 col--no-gutter scroll col-full-height"">
			<Categories showAll={false} showTrash={false} showAdd={true} />
		</div>
		<div className=""col-xs-12 col-sm-8 col-md-9 col--no-gutter scroll col-full-height"">
			<CategoryEdit />
		</div>
	</div>
);
","Generate a React component that displays a list of categories and a form for editing a category. The component should be divided into two columns, with the list of categories on the left and the form on the right. The list of categories should include a button to add a new category. The form should include fields for the category name and description."
"import React from 'react';
import DocumentTitle from 'react-document-title';
import { prefixLink } from 'gatsby-helpers';



const BUILD_TIME = new Date().getTime();


module.exports = React.createClass({
  displayName: 'HTML',
  propTypes: {
    body: React.PropTypes.string,
  },
  render () {
    const title = DocumentTitle.rewind();

    let css;
    if (process.env.NODE_ENV === 'production') {
      css = <style dangerouslySetInnerHTML={{ __html: require('!raw!./public/styles.css') }} />
    }

    return (
      <html lang=""en"">
        <head>
          <meta charSet=""utf-8"" />
          <meta httpEquiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"" />
          <meta
            name=""viewport""
            content=""width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no""
          />
          <link rel=""shortcut icon"" href=""/img/logo.ico"" />
          <link rel=""shortcut icon"" href=""/img/logo.png"" />
          <meta name=""msapplication-TileColor"" content=""#fff"" />
          <meta name=""msapplication-TileImage"" content=""/img/logo.png"" />
          <title>{title}</title>
          {css}
        </head>
        <body>
          <div id=""react-mount"" dangerouslySetInnerHTML={{ __html: this.props.body }} />
          
          <script src={prefixLink(`/bundle.js?t=${BUILD_TIME}`)} />

          <script dangerouslySetInnerHTML={{ __html: `
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

            ga('create', 'UA-11640584-17', 'auto');
            ga('send', 'pageview');
          `}}></script>

        </body>
      </html>
    );
  },
})
","Provide the code snippet for a React component that generates an HTML page. The HTML should include a title, CSS, a body, and Google Analytics tracking."
"import React from 'react'
import {ProseMirror} from 'prosemirror'

export default React.createClass({
	displayName: 'ProseMirror',
	propTypes: {
		options: React.PropTypes.object,
		defaultValue: React.PropTypes.any,
		value: React.PropTypes.any,
		onChange: React.PropTypes.func,
		valueLink: React.PropTypes.shape({
			value: React.PropTypes.any,
			requestChange: React.PropTypes.func,
		}),
	},
	render() {
		return React.createElement('div', {ref: 'pm'})
	},
	componentWillUpdate(props) {
		if ('value' in props || 'valueLink' in props) {
			const value = props.value ||
				('valueLink' in props && props.valueLink.value) ||
				''

			if (value !== this._lastValue) {
				this.pm.setContent(value, props.options.docFormat)
				this._lastValue = value
			}
		}
	},
	componentWillMount() {
		this._lastValue = this.props.value
		if (this._lastValue === undefined && 'valueLink' in this.props) {
			this._lastValue = this.props.valueLink.value
		}
		if (this._lastValue === undefined) {
			this._lastValue = this.props.defaultValue
		}

		const options = Object.assign({doc: this._lastValue}, this.props.options)
		if (options.doc === undefined || options.doc === null) {
			// We could fall back to an empty string, but that wouldn't work for the json
			// docFormat. Setting docFormat to null allows ProseMirror to use its own
			// default empty document.
			options.doc = null
			options.docFormat = null
		}
		this.pm = new ProseMirror(options)
	},
	componentDidMount() {
		this.refs.pm.appendChild(this.pm.wrapper)
		this.pm.on('change', () => {
			const callback = this.props.onChange ||
				'valueLink' in this.props && this.props.valueLink.requestChange

			if (callback) {
				this._lastValue = this.pm.getContent(this.props.options.docFormat)
				callback(this._lastValue)
			}
		})
	},
	componentDidUpdate({options: previous}) {
		const current = this.props.options
		Object.keys(current).forEach(k => {
			if (current[k] !== previous[k]) {
				try {
					this.pm.setOption(k, current[k])
				} catch(e) {
					console.error(e)
					console.warn(`Are you creating ""${k}"" in your render function? If so it will fail the strict equality check.`)
				}
			}
		})
	},
	getContent(type = this.props.options.docFormat) {
		return this.pm.getContent(type)
	},
})

","Describe a React component that will render a ProseMirror editor, and keep its contents in sync with a value passed in via props. When the editor content changes, the component should call a callback (which is also passed in via props) and pass it the new content. The component should also allow for the editor to be controlled by a `valueLink` prop, which will allow the component to be used as a controlled component."
"/* eslint-disable import/default */

import React from 'react';
import {render} from 'react-dom';
import { Provider } from 'react-redux';
import { Router, browserHistory } from 'react-router';
import routes from './routes';
import configureStore from './store/configureStore';
import './styles/styles.scss'; // Yep, that's right. You can import SASS/CSS files too! Webpack will run the associated loader and plug this into the page.
import { syncHistoryWithStore } from 'react-router-redux';

browserHistory.listen( location =>  {
  window.ga('send', 'pageview', location.pathname);
});

const store = configureStore();

// Create an enhanced history that syncs navigation events with the store
const history = syncHistoryWithStore(browserHistory, store);

render(
  <Provider store={store}>
    <Router history={history} routes={routes} />
  </Provider>, document.getElementById('app')
);
","Create the main entry point for a React application using React Router, Redux, and Webpack, including stylesheet importing, Google Analytics integration, and synchronous history with the store."
"import React from 'react';
import Title from 'react-title-component';

import CodeExample from '../../../CodeExample';
import PropTypeDescription from '../../../PropTypeDescription';
import MarkdownElement from '../../../MarkdownElement';

import circleProgressReadmeText from './README';
import circleProgressCode from '!raw!material-ui/CircularProgress/CircularProgress';
import CircleProgressExampleSimple from './ExampleSimple';
import circleProgressExampleSimpleCode from '!raw!./ExampleSimple';
import CircleProgressExampleDeterminate from './ExampleDeterminate';
import circleProgressExampleDeterminateCode from '!raw!./ExampleDeterminate';

const descriptions = {
  indeterminate: 'By default, the indicator animates continuously.',
  determinate: 'In determinate mode, the indicator adjusts to show the percentage complete, ' +
  'as a ratio of `value`: `max-min`.',
};

const CircleProgressPage = () => (
  <div>
    <Title render={(previousTitle) => `Circular Progress - ${previousTitle}`} />
    <MarkdownElement text={circleProgressReadmeText} />
    <CodeExample
      title=""Indeterminate progress""
      description={descriptions.indeterminate}
      code={circleProgressExampleSimpleCode}
    >
      <CircleProgressExampleSimple />
    </CodeExample>
    <CodeExample
      title=""Determinate progress""
      description={descriptions.determinate}
      code={circleProgressExampleDeterminateCode}
    >
      <CircleProgressExampleDeterminate />
    </CodeExample>
    <PropTypeDescription code={circleProgressCode} />
  </div>
);

export default CircleProgressPage;
","Provide a detailed description of the code snippet, outlining its functionality and the purpose of each component."
"/* eslint max-len: 0 */
import React from 'react';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';


const products = [];

function addProducts(quantity) {
  const startId = products.length;
  for (let i = 0; i < quantity; i++) {
    const id = startId + i;
    products.push({
      id: id,
      name: 'Item name ' + id,
      price: 2100 + i
    });
  }
}

addProducts(5);

export default class TrClassStringTable extends React.Component {
  render() {
    return (
      <BootstrapTable data={ products }>
          <TableHeaderColumn dataField='id' isKey={ true }>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name' className='td-header-string-example'>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price' columnClassName='td-column-string-example'>Product Price</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
","Create a React code snippet that renders a Bootstrap table with five rows of data, each row containing three columns: ID, Name, and Price. Add custom class names to the header and column of the second column, ""Product Name."""
"import React, { Component } from 'react';
import unionClassNames from 'union-class-names';
import isFunction from 'lodash/isFunction';

export default class Button extends Component {
  onMouseDown = (e) => {
    const { onMouseDown } = this.props;
    if (isFunction(onMouseDown)) {
      e.preventDefault();
      onMouseDown();
    }
  }

  onClick = (e) => {
    const { onClick } = this.props;
    if (isFunction(onClick)) {
      e.preventDefault();
      onClick();
    }
  }

  render() {
    const { theme, children } = this.props;
    const activeClassName = unionClassNames('active', theme.active);
    const containerClassName = unionClassNames('toolbar-button', theme.button, activeClassName);
    const innerClassName = unionClassNames('toolbar-button__inner', theme.inner);
    const bodyClassName = unionClassNames('toolbar-button__body', theme.inner);
    return (
      <span
        className={containerClassName}
        onMouseDown={this.onMouseDown}
        onClick={this.onClick}
      >
        <span className={innerClassName}>
          <span className={bodyClassName}>
            {children || 'Button'}
          </span>
        </span>
      </span>
    );
  }
}
","Generate a React component for a button that, when clicked, calls a provided onClick function. The button should be styled with classes defined in a provided theme object. The button should have an active state that is applied when the mouse is pressed."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { Table, Button, Tooltip, OverlayTrigger } from 'react-bootstrap';
import { getCategories, getCities, getDistricts, getWards, getId } from '../../../App/AppReducer';
import { fetchDistricts, fetchWards, addDistricts, addWards, setNotify } from '../../../App/AppActions';
import { fetchUserNews } from '../../ManageNewsActions';
import { getUserNews } from '../../ManageNewsReducer';
import dateFormat from 'dateformat';
import styles from '../../../../main.css';

class NewsList extends Component {
  constructor(props) {
    super(props);
    this.state = {
    };
  }
  componentWillMount() {
    if (this.props.id === '') {
      this.context.router.push('/');
    } else {
      this.props.dispatch(fetchUserNews(this.props.id));
    }
  }
  render() {
    return (
      <div>
        <Table responsive striped bordered condensed hover className={styles.table}>
          <thead>
            <tr>
              <th style={{ width: '40%' }}>Tiêu đề</th>
              <th style={{ width: '13%' }}>Ngày tạo</th>
              <th style={{ width: '12%', textAlign: 'center' }}>Đã duyệt</th>
              <th style={{ width: '15%' }}>VIP</th>
              <th style={{ width: '20%', textAlign: 'center' }}>Thao tác</th>
            </tr>
          </thead>
          <tbody>
          {
            this.props.userNews.map((news, index) => {
              const titleTooltip = (
                <Tooltip id=""tooltip"" label=""titleTooltip"">{news.title}</Tooltip>
              );
              return (
                <tr key={index}>
                  <td style={{  }} className={styles.titleOverFlow}>
                    <OverlayTrigger placement=""top"" overlay={titleTooltip}>
                      <p style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{news.title}</p>
                    </OverlayTrigger>
                  </td>
                  <td>{dateFormat(news.dateCreated, 'dd/mm/yyyy HH:mm')}</td>
                  <td style={{ textAlign: 'center' }}>{(news.approved ? 'Đã duyệt' : 'Đang chờ')}</td>
                  <td>
                    {news.vipAll ? 'Toàn trang' : ''}
                    {news.vipCategory ? (news.vipAll ? ', danh mục' : 'Danh mục') : ''}
                    {(!news.vipAll && !news.vipCategory && news.approved) ? 'Tin thường' : ''}
                    {(!news.vipAll && !news.vipCategory && !news.approved) ? '---' : ''}
                  </td>
                  <td style={{ textAlign: 'center' }}>
                    <Button bsStyle=""primary"" style={{ float: 'left' }} bsSize=""xs"" onClick={() => this.props.onInfo(news)}>Xem trước</Button>
                    <Button bsStyle=""primary"" style={{ float: 'right' }} bsSize=""xs"" onClick={() => this.props.onEdit(news)}>Chỉnh sửa</Button>
                  </td>
                </tr>
              )
            })
          }
          </tbody>
        </Table>
      </div>
    );
  }
}

// Retrieve data from store as props
function mapStateToProps(state) {
  return {
    id: getId(state),
    userNews: getUserNews(state),
  };
}

NewsList.propTypes = {
  dispatch: PropTypes.func.isRequired,
  onEdit: PropTypes.func.isRequired,
  onInfo: PropTypes.func.isRequired,
  id: PropTypes.string.isRequired,
  userNews: PropTypes.array.isRequired,
};

NewsList.contextTypes = {
  router: PropTypes.object,
};

export default connect(mapStateToProps)(NewsList);
","Generate a React component that renders a responsive table. The table should have the following columns: Title, Date Created, Approved, VIP, and Actions. The Actions column should have two buttons: View and Edit. The table data should be populated from an array of news objects passed in as props. The table title should be ""News List."""
"import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import PropTypes from 'prop-types';
import requiredForA11y from 'prop-types-extra/lib/isRequiredForA11y';
import uncontrollable from 'uncontrollable';

import Nav from './Nav';
import NavItem from './NavItem';
import UncontrolledTabContainer from './TabContainer';
import TabContent from './TabContent';
import { bsClass as setBsClass } from './utils/bootstrapUtils';
import ValidComponentChildren from './utils/ValidComponentChildren';

var TabContainer = UncontrolledTabContainer.ControlledComponent;

var propTypes = {
  /**
   * Mark the Tab with a matching `eventKey` as active.
   *
   * @controllable onSelect
   */
  activeKey: PropTypes.any,

  /**
   * Navigation style
   */
  bsStyle: PropTypes.oneOf(['tabs', 'pills']),

  animation: PropTypes.bool,

  id: requiredForA11y(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),

  /**
   * Callback fired when a Tab is selected.
   *
   * ```js
   * function (
   * 	Any eventKey,
   * 	SyntheticEvent event?
   * )
   * ```
   *
   * @controllable activeKey
   */
  onSelect: PropTypes.func,

  /**
   * Wait until the first ""enter"" transition to mount tabs (add them to the DOM)
   */
  mountOnEnter: PropTypes.bool,

  /**
   * Unmount tabs (remove it from the DOM) when it is no longer visible
   */
  unmountOnExit: PropTypes.bool
};

var defaultProps = {
  bsStyle: 'tabs',
  animation: true,
  mountOnEnter: false,
  unmountOnExit: false
};

function getDefaultActiveKey(children) {
  var defaultActiveKey = void 0;
  ValidComponentChildren.forEach(children, function (child) {
    if (defaultActiveKey == null) {
      defaultActiveKey = child.props.eventKey;
    }
  });

  return defaultActiveKey;
}

var Tabs = function (_React$Component) {
  _inherits(Tabs, _React$Component);

  function Tabs() {
    _classCallCheck(this, Tabs);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Tabs.prototype.renderTab = function renderTab(child) {
    var _child$props = child.props,
        title = _child$props.title,
        eventKey = _child$props.eventKey,
        disabled = _child$props.disabled,
        tabClassName = _child$props.tabClassName;

    if (title == null) {
      return null;
    }

    return React.createElement(
      NavItem,
      {
        eventKey: eventKey,
        disabled: disabled,
        className: tabClassName
      },
      title
    );
  };

  Tabs.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        onSelect = _props.onSelect,
        animation = _props.animation,
        mountOnEnter = _props.mountOnEnter,
        unmountOnExit = _props.unmountOnExit,
        bsClass = _props.bsClass,
        className = _props.className,
        style = _props.style,
        children = _props.children,
        _props$activeKey = _props.activeKey,
        activeKey = _props$activeKey === undefined ? getDefaultActiveKey(children) : _props$activeKey,
        props = _objectWithoutProperties(_props, ['id', 'onSelect', 'animation', 'mountOnEnter', 'unmountOnExit', 'bsClass', 'className', 'style', 'children', 'activeKey']);

    return React.createElement(
      TabContainer,
      {
        id: id,
        activeKey: activeKey,
        onSelect: onSelect,
        className: className,
        style: style
      },
      React.createElement(
        'div',
        null,
        React.createElement(
          Nav,
          _extends({}, props, {
            role: 'tablist'
          }),
          ValidComponentChildren.map(children, this.renderTab)
        ),
        React.createElement(
          TabContent,
          {
            bsClass: bsClass,
            animation: animation,
            mountOnEnter: mountOnEnter,
            unmountOnExit: unmountOnExit
          },
          children
        )
      )
    );
  };

  return Tabs;
}(React.Component);

Tabs.propTypes = propTypes;
Tabs.defaultProps = defaultProps;

setBsClass('tab', Tabs);

export default uncontrollable(Tabs, { activeKey: 'onSelect' });","Generate a React component that allows you to create tabbed content, where each tab can be activated by clicking on its corresponding title."
"import React from 'react'
import {Link} from 'react-router-dom'

const NavbarBrand = ({className, ...props}) =>
  <Link className={`${className} navbar-brand`} {...props} />

export default NavbarBrand
","Create a React functional component named `NavbarBrand` that extends the `Link` component, takes a `className` prop, and adds the `navbar-brand` class to the provided `className`."
"import React from 'react';
import {Section} from 'views';


class Dne extends React.Component{
  render(){
    return <div>
      <Section>
        <h1>404</h1>
        <h4>content not found</h4>
      </Section>
    </div>;
  }
}

export {Dne};
","Create a React component that displays a 404 error page with a large heading of ""404"" and a subheading of ""content not found"" within a section."
"/* @flow */
import React, { Component } from 'react';
import { ART, View, TouchableWithoutFeedback } from 'react-native';
const { Group, Surface } = ART;
import * as C from './constants';
import Wedge from './Wedge';

const getColor = (colors : Array<string>, index : number) => colors[index] || colors[colors.length % index];

export default class PieChart extends Component<void, any, any> {
	constructor(props : any) {
		super(props);
		this.state = { rotation: 0 };
		(this:any).boundingAreas = {};
	}
	shouldComponentUpdate(props : any) {
		return (
			props.data !== this.props.data
			|| props.height !== this.props.height
			|| props.width !== this.props.width
		);
	}

	// TODO: Handle press on chart by emitting event
	_handlePress = (_e : Object) => {
		// const { locationX, locationY } = e.nativeEvent;
	};

	render() {
		if (!this.props.width || !this.props.height) return <View />;

		const COLORS = this.props.sliceColors || [
			C.BLUE,
			C.GREY,
			C.RED,
			C.YELLOW,
			C.GREEN,
			C.DARK_PURPLE,
			C.LIGHT_PURPLE,
		];

		// TODO: Read stroke width from props?
		const STROKE_WIDTH = 1;
		const radius = (this.props.height / 2) - STROKE_WIDTH;

		const centerX = this.props.width / 2;
		const centerY = this.props.height / 2;

		// Gather sum of all data to determine angles
		let sum = 0;
		const data = this.props.data || [];
		data.forEach(n => { sum += (n[1] > 0) ? n[1] : 0.001; });
		const sectors = data.map(n => Math.floor(360 * (n[1]/sum)));
		let startAngle = 0;

		const arcs = [];
		const colors = [];
		sectors.forEach((sectionPiece, i) => {
			let endAngle = startAngle + sectionPiece;
			if (endAngle > 360) {
				endAngle = 360;
			}
			if (endAngle - startAngle === 0) {
				startAngle += sectionPiece;
				return;
			}
			if ((i === sectors.length - 1) && endAngle < 360) {
				endAngle = 360;
			}
			arcs.push({ startAngle, endAngle, outerRadius: radius });
			colors.push(getColor(COLORS, i));
			startAngle += sectionPiece;
		});
		return (
			<TouchableWithoutFeedback onPress={this._handlePress}>
				<View>
					<Surface width={this.props.width} height={this.props.height}>
						<Group originX={centerX} width={this.props.width} height={this.props.height} originY={centerY} rotation={this.state.rotation}>
							{arcs.map((arc, i) => {
								return (
									<Wedge
										stroke={colors[i]}
										strokeWidth={STROKE_WIDTH}
										fill={colors[i]}
										key={i}
										originX={centerX}
										originY={centerY}
										{...arc}
									/>
								);
							})}
						</Group>
					</Surface>
				</View>
			</TouchableWithoutFeedback>
		);
	}
}
","Generate a React Native component that visualizes a pie chart from a dataset. The chart should be interactive, allowing the user to rotate it. The chart should also be customizable, allowing the user to specify the colors of the pie slices and the thickness of the stroke."
"import React from 'react';
import { Link } from 'react-router';

const NotFoundPage = () => {
	return (
		<div>
			<h4>
				404 Page Not Found
			</h4>
			<Link to=""/messages""> Go back to messages </Link>
		</div>
	);
};

export default NotFoundPage;
",Create a React component that displays a 404 Not Found page with a link to return to the messages page.
"import React, { Component } from 'react';
import { Content, Container, Header, Text, Button, Icon, Title } from 'native-base';
import myTheme from '../../themes/base-theme';
import styles from './style';

class SideBar extends Component {

  static propTypes = {
    // setIndex: React.PropTypes.func,
    navigateTo: React.PropTypes.func,
  }

  navigateTo(route) {
    this.props.navigateTo(route, 'home');
  }

  render() {
    return (
      <Container theme={myTheme}>
      <Header>
          <Button transparent onPress={() => this.navigateTo('homeView')}>
            <Icon name=""ios-home"" style={styles.icon} />
            <Text>Trang chủ</Text>
          </Button>
          <Text></Text>
      </Header>
      <Content style={styles.sidebar}>
        <Button transparent onPress={() => this.navigateTo('historyView')}>
          <Icon name=""ios-time"" style={styles.icon} />
          <Text>Lịch sử</Text>
        </Button>
        <Button transparent onPress={() => this.navigateTo('profileView')}>
          <Icon name=""ios-person"" style={styles.icon} />
          <Text>Về bạn</Text>
        </Button>
      </Content>
    </Container>
    );
  }
}

export default SideBar;
","Design a React Native sidebar navigation menu that displays the app's main sections: Home, History, and Profile. The sidebar should include a header with a home button, a content section with labeled navigation buttons, and a customizable theme."
"import React from 'react';

class Profile extends React.Component {
  render () {
    return (
      <div>
        <h2>Profile</h2>
      </div>
    );
  }
}

export default Profile;

",Design a React component for a user profile page that displays the label 'Profile'.
"import React from 'react';
import styles from './styles.scss';

const Method = ({ name, reference }) => {
  console.log('reference.tags:', reference.tags);
  const tags = reference.tags;

  if (!tags) return null;
  if (!tags[0]) return null;
  if (tags[0].title !== 'method') return null;

  tags.shift();

  return (
    <div className={styles.method}>
      <h2>{name}#{reference.tags[0].name}</h2>
    </div>
  );
};

const Section = ({ name, references }) => (
  <div className={styles.wrapper}>
    <h1 className={styles.heading}>{name}</h1>
    {references.map(reference =>
      <Method name={name} reference={reference} />
    )}
  </div>
);

export default Section;
","Create a React component that takes in a name and reference object, checks if the reference object contains tags, and if the first tag's title is ""method"", returns a component with a div with a class name of ""method"" and an h2 element with the name and the first tag's name."
"import React from 'react';
import { Component } from 'react';

export default class Home extends Component {

  render() {
    return (
      <div >
        <h1>
          Home
        </h1>
        <div className=""alert alert-info"" role=""alert"">
          This is a linked page. 
        </div>
      </div>
    );
  }

}
","Generate the React code for a basic home page with a header stating ""Home"" and an info alert stating ""This is a linked page."" Ensure the code includes React component syntax."
"/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule WebPlayer
 */
'use strict';

var Prism = require('Prism');
var React = require('React');

var WEB_PLAYER_VERSION = '1.2.6';

/**
 * Use the WebPlayer by including a ```ReactNativeWebPlayer``` block in markdown.
 *
 * Optionally, include url parameters directly after the block's language. For
 * the complete list of url parameters, see: https://github.com/dabbott/react-native-web-player
 *
 * E.g.
 * ```ReactNativeWebPlayer?platform=android
 * import React from 'react';
 * import { AppRegistry, Text } from 'react-native';
 *
 * const App = () => <Text>Hello World!</Text>;
 *
 * AppRegistry.registerComponent('MyApp', () => App);
 * ```
 */
var WebPlayer = React.createClass({
  parseParams: function(paramString) {
    var params = {};

    if (paramString) {
      var pairs = paramString.split('&');
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i].split('=');
        params[pair[0]] = pair[1];
      }
    }

    return params;
  },

  render: function() {
    var hash = `#code=${encodeURIComponent(this.props.children)}`;

    if (this.props.params) {
      hash += `&${this.props.params}`;
    }

    return (
      <div className={'web-player'}>
        <Prism>{this.props.children}</Prism>
        <iframe
          style={{marginTop: 4}}
          width=""880""
          height={this.parseParams(this.props.params).platform === 'android' ? '425' : '420'}
          data-src={`//cdn.rawgit.com/dabbott/react-native-web-player/gh-v${WEB_PLAYER_VERSION}/index.html${hash}`}
          frameBorder=""0""
        />
      </div>
    );
  },
});

module.exports = WebPlayer;
",Describe a Javascript React application that allows users to embed code snippets in Markdown documents and then display those snippets in an interactive web player with adjustable URL parameters.
"import React from 'react'
import { Route, IndexRoute } from 'react-router'
import App from './containers/App'
import NotFoundPage from './containers/NotFoundPage'
import LoginPage from './containers/LoginPage'
import DashboardPage from './containers/DashboardPage'
import { urlPrefix } from './constants'

export default (
  <Route path={urlPrefix} component={ App }>
      <IndexRoute component={ LoginPage } />
      <Route path=""login"" component={ LoginPage }/>
      <Route path=""dashboard"" component={ DashboardPage }/>
      <Route path=""*"" component={ NotFoundPage }/>
  </Route>
)
","Create a React Router configuration that specifies a URL prefix, a root app component, a not-found component, and three pages: a login page, a dashboard page, and a page for any unmatched routes."
"import React, { Component } from 'react';
import classnames from 'classnames';

import { HeaderBar } from '/components/lib/header-bar';
import { GroupSidebar } from '/components/lib/group-sidebar';

export class Skeleton extends Component {
  render() {
    const { props } = this;
    let rightPanelClasses =
      props.activeDrawer === ""groups"" ? ""dn flex-m flex-l flex-xl"" : ""flex"";

    return (
      <div className=""h-100 w-100 ph4-m ph4-l ph4-xl pb4-m pb4-l pb4-xl"">
        <HeaderBar invites={props.invites} associations={props.associations} />
        <div className=""cf w-100 h-100 h-100-m-40-ns flex ba-m ba-l ba-xl b--gray4 b--gray1-d br1"">
          <GroupSidebar
            contacts={props.contacts}
            groups={props.groups}
            invites={props.invites}
            activeDrawer={props.activeDrawer}
            selected={props.selected}
            selectedGroups={props.selectedGroups}
            history={props.history}
            api={api}
            associations={props.associations}
          />
          <div
            className={""h-100 w-100 relative "" + rightPanelClasses}
            style={{ flexGrow: 1 }}>
            {props.children}
          </div>
        </div>
      </div>
    );
  }
}
",Design a React component layout that includes a header bar and a container divided into a sidebar and a flexible right panel. The right panel should be hidden when the sidebar is active. Use classnames to handle conditional rendering of the right panel based on the value of a props property called `activeDrawer`.
"import React from 'react';

import {
  Platform,
} from 'react-native';

// 3rd party libraries
import { Actions, Router, Scene } from 'react-native-router-flux';
import { AdMobInterstitial } from 'react-native-admob';
import DeviceInfo from 'react-native-device-info';

// Views
import MainView from './app/views/main';
import LessonView from './app/views/lesson';
import CardView from './app/views/card';
import AssignmentView from './app/views/assignment';
import InfoView from './app/views/info';

import { config } from './app/config';

AdMobInterstitial.setAdUnitID(config.admob[Platform.OS].interstital);

if (DeviceInfo.getDeviceName() === 'iPhone Simulator' || DeviceInfo.getDeviceName() === 'apple’s MacBook Pro' || DeviceInfo.getManufacturer() === 'Genymotion') {
  AdMobInterstitial.setTestDeviceID('EMULATOR');
}

// @todo remove when RN upstream is fixed
console.ignoredYellowBox = [
  'Warning: Failed propType: SceneView',
  'Possible Unhandled Promise Rejection',
  'ActivityIndicatorIOS is deprecated. Use ActivityIndicator instead.',
  'Each ViewPager child must be a <View>.',
];

const scenes = Actions.create(
  <Scene key=""root"" hideNavBar={true}>
    <Scene key=""main"" title=""Vocab"" component={MainView} initial={true} />
    <Scene key=""lesson"" title=""Lesson"" component={LessonView} />
    <Scene key=""card"" title=""Card"" component={CardView} direction=""vertical"" />
    <Scene key=""assignment"" title=""Assignment"" component={AssignmentView} direction=""vertical"" />
    <Scene key=""info"" title=""Info"" component={InfoView} direction=""vertical"" />
  </Scene>
);

const Periods = function Photos() {
  return <Router scenes={scenes} />;
};

export default Periods;
","Create a React Native Router Flux application with the following scenes: main, lesson, card, assignment, and info. Configure AdMob interstitial ads using the config parameter. Include device detection for emulators and simulators and disable console warnings for known issues. Export the router component."
"import extensiblePolyfill from 'extensible-polyfill';
extensiblePolyfill('immutable');

import React from 'react';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
import { Router, hashHistory } from 'react-router';
import { syncHistoryWithStore } from 'react-router-redux';
import routes from './routes';
import configureStore from './store/configureStore';
import 'material-design-icons-iconfont/dist/material-design-icons.css';
import './app.global.css';
import 'react-toolbox/lib/commons.scss';
import 'roboto-fontface/css/roboto-fontface';
import injectTapEventPlugin from 'react-tap-event-plugin';

const store = configureStore();
const history = syncHistoryWithStore(hashHistory, store);

injectTapEventPlugin();

render(
  <Provider store={store}>
    <Router history={history} routes={routes} />
  </Provider>,
  document.getElementById('root')
);

if (process.env.NODE_ENV !== 'production') {
  // Use require because imports can't be conditional.
  // In production, you should ensure process.env.NODE_ENV
  // is envified so that Uglify can eliminate this
  // module and its dependencies as dead code.
  // require('./createDevToolsWindow')(store);
}
","Render a react application with React Redux and React Router using extensible-polyfill and material-design-icons in a Provider component with a store and history. Add stylesheets for material icons, roboto font, and react-tap-event-plugin. Include conditional rendering for creating a DevToolsWindow in non-production environments."
"import React from 'react'
import styled from 'styled-components'

const { View } = {
    View: styled.div`
        border: 1px solid #ddd;
        border-radius: 2px;
        border-bottom-width: 0;
        box-shadow: 0, 2px 9px #000;
        margin-left: 5px;
        margin-right: 5px;
        margin-top: 10px;
    `
}

const Card = ({ children }) =>
    <View>
        {children}
    </View>


export { Card }

","Create React UI components that build a card-based layout system. The card component should have an outer container with a light gray border, rounded corners with a 2px radius, a shadow effect that extends 9px below the card, and margins of 5px on the left and right and 10px on the top."
"/**
 * app.js
 *
 * This is the entry file for the application, only setup and boilerplate
 * code.
 */

// Needed for redux-saga es6 generator support
import 'babel-polyfill';

// Import all the third party stuff
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { applyRouterMiddleware, Router, browserHistory } from 'react-router';
import { syncHistoryWithStore } from 'react-router-redux';
import { useScroll } from 'react-router-scroll';
import 'sanitize.css/sanitize.css';

// Import root app
import App from 'containers/App';

// Import selector for `syncHistoryWithStore`
import { makeSelectLocationState } from 'containers/App/selectors';

// Import Language Provider
import LanguageProvider from 'containers/LanguageProvider';

// Load the favicon, the manifest.json file and the .htaccess file
/* eslint-disable import/no-unresolved, import/extensions */
import '!file-loader?name=[name].[ext]!./favicon.ico';
import '!file-loader?name=[name].[ext]!./manifest.json';
import 'file-loader?name=[name].[ext]!./.htaccess';
/* eslint-enable import/no-unresolved, import/extensions */

import configureStore from './store';

// Import i18n messages
import { translationMessages } from './i18n';

// Import CSS reset and Global Styles
import './global-styles';

// Import root routes
import createRoutes from './routes';

// Create redux store with history
// this uses the singleton browserHistory provided by react-router
// Optionally, this could be changed to leverage a created history
// e.g. `const browserHistory = useRouterHistory(createBrowserHistory)();`
const initialState = {};
const store = configureStore(initialState, browserHistory);

// Sync history and store, as the react-router-redux reducer
// is under the non-default key (""routing""), selectLocationState
// must be provided for resolving how to retrieve the ""route"" in the state
const history = syncHistoryWithStore(browserHistory, store, {
  selectLocationState: makeSelectLocationState(),
});

// Set up the router, wrapping all Routes in the App component
const rootRoute = {
  component: App,
  childRoutes: createRoutes(store),
};

const render = (messages) => {
  ReactDOM.render(
    <Provider store={store}>
      <LanguageProvider messages={messages}>
        <Router
          history={history}
          routes={rootRoute}
          render={
            // Scroll to top when going to a new page, imitating default browser
            // behaviour
            applyRouterMiddleware(useScroll())
          }
        />
      </LanguageProvider>
    </Provider>,
    document.getElementById('app')
  );
};

// Hot reloadable translation json files
if (module.hot) {
  // modules.hot.accept does not accept dynamic dependencies,
  // have to be constants at compile-time
  module.hot.accept('./i18n', () => {
    render(translationMessages);
  });
}

// Chunked polyfill for browsers without Intl support
if (!window.Intl) {
  (new Promise((resolve) => {
    resolve(import('intl'));
  }))
    .then(() => Promise.all([
      import('intl/locale-data/jsonp/en.js'),
    ]))
    .then(() => render(translationMessages))
    .catch((err) => {
      throw err;
    });
} else {
  render(translationMessages);
}

// Install ServiceWorker and AppCache in the end since
// it's not most important operation and if main code fails,
// we do not want it installed
if (process.env.NODE_ENV === 'production') {
  require('offline-plugin/runtime').install(); // eslint-disable-line global-require
}
","Provide an example of a React app entry file that uses Redux, React Router, and includes global styles and internationalization."
"import React from 'react'
import { Route, Router, IndexRedirect, browserHistory } from 'react-router'
import { ReduxRouter } from 'redux-router'

import App from './containers/App'
import Home from './pages/Home'
import Browse from './pages/Browse'

const routes = (
  <ReduxRouter>
    <Router history={browserHistory}>
      <Route path='/' component={App}>
        <IndexRedirect to='/browse' />
        <Route path='/home' component={Home} />
        <Route path='/browse' component={Browse} />
      </Route>
    </Router>
  </ReduxRouter>
)

export default routes
","Generate a React Router configuration with Redux Router integration. The routes should include a parent App component with an IndexRedirect to the Browse page, and two child routes: Home and Browse."
"import PropTypes from 'prop-types'
import React from 'react'
import classnames from 'classnames'

if (require('exenv').canUseDOM) {
  require('./browsable-list.scss')
}

const BrowsableList = ({ children, className, style }) => (
  <div className={classnames('browsable-list rounded', className)} style={style}>
    {children}
  </div>
)

BrowsableList.propTypes = {
  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),
  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  style: PropTypes.object
}

export default BrowsableList
","Generate React component code that renders a simple browsable list. The component should have the following features:

1. Accepts an array or single React element as children.
2. Renders a div with the class name 'browsable-list rounded' and an optional 'className' prop.
3. Optionally applies an inline style via the 'style' prop.
4. Includes propTypes to validate props types passed to the component."
"/**
*
* ContributeMenu
*
*/

import React from 'react';

import { injectIntl } from 'react-intl';
import TranslatableStaticText from 'containers/TranslatableStaticText';
import LanguageThemeProvider from 'components/LanguageThemeProvider';
import MenuLink from 'components/MenuLink';
import MenuBlock from 'components/MenuBlock';
import MenuList from 'components/MenuList';
import MenuListItem from 'components/MenuListItem';
import MenuTitle from 'components/MenuTitle';
import staticText from './staticText';


function ContributeMenu(props) {
  const { locale } = props.intl;
  return (

      <MenuBlock isArabic={locale==='ar'}>
        <LanguageThemeProvider>
          <MenuTitle>
            <TranslatableStaticText {...staticText.header} />
          </MenuTitle>
          <MenuList>
            <MenuListItem>
              <MenuLink to=""/contribute/how-it-works"" onClick={props.onClick}>
                <TranslatableStaticText {...staticText.howItWorks} />
              </MenuLink>
              <a href=""http://donate.beautifultrouble.org"" target=""_blank"" style={{textTransform: ""uppercase"", fontWeight: ""bold"", fontSize: ""12px""}} key=""donate"">
                <TranslatableStaticText {...staticText.donate} />
              </a>
            </MenuListItem>
          </MenuList>
        </LanguageThemeProvider>
      </MenuBlock>

  );
}

ContributeMenu.propTypes = {

};

export default injectIntl(ContributeMenu);
","Generate the React code for a menu component that displays a list of options related to contributing to a project. The menu should include a title, two clickable items (How It Works and Donate), and a divider line between them."
"import PropTypes from 'prop-types'
import React from 'react'
import loadGoogleMapsApi from './loadGoogleMapsApi'

class GoogleMapsLoadProxy extends React.Component {
  static propTypes = {
    component: PropTypes.func.isRequired
  }

  constructor(props) {
    super(props)

    this.state = {
      loading: true,
      error: null
    }
  }

  componentDidMount() {
    loadGoogleMapsApi(this.props)
      .then(api => this.setState({loading: false, api}))
      .catch(err => this.setState({error: err}))
  }

  render() {
    const {error, loading, api} = this.state
    if (error) {
      return <div>Load error: {error.stack}</div>
    }

    if (loading) {
      return <div>Loading Google Maps API</div>
    }

    const GeopointSelect = this.props.component

    return <GeopointSelect {...this.props} api={api} />
  }
}

export default GoogleMapsLoadProxy
",Create a React component that loads the Google Maps API and then renders a specific component with the API as a prop.
"import React from 'react'
import { Nav } from 'reactstrap'
import LinkItem from '../../LinkItem'
import './styles.scss'

const Category = ({ item, onClick }) => {
  const {
    title,
    content
  } = item

  return (
    <li className='category'>
      <div className='divider' />
      <Nav vertical>
        <div className='title'>{title}</div>
        {content.map((link, index) => (
          <LinkItem key={index} item={link} onClick={onClick} />
        ))}
      </Nav>
    </li>
  )
}

export default Category
",A React component that displays a category with a title and a list of links. Each link is clickable and has an onClick event handler. The component is styled with CSS and uses the Nav component from Reactstrap.
"import React, { Component } from 'react';
import firebase from 'firebase';
import VideoContent from './VideoContent';
import YouTube from 'react-youtube';
import FlatButton from 'material-ui/FlatButton';

const Broadcast = React.createClass({

  getInitialState() {
    return {
      video: {},
      videoKey: this.props.params.videoKey
    }
  },

  componentDidMount() {
    firebase.database()
      .ref(`/broadcasts/${this.state.videoKey}`)
      .on( 'value', snapshot => {
        const video = snapshot.val();
        this.setState({ video });
        this._setVideoState(video);
      });
  },

  _setVideoState({ time, state }) {
    if (this.player) {
      // sync time
      this.player.seekTo(time);
      // playing or buffering
      if (state === 1) {
        this.player.playVideo();
      } else {
        this.player.pauseVideo();
      }
    }
  },

  onReady({ target }) {
    this.player = target;
  },

  render() {
    const opts = {
      width: '500',
      height: '300',
      frameBorder: '0',
      playerVars: {
        autoPlay: 0,
        controls: 0
      }
    };

    return (
      <div style={{ width: 500, margin: 'auto' }}>
        {
          this.state.videoKey ? <VideoContent
            videoKey={this.state.videoKey}
            collection=""broadcasts""
            onReady={e => this.onReady(e)}
            expanded={true}
            opts={opts} /> : null
        }
      </div>
    );
  }
});

export default Broadcast;
","Design a React component called Broadcast that displays a YouTube video streamed from a Firebase database. The component should:

- Mount and fetch the video data from Firebase using the videoKey prop.
- Update the video state based on the retrieved data, including the video's current time and playback state.
- Use the react-youtube package to render the video with custom options (width, height, autoPlay, controls).
- Sync the video's state with the Firebase data, including pausing or playing the video based on the state value."
"import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/App/App.js';
import './index.css';

ReactDOM.render(
  <App />,
  document.getElementById('root')
);
",Create a React application that renders a basic App component to the root div of a web page.
"import React from 'react';
import ReactSwipeableViews from 'react-swipeable-views';
import ImmutablePropTypes from 'react-immutable-proptypes';
import PropTypes from 'prop-types';
import Video from 'mastodon/features/video';
import classNames from 'classnames';
import { defineMessages, injectIntl, FormattedMessage } from 'react-intl';
import IconButton from 'mastodon/components/icon_button';
import ImmutablePureComponent from 'react-immutable-pure-component';
import ImageLoader from './image_loader';
import Icon from 'mastodon/components/icon';
import GIFV from 'mastodon/components/gifv';

const messages = defineMessages({
  close: { id: 'lightbox.close', defaultMessage: 'Close' },
  previous: { id: 'lightbox.previous', defaultMessage: 'Previous' },
  next: { id: 'lightbox.next', defaultMessage: 'Next' },
});

export const previewState = 'previewMediaModal';

export default @injectIntl
class MediaModal extends ImmutablePureComponent {

  static propTypes = {
    media: ImmutablePropTypes.list.isRequired,
    status: ImmutablePropTypes.map,
    index: PropTypes.number.isRequired,
    onClose: PropTypes.func.isRequired,
    intl: PropTypes.object.isRequired,
  };

  static contextTypes = {
    router: PropTypes.object,
  };

  state = {
    index: null,
    navigationHidden: false,
  };

  handleSwipe = (index) => {
    this.setState({ index: index % this.props.media.size });
  }

  handleNextClick = () => {
    this.setState({ index: (this.getIndex() + 1) % this.props.media.size });
  }

  handlePrevClick = () => {
    this.setState({ index: (this.props.media.size + this.getIndex() - 1) % this.props.media.size });
  }

  handleChangeIndex = (e) => {
    const index = Number(e.currentTarget.getAttribute('data-index'));
    this.setState({ index: index % this.props.media.size });
  }

  handleKeyDown = (e) => {
    switch(e.key) {
    case 'ArrowLeft':
      this.handlePrevClick();
      e.preventDefault();
      e.stopPropagation();
      break;
    case 'ArrowRight':
      this.handleNextClick();
      e.preventDefault();
      e.stopPropagation();
      break;
    }
  }

  componentDidMount () {
    window.addEventListener('keydown', this.handleKeyDown, false);

    if (this.context.router) {
      const history = this.context.router.history;

      history.push(history.location.pathname, previewState);

      this.unlistenHistory = history.listen(() => {
        this.props.onClose();
      });
    }
  }

  componentWillUnmount () {
    window.removeEventListener('keydown', this.handleKeyDown);

    if (this.context.router) {
      this.unlistenHistory();

      if (this.context.router.history.location.state === previewState) {
        this.context.router.history.goBack();
      }
    }
  }

  getIndex () {
    return this.state.index !== null ? this.state.index : this.props.index;
  }

  toggleNavigation = () => {
    this.setState(prevState => ({
      navigationHidden: !prevState.navigationHidden,
    }));
  };

  handleStatusClick = e => {
    if (e.button === 0 && !(e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      this.context.router.history.push(`/statuses/${this.props.status.get('id')}`);
    }
  }

  render () {
    const { media, status, intl, onClose } = this.props;
    const { navigationHidden } = this.state;

    const index = this.getIndex();
    let pagination = [];

    const leftNav  = media.size > 1 && <button tabIndex='0' className='media-modal__nav media-modal__nav--left' onClick={this.handlePrevClick} aria-label={intl.formatMessage(messages.previous)}><Icon id='chevron-left' fixedWidth /></button>;
    const rightNav = media.size > 1 && <button tabIndex='0' className='media-modal__nav  media-modal__nav--right' onClick={this.handleNextClick} aria-label={intl.formatMessage(messages.next)}><Icon id='chevron-right' fixedWidth /></button>;

    if (media.size > 1) {
      pagination = media.map((item, i) => {
        const classes = ['media-modal__button'];
        if (i === index) {
          classes.push('media-modal__button--active');
        }
        return (<li className='media-modal__page-dot' key={i}><button tabIndex='0' className={classes.join(' ')} onClick={this.handleChangeIndex} data-index={i}>{i + 1}</button></li>);
      });
    }

    const content = media.map((image) => {
      const width  = image.getIn(['meta', 'original', 'width']) || null;
      const height = image.getIn(['meta', 'original', 'height']) || null;

      if (image.get('type') === 'image') {
        return (
          <ImageLoader
            previewSrc={image.get('preview_url')}
            src={image.get('url')}
            width={width}
            height={height}
            alt={image.get('description')}
            key={image.get('url')}
            onClick={this.toggleNavigation}
          />
        );
      } else if (image.get('type') === 'video') {
        const { time } = this.props;

        return (
          <Video
            preview={image.get('preview_url')}
            blurhash={image.get('blurhash')}
            src={image.get('url')}
            width={image.get('width')}
            height={image.get('height')}
            startTime={time || 0}
            onCloseVideo={onClose}
            detailed
            alt={image.get('description')}
            key={image.get('url')}
          />
        );
      } else if (image.get('type') === 'gifv') {
        return (
          <GIFV
            src={image.get('url')}
            width={width}
            height={height}
            key={image.get('preview_url')}
            alt={image.get('description')}
            onClick={this.toggleNavigation}
          />
        );
      }

      return null;
    }).toArray();

    // you can't use 100vh, because the viewport height is taller
    // than the visible part of the document in some mobile
    // browsers when it's address bar is visible.
    // https://developers.google.com/web/updates/2016/12/url-bar-resizing
    const swipeableViewsStyle = {
      width: '100%',
      height: '100%',
    };

    const containerStyle = {
      alignItems: 'center', // center vertically
    };

    const navigationClassName = classNames('media-modal__navigation', {
      'media-modal__navigation--hidden': navigationHidden,
    });

    return (
      <div className='modal-root__modal media-modal'>
        <div
          className='media-modal__closer'
          role='presentation'
          onClick={onClose}
        >
          <ReactSwipeableViews
            style={swipeableViewsStyle}
            containerStyle={containerStyle}
            onChangeIndex={this.handleSwipe}
            index={index}
          >
            {content}
          </ReactSwipeableViews>
        </div>

        <div className={navigationClassName}>
          <IconButton className='media-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={40} />

          {leftNav}
          {rightNav}

          {status && (
            <div className={classNames('media-modal__meta', { 'media-modal__meta--shifted': media.size > 1 })}>
              <a href={status.get('url')} onClick={this.handleStatusClick}><Icon id='comments' /> <FormattedMessage id='lightbox.view_context' defaultMessage='View context' /></a>
            </div>
          )}

          <ul className='media-modal__pagination'>
            {pagination}
          </ul>
        </div>
      </div>
    );
  }

}
",Generate a React component that displays a modal with a swipeable gallery of media attachments. Include navigation buttons and a close button.
"import React from 'react';

const VideoDetail = ({video}) => {
  if(!video) {
    return <div>Loading...</div>;
  }

  const url = `https://www.youtube.com/embed/${video.id.videoId}`;

  return (
    <div className=""video-detail col-md-8"">
      <div className=""embed-responsive embed-responsive-16by9"">
        <iframe className=""embed-responsive-item"" src={url}></iframe>
      </div>
      <div className=""details"">
        <div>{video.snippet.title}</div>
        <div>{video.snippet.description}</div>
      </div>
    </div>
  );
}

export default VideoDetail;
","Create a React component named VideoDetail that displays a YouTube video and its details. If the video is not available, display ""Loading...""."
"import React from 'react';
import Paper from 'material-ui/Paper';

const style = {
  height: 100,
  width: 100,
  margin: 20,
  textAlign: 'center',
  display: 'inline-block',
};

const PaperExampleCircle = () => (
  <div>
    <Paper style={style} zDepth={1} circle={true} />
    <Paper style={style} zDepth={2} circle={true} />
    <Paper style={style} zDepth={3} circle={true} />
    <Paper style={style} zDepth={4} circle={true} />
    <Paper style={style} zDepth={5} circle={true} />
  </div>
);

export default PaperExampleCircle;
",Create a React component that renders five circular paper elements with varying depths using the Material-UI library.
"'use strict';
import React from 'react';
import {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';


var products = [];

function addProducts(quantity) {
  var startId = products.length;
  for (var i = 0; i < quantity; i++) {
    var id = startId + i;
    products.push({
      id: id,
      name: ""Item name "" + id,
      price: 2100 + i
    });
  }
}

addProducts(5);

var selectRowProp = {
  mode: ""checkbox"",
  bgColor: ""pink"", //you should give a bgcolor, otherwise, you can't regonize which row has been selected
  hideSelectColumn: true,  //enable hide selection column.
  clickToSelect: true  //you should enable clickToSelect, otherwise, you can't select column.
};

export default class HideSelectionColumnTable extends React.Component{
  render(){
    return (
      <BootstrapTable data={products} selectRow={selectRowProp}>
          <TableHeaderColumn dataField=""id"" isKey={true}>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField=""name"">Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField=""price"">Product Price</TableHeaderColumn>
      </BootstrapTable>
    );
  }
};
","Generate a React code snippet for a table with 5 products, a checkbox selection mode, a pink background color for selected rows, and the selection column hidden."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageCollections = (props) => (
  <SvgIcon {...props}>
    <path d=""M22 16V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2zm-11-4l2.03 2.71L16 11l4 5H8l3-4zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z""/>
  </SvgIcon>
);
ImageCollections = pure(ImageCollections);
ImageCollections.displayName = 'ImageCollections';
ImageCollections.muiName = 'SvgIcon';

export default ImageCollections;
","Provide a React component for an SVG icon representing a collection of images. The icon should be visually similar to the Material Design icon for ""Image Collections."""
"import React from 'react';
import PropTypes from 'prop-types';
import styles from './socialMediaContainer.css';

const SocialMediaContainer = ({ children }) => (
  <div className={styles.socialMediaContainer}>
    {children}
  </div>
);

SocialMediaContainer.propTypes = {
  children: PropTypes.arrayOf(PropTypes.element).isRequired
};

export default SocialMediaContainer;
",Describe a React component that renders a container for displaying social media buttons. The component should have a prop named children that accepts an array of React elements. The container should have a CSS class applied to it.
"import React from 'react';
import ReactDOM from 'react-dom';
import createLogger from 'redux-logger';
import fetch from 'isomorphic-fetch';
import thunk from 'redux-thunk';
import { Provider } from 'react-redux';
import { Router } from 'director';
import { applyMiddleware, createStore, compose } from 'redux';

import * as creators from './actions';
import App from './comp/app';
import appReducer from './reducers/app';
import styles from './app.css';

// debug stuff
import Devtools from './comp/devtools';

var logger = createLogger({ collapsed: true })
  , createStoreWithMiddleware = compose(
      applyMiddleware(thunk, logger),
      Devtools.instrument()
    )(createStore)
  , store = createStoreWithMiddleware(appReducer)
  , defaultLocations = ['bled', 'sintra', 'bruges', 'reykjavik', 'tromso', 'svalbard']
;

if (module.hot) {
  module.hot.accept('./reducers/app', () => {
    return store.replaceReducer(require('./reducers/app').default);
  });
}

ReactDOM.render(
  <Provider store={store}>
    <div className={styles.fullHeight}>
      <App />
      <Devtools />
    </div>
  </Provider>,
  document.querySelector('#app')
);

// initialize list of default locations
for (var q of defaultLocations) {
  store.dispatch(creators.requestLocationInfo(q));
}
","Create a React application that loads data from an external API using Redux and Redux Thunk. The application should display a list of default locations and make API calls to fetch location information for each location. Include a Redux store, actions, reducers, middleware, and a component tree with a root component and a DevTools component for debugging. Use CSS modules for styling."
"import React from 'react';
import ajax from 'superagent';
import { Link } from 'react-router';
import { FormErrors } from './partials';
import { AppActions } from '../actions/AppActions';
import {
  Input,
  ButtonInput
} from 'react-bootstrap';

export class ResetPasswordForm extends React.Component {

  constructor() {
    super();
    this.state = {
      newPassword: '',
      processing: false,
      passwordReset: false,
      errors: []
    };
  }

  handleInputChange = (e => this.setState(
      {newPassword: e.target.value})
  );

  validate = () => {
    var errors = [];
    var { newPassword } = this.state;
    const rules = [
      {
        failOn: newPassword.trim().length < 5,
        error: 'Password must be at least 5 characters'
      }
    ];

    rules.forEach((rule) => {

      if (rule.failOn) {
        errors.push(rule);
      }
    });

    if (errors.length) {
      return {
        errors: errors,
        valid: false
      };
    } else {
      return {
        errors: null,
        valid: true
      };
    }
  };


  handleSubmit = (e) => {
    let newPassword = this.state.newPassword;
    e.preventDefault();

    var valid = this.validate();
    if (valid.errors) {

      let article = valid.errors.length > 1 ? 'are' : 'is';
      let noun = valid.errors.length > 1 ? 'errors' : 'error';
      let count = valid.errors.length > 1 ? valid.errors.length : 'one';

      this.setState({
        error: {
          processing: false,
          message: `There ${article} ${count} ${noun},  please try again.`,
          data: valid.errors
        }
      });
      return;
    }
    this.setState({
      processing: true
    });
    ajax.post('/api/reset')
      .send({password: newPassword})
      .end((err, res) => {
        if (err || res.text !== 'ok') {
          AppActions.toast({
            level: 'error',
            title: 'Server Error',
            message: 'Password reset token is invalid or has expired.'
          });
          this.context.router.push('/reset');
        }
        AppActions.toast({
          level: 'success',
          title: 'Success',
          message: 'Your password has been changed.'
        });
        this.setState({
          passwordReset: true
        });
      });
  };

  render() {

    let {
      processing,
      passwordReset,
      error,
      newPassword } = this.state;


    if (passwordReset) {
      return (
        <div style={{padding: '2em'}}>
          <p>
            Password successfully reset.
          </p>

          <p><Link
            to=""/login"">Go Login</Link></p>
        </div>
      );
    } else {
      return (
        <form onSubmit={this.handleSubmit}>
          {error ? <FormErrors {...error} /> : ''}
          <fieldset>
            <legend>
              Reset Password
            </legend>
            <p>
              <span>Enter a new password:</span>
            </p>
            <Input
              required
              type=""password""
              onChange={this.handleInputChange}
              value={newPassword}
              placeholder=""New Password""/>
            <ButtonInput
              disabled={processing}
              bsStyle=""primary""
              type=""submit"">
              Change Password
            </ButtonInput>
          </fieldset>
        </form>
      );
    }
  }
}

ResetPasswordForm.contextTypes = {
  router: React.PropTypes.object.isRequired
};

",Generate a React component for resetting a password that includes input validation and handles API requests for password changes. The component should display a success message if the password reset is successful and an error message if the reset fails. The component should also include a link to the login page after a successful password reset.
"import React from 'react';
import ReactDOM from 'react-dom';
import AuthActions from './actions/authActions';
import Main from './components/Main';
import Store from './store';
import injectTapEventPlugin from 'react-tap-event-plugin';

/*!
 *
 *  Web Starter Kit
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the ""License"");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an ""AS IS"" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
/* eslint-env browser */
(function() {
  'use strict';

  // Check to make sure service workers are supported in the current browser,
  // and that the current page is accessed from a secure origin. Using a
  // service worker from an insecure origin will trigger JS console errors. See
  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||
      // [::1] is the IPv6 localhost address.
      window.location.hostname === '[::1]' ||
      // 127.0.0.1/8 is considered localhost for IPv4.
      window.location.hostname.match(
        /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
      )
    );

  if ('serviceWorker' in navigator &&
      (window.location.protocol === 'https:' || isLocalhost)) {
    navigator.serviceWorker.register('service-worker.js')
    .then(function(registration) {
      // Check to see if there's an updated version of service-worker.js with
      // new files to cache:
      // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-registration-update-method
      if (typeof registration.update === 'function') {
        registration.update();
      }

      // updatefound is fired if service-worker.js changes.
      registration.onupdatefound = function() {
        // updatefound is also fired the very first time the SW is installed,
        // and there's no need to prompt for a reload at that point.
        // So check here to see if the page is already controlled,
        // i.e. whether there's an existing service worker.
        if (navigator.serviceWorker.controller) {
          // The updatefound event implies that registration.installing is set:
          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event
          var installingWorker = registration.installing;

          installingWorker.onstatechange = function() {
            switch (installingWorker.state) {
              case 'installed':
                // At this point, the old content will have been purged and the
                // fresh content will have been added to the cache.
                // It's the perfect time to display a ""New content is
                // available; please refresh."" message in the page's interface.
                break;

              case 'redundant':
                throw new Error('The installing ' +
                                'service worker became redundant.');

              default:
                // Ignore
            }
          };
        }
      };
    }).catch(function(e) {
      console.error('Error during service worker registration:', e);
    });
  }

  // Needed for onTouchTap
  // Check this repo:
  // https://github.com/zilverline/react-tap-event-plugin
  injectTapEventPlugin();
  Store.dispatch(AuthActions.listenToAuth());
  ReactDOM.render(React.createElement(Main),
    document.getElementById('root'));
})();
",Render a React application with Redux store and authentication listener using ReactDOM.
"import Footer from './Footer';
import React from 'react';

const Home = () => {
  return (
    <div>
      <div className=""container is-fluid"">
        <div
          className=""columns is-mobile is-centered""
          style={{ margin: '50px 0 60px 0' }}
        >
          <article className=""message"">
            <div className=""message-body"" style={{ textAlign: 'center' }}>
              <p>Let's do this. 🎉</p>
              <br />
              <a className=""button"" href=""/login"">
                Login
              </a>
              <br />
              <br />
              <a className=""button"" href=""/signup"">
                Signup
              </a>
            </div>
          </article>
        </div>
      </div>
      <Footer />
    </div>
  );
};

Home.propTypes = {};

export default Home;
",Create a React component that displays a webpage with a prominent message and two buttons centered on the page. The component should also have a footer at the bottom of the page.
"import { AppContainer } from 'react-hot-loader';
import React from 'react';
import { render } from 'react-dom';
import { Router, browserHistory } from 'react-router';
import routes from './routes';

const rootEl = document.getElementById('root');

render(
  <AppContainer>
    <Router
      routes={routes}
      history={browserHistory}
      key={process.env.NODE_ENV !== ""production"" ? Math.random() : false}
    />
  </AppContainer>,
  rootEl
);

if (module.hot) {
  module.hot.accept('./routes', () => {
    // If you use Webpack 2 in ES modules mode, you can
    // use <App /> here rather than require() a <NextApp />.
    const routes = require('./routes').default;
    render(
      <AppContainer>
        <Router
          routes={routes}
          history={browserHistory}
          key={process.env.NODE_ENV !== ""production"" ? Math.random() : false}
        />
      </AppContainer>,
      rootEl
    );
  });
}",Render a React application with the specified routes using React Router and hot reloading functionality.
"import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import PropTypes from 'prop-types';

class Authentication extends Component {
    static propTypes = {
        mode: PropTypes.bool,
        onLogin: PropTypes.func,
        onRegister: PropTypes.func,
    }

    static defaultProps = {
        mode: true,
        onLogin: () => {
        },
        onRegister: () => {
        },
    }

    state = {
        username: '',
        password: '',
    }

    handleChange = (e) => {
        const nextState = {};
        nextState[e.target.name] = e.target.value;
        this.setState(nextState);
    }

    handleLogin = () => {
        const id = this.state.username;
        const pw = this.state.password;

        this.props.onLogin(id, pw).then((success) => {
            if (!success) {
                console.log('test1');
                this.setState({
                    password: '',
                });
            }
        });
    }

    handleRegister = () => {
        const id = this.state.username;
        const pw = this.state.password;

        this.props.onRegister(id, pw).then((result) => {
            if (!result) {
                this.setState({
                    username: '',
                    password: '',
                });
            }
        });
    }

    handleKeyPress = (e) => {
        if (e.charCode === 13) {
            if (this.props.mode) {
                this.handleLogin();
            } else {
                this.handleRegister();
            }
        }
    }

    render() {
        const inputBoxes = (
            <div>
                <div className=""input-field col s12 username"">
                    <label>Username</label>
                    <input
                      name=""username""
                      type=""text""
                      className=""validate""
                      onChange={this.handleChange}
                      value={this.state.username}
                    />
                </div>
                <div className=""input-field col s12"">
                    <label>Password</label>
                    <input
                      name=""password""
                      type=""password""
                      className=""validate""
                      onChange={this.handleChange}
                      value={this.state.password}
                      onKeyPress={this.handleKeyPress}
                    />
                </div>
            </div>
        );

        const loginView = (
            <div>
                <div className=""card-content"">
                    <div className=""row"">
                        {inputBoxes}
                        <a className=""waves-effect waves-light btn"" onClick={this.handleLogin}>SUBMIT</a>
                    </div>
                </div>


                <div className=""footer"">
                    <div className=""card-content"">
                        <div className=""right"" >
                        New Here? <Link to=""/register"">Create an account</Link>
                        </div>
                    </div>
                </div>

            </div>
        );

        const registerView = (
            <div className=""card-content"">
                <div className=""row"">
                    {inputBoxes}
                    <a className=""waves-effect waves-light btn"" onClick={this.handleRegister}>CREATE</a>
                </div>
            </div>
        );

        return (
            <div className=""auth"">
                <div className=""card"">
                    <div className=""header blue white-text center"">
                        <div className=""card-content"">{this.props.mode ? 'LOGIN' : 'REGISTER'}</div>
                    </div>
                    {this.props.mode ? loginView : registerView }
                </div>
            </div>
        );
    }
}

export default Authentication;
","Create a React component that can be used for both logging in and registering users. It should have a header that displays ""LOGIN"" or ""REGISTER"" depending on the mode, and two input fields for username and password. If the mode is ""LOGIN"", there should be a ""SUBMIT"" button that triggers the `onLogin` prop function with the username and password. If the mode is ""REGISTER"", there should be a ""CREATE"" button that triggers the `onRegister` prop function with the username and password. There should also be a link to the other mode at the bottom of the component."
"'use strict';

import React from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import Banner from '../components/banner';
import AppBody from '../components/appBody';
import DocumentTextSection from '../components/documentTextSection';
import Button from '../components/button';
import * as DocumentActions from '../actions/documentActions';
import * as GeneralActions from '../actions/generalActions';
import Typed from 'typed-lite';
import router from '../router';

const defaultText = `markup
------

> Create & share TeX snippets with rich math typesetting and markdown support.

Supports _math_ **typesetting** like $T(n) = \\Theta (n^2)$ and markdown ~~stuff~~ features.

$

f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi

$`;

class HomeScreen extends React.Component {

  constructor (props) {
    super(props);

    this.typedText = null;
  }

  componentWillMount () {
    this.props.documentActions.updateText(defaultText);
  }

  componentDidMount () {
    var nodeDOM = document.querySelector('.-dynamic-typing-area');

    this.typedText = new Typed(nodeDOM, {
    	words: ['meaningful', 'beautiful', 'powerful', 'interesting', 'unique', 'wonderful', 'radical', 'sincere', 'organic'],
    	startDelay: 3000,
    	timing: 65,
    	backTiming: 40,
    	pause: 2500,
    	typoProbability: .05,
    	maxTypos: 1,
    	loop: true
    });

    this.typedText.start();
  }

  openInNewTab (url) {
    var win = window.open(url, '_blank');
    win.focus();
  }

  routeToEdit () {
    this.props.generalActions.unloadPage();
    setTimeout(() => {
      router.navigate('/edit', {trigger: true});
      // Slight toggle to make sure the CSS animation actually renders
      setTimeout(() => { this.props.generalActions.loadPage(); }, 1);
    }, 275);
  }

  render() {
    return (
      <AppBody>
        {/* LANDING BLOCK */}
        <div className=""-homepage-landing-block"">

          {/* Header */}
          <h1 className=""-banner-title noselect"">markup</h1>
          <h2 className=""-banner-sub-title noselect"">
            Write something&nbsp;
            <span className=""-dynamic-typing-area"">meaningful</span>
          </h2>

          {/* Interactive example */}
          <div className=""-landing-example-container"">
            <Button
              label={'Create a new document'}
              onClick={() => this.routeToEdit()}
            />
            <div className=""-landing-example-document-container"">
              <DocumentTextSection
                uniqueId={'home'}
                style={{float:'left'}}
                editable={true}
                text={defaultText}
              />
              <DocumentTextSection
                uniqueId={'home'}
                style={{float:'right'}}
                editable={false}
                text={this.props.text}
              />
            </div>
          </div>

          {/* SVG footer */}
          <div className=""-landing-header-bottom-curve"">
            <CurveComponent />
          </div>
        </div>

        {/* Left Sample Container */}
        <div className=""section-with-side-sample-container"">
          {/* Left Sample */}
          <div className=""section-with-left-side-sample"">
            <div className=""-left-side"">
              <img src=""/img/samples/sample.png"" />
            </div>
            <div className=""-right-side"">
              <h1>Powered by KaTeX, the Fastest Math Typesetting Library on the Web</h1>
              <p>KaTeX renders its math synchronously and doesn’t need to reflow the page, and the
                layout is based on Donald Knuth’s TeX, the gold standard for math typesetting.</p>
            </div>
          </div>

          {/* SVG footer */}
          <div className=""-landing-header-bottom-curve-inverted"">
            <CurveComponent color='#fff' />
          </div>
        </div>

        {/* Right Sample Container */}
        <div className=""section-with-side-sample-container"">

          {/* Right Sample */}
          <div className=""section-with-right-side-sample"">
            <div className=""-left-side"">
              <h1>Combine Markdown with KaTeX to Produce Rich Documents</h1>
              <p>Not only do we parse and compile KaTeX in real time, we also support markdown! 
                You can freely combine the two formats seemlessly together and have them compile
                in real time as you type.
              </p>
            </div>
            <div className=""-right-side"">
              <img src=""/img/samples/sample.png"" />
            </div>
          </div>

          {/* SVG footer */}
          <div className=""-landing-header-bottom-curve"">
            <CurveComponent />
          </div>
        </div>
        <div className=""homepage-footer"">
          <p>Made with ❤︎ by <a href=""https://nickzuber.com/"">Nick Zuber</a> and <a href=""https://github.com/markup-app/markup/graphs/contributors"">contributors</a></p>
          <a href=""https://github.com/markup-app/markup"">Github</a>&nbsp;∙&nbsp;
          <a href=""https://github.com/markup-app/markup/issues"">Report Issue</a>&nbsp;∙&nbsp;
          <a href=""https://twitter.com/nick_zuber"">Contact</a>
        </div>
      </AppBody>
    );
  }
};

const CurveComponent = ({color, ...props}) => 
    <svg preserveAspectRatio=""none"" width=""54"" height=""14"" viewBox=""0 0 54 14"" version=""1.1"" xmlns=""http://www.w3.org/2000/svg"">
      <path fill={color || '#02b875'} d=""M 27 10C 21 12 14 14 0 14L 0 0L 54 0L 54 3C 40 3 33 8 27 10Z""></path>
    </svg>

const actions = (dispatch) => ({
  documentActions: bindActionCreators(DocumentActions, dispatch),
  generalActions: bindActionCreators(GeneralActions, dispatch)
});

const selector = (state) => ({
  text: state.document.text
});

export default connect(selector, actions)(HomeScreen);

// {/* Sample posts section */}
// <div className=""-all-samples-container"">
//   {/* One sample */}
//   <div className=""-sample-container"">
//     <DocumentTextSection
//       uniqueId={'sample1'}
//       style={{
//         width: '500px',
//         padding: '20px 30px'
//       }}
//       editable={false}
//       text={defaultText}
//     />
//   </div>

//   {/* Two sample */}
//   <div className=""-sample-container"">
//     <DocumentTextSection
//       uniqueId={'sample2'}
//       style={{
//         width: '500px',
//         padding: '20px 30px'
//       }}
//       editable={false}
//       text={defaultText}
//     />
//   </div>

//   {/* Three sample */}
//   <div className=""-sample-container"">
//     <DocumentTextSection
//       uniqueId={'sample3'}
//       style={{
//         width: '500px',
//         padding: '20px 30px'
//       }}
//       editable={false}
//       text={defaultText}
//     />
//   </div>
// </div>","Generate a React class component that is the Home Screen for a LaTeX/Markdown document editor web application. The component should include a banner with a dynamic typing effect, an interactive example of the editor with sample text, three sample posts, and a footer with links to the GitHub repository, issue reporting, and the developer's contact information."
"/**
 * @flow
 */
'use strict';

import React from 'react';
import {
    ToastAndroid,
    View,
} from 'react-native';
import DialogAndroid from 'react-native-dialogs';

import FloatingActionButton from './FloatingActionButton';
import StatelessComponent from './StatelessComponent';
import store from './store';
import * as t from './types';

type CreateButtonsProps = {
}
export default class CreateButtons extends StatelessComponent<CreateButtonsProps> {
    shouldComponentUpdate() {
        return false;
    }

    handleCreateLambda() {
        const dialog = new DialogAndroid();
        dialog.set({
            title: 'Choose a variable name',
            positiveText: 'OK',
            negativeText: 'Cancel',
            input: {
                allowEmptyInput: false,
                callback: (varName) => {
                    const error = checkDefNameErrors(varName);
                    if (error != null) {
                        ToastAndroid.show(error, ToastAndroid.SHORT);
                    } else {
                        store.dispatch(t.AddExpression.make(
                            t.CanvasExpression.make(
                                t.UserLambda.make(varName, null),
                                t.CanvasPoint.make(100, 100))
                        ));
                    }
                },
            }
        });
        dialog.show();
    }

    handleCreateDefinition() {
        const dialog = new DialogAndroid();
        dialog.set({
            title: 'Create or show definition',
            positiveText: 'OK',
            negativeText: 'Cancel',
            input: {
                allowEmptyInput: false,
                type: 0x00001000, // InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS
                callback: (defName) => {
                    const error = checkDefNameErrors(defName);
                    if (error != null) {
                        ToastAndroid.show(error, ToastAndroid.SHORT)
                    } else {
                        store.dispatch(t.PlaceDefinition.make(
                            defName,
                            t.ScreenPoint.make(100, 100),
                        ));
                    }
                },
            }
        });
        dialog.show();
    }

    render() {
        return <View
            style={{
                flexDirection: 'row',
                position: 'absolute',
                right: 0,
                bottom: 0,
            }}
        >
            <FloatingActionButton
                onPress={this.handleCreateLambda.bind(this)}
                source={require('./img/lambda.png')}
                style={{
                    marginRight: 24,
                    marginBottom: 24,
                }}
            />
            <FloatingActionButton
                onPress={this.handleCreateDefinition.bind(this)}
                source={require('./img/definition.png')}
                style={{
                    marginRight: 24,
                    marginBottom: 24,
                }}
            />
        </View>;
    }
};

const isLowerCase = (letter: string): boolean => {
    return letter !== letter.toUpperCase();
};

/**
 * Returns an error message if the variable name is invalid, or null if the name
 * is valid.
 */
const checkVarNameErrors = (varName: string): ?string => {
    if (varName.length > 8) {
        return 'Variable names can only be up to 8 letters long.';
    }
    for (let i = 0; i < varName.length; i++) {
        if (!isLowerCase(varName[i])) {
            return 'Variable names can only contain lower-case letters.';
        }
    }
    return null;
};

/**
 * Returns an error message if the definition name is invalid, or null if the
 * name is valid.
 */
const checkDefNameErrors = (defName: string): ?string => {
    if (defName.length > 8) {
        return 'Definition names can only be up to 8 letters long.';
    }
    for (let i = 0; i < defName.length; i++) {
        if (isLowerCase(defName[i])) {
            return 'Definition names can only contain capital letters and symbols.';
        }
    }
    return null;
};","Create a React component that displays two floating action buttons in the bottom right corner of the screen. The first button, when pressed, should prompt the user to input a variable name less than 8 characters long, containing only lowercase letters. If the input is valid, a ""Lambda"" expression should be added to the store. The second button, when pressed, should prompt the user to input a definition name less than 8 characters long, containing only uppercase letters and symbols. If the input is valid, a ""Definition"" should be added to the store."
"import React from 'react'
import { connect } from 'react-redux'
import * as actions from './actions'
import { getActiveTeam } from 'admin/components/admin/selectors'
import Logo from 'admin/components/logo'

class Teams extends React.Component {

  static contextTypes = {
    admin: React.PropTypes.object,
    drawer: React.PropTypes.object,
    history: React.PropTypes.object
  }

  static propTypes = {
    team: React.PropTypes.object,
    teams: React.PropTypes.array
  }

  render() {
    const { sessions, team, teams } = this.props
    return (
      <div className=""chrome-navigation-panel"">
        <div className=""chrome-navigation-header"">
          <div className=""chrome-navigation-header-back"">
            <Logo team={ team } width=""50"" />
          </div>
          <div className=""chrome-navigation-header-team"">
            Manage Teams
          </div>
          <div className=""chrome-navigation-header-next"" onClick={ this._handleToggleMode.bind(this) }>
            <i className=""chevron down icon"" />
          </div>
        </div>
        <div className=""chrome-navigation-body"">
          <div className=""chrome-navigation-teams"">
            { teams.map((team, index) => {
              return (
                <div key={`team_${index}`}className=""chrome-navigation-team"">
                  <div className=""chrome-navigation-team-logo"" onClick={ this._handleChangeTeam.bind(this, index) }>
                    <Logo team={ team } width=""30"" />
                    { sessions[team.id] && sessions[team.id].user.unread > 0 &&
                      <div className=""chrome-navigation-team-label"">{ sessions[team.id].user.unread }</div>
                    }
                  </div>
                  <div className=""chrome-navigation-team-title"" onClick={ this._handleChangeTeam.bind(this, index) }>
                    { team.title }
                  </div>
                </div>
              )
            })}
          </div>
          <div className=""chrome-navigation-team-add"" onClick={ this._handleAddTeam.bind(this) }>
            <div className=""chrome-navigation-team-add-button"">
              <div className=""chrome-navigation-team-add-button-image"">
                <i className=""icon plus"" />
              </div>
            </div>
            <div className=""chrome-navigation-team-add-text"">
              Add team
            </div>
          </div>
        </div>
      </div>
    )
  }

  _handleToggleMode() {
    this.props.onToggleMode()
  }

  _handleChangeTeam(index) {
    const { onToggleMode } = this.props
    this.context.admin.chooseTeam(index)
    this.context.drawer.close()
    this.context.history.reset({ pathname: '/admin' })
    window.setTimeout(function() { onToggleMode() }, 500)
  }

  _handleAddTeam() {
    this.context.drawer.close()
    this.context.history.push({ pathname: '/admin/signin' })
  }

  _handleSignout(index) {
    if(this.props.teams.length === 1) {
      this.context.drawer.close()
      window.setTimeout(() => {
        this.context.admin.removeTeam(index)
      }, 100)
    } else {
      this.context.admin.removeTeam(index)
    }
  }

}

const mapStateToProps = (state, props) => ({
  sessions: state.admin.sessions,
  team: getActiveTeam(state),
  teams: state.admin.teams
})

const mapDispatchToProps = {
  onReset: actions.toggleMode,
  onToggleMode: actions.toggleMode
}

export default connect(mapStateToProps, mapDispatchToProps)(Teams)
","Generate a React component that displays a sidebar with the following features:
- A header with a team logo, title, and a button to toggle the sidebar mode.
- A body with a list of teams that includes a team logo, team title, and a notification label if the team has unread messages.
- A button to add a new team."
"import React from 'react';
import {Tabs, Tab} from 'material-ui/Tabs';
// From https://github.com/oliviertassinari/react-swipeable-views
import SwipeableViews from 'react-swipeable-views';

const styles = {
  headline: {
    fontSize: 24,
    paddingTop: 16,
    marginBottom: 12,
    fontWeight: 400,
  },
  slide: {
    padding: 10,
  },
};

export default class TabsExampleSwipeable extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      slideIndex: 0,
    };
  }

  handleChange = (value) => {
    this.setState({
      slideIndex: value,
    });
  };

  render() {
    return (
      <div>
        <Tabs
          onChange={this.handleChange}
          value={this.state.slideIndex}
        >
          <Tab label=""Tab One"" value={0} />
          <Tab label=""Tab Two"" value={1} />
          <Tab label=""Tab Three"" value={2} />
        </Tabs>
        <SwipeableViews
          index={this.state.slideIndex}
          onChangeIndex={this.handleChange}
        >
          <div>
            <h2 style={styles.headline}>Tabs with slide effect</h2>
            Swipe to see the next slide.<br />
          </div>
          <div style={styles.slide}>
            slide n°2
          </div>
          <div style={styles.slide}>
            slide n°3
          </div>
        </SwipeableViews>
      </div>
    );
  }
}
","Design a React component that uses Material UI's Tabs and SwipeableViews to enable tabs with a sliding effect. Each tab should have its own content, and the tab content should change when the user swipes or clicks on a different tab."
"import React from 'react';
import dates from './utils/dates';
import localizer from './localizer';
import { navigate } from './utils/constants';

import TimeGrid from './TimeGrid';

const PROPERTY_TYPES = TimeGrid.propTypes;
const DEFAULT_PROPS = TimeGrid.defaultProps;

class Week extends React.Component {

  constructor(props) {
    super(props);
  }

  render() {
    let { date } = this.props;
    let { start, end } = Week.range(date, this.props);

    return (
        <TimeGrid {...this.props} start={start} end={end} eventOffset={15}/>
    );
  }

}

Week.navigate = (date, action) => {
  switch (action) {
    case navigate.PREVIOUS:
      return dates.add(date, -1, 'week');

    case navigate.NEXT:
      return dates.add(date, 1, 'week');

    default:
      return date;
  }
};

Week.range = (date, { culture }) => {
  let firstOfWeek = localizer.startOfWeek(culture);
  let start = dates.startOf(date, 'week', firstOfWeek);
  let end = dates.endOf(date, 'week', firstOfWeek);

  return { start, end };
};

Week.propTypes = PROPERTY_TYPES;
Week.defaultProps = DEFAULT_PROPS;

export default Week;
","Generate the React component class named Week, a subclass of React.Component, that renders a time grid within a specific week. The class should accept several props, including the current date and culture, and use those props to calculate the start and end of the week to display in the grid. The component should provide a navigate method to move forward or backward in weeks and a range method to calculate the start and end of the current week based on the culture and start of week settings."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import isEqual from 'lodash/isEqual';
import { NavMenuItem } from 'components/nav-menu';
import classNames from 'classnames/bind';
import styles from './nav-menu.css';

const cx = classNames.bind(styles);

class NavMenuList extends Component {
  static propTypes = {
    suites: PropTypes.array,
    showPassed: PropTypes.bool,
    showFailed: PropTypes.bool,
    showPending: PropTypes.bool,
    showSkipped: PropTypes.bool,
  };

  shouldComponentUpdate(nextProps) {
    return !isEqual(this.props, nextProps);
  }

  render() {
    const {
      suites,
      showPassed,
      showFailed,
      showPending,
      showSkipped,
    } = this.props;
    const navItemProps = { showPassed, showFailed, showPending, showSkipped };

    return (
      !!suites && (
        <div>
          {suites.map(subSuite => (
            <ul key={subSuite.uuid} className={cx('list', 'sub')}>
              <NavMenuItem suite={subSuite} {...navItemProps} />
            </ul>
          ))}
        </div>
      )
    );
  }
}

export default NavMenuList;
","Create a React component that renders a menu of test suites. The menu should have a list of suites, each with a checkbox to toggle whether to show passed, failed, pending, or skipped tests. The component should only update when the props change."
"import React from 'react';

export default class Footer extends React.Component {
  render() {
    const currentYear = new Date().getFullYear();

    return (
      <div>
        <p><small>&copy {currentYear}.</small> This is the amazing <b>footer</b>.</p>
      </div>
    )
  };
}
","Create a React component called Footer that displays the current year and the text ""This is the amazing footer."" in small font."
"import React from 'react';
import {mount} from 'react-mounter';
import {Accounts} from 'meteor/accounts-base';

import {
  AuthCheck,
  LayoutDefault,
  Simplest,
  NotFound,
} from '/client/configs/components.js';

import Register from './components/AccountRegister/Wrapper.jsx';
import Login from './components/AccountLogin/Wrapper.jsx';
import Password from './components/AccountPassword/Wrapper.jsx';
import Profile from './components/AccountProfile/Wrapper.jsx';
import Account from './components/AccountAccount/Wrapper.jsx';

export default function (injectDeps, {FlowRouter}) {

  const AuthCheckCtx = injectDeps(AuthCheck);

  FlowRouter.route('/', {
    name: 'app.home',
    action() {
      mount(AuthCheckCtx, {
        LayoutDefault, content: () => (<Simplest title=""App main screen""/>)
      });
    }
  });

  FlowRouter.notFound = {
    action() {
      mount(AuthCheckCtx, {
        LayoutDefault, content: () => (<NotFound />)
      });
    }
  };

  FlowRouter.route('/register', {
    name: 'app.register',
    action() {
      mount(AuthCheckCtx, {
        LayoutDefault, content: () => (<Register />),
        requireNotLoggedIn: true
      });
    }
  });

  FlowRouter.route('/login', {
    name: 'app.login',
    action() {
      mount(AuthCheckCtx, {
        LayoutDefault, content: () => (<Login />),
        requireNotLoggedIn: true
      });
    }
  });

  FlowRouter.route('/logout', {
    name: 'app.logout',
    action() {
      Accounts.logout();
      // Meteor.logout(() => {
      FlowRouter.go('/login');
      // });
    }
  });

  FlowRouter.route('/password', {
    name: 'app.password',
    action() {
      mount(AuthCheckCtx, {
        LayoutDefault, content: () => (<Password />)
      });
    }
  });

  FlowRouter.route('/account', {
    name: 'app.account',
    action() {
      mount(AuthCheckCtx, {
        LayoutDefault, content: () => (<Account />),
        requireUserId: true
      });
    }
  });

  FlowRouter.route('/profile', {
    name: 'app.profile',
    action() {
      mount(AuthCheckCtx, {
        LayoutDefault, content: () => (<Profile />),
        requireUserId: true
      });
    }
  });

}
","Generate React-Meteor FlowRouter routes for app's root, 404, register, login, logout, password change, account view, and profile view. Ensure routes work with AuthCheck component to restrict access as needed."
"import React from 'react';

const App = () => (
  <div>Hello World!</div>
);

export default App;
","Create a simple React component that renders the text ""Hello World!"" to the screen."
"import React from 'react'
import boxes from '../../images/background-boxes.svg'
import styled from 'styled-components'
import {Flex, Box} from 'rebass'

const Container = styled(Flex)`
  background: center / cover no-repeat url(${boxes}); 
  height: 380px;
  background-color: ${(props) => props.theme.colors.offWhite};
 `

const ContentWrapper = styled(Box)`
  align-content: center;
  width: 100%;
  text-align: center;
  background-color: ${(props) => props.theme.colors.white};
`

const Footer = () => {
  return (
    <Container>
      <ContentWrapper py={4} mt={'auto'}>
        Footer Text 🤪
      </ContentWrapper>
    </Container>
  )
}

export default Footer
",Create a React component called Footer with styled components that has a background image from a file path.  The container should have a height of 380px and be off-white with a centered white box inside it for the text.
"import React from 'react';
import ReactMixin from 'react-mixin';
import addons from 'react/addons';

import DialogActionCreators from 'actions/DialogActionCreators';

import AvatarItem from 'components/common/AvatarItem.react';

const {addons: { PureRenderMixin }} = addons;

@ReactMixin.decorate(PureRenderMixin)
class ContactsSectionItem extends React.Component {
  static propTypes = {
    contact: React.PropTypes.object
  };

  constructor(props) {
    super(props);
  }

  openNewPrivateCoversation = () => {
    DialogActionCreators.selectDialogPeerUser(this.props.contact.uid);
  }

  render() {
    const contact = this.props.contact;

    return (
      <li className=""sidebar__list__item row"" onClick={this.openNewPrivateCoversation}>
        <AvatarItem image={contact.avatar}
                    placeholder={contact.placeholder}
                    size=""small""
                    title={contact.name}/>

        <div className=""col-xs"">
          <span className=""title"">
            {contact.name}
          </span>
        </div>
      </li>
    );
  }
}

export default ContactsSectionItem;
","Design an interface that allows users to click on a contact to open a private conversation. Use the following components: AvatarItem, DialogActionCreators, and PureRenderMixin. The component should display a list of contacts, where each contact has an avatar, name, and placeholder."
"import React from 'react';
import SvgIcon from '../../SvgIcon';

const ActionOpenInNew = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z""/>
  </SvgIcon>
);
ActionOpenInNew.displayName = 'ActionOpenInNew';
ActionOpenInNew.muiName = 'SvgIcon';

export default ActionOpenInNew;
","Generate an SVG icon component, following the Material Design specification for the ""Open in new"" action icon."
"import PropTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';

import * as actions from './actions';

import ExplorerPanel from './ExplorerPanel';

const Explorer = ({
  isVisible,
  nodes,
  path,
  pushPage,
  popPage,
  onClose,
}) => {
  const page = nodes[path[path.length - 1]];

  return isVisible ? (
    <ExplorerPanel
      path={path}
      page={page}
      nodes={nodes}
      onClose={onClose}
      popPage={popPage}
      pushPage={pushPage}
    />
  ) : null;
};

Explorer.propTypes = {
  isVisible: PropTypes.bool.isRequired,
  path: PropTypes.array.isRequired,
  nodes: PropTypes.object.isRequired,

  pushPage: PropTypes.func.isRequired,
  popPage: PropTypes.func.isRequired,
  onClose: PropTypes.func.isRequired,
};

const mapStateToProps = (state) => ({
  isVisible: state.explorer.isVisible,
  path: state.explorer.path,
  nodes: state.nodes,
});

const mapDispatchToProps = (dispatch) => ({
  pushPage: (id) => dispatch(actions.pushPage(id)),
  popPage: () => dispatch(actions.popPage()),
  onClose: () => dispatch(actions.closeExplorer()),
});

export default connect(mapStateToProps, mapDispatchToProps)(Explorer);
","Generate the JavaScript React code for an Explorer component that displays a panel with a navigation tree and file explorer functionality. The panel should be visible or hidden based on the isVisible prop, and it should show the current page specified by the path prop in the navigation tree. The component should also allow for pushing and popping pages from the path."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvForward10 = (props) => (
  <SvgIcon {...props}>
    <path d=""M4 13c0 4.4 3.6 8 8 8s8-3.6 8-8h-2c0 3.3-2.7 6-6 6s-6-2.7-6-6 2.7-6 6-6v4l5-5-5-5v4c-4.4 0-8 3.6-8 8zm6.8 3H10v-3.3L9 13v-.7l1.8-.6h.1V16zm4.3-1.8c0 .3 0 .6-.1.8l-.3.6s-.3.3-.5.3-.4.1-.6.1-.4 0-.6-.1-.3-.2-.5-.3-.2-.3-.3-.6-.1-.5-.1-.8v-.7c0-.3 0-.6.1-.8l.3-.6s.3-.3.5-.3.4-.1.6-.1.4 0 .6.1.3.2.5.3.2.3.3.6.1.5.1.8v.7zm-.8-.8v-.5s-.1-.2-.1-.3-.1-.1-.2-.2-.2-.1-.3-.1-.2 0-.3.1l-.2.2s-.1.2-.1.3v2s.1.2.1.3.1.1.2.2.2.1.3.1.2 0 .3-.1l.2-.2s.1-.2.1-.3v-1.5z""/>
  </SvgIcon>
);
AvForward10 = pure(AvForward10);
AvForward10.displayName = 'AvForward10';
AvForward10.muiName = 'SvgIcon';

export default AvForward10;
",Craft a React component that renders a Material Design forward 10-second icon. Employ the functional component style along with the `recompose/pure` utility for performance optimization. Name the component `AvForward10` and ensure it's exported as the default.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvSortByAlpha = (props) => (
  <SvgIcon {...props}>
    <path d=""M14.94 4.66h-4.72l2.36-2.36zm-4.69 14.71h4.66l-2.33 2.33zM6.1 6.27L1.6 17.73h1.84l.92-2.45h5.11l.92 2.45h1.84L7.74 6.27H6.1zm-1.13 7.37l1.94-5.18 1.94 5.18H4.97zm10.76 2.5h6.12v1.59h-8.53v-1.29l5.92-8.56h-5.88v-1.6h8.3v1.26l-5.93 8.6z""/>
  </SvgIcon>
);
AvSortByAlpha = pure(AvSortByAlpha);
AvSortByAlpha.displayName = 'AvSortByAlpha';
AvSortByAlpha.muiName = 'SvgIcon';

export default AvSortByAlpha;
",Create a React component that renders an SVG icon for sorting by alphabetical order.
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link } from 'react-router';
import styled from 'styled-components';

import { baseUrl } from '../../baseurl-config';
import {
    StyledAnchor,
    StyledLink,
} from '../../baseStyle';
import {
    cardSystemLinkInfoList,
    getMyCardListLinkInfoList,
    getSettingLinkInfoList,
} from './common';
import defaultUserAvatar from '../../../images/user.svg';

const authedInfoList = [
    {
        isExternal: true,
        text: ""登出"",
        url: ""https://api.ludonow.com/logout""
    },
];

const myCardListLinkInfoSampleList = [
    {
        text: ""個人數據"",
        url: ""myCardList?stage=1&user_id=""
    },
];

const unAuthedInfoList = [
    {
        text: ""登入"",
        url: ""login""
    },
];

// styled components
const ButtonListWrapper = styled.div`
    align-items: center;
    background-color: rgba(0, 0, 0, 0.8);
    display: ${props => props.isNavbarVisible ? 'flex' : 'none'};
    flex-direction: column;
    height: calc(100vh - 70px);
    justify-content: center;
`;

const InnerCircle = styled.div`
    background-color: ${props => props.isNavbarVisible ? '#F8B10E' : 'white'};
    border-radius: 50%;
    box-shadow: ${props => props.isNavbarVisible ? '' : '0 0 1px -1px'};
    height: 30px;
    width: 30px;
`;

const LinkListWrapper = styled.div`
    display: flex;
    flex-direction: column;
    text-align: center;
`;

const MobileNavbarWrapper = styled.div`
    bottom: 0;
    position: fixed;
    width: 100%;
    z-index: 3;
`;

const StyledListItem = styled.div`
    background-color: ${props => props.selected ? '#FFC645' : 'transparent'};
    border: 1px solid white;
    border-radius: 20px;
    display: flex;
    font-weight: bold;
    justify-content: center;
    margin: 20px auto;
    padding: 8px 30px;

    &:active, &:focus {
        background-color: #FFC645;
    }
`;

const OutSideCircle = styled.div`
    align-items: center;
    background-color: white;
    border-radius: 50%;
    display: flex;
    height: 50px;
    justify-content: center;
    margin: 20px;
    width: 50px;

    img {
        border-radius: 50%;
        height: 40px;
        width: 40px;
    }
`;

const ToggleButtonWrapper = styled.div`
    bottom: 0;
    position: fixed;
    right: 0;
`;

// child component
const DoubleCircleIcon = ({
    handleClick,
    userPhotoUrl,
}) => (
    <OutSideCircle onClick={handleClick}>
        {
            userPhotoUrl && userPhotoUrl !== 'default' ?
                <img src={userPhotoUrl} />
            :
                <img src={defaultUserAvatar} />
        }
    </OutSideCircle>
);

// child components
const LinkList = ({
    handleNavbarClose,
    linkInfoList,
    selectedIndex,
    startingIndex,
}) => (
    <LinkListWrapper>
        {
            linkInfoList.map((linkInfo, arrayIndex)=> (
                linkInfo.isExternal ?
                    <StyledAnchor
                        href={linkInfo.url}
                        key={linkInfo.text}
                    >
                        <StyledListItem>
                            {linkInfo.text}
                        </StyledListItem>
                    </StyledAnchor>
                :
                    <StyledLink
                        key={linkInfo.text}
                        onClick={handleNavbarClose}
                        to={`${baseUrl}/${linkInfo.url}`}
                    >
                        <StyledListItem selected={selectedIndex === (arrayIndex + startingIndex)}>
                            {linkInfo.text}
                        </StyledListItem>
                    </StyledLink>
            ))
        }
    </LinkListWrapper>
);

class ToggleButton extends Component {
    constructor() {
        super();
        this.handleClick = this.handleClick.bind(this);
    }

    handleClick(event) {
        event.preventDefault();
        const {
            handleNavbarToggle,
            isNavbarVisible
        } = this.props;
        handleNavbarToggle(!isNavbarVisible);
    }

    render() {
        const {
            userPhotoUrl,
        } = this.props;

        return (
            <ToggleButtonWrapper>
                <DoubleCircleIcon
                    handleClick={this.handleClick}
                    userPhotoUrl={userPhotoUrl}
                />
            </ToggleButtonWrapper>
        );
    }
}

const Mobile = ({
    chatFuelId,
    currentUserId,
    handleNavbarClose,
    handleNavbarToggle,
    isNavbarVisible,
    selectedIndex,
    userPhotoUrl,
}) => {
    const authInfoList = currentUserId ? authedInfoList : unAuthedInfoList;

    return (
        <MobileNavbarWrapper>
            <ToggleButton
                handleNavbarToggle={handleNavbarToggle}
                isNavbarVisible={isNavbarVisible}
                userPhotoUrl={userPhotoUrl}
            />
            <ButtonListWrapper
                isNavbarVisible={isNavbarVisible}
                onClick={handleNavbarClose}
            >
                <LinkList
                    handleNavbarClose={handleNavbarClose}
                    linkInfoList={cardSystemLinkInfoList}
                    selectedIndex={selectedIndex}
                    startingIndex={0}
                />
                <LinkList
                    handleNavbarClose={handleNavbarClose}
                    linkInfoList={getMyCardListLinkInfoList(myCardListLinkInfoSampleList, currentUserId)}
                    selectedIndex={selectedIndex}
                    startingIndex={3}
                />
                <LinkList
                    handleNavbarClose={handleNavbarClose}
                    linkInfoList={authInfoList}
                    selectedIndex={selectedIndex}
                    startingIndex={4}
                />
                <LinkList
                    handleNavbarClose={handleNavbarClose}
                    linkInfoList={getSettingLinkInfoList(chatFuelId)}
                    selectedIndex={selectedIndex}
                    startingIndex={5}
                />
            </ButtonListWrapper>
        </MobileNavbarWrapper>
    );
}

Mobile.propTypes = {
    chatFuelId: PropTypes.string.isRequired,
    currentUserId: PropTypes.string.isRequired,
    handleNavbarClose: PropTypes.func.isRequired,
    handleNavbarToggle: PropTypes.func.isRequired,
    isNavbarVisible: PropTypes.bool.isRequired,
    selectedIndex: PropTypes.number.isRequired,
    userPhotoUrl: PropTypes.string.isRequired,
};

export default Mobile;
","Generate a React component for a mobile navigation bar that includes a button to toggle the navbar, a list of links and icons, and a profile picture. The component should take props for the current user's ID, profile picture URL, chat fuel ID, whether the navbar is visible, the selected index of the link list, and functions to toggle the navbar and close it."
"import React from 'react';
import logo from './logo.svg';
import './App.css';
import {HyperspaceIn, HyperspaceOut} from './hw-hyperspace';


function App() {
  return (
    <div className=""App"">
      <header className=""App-header"">
        <HyperspaceIn>
          adfsdfasdfasdgdfag
        </HyperspaceIn>
        <div style={{height: ""30px"", width: ""100%""}} />
        <br />
        <HyperspaceOut>
          adfsdfasdfasdgdfag
        </HyperspaceOut>
      </header>
    </div>
  );
}

export default App;
","Create an interactive React app that displays a short string of text entering and then exiting hyperspace, which is done by using specific animations and classes."
"import React from 'react'
import ChatMessage from '../ChatMessage'
import './ChatList.scss'

function formatDateHeader(date){
  function twoDigits(n){
    return (n < 10 ? '0' : '') + n
  }
  return `—  ${twoDigits(date.getDate())}.${twoDigits(date.getMonth() + 1)}.${date.getFullYear()}  —`
}

export default class ChatList extends React.Component {  

  getList(){
    const {messages} = this.props
    return messages.reduce((accMsgs, msg) => {
      const prevMsgDate = accMsgs.length > 0 ? new Date(accMsgs[accMsgs.length - 1].date) : null
      const curMsgDate = new Date(msg.date)
      if(prevMsgDate === null || prevMsgDate.getDate() !== curMsgDate.getDate()){
        accMsgs.push({
          isDateHeader: true,
          key: 'header_' + msg.date,
          text: formatDateHeader(curMsgDate)
        })
      }
      accMsgs.push(msg)
      return accMsgs
    }, [])
  }
  
  render() {
     
    return <div className=""chat-list custom-scroll"">
      <div className=""chat-list__frame"">
        {this.getList().map(msg => 
          msg.isDateHeader 
          ? <div key={msg.key} className=""chat-list__date-header"">
              <span className=""chat-list__date-header-text"">{msg.text}</span>
            </div>
          : <ChatMessage key={msg.key} msg={msg}></ChatMessage>
        )}
      </div>
    </div>
  }
}

",Generate a React component that takes an array of chat messages and displays them in a chat window with a date header for each day.  The component should use the provided `ChatMessage` component to display individual messages and the `formatDateHeader` function to format the date headers.
"/*
 *
 * NavigationContainer
 *
 */

import React from 'react';
import { connect } from 'react-redux';
import Helmet from 'react-helmet';
import selectNavigationContainer from './selectors';
import styles from './styles.css';
import Navigation from '../../components/Navigation';
import { requestTopics, selectTopic, toggleDrawer } from './actions';

export class NavigationContainer extends React.Component { // eslint-disable-line react/prefer-stateless-function
  static propTypes = {
    requestTopics: React.PropTypes.func.isRequired,
  }

  componentWillMount() {
    this.props.requestTopics();
  }

  render() {
    return (
      <div className={styles.navigationContainer}>
        <Helmet
          title=""NavigationContainer""
          meta={[
            { name: 'description', content: 'Description of NavigationContainer' },
          ]}
        />
        <Navigation {...this.props} />
      </div>
    );
  }
}

const mapStateToProps = selectNavigationContainer();

function mapDispatchToProps(dispatch) {
  return {
    requestTopics: () => dispatch(requestTopics()),
    selectTopic: (topic) => dispatch(selectTopic(topic)),
    toggleDrawer: () => dispatch(toggleDrawer()),
  };
}

export default connect(mapStateToProps, mapDispatchToProps)(NavigationContainer);
","Generate the React code for a container component that requests topics and renders a Navigation component, passing in necessary props and connecting it to the Redux store for data and actions."
"import _ from 'lodash'
import cx from 'classnames'
import PropTypes from 'prop-types'
import React from 'react'

import {
  childrenUtils,
  customPropTypes,
  getElementType,
  getUnhandledProps,
  META,
  SUI,
  useKeyOnly,
  useKeyOrValueAndKey,
  useTextAlignProp,
  useVerticalAlignProp,
  useWidthProp,
} from '../../lib'
import TableBody from './TableBody'
import TableCell from './TableCell'
import TableFooter from './TableFooter'
import TableHeader from './TableHeader'
import TableHeaderCell from './TableHeaderCell'
import TableRow from './TableRow'

/**
 * A table displays a collections of data grouped into rows.
 */
function Table(props) {
  const {
    attached,
    basic,
    celled,
    children,
    className,
    collapsing,
    color,
    columns,
    compact,
    definition,
    fixed,
    footerRow,
    headerRow,
    inverted,
    padded,
    renderBodyRow,
    selectable,
    singleLine,
    size,
    sortable,
    stackable,
    striped,
    structured,
    tableData,
    textAlign,
    unstackable,
    verticalAlign,
  } = props

  const classes = cx(
    'ui',
    color,
    size,
    useKeyOnly(celled, 'celled'),
    useKeyOnly(collapsing, 'collapsing'),
    useKeyOnly(definition, 'definition'),
    useKeyOnly(fixed, 'fixed'),
    useKeyOnly(inverted, 'inverted'),
    useKeyOnly(selectable, 'selectable'),
    useKeyOnly(singleLine, 'single line'),
    useKeyOnly(sortable, 'sortable'),
    useKeyOnly(stackable, 'stackable'),
    useKeyOnly(striped, 'striped'),
    useKeyOnly(structured, 'structured'),
    useKeyOnly(unstackable, 'unstackable'),
    useKeyOrValueAndKey(attached, 'attached'),
    useKeyOrValueAndKey(basic, 'basic'),
    useKeyOrValueAndKey(compact, 'compact'),
    useKeyOrValueAndKey(padded, 'padded'),
    useTextAlignProp(textAlign),
    useVerticalAlignProp(verticalAlign),
    useWidthProp(columns, 'column'),
    'table',
    className,
  )
  const rest = getUnhandledProps(Table, props)
  const ElementType = getElementType(Table, props)

  if (!childrenUtils.isNil(children)) {
    return <ElementType {...rest} className={classes}>{children}</ElementType>
  }

  return (
    <ElementType {...rest} className={classes}>
      {headerRow && <TableHeader>{TableRow.create(headerRow, { defaultProps: { cellAs: 'th' } })}</TableHeader>}
      <TableBody>
        {renderBodyRow && _.map(tableData, (data, index) => TableRow.create(renderBodyRow(data, index)))}
      </TableBody>
      {footerRow && <TableFooter>{TableRow.create(footerRow)}</TableFooter>}
    </ElementType>
  )
}

Table._meta = {
  name: 'Table',
  type: META.TYPES.COLLECTION,
}

Table.defaultProps = {
  as: 'table',
}

Table.propTypes = {
  /** An element type to render as (string or function). */
  as: customPropTypes.as,

  /** Attach table to other content */
  attached: PropTypes.oneOfType([
    PropTypes.bool,
    PropTypes.oneOf(['top', 'bottom']),
  ]),

  /** A table can reduce its complexity to increase readability. */
  basic: PropTypes.oneOfType([
    PropTypes.oneOf(['very']),
    PropTypes.bool,
  ]),

  /** A table may be divided each row into separate cells. */
  celled: PropTypes.bool,

  /** Primary content. */
  children: PropTypes.node,

  /** Additional classes. */
  className: PropTypes.string,

  /** A table can be collapsing, taking up only as much space as its rows. */
  collapsing: PropTypes.bool,

  /** A table can be given a color to distinguish it from other tables. */
  color: PropTypes.oneOf(SUI.COLORS),

  /** A table can specify its column count to divide its content evenly. */
  columns: PropTypes.oneOf(SUI.WIDTHS),

  /** A table may sometimes need to be more compact to make more rows visible at a time. */
  compact: PropTypes.oneOfType([
    PropTypes.bool,
    PropTypes.oneOf(['very']),
  ]),

  /** A table may be formatted to emphasize a first column that defines a rows content. */
  definition: PropTypes.bool,

  /**
   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content
   */
  fixed: PropTypes.bool,

  /** Shorthand for a TableRow to be placed within Table.Footer. */
  footerRow: customPropTypes.itemShorthand,

  /** Shorthand for a TableRow to be placed within Table.Header. */
  headerRow: customPropTypes.itemShorthand,

  /** A table's colors can be inverted. */
  inverted: PropTypes.bool,

  /** A table may sometimes need to be more padded for legibility. */
  padded: PropTypes.oneOfType([
    PropTypes.bool,
    PropTypes.oneOf(['very']),
  ]),

  /**
   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.
   *
   * @param {*} data - An element in the `tableData` array.
   * @param {number} index - The index of the current element in `tableData`.
   * @returns {*} Shorthand for a Table.Row.
   */
  renderBodyRow: customPropTypes.every([
    customPropTypes.disallow(['children']),
    customPropTypes.demand(['tableData']),
    PropTypes.func,
  ]),

  /** A table can have its rows appear selectable. */
  selectable: PropTypes.bool,

  /** A table can specify that its cell contents should remain on a single line and not wrap. */
  singleLine: PropTypes.bool,

  /** A table can also be small or large. */
  size: PropTypes.oneOf(_.without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),

  /** A table may allow a user to sort contents by clicking on a table header. */
  sortable: PropTypes.bool,

  /** A table can specify how it stacks table content responsively. */
  stackable: PropTypes.bool,

  /** A table can stripe alternate rows of content with a darker color to increase contrast. */
  striped: PropTypes.bool,

  /** A table can be formatted to display complex structured data. */
  structured: PropTypes.bool,

  /** Data to be passed to the renderBodyRow function. */
  tableData: customPropTypes.every([
    customPropTypes.disallow(['children']),
    customPropTypes.demand(['renderBodyRow']),
    PropTypes.array,
  ]),

  /** A table can adjust its text alignment. */
  textAlign: PropTypes.oneOf(_.without(SUI.TEXT_ALIGNMENTS, 'justified')),

  /** A table can specify how it stacks table content responsively. */
  unstackable: PropTypes.bool,

  /** A table can adjust its text alignment. */
  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),
}

Table.Body = TableBody
Table.Cell = TableCell
Table.Footer = TableFooter
Table.Header = TableHeader
Table.HeaderCell = TableHeaderCell
Table.Row = TableRow

export default Table
","Generate the React code for an unstyled generic Table component that can accept any number of columns and rows. The table should have the following features:

- Optional header row
- Optional footer row
- Optional striped rows
- Optional sortable columns
- Optional selectable rows
- Optional fixed layout (i.e. no wrapping of table cells)
- Optional custom body row rendering function
- Ability to specify the number of columns
- Ability to specify the alignment of the table (left, center, right)
- Ability to specify the vertical alignment of the table (top, middle, bottom)"
"import React from 'react';
import jQuery from 'jquery';
import {addTopic} from '../lib/client';
import {redirectURL} from '../lib/utils';
import {getTopicDetail, updateTopic} from '../lib/client';
import TopicEditor from './TopicEditor';

export default class EditTopic extends React.Component {

  constructor(props) {
    super(props);
    this.state = {};
  }

  componentDidMount() {
    getTopicDetail(this.props.params.id)
      .then(topic => {
        this.setState({topic});
      })
      .catch(err => console.error(err));
  }

  render() {
    if (!this.state.topic) {
      return (
        <h3>正在加载...</h3>
      );
    }

    return (
      <TopicEditor
        title={`编辑 ${this.state.topic.title}`}
        topic={this.state.topic}
        onSave={(topic, done) => {
          updateTopic(this.props.params.id, topic.title, topic.tags, topic.content)
            .then(ret => {
              done();
              redirectURL(`/topic/${ret._id}`);
            })
            .catch(err => {
              done();
              alert(err);
            });
        }}
      />
    )
  }
}
","Generate the code for a React component that will allow users to edit a topic. The component should:
- Fetch the topic details on component mount
- Display a loading message while fetching the topic details
- Render a TopicEditor component to allow users to edit the topic's title, tags, and content
- Save the changes to the topic when the user clicks the save button, and redirect the user to the updated topic page"
"import React from 'react'
import { Statistic } from 'semantic-ui-react'

const StatisticExampleHorizontal = () => <Statistic horizontal value='2,204' label='Views' />

export default StatisticExampleHorizontal
","Provide a React code snippet that demonstrates how to use a horizontal statistic component from the Semantic UI React library. The component should display the value ""2,204"" with the label ""Views""."
"
'use strict';

import React, { Component } from 'react';
import { connect } from 'react-redux';
import _ from 'lodash/core';
import { Drawer } from 'native-base';
import { BackAndroid, Platform, StatusBar } from 'react-native';
import { closeDrawer } from './actions/drawer';
import { popRoute } from './actions/route';
import Navigator from 'Navigator';

import Login from './components/login/';
import Home from './components/home/';
import BlankPage from './components/blankPage/';
import BlankPage2 from './components/blankPage2/';
import SplashPage from './components/splashscreen/';
import SideBar from './components/sideBar';
import { statusBarColor } from ""./themes/base-theme"";
import Add_Project from './components/addProject/';
import Add_Lesson from './components/addLesson/';
import Search_Project from './components/search/';
import Search_Lesson from './components/search2/';
import LessonScreen from './components/lessonScreen/';
import Register from './components/register/';
import SetSkill from './components/setSkill/';
import SetSkill2 from './components/setSkill2/';
import SetupInfo from './components/SetupInfo/';


Navigator.prototype.replaceWithAnimation = function (route) {
    const activeLength = this.state.presentedIndex + 1;
    const activeStack = this.state.routeStack.slice(0, activeLength);
    const activeAnimationConfigStack = this.state.sceneConfigStack.slice(0, activeLength);
    const nextStack = activeStack.concat([route]);
    const destIndex = nextStack.length - 1;
    const nextSceneConfig = this.props.configureScene(route, nextStack);
    const nextAnimationConfigStack = activeAnimationConfigStack.concat([nextSceneConfig]);

    const replacedStack = activeStack.slice(0, activeLength - 1).concat([route]);
    this._emitWillFocus(nextStack[destIndex]);
    this.setState({
        routeStack: nextStack,
        sceneConfigStack: nextAnimationConfigStack,
    }, () => {
        this._enableScene(destIndex);
        this._transitionTo(destIndex, nextSceneConfig.defaultTransitionVelocity, null, () => {
            this.immediatelyResetRouteStack(replacedStack);
        });
    });
};

export var globalNav = {};

const searchResultRegexp = /^search\/(.*)$/;

const reducerCreate = params=>{
    const defaultReducer = Reducer(params);
    return (state, action)=>{
        var currentState = state;

        if(currentState){
            while (currentState.children){
                currentState = currentState.children[currentState.index]
            }
        }
        return defaultReducer(state, action);
    }
};

const drawerStyle  = { shadowColor: '#000000', shadowOpacity: 0.8, shadowRadius: 3};

class AppNavigator extends Component {
    
    constructor(props){
        super(props);
    }

    componentDidMount() {
        globalNav.navigator = this._navigator;

        this.props.store.subscribe(() => {
            if(this.props.store.getState().drawer.drawerState == 'opened')
                this.openDrawer();

            if(this.props.store.getState().drawer.drawerState == 'closed')
                this._drawer.close();
        });

        BackAndroid.addEventListener('hardwareBackPress', () => {
            var routes = this._navigator.getCurrentRoutes();

            if(routes[routes.length - 1].id == 'home' || routes[routes.length - 1].id == 'login') {
                return false;
            }
            else {
                this.popRoute();
                return true;
            }
        });
    }

    popRoute() {
        this.props.popRoute();
    }

    openDrawer() {
        this._drawer.open();
    }

    closeDrawer() {
        if(this.props.store.getState().drawer.drawerState == 'opened') {
            this._drawer.close();
            this.props.closeDrawer();
        }
    }

    render() {
        return (
            <Drawer
                ref={(ref) => this._drawer = ref}
                type=""overlay""
                content={<SideBar navigator={this._navigator} />}
                tapToClose={true}
                acceptPan={false}
                onClose={() => this.closeDrawer()}
                openDrawerOffset={0.2}
                panCloseMask={0.2}
                negotiatePan={true}>
                <StatusBar
                    backgroundColor={statusBarColor}
                    barStyle=""light-content""
                />
                <Navigator
                    ref={(ref) => this._navigator = ref}
                    configureScene={(route) => {
                        return Navigator.SceneConfigs.FloatFromRight;
                    }}
                    initialRoute={{id: (Platform.OS === ""android"") ? 'splashscreen' : 'login', statusBarHidden: true}}
                    renderScene={this.renderScene}
                  />
            </Drawer>
        );
    }

    renderScene(route, navigator) {
        switch (route.id) {
            case 'splashscreen':
                return <SplashPage navigator={navigator} />;
            case 'login':
                return <Login navigator={navigator} />;
            case 'home':
                return <Home navigator={navigator} />;
            case 'blankPage':
                return <BlankPage route={route} navigator={navigator} />;
            case 'blankPage2':
                return <BlankPage2 route={route} navigator={navigator} />;
			case 'addProject':
                return <Add_Project navigator={navigator} />;
			case 'addLesson':
                return <Add_Lesson navigator={navigator} />;
			case 'search':
                return <Search_Project navigator={navigator} data={route.data} />;
            case 'search2':
                return <Search_Lesson navigator={navigator} data={route.data} />;
            case 'lessonScreen':
                return <LessonScreen navigator={navigator} />;
            case 'register':
                return <Register navigator={navigator} />;
            case 'setSkill':
                return <SetSkill navigator={navigator} />;
            case 'setSkill2':
                return <SetSkill2 navigator={navigator} />;
            case 'SetupInfo':
                return <SetupInfo navigator={navigator} />;
            default :
                return <Login navigator={navigator}  />;
        }
    }
}

//hyeonmin
var {
	TouchableHighlight
} = React;

function bindAction(dispatch) {
    return {
        closeDrawer: () => dispatch(closeDrawer()),
        popRoute: () => dispatch(popRoute())
    }
}

const mapStateToProps = (state) => {
    return {
        drawerState: state.drawer.drawerState
    }
}

export default connect(mapStateToProps, bindAction) (AppNavigator);
","Create the main application navigator using React Native's Navigator component with the following features:
- Allow for custom animations using the configureScene prop
- Integrate with Redux to listen for drawer open/close actions and update the navigator accordingly
- Handle hardware back button presses to pop routes
- Set the initial route based on the platform (splash screen for Android, login for iOS)
- Include a side drawer that opens from the left side
- Define custom route IDs for each screen in the app
- Use a custom reducer to handle navigation actions"
"import React from 'react';
import T from 'prop-types';
import { TextInput, View, ViewPropTypes } from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import Text from '../Text';
import { colors } from '../../styles';
import s from './styles';

const Input = ({
  containerStyle,
  placeholderColor,
  secondContainerStyle,
  containerStyleFocus,
  isNotValidStyle = s.isNotValid,
  icon,
  iconRight,
  leftIconStyle,
  rightIconStyle,
  inputRef,
  label,
  error,
  labelStyle,
  prefix,
  style,
  isFocus,
  onFocus,
  onBlur,
  isNotValid,
  isFocusColor = colors.green,
  ...props
}) => (
  <View style={containerStyle}>
    {!!label && <Text style={[s.label, labelStyle]}>{label}</Text>}
    <View
      style={[
        s.root,
        secondContainerStyle,
        isFocus && containerStyleFocus,
        isNotValid && isNotValidStyle,
        error && isNotValidStyle,
      ]}
    >
      {
        !!icon &&
          <MaterialCommunityIcons
            color={isFocus ? isFocusColor : colors.greyDarker}
            style={[s.icon, leftIconStyle]}
            {...icon}
          />
      }
      {!!prefix && <Text style={s.prefix}>{prefix}</Text>}
      <TextInput
        autoCorrect={false}
        placeholderTextColor={placeholderColor || colors.greyDarker}
        underlineColorAndroid={colors.transparent}
        onFocus={onFocus}
        onBlur={onBlur}
        {...props}
        ref={inputRef}
        style={[s.input, style]}
      />
      {
        !!iconRight &&
        <MaterialCommunityIcons
          color={isFocus ? isFocusColor : colors.greyDarker}
          style={[s.icon, rightIconStyle]}
          {...iconRight}
        />
      }
    </View>
    {!!error && <Text style={s.error}>{error}</Text>}
  </View>
);

Input.propTypes = {
  containerStyle: ViewPropTypes.style,
  secondContainerStyle: ViewPropTypes.style,
  containerStyleFocus: ViewPropTypes.style,
  isNotValidStyle: ViewPropTypes.style,
  leftIconStyle: ViewPropTypes.style,
  rightIconStyle: ViewPropTypes.style,
  placeholderColor: T.string,
  isFocusColor: T.string,
  isFocus: T.bool,
  isNotValid: T.bool,
  icon: T.object,
  iconRight: T.object,
  inputRef: T.any,
  label: T.string,
  error: T.string,
  labelStyle: Text.propTypes.style,
  prefix: T.string,
  style: Text.propTypes.style,
  onFocus: T.func,
  onBlur: T.func,
  // value: T.string,
  value: T.oneOfType([T.string, T.number]),
};

export default Input;
","Design a React Native text input component that includes optional features such as an icon, prefix, or error message, and allows for custom styling. Ensure it's accessible and adheres to best practices for user experience."
"import React from 'react';
import styles from './Feedback.less';
import withStyles from '../../decorators/withStyles';

@withStyles(styles)
class Feedback {

  render() {
    return (
      <div className=""Feedback"">
        <div className=""Feedback-container"">
          <a className=""Feedback-link"" href=""https://gitter.im/kriasoft/react-starter-kit"">Ask a question</a>
          <span className=""Feedback-spacer"">|</span>
          <a className=""Feedback-link"" href=""https://github.com/kriasoft/react-starter-kit/issues/new"">Report an issue</a>
        </div>
      </div>
    );
  }

}

export default Feedback;
",Create a React component that can be used to display links for providing feedback on a project. The component should include links to a chat room and an issue tracker. Style the component using CSS modules.
"import React from 'react'
import { Switch, Route, routerRedux } from 'dva/router'
import PropTypes from 'prop-types'
import dynamic from 'dva/dynamic'

import App from './routes/app'
import AuthorizedRoute from './components/authorizedRoute'
import ManinLayout from './components/layout'

const { ConnectedRouter } = routerRedux

const registerModel = (app, model) => {
  if (!(app._models.filter(m => m.namespace === model.namespace).length === 1)) {
    app.model(model)
  }
}

function RouterConfig({ history, app }) {
  registerModel(app, require('./models/auth'))

  const error = dynamic({
    app,
    component: () => import('./routes/error'),
  })

  const Login = dynamic({
    app,
    component: () => import('./routes/login'),
  })

  const routes = [
    {
      path: '/app/index',
      models: () => [
        import('./models/home'),
      ],
      component: () => import('./routes/home'),
    }, {
      path: '/app/user',
      models: () => [
        import('./models/user'),
      ],
      component: () => import('./routes/user'),
    }, {
      path: '/app/user/:username',
      models: () => [
        import('./models/user'),
      ],
      component: () => import('./routes/user'),
    },
  ]

  const MainComponent = () => (
    <ManinLayout>
      {
        routes.map(({ path, ...dynamics }, key) => (
          <Route
            key={key}
            exact
            path={path}
            component={dynamic({
              app,
              ...dynamics, // (models and) component
            })}
          />
        ))
      }
    </ManinLayout>
  )

  return (
    <ConnectedRouter history={history}>
      <App>
        <Switch>
          <Route exact path=""/"" component={Login} />
          <AuthorizedRoute path=""/app"" component={MainComponent} />
          <Route component={error} />
        </Switch>
      </App>
    </ConnectedRouter>
  )
}
RouterConfig.propTypes = {
  history: PropTypes.object,
  app: PropTypes.object,
}
export default RouterConfig
","Create a React router configuration that includes:

* An app component
* An error component for 404 pages
* A login component
* A main layout component
* A list of routes for the app, each with its own models and components
* An authorized route that is only accessible to authorized users"
"import React, { Component } from 'react';
import SearchBar from '../containers/search_bar';
import WeatherList from '../containers/weather_list';

export default class App extends Component {
  render() {
    return (
      <div>
        <SearchBar />
        <WeatherList />
      </div>
    );
  }
}
",Create a React application with two components: a search bar to input a city name and a weather list to display weather information for the inputted city.
"import React from 'react';
import { Link } from 'react-router';
import AnnouncementsRoute from '../routes/Announcements';
import AssignmentsRoute from '../routes/Assignments';
import GradesRoute from '../routes/Grades';

const styles = {};

styles.nav = {
  borderBottom: '1px solid #aaa'
};

styles.link = {
  display: 'inline-block',
  padding: 10,
  textDecoration: 'none',
};

styles.activeLink = Object.assign({}, styles.link, {
  //color: 'red'
});

class Nav extends React.Component {

  render () {
    var { course } = this.props;
    var pages = [
      ['announcements', 'Announcements'],
      ['assignments', 'Assignments'],
      ['grades', 'Grades'],
    ];
    return (
      <nav style={styles.nav}>
        {pages.map((page, index) => (
          <Link
            key={page[0]}
            activeStyle={index === 0 ?
              Object.assign({}, styles.activeLink, { paddingLeft: 0 }) :
              styles.activeLink}
            style={index === 0 ?
              Object.assign({}, styles.link, { paddingLeft: 0 }) :
              styles.link }
            to={`/course/${course.id}/${page[0]}`}
          >{page[1]}</Link>
        ))}
      </nav>
    );
  }

}

export default Nav;

","Design a React component called 'Nav' that displays a horizontal navigation bar with three links for a React-based course management system application. The links should be labeled 'Announcements,' 'Assignments,' and 'Grades.' When a link is clicked, the user should be taken to the corresponding page for that course."
"import React from 'react';
import {any, bool, oneOf} from 'prop-types';
import classNames from 'classnames';
import styles from './ButtonLayout.scss';

const ButtonLayout = props => {
  const {theme, hover, active, disabled, height, children} = props;

  const className = classNames({
    [styles.button]: true,
    [styles[theme]]: true,
    [styles.hover]: hover,
    [styles.active]: active,
    [styles.disabled]: disabled,
    [styles[`height${height}`]]: height !== 'medium'
  }, children.props.className);

  const _style = Object.assign({},
    children.props.style,
    {
      height,
      display: 'inline-block'
    }
  );

  if (React.Children.count(children) === 1) {
    return React.cloneElement(
      children,
      {className, style: _style},
      <div className={styles.inner}>
        {children.props.children}
      </div>
    );
  }
};

ButtonLayout.defaultProps = {
  height: 'medium',
  theme: 'fullblue'
};

ButtonLayout.propTypes = {
  active: bool,
  children: any,
  disabled: bool,
  height: oneOf(['small', 'medium', 'large']),
  hover: bool,
  theme: oneOf([
    'transparent',
    'fullred',
    'fullgreen',
    'fullpurple',
    'emptyred',
    'emptygreen',
    'emptybluesecondary',
    'emptyblue',
    'emptypurple',
    'fullblue',
    'login',
    'emptylogin',
    'transparentblue',
    'whiteblue',
    'whiteblueprimary',
    'whitebluesecondary',
    'close-standard',
    'close-dark',
    'close-transparent',
    'icon-greybackground',
    'icon-standard',
    'icon-standardsecondary',
    'icon-white',
    'icon-whitesecondary'
  ])
};

ButtonLayout.displayName = 'ButtonLayout';

export default ButtonLayout;
","Generate a React component called ButtonLayout that wraps a child component and applies a set of styles to it based on the passed props. The component should include the following features:

* A className prop to apply custom styling to the child component.
* A style prop to apply custom inline styles to the child component.
* Conditional styles based on the following props:
    * theme: One of several predefined themes that determine the button's color and border style.
    * hover: When true, applies hover styles to the button.
    * active: When true, applies active styles to the button.
    * disabled: When true, applies disabled styles to the button.
    * height: One of three predefined heights (""small"", ""medium"", ""large"") that determine the button's height."
"import React, { Component } from 'react';
import { Jumbotron, Button } from 'react-bootstrap';
import home from './Home.module.css'

class Home extends Component {
    render() {
        return(
            <div className={home.Home}>
                <Jumbotron>
                    <h1>Hello everyone!</h1>
                    <Button bsStyle=""primary"">Click me!</Button>
                </Jumbotron>
            </div>
        )
    }
}

export default Home;
","Compose a code snippet in React.js for a basic homepage that displays a jumbotron with a header and a primary button labeled ""Click me!""."
"/*
 * Copyright 2017-2018 Azad Bolour
 * Licensed under GNU Affero General Public License v3.0 -
 *   https://github.com/azadbolour/boardgame/blob/master/LICENSE.md
 */

/** @module Board */
import React from 'react';
import PropTypes from 'prop-types';
import BoardSquareComponent from './BoardSquareComponent';
import PieceComponent from './PieceComponent';
import * as Piece from '../domain/Piece';
import {mkPoint} from '../domain/Point';
import * as Point from '../domain/Point';
import logger from ""../util/Logger"";
import {stringify} from ""../util/Logger"";

/**
 * A style that includes the board's overall
 * dimensions in pixels, and the layout of its
 * children (the board's squares).
 */
function boardStyle(dimension, squarePixels) {
  let pixels = dimension * squarePixels;
  return {
    width: pixels + 'px',
    height: pixels + 'px',
    display: 'flex',
    flexWrap: 'wrap'
  };
}

/**
 * A style that includes the dimensions of a board square
 * in pixels.
 */
function squareStyle(squarePixels) {
  let pix = squarePixels + 'px';
  return { width: pix, height: pix }
}

/**
 * User interface component representing a board.
 */
class BoardComponent extends React.Component {
  static propTypes = {
    /**
     * The board data.
     */
    board: PropTypes.object.isRequired,

    /**
     * Positions that are currently in play by the user - i.e. occupied by pieces.
     */
    pointsInUserPlay: PropTypes.array.isRequired,

    /**
     * Points that were just filled by the machine.
     */
    pointsMovedInMachinePlay: PropTypes.array.isRequired,

    /**
     * Function of position that determines whether the position
     * is a legal destination of a move - whether a piece is allowed
     * to be moved to that position given the current state of the game.
     */
    isLegalMove: PropTypes.func.isRequired,

    canMovePiece: PropTypes.func.isRequired,

    /**
     * The number of pixels used to represent the side of each
     * board square.
     */
    squarePixels: PropTypes.number.isRequired,

    pointValues: PropTypes.object.isRequired,

    /**
     * The board responds to interactions.
     */
    enabled: PropTypes.bool.isRequired
  };

  /**
   * Is an row, col position currently occupied?
   */
  positionInPlay(point) {
    return this.props.pointsInUserPlay.some(p => Point.eq(p, point));
  }

  /**
   * Return the UI specification of the piece that goes into
   * a specific board square - given the square's position.
   */
  renderPiece(point) {
    let piece = this.props.board.rows()[point.row][point.col].piece;
    let canMovePiece = this.props.canMovePiece;
    let enabled = this.props.enabled;
    // piece = (piece) ? piece : Piece.NO_PIECE;
    return <PieceComponent
      piece={piece}
      canMovePiece={canMovePiece}
      enabled={enabled}
    />;
  }

  /**
   * Return the UI specification of a single square based
   * on it row, col coordinates.
   *
   * A function may return the react specification of a
   * UI component, and these specifications may be composed.
   */
  renderSquare(row, col) {
    let dimension = this.props.board.dimension;
    let squareKey = dimension * row + col;
    let isLegalMove = this.props.isLegalMove;
    let squarePixels = this.props.squarePixels;
    let point = mkPoint(row, col);
    let inPlay = this.props.pointsInUserPlay.some(p => Point.eq(p, point));
    let justFilledByMachine = this.props.pointsMovedInMachinePlay.some(p => Point.eq(p, point));
    let enabled = this.props.enabled;
    let pointValue = this.props.pointValues.getElement(point);
    let center = Math.floor(dimension/20);
    // let isCenterPoint = row === center && col === center;
    let squarePiece = this.props.board.rows()[row][col].piece;

    return (
      <div key={squareKey} style={squareStyle({squarePixels})}>
        <BoardSquareComponent
          inPlay={inPlay}
          justFilledByMachine={justFilledByMachine}
          point={point}
          piece={squarePiece}
          isLegalMove={isLegalMove}
          squarePixels={squarePixels}
          pointValue={pointValue}
          enabled={enabled}>
            {this.renderPiece(point)}
        </BoardSquareComponent>
      </div>
    );
  }

  /**
   * Render all the squares on the board by accumulating their
   * component objects in an array and interpolating the array as
   * the child of a div component. The div component has a style
   * with the correct overall size of the board.
   */
  render() {
    let dimension = this.props.board.dimension;
    let squarePixels = this.props.squarePixels;
    let squares = [];
    for (let row = 0; row < dimension; row++)
      for (let col = 0; col < dimension; col++)
        squares.push(this.renderSquare(row, col));

    return (
      <div style={boardStyle(dimension, squarePixels)}>
        {squares}
      </div>
    );
  }
}

export default BoardComponent;
","Generate the React UI component for representing a board game board, showing the squares and the pieces placed upon them."
"/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React from 'react';

export default () => (
  <span>
    <span id=""feature-expand-env-1"">{process.env.REACT_APP_BASIC}</span>
    <span id=""feature-expand-env-2"">{process.env.REACT_APP_BASIC_EXPAND}</span>
    <span id=""feature-expand-env-3"">
      {process.env.REACT_APP_BASIC_EXPAND_SIMPLE}
    </span>
    <span id=""feature-expand-env-existing"">
      {process.env.REACT_APP_EXPAND_EXISTING}
    </span>
  </span>
);
",Generate React code that dynamically renders environment variables with and without expansion.
"import React from 'react';
import { render } from 'react-dom';
import { Router, Route, IndexRedirect, hashHistory } from 'react-router';

import NotebookPreview from 'notebook-preview';

import { fetchFromGist } from './fetchers';

const gistIDs = [
  '53f2d7bbc69936bd7a4131c0890fc61d',
  'ee778e32b8e62cf634929abe229a8555',
  '7eadc20426451a0604e26e6f084cac02',
  '0a9389389ec5ff303c5d5fbfa6bea021',
  'b71d96c48326a0e05904a5ad4a96d2b5',
  '93239f6b97237abf117a348a56afc9e2',
];

const gistID = gistIDs[Math.floor(Math.random() * gistIDs.length)];

class Notebook extends React.Component {
  constructor() {
    super();
    this.state = {
      nbJSON: null,
    }
  }

  componentDidMount() {
    fetchFromGist(this.props.params.gistId).then((nbJSON) => {
      console.log(nbJSON);
      this.setState({
        nbJSON
      });
    });
  }

  render() {
    if (this.state.nbJSON) {
      return <NotebookPreview notebook={this.state.nbJSON}/>;
    } else {
      return <h1>Loading Notebook...</h1>;
    }
  }
}

render((
  <Router history={hashHistory}>
    <Route path=""/"">
      <IndexRedirect to={`gist/${gistID}`} />
      <Route path=""gist/:gistId"" component={Notebook}/>
    </Route>
  </Router>
), document.getElementById('root'));
","Generate a React component to preview a random notebook from a list of Gist IDs using the `react-router` and `notebook-preview` libraries. Each time the component mounts, it should randomly select a Gist ID and fetch the notebook JSON using a provided `fetchFromGist` function. The component should display a loading message until the notebook JSON is fetched, and then render the `NotebookPreview` component with the notebook JSON as a prop."
"import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import { Router, browserHistory } from 'react-router';
import promise from 'redux-promise'

import reducers from './reducers';
import routes from './routes';

const createStoreWithMiddleware = applyMiddleware(
  promise
)(createStore);

ReactDOM.render(
  <Provider store={createStoreWithMiddleware(reducers)}>
    <Router history={browserHistory} routes={routes} />
  </Provider>
  , document.querySelector('.container'));
",Create a React application that uses Redux for state management. The application should have a single route that renders a list of items. The items should be stored in the Redux store and the list should be generated dynamically based on the items in the store.
"import React from 'react'
import App from './components/App'

const root = document.getElementById('root')
React.render(<App />, root)
","**Description**: Write the code to render the React component App, imported from ./components/App into the root element of the HTML document."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from 'material-ui/SvgIcon';

let ViewArray = props =>
  <SvgIcon {...props}>
    <path d=""M4 18h3V5H4v13zM18 5v13h3V5h-3zM8 18h9V5H8v13z"" />
  </SvgIcon>;

ViewArray = pure(ViewArray);
ViewArray.muiName = 'SvgIcon';

export default ViewArray;
","Generate React component code for a Material UI SVG icon named 'ViewArray'. The icon should have three vertical rectangles of equal width and height arranged horizontally. The rectangles should be placed at the left, center, and right of the icon. The left and right rectangles should be positioned close to the edges of the icon, while the center rectangle should have some space on both sides."
"import React from 'react';

import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';

import TitleActions from '../state/title';

import css from './Input.less';

/**
 * Input field
 *
 * @class Input
 * @
 */
const Input = ({
  /**
   * Title
   * @public
   * @property title
   * @type {string}
   */
  title,
  /**
   * Actions object
   * @private
   * @property actions
   */
  actions
}) => {
  return (
    <div class={css.component}>
      <label class={css({ label: true, green: true })}>Enter title</label>
      <input class={css.textbox} value={title} onChange={e => actions.changeTitle(e.target.value)} autoFocus />
    </div>
  )
}

export default connect(
  // map state to props
  state => ({ title: state.title }),
  // map dispatch to props
  dispatch => ({ actions: bindActionCreators(TitleActions, dispatch) })
)(Input);
","Create the React.js component called ""Input"". This component will have a text input field that allows the user to enter a title, and a label that says ""Enter title"". When the user types in the input field, the title state in the Redux store should be updated with the new value. The component should also be styled using CSS modules."
"import React from 'react';

export default React.createClass({
    getInitialState() {
        return {enabled: this.props.invocation.state.decorate};
    },
    handleClick(event) {
        stopBubblingUp(event);

        var newState = !this.state.enabled;
        this.setState({enabled: newState});
        this.props.invocation.setState({decorate: newState});
    },
    render() {
        var classes = ['decoration-toggle'];

        if (!this.state.enabled) {
            classes.push('disabled');
        }

        return (
            <a href=""#"" className={classes.join(' ')} onClick={this.handleClick}>
                <i className=""fa fa-magic""></i>
            </a>
        );
    }
});
",Provide a React code snippet that creates a toggle button that controls a state variable in another component. The button should be disabled when the state variable is not set to a specific value. The code should use the state decorators and include class names for styling.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionOpenInBrowser = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6l-4 4h3v6h2v-6h3l-4-4z""/>
  </SvgIcon>
);
ActionOpenInBrowser = pure(ActionOpenInBrowser);
ActionOpenInBrowser.displayName = 'ActionOpenInBrowser';
ActionOpenInBrowser.muiName = 'SvgIcon';

export default ActionOpenInBrowser;
","Generate a React component representing the ""Action Open In Browser"" icon from Material UI's library."
"import React from 'react';


class PactHomeApp extends React.Component {
    render() {
        return (
            <div>
                <h1>
                    Welcome to CrowdPact {this.props.pageData.get('user').get('username')}!
                </h1>
                <a href={this.props.pageData.get('logout_url')}>Logout</a>
            </div>
        );
    }
}

export default PactHomeApp;
",Display a welcome message to the user along with a logout button on the home page of a React application.
"import React from 'react';

var Content = React.createClass({
  render: function() {
    return (
      <div>App Content
        <div className=""container""></div>
      </div>
    );
  }
})

export default Content;
","Create a React component named Content that renders the text ""App Content"" and includes a div with the class name ""container""."
"import React from 'react';
import Title from 'react-title-component';

import CodeExample from '../../../CodeExample';
import PropTypeDescription from '../../../PropTypeDescription';
import MarkdownElement from '../../../MarkdownElement';

import dropDownMenuReadmeText from './README';
import DropDownMenuSimpleExample from './ExampleSimple';
import dropDownMenuSimpleExampleCode from '!raw!./ExampleSimple';
import DropDownMenuOpenImmediateExample from './ExampleOpenImmediate';
import dropDownMenuOpenImmediateExampleCode from '!raw!./ExampleOpenImmediate';
import DropDownMenuLongMenuExample from './ExampleLongMenu';
import dropDownMenuLongMenuExampleCode from '!raw!./ExampleLongMenu';
import DropDownMenuLabeledExample from './ExampleLabeled';
import dropDownMenuLabeledExampleCode from '!raw!./ExampleLabeled';
import dropDownMenuCode from '!raw!material-ui/DropDownMenu/DropDownMenu';

const descriptions = {
  simple: '`DropDownMenu` is implemented as a controlled component, with the current selection set through the ' +
  '`value` property.',
  openImmediate: 'With `openImmediately` property set, the menu will open on mount.',
  long: 'With the `maxHeight` property set, the menu will be scrollable if the number of items causes the height ' +
  'to exceed this limit.',
  label: 'With a `label` applied to each `MenuItem`, `DropDownMenu` displays a complementary description ' +
  'of the selected item.',
};

const DropDownMenuPage = () => (
  <div>
    <Title render={(previousTitle) => `Drop Down Menu - ${previousTitle}`} />
    <MarkdownElement text={dropDownMenuReadmeText} />
    <CodeExample
      title=""Simple example""
      description={descriptions.simple}
      code={dropDownMenuSimpleExampleCode}
    >
      <DropDownMenuSimpleExample />
    </CodeExample>
    <CodeExample
      title=""Open Immediate example""
      description={descriptions.openImmediate}
      code={dropDownMenuOpenImmediateExampleCode}
    >
      <DropDownMenuOpenImmediateExample />
    </CodeExample>
    <CodeExample
      title=""Long example""
      description={descriptions.long}
      code={dropDownMenuLongMenuExampleCode}
    >
      <DropDownMenuLongMenuExample />
    </CodeExample>
    <CodeExample
      title=""Label example""
      description={descriptions.label}
      code={dropDownMenuLabeledExampleCode}
    >
      <DropDownMenuLabeledExample />
    </CodeExample>
    <PropTypeDescription code={dropDownMenuCode} />
  </div>
);

export default DropDownMenuPage;
",Generate the React code for a page that showcases the DropDownMenu component with various usage examples and detailed descriptions for each example. The descriptions should explain the purpose and functionality of each example.
"import React from 'react';
import ReactSwipeableViews from 'react-swipeable-views';
import ImmutablePropTypes from 'react-immutable-proptypes';
import PropTypes from 'prop-types';
import ExtendedVideoPlayer from '../../../components/extended_video_player';
import { defineMessages, injectIntl } from 'react-intl';
import IconButton from '../../../components/icon_button';
import ImmutablePureComponent from 'react-immutable-pure-component';
import ImageLoader from './image_loader';

const messages = defineMessages({
  close: { id: 'lightbox.close', defaultMessage: 'Close' },
  previous: { id: 'lightbox.previous', defaultMessage: 'Previous' },
  next: { id: 'lightbox.next', defaultMessage: 'Next' },
});

@injectIntl
export default class MediaModal extends ImmutablePureComponent {

  static propTypes = {
    media: ImmutablePropTypes.list.isRequired,
    index: PropTypes.number.isRequired,
    onClose: PropTypes.func.isRequired,
    intl: PropTypes.object.isRequired,
  };

  state = {
    index: null,
  };

  handleSwipe = (index) => {
    this.setState({ index: (index) % this.props.media.size });
  }

  handleNextClick = () => {
    this.setState({ index: (this.getIndex() + 1) % this.props.media.size });
  }

  handlePrevClick = () => {
    this.setState({ index: (this.props.media.size + this.getIndex() - 1) % this.props.media.size });
  }

  handleKeyUp = (e) => {
    switch(e.key) {
    case 'ArrowLeft':
      this.handlePrevClick();
      break;
    case 'ArrowRight':
      this.handleNextClick();
      break;
    }
  }

  componentDidMount () {
    window.addEventListener('keyup', this.handleKeyUp, false);
  }

  componentWillUnmount () {
    window.removeEventListener('keyup', this.handleKeyUp);
  }

  getIndex () {
    return this.state.index !== null ? this.state.index : this.props.index;
  }

  render () {
    const { media, intl, onClose } = this.props;

    const index = this.getIndex();

    const leftNav  = media.size > 1 && <button tabIndex='0' className='modal-container__nav modal-container__nav--left' onClick={this.handlePrevClick} aria-label={intl.formatMessage(messages.previous)}><i className='fa fa-fw fa-chevron-left' /></button>;
    const rightNav = media.size > 1 && <button tabIndex='0' className='modal-container__nav  modal-container__nav--right' onClick={this.handleNextClick} aria-label={intl.formatMessage(messages.next)}><i className='fa fa-fw fa-chevron-right' /></button>;

    const content = media.map((image) => {
      const width  = image.getIn(['meta', 'original', 'width']) || null;
      const height = image.getIn(['meta', 'original', 'height']) || null;

      if (image.get('type') === 'image') {
        return <ImageLoader previewSrc={image.get('preview_url')} src={image.get('url')} width={width} height={height} key={image.get('preview_url')} />;
      } else if (image.get('type') === 'gifv') {
        return <ExtendedVideoPlayer src={image.get('url')} muted controls={false} width={width} height={height} key={image.get('preview_url')} />;
      }

      return null;
    }).toArray();

    return (
      <div className='modal-root__modal media-modal'>
        {leftNav}

        <div className='media-modal__content'>
          <IconButton className='media-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={16} />
          <ReactSwipeableViews onChangeIndex={this.handleSwipe} index={index} animateHeight>
            {content}
          </ReactSwipeableViews>
        </div>

        {rightNav}
      </div>
    );
  }

}
","Generate the React code for displaying media, including images and GIFs, within a modal. The modal should allow users to navigate between media items using arrow keys or buttons and include close, previous, and next buttons. When a GIF is displayed, it should include muted audio controls."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import './RadioButtonList.css';

export class RadioButtonList extends Component {
  static className = 'RadioButtonList';

  //TODO: Add fields to propTypes.description?
  //These would be label (required), id (required), and checked (optional).
  static propTypes = {
    description: PropTypes.arrayOf(
      PropTypes.shape({
        label: PropTypes.string.isRequired,
        id: PropTypes.string.isRequired,
        checked: PropTypes.bool,
      })
    ),
  };

  constructor(props) {
    super(props);
    this.state = {};

    for (let button of props.description) {
      if (button.checked) {
        this.state.checked = button.id;
      }
    }
  }

  handleChange(e) {
    this.setState({ checked: e.target.value });
  }

  render() {
    let buttons = this.props.description.map(button => {
      let input = (
        <input
          type=""radio""
          checked={this.state.checked === button.id}
          onChange={e => {
            this.handleChange(e);
          }}
          value={button.id}
        />
      );

      //needed to style the custom radio check
      let inputSpan;
      if (this.state.checked === button.id) {
        inputSpan = (
          <span className=""ohif-radio-button ohif-selected"">{input}</span>
        );
      } else {
        inputSpan = <span className=""ohif-radio-button"">{input}</span>;
      }

      return (
        <span className=""ohif-radio-button-container"" key={button.id}>
          <label className=""ohif-radio-button-label"">
            {inputSpan}
            {button.label}
          </label>
        </span>
      );
    });

    return (
      <div className=""ohif-radio-button-group"">
        <form>{buttons}</form>
      </div>
    );
  }
}
","Generate a reusable React component called RadioButtonList that displays a list of radio buttons. The component should be customizable through a prop called description, which is an array of objects. Each object in the description array should have the following properties: label (the text displayed next to the radio button), id (the unique identifier for the radio button), and checked (an optional boolean indicating whether the radio button is initially selected)."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageMovieFilter = (props) => (
  <SvgIcon {...props}>
    <path d=""M18 4l2 3h-3l-2-3h-2l2 3h-3l-2-3H8l2 3H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4zm-6.75 11.25L10 18l-1.25-2.75L6 14l2.75-1.25L10 10l1.25 2.75L14 14l-2.75 1.25zm5.69-3.31L16 14l-.94-2.06L13 11l2.06-.94L16 8l.94 2.06L19 11l-2.06.94z""/>
  </SvgIcon>
);
ImageMovieFilter = pure(ImageMovieFilter);
ImageMovieFilter.displayName = 'ImageMovieFilter';
ImageMovieFilter.muiName = 'SvgIcon';

export default ImageMovieFilter;
","Design an SVG icon component for a movie filter. The icon should be responsive and accessible, and it should follow the Material Design guidelines."
"import React from 'react'
import { render } from 'react-dom'
import App from './components/App'
// import App from './meta/App'


// Try fs in electron
// import fs from 'fs'
// import path from 'path'
// var filePath = path.resolve(__dirname, '..', 'README.md');
// fs.readFile(filePath, 'utf8', (err, data) => {
//   if (err) throw err;
//   console.log(data);
// });

var element = document.createElement('div');
document.body.appendChild(element);

render(<App />, element)
",Create a React application and render the App component within a div element appended to the body of the HTML document. Use the console to log the contents of a local file (README.md).
"import React from 'react';
import { Link } from 'react-router';
import axios from 'axios';
import _ from 'lodash';

import AttackListDetails from '../containers/AttackListDetails';
import NotStartedVictims from '../containers/NotStartedVictims';
import WifiScan from '../containers/Wifiscan';

import GhostPc from '../img/ghost_pc.png';

export default class NetworkOverview extends React.Component {

    constructor() {
        super();
        this.state = { attacks: [], victims: [] };
    }

    onScan = (victims) => {
        this.setState({ victims: victims });
    }

    scanForVictims = () => {
        return(
            <div className='welcomemessage' > 
                <a href onClick={ this.handleClick }>
                    Scan for new victims
                </a> or
                <Link to='attackconfig'> add a custom one</Link>
            </div>
        );
    }

    handleClick = () => {
        axios.get('/breach/victim/notstarted')
        .then(res => {
            let victims = res.data['new_victims'];
            this.onScan(victims);
        })
        .catch(error => {
            console.log(error);
        });
    }

    getVictims = () => {
        axios.get('/breach/victim')
        .then(res => {
            let results = _.partition(res.data['victims'], { state: 'discovered' });
            this.setState({ victims: results[0], attacks: results[1] })
        })
        .catch(error => {
            console.log(error);
        });
    }

    componentDidMount() {
        this.getVictims();
    }

    render() {
        return(
            <div>
                <div className='container-fluid'>
                    <h1> Network Overview </h1>
                    <div className='row'>
                        <div id='mainpage' className='col-md-8 col-xs-12 col-sm-6 col-lg-8'>
                            { this.state.attacks.length > 0 ? <AttackListDetails attacks={ this.state.attacks } onReload={ this.getVictims }/> : null}
                            { this.state.victims.length > 0 ? <NotStartedVictims victims={ this.state.victims }/> : null}
                            { this.state.victims.length === 0 && this.state.attacks.length === 0 ? this.scanForVictims() : null}
                        </div>
                        <div className='button col-md-4 col-xs-6 col-lg-4'>
                            <WifiScan onUpdate={ this.onScan }/>
                            <div className='ghost'>
                                <Link to='attackconfig'>
                                    <img src={GhostPc} alt='A Ghost PC' title='Add a custom victim' className='nooutline'/>
                                    <span className='line leftpadding'>Add custom victim</span>
                                </Link>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}
","Design a web page with the following features:

- A page header with the text ""Network Overview"".

- A main section with two columns:
  - The left column should display a table of attacks and victims. If there are no attacks or victims, the column should display a welcome message with a button to scan for new victims and a link to add a custom victim.
  - The right column should display a button to start a Wi-Fi scan and a ghost PC image with a link to add a custom victim.

- Use React and style the page with CSS."
"/**
 * UCSC Xena Client
 * http://xena.ucsc.edu
 *
 * Standard Xena autosuggest, with UI/UX based on Material Design's full-width inputs. Light wrapper around
 * react-autosuggest package.
 *
 * All props with the exception of the state and actions specified below, are passed directly to Autosuggest.
 *
 * State
 * -----
 * value - Current selected value.
 *
 * Actions
 * -------
 * onClear - Called on click of clear (X) button.
 */

/*
 * Unfortunate behaviors of react-autosuggest
 * ghost suggestions
 *   https://github.com/moroshko/react-autosuggest/issues/596
 * escape clears input
 *   This is part of ARIA specification, but react-autosuggest implements it
 *   at variance with the spec (an editable autosuggest should clear the
 *   suggested text, not all text), and in practice the prescribed AIRA
 *   behavior is not usable, because escape also closes suggestions, making
 *   it very common to lose input accidentally.
 *
 */



// Core dependencies, components
import React from 'react';
import Autosuggest from 'react-autosuggest';

// Styles
import autosuggestTheme from './AutosuggestTheme.module.css';
import compStyles from './XAutosuggest.module.css';

class XAutosuggest extends React.Component {
	callInputRef = autosuggest => {
		var {inputRef, autosuggestRef} = this.props;
		if (inputRef) {
			inputRef(autosuggest && autosuggest.input);
		}
		if (autosuggestRef) {
			autosuggestRef(autosuggest);
		}
	}

	render() {
		var {value, onClear, ...autoProps} = this.props;
		return (
			<div className={compStyles.XAutosuggest}>
				<Autosuggest {...autoProps} ref={this.callInputRef} theme={autosuggestTheme}/>
				{value ? <i className='material-icons' onClick={onClear}>close</i> : null}
			</div>
		);
	}
}

export default XAutosuggest;
","Generate a React component wrapper for the react-autosuggest library with a clear button and custom styles. The component should support all props from react-autosuggest, except for state and actions. The component should also support an inputRef and autosuggestRef prop."
"import React from 'react';

export default class Introduction extends React.Component {

    constructor(props) {
        super(props);
    }

    componentWillMount() {
    }

    render() {
    }

    componentDidMount() {
    }

}","Create the React component class code for a React application with the component name Introduction. The class should have the following lifecycle methods: constructor, componentWillMount, render, and componentDidMount."
"'use strict';

import React, { Component } from 'react';
import classNames from 'classnames';

import AppName from './AppName';
import MainMenu from './MainMenu';
import GitModal from './git_modal';

const maybeCallMethod = (obj, method, ...args) => {
  obj[method] && obj[method](...args);
};

export default class EditorHeader extends Component {

  constructor(props) {
    super(props);
    this.state = {
      gitModalIsVisible: null,
      isMenuOpen: false
    };
  }

  onMenuToggle() {
    this.setState({ isMenuOpen: !this.state.isMenuOpen });
  }

  onUpdateName = (e) => {
    e.preventDefault();
    maybeCallMethod(this.props, 'onUpdateName', e.target.value);
  }

  handleOnSubmit = (e)  => {
    e.preventDefault();
    e.preventPropagation();
  }

  onSave = (e) => {
    e.preventDefault();
    maybeCallMethod(this.props, 'onSave');
  }

  onFork = (e) => {
    e.preventDefault();
    maybeCallMethod(this.props, 'onFork');
  }

  onPick = (e) => {
    e.preventDefault();
    maybeCallMethod(this.props, 'onPick');
  }

  onUpdateBuild = (value) => {
    maybeCallMethod(this.props, 'onUpdateBuild', value);
  }

  currentUserIsAdmin() {
    const { currentUser } = this.props;
    return currentUser && currentUser.admin;
  }

  isUserLoggedIn() {
    const { currentUser } = this.props;
    return !!currentUser;
  }

  showGitModal = (e) => {
    e.preventDefault();
    this.setState({gitModalIsVisible: true});
  }

  hideGitModal = (e) => {
    e.preventDefault();
    this.setState({gitModalIsVisible: false});
  }

  renderGitModal = () => {
    if (this.props.belongsToCurrentUser()) {
      return (
        <GitModal app={this.props.app}
                  token={this.props.currentUser.authentication_token}
                  onClickBackdrop={this.hideGitModal}
                  isOpen={this.state.gitModalIsVisible} />
      )
    }
  }

  renderGitButton() {
    if ( ! this.props.belongsToCurrentUser()) {
      return (
        <button
          onClick={this.showGitModal}
          className=""editor-header__button"">
          Clone
        </button>
      );
    }
  }

  renderForkButton() {
    return (
      <button
        onClick={this.onFork}
        type=""button""
        className=""editor-header__button"">
        <i className=""fa fa-code-fork""></i> Fork
      </button>
    );
  }

  renderPickButton() {
    if (this.currentUserIsAdmin()) {

      const icon = this.props.appIsPicked ? 'fa-star' : 'fa-star-o';
      const iconClasses = `fa ${icon}`;

      return (
        <button
          onClick={this.onPick}
          className=""editor-header__button"">
          <i className={iconClasses}></i> {this.props.appIsPicked ? 'Unpick' : 'Pick'}
        </button>
      );
    }
  }

  getAppName() {
    const { name } = this.props;
    return name && name.length > 0 ? name : 'Unnamed App';
  }

  render() {
    const disabled = ! this.props.belongsToCurrentUser();
    const { creator } = this.props;

    const classes = classNames({
      'editor-header__bar': true,
      'editor-header': true,
    });

    return (
      <div className={classes}>

        <MainMenu
          isOpen={this.state.isMenuOpen}
          isUserLoggedIn={this.isUserLoggedIn()}
          onMenuToggle={this.onMenuToggle.bind(this)} />

        <button
          className=""editor-header__button editor-header__menu-toggle""
          onClick={this.onMenuToggle.bind(this)}
          title=""Open Menu"">
          <i className=""fa fa-bars""></i>
        </button>

        <AppName
          isDisabled={disabled}
          appName={this.getAppName()}
          onUpdateName={this.onUpdateName.bind(this)}
          creator={creator} />

        <div className=""editor-header__actions"">
          {this.renderForkButton()}
          {this.renderPickButton()}
        </div>

        {this.renderGitModal()}
      </div>
    );
  }
}
","Design the header component for an online editor. It should include an app name, a menu button, and buttons for saving, forking, and picking the app. It should also include a button to show a git modal if the user is the owner of the app. The header should be responsive and adapt to different screen sizes."
"/* eslint-disable no-unused-vars */
import React, { Component } from 'react';
import styled from 'styled-components';
/* eslint-enable no-unused-vars */

const Panel = styled.div`
    width: 300px;
    height: 100%;
    position: fixed;
    top: 0;
    right: ${props => props.direction === 'right' ? 0 : 'auto' };
    left: ${props => props.direction === 'left' ? 0 : 'auto' };
    background-color: #3498db;
    color: #fff;
    text-align: center;
    padding: 30px;
    will-change: transform;
`;

export default class extends Component {
    getDom() {
        return this.el;
    }

    render() {
        return (
            <Panel innerRef={c => this.el = c} direction={this.props.direction}>Text</Panel>
        );
    }
}","Create a React component for a sliding panel that can be positioned on either the left or right side of the screen. The component should have the following properties:
* `direction`: Specifies whether the panel should be positioned on the left or right side of the screen.
* `width`: Specifies the width of the panel.
* `height`: Specifies the height of the panel.
* `padding`: Specifies the amount of padding around the content of the panel.
* `backgroundColor`: Specifies the background color of the panel.
* `color`: Specifies the color of the text in the panel.
The component should contain a method called `getDom`, which returns a reference to the DOM element representing the panel."
"import React from 'react';
import PropTypes from 'prop-types';
import { connect } from '../utils/griddleConnect';
import compose from 'recompose/compose';
import mapProps from 'recompose/mapProps';
import getContext from 'recompose/getContext';
import { currentPageSelector, maxPageSelector, classNamesForComponentSelector, stylesForComponentSelector } from '../selectors/dataSelectors';

const enhance = (
  connect((state, props) => ({
    maxPages: maxPageSelector(state, props),
    currentPage: currentPageSelector(state, props),
    className: classNamesForComponentSelector(state, 'PageDropdown'),
    style: stylesForComponentSelector(state, 'PageDropdown'),
  }))
);

export default enhance;
","Create a React component that uses the Griddle React library. The component should map Redux state to props, including the current page, maximum number of pages, and class names and styles for the component."
"import React from 'react';
import createSvgIcon from './utils/createSvgIcon';

export default createSvgIcon(
  <React.Fragment><path fillOpacity="".3"" d=""M2 22h20V2L2 22z"" /><path d=""M14 10L2 22h12V10z"" /></React.Fragment>
, 'SignalCellular2BarTwoTone');
","Describe a React component that renders an SVG icon of a signal with two bars. The icon should be two-toned, with the outer rectangle filled with a 30% opacity and the inner shape filled with 100% opacity."
"import React from 'react';
import MarkdownDocs from 'docs/src/modules/components/MarkdownDocs';
import { prepareMarkdown } from 'docs/src/modules/utils/parseMarkdown';

const pageFilename = 'getting-started/example-projects';
const requireDemo = require.context(
  'docs/src/pages/getting-started/example-projects',
  false,
  /\.(js|tsx)$/,
);
const requireRaw = require.context(
  '!raw-loader!../../src/pages/getting-started/example-projects',
  false,
  /\.(js|md|tsx)$/,
);

export default function Page({ demos, docs }) {
  return <MarkdownDocs demos={demos} docs={docs} requireDemo={requireDemo} />;
}

Page.getInitialProps = () => {
  const { demos, docs } = prepareMarkdown({ pageFilename, requireRaw });
  return { demos, docs };
};
","Provide a React component called Page that can display documentation and demo codes. The documentation should be in Markdown format, and the demo codes can be in JavaScript or TypeScript. The component should be able to load both the documentation and the demo codes dynamically from a specific folder in the file system. Additionally, the docs should be parsed from Markdown to HTML."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionPolymer = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 4h-4L7.11 16.63 4.5 12 9 4H5L.5 12 5 20h4l7.89-12.63L19.5 12 15 20h4l4.5-8z""/>
  </SvgIcon>
);
ActionPolymer = pure(ActionPolymer);
ActionPolymer.displayName = 'ActionPolymer';

export default ActionPolymer;
",Design an SVG icon component for an action polymer icon.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionNoteAdd = (props) => (
  <SvgIcon {...props}>
    <path d=""M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 14h-3v3h-2v-3H8v-2h3v-3h2v3h3v2zm-3-7V3.5L18.5 9H13z""/>
  </SvgIcon>
);
ActionNoteAdd = pure(ActionNoteAdd);
ActionNoteAdd.displayName = 'ActionNoteAdd';
ActionNoteAdd.muiName = 'SvgIcon';

export default ActionNoteAdd;
","Design an SVG icon component for a note add action, which takes color and size properties, and it should be exported with a default name."
"/** @jsx React.createElement */
import ENV from '../shared/env.js';

import React from 'react';
import ReactDOM from 'react-dom';

export default class DBMon extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            databases: []
        };
    }
    
    loadSamples() {
        this.setState({ databases: ENV.generateData().toArray() });
        Monitoring.renderRate.ping();
        setTimeout(this.loadSamples, ENV.timeout);
    }
    
    componentDidMount() {
        this.loadSamples();
    }
    
    render() {
        return (
            <div>
                <table className=""table table-striped latest-data"">
                    <tbody>
                        {
                            this.state.databases.map(function(database) {
                                return (
                                    <tr key={database.dbname}>
                                        <td className=""dbname"">
                                            {database.dbname}
                                        </td>
                                        <td className=""query-count"">
                                            <span className={database.lastSample.countClassName}>
                                                {database.lastSample.nbQueries}
                                            </span>
                                        </td>
                                            {
                                                database.lastSample.topFiveQueries.map(function(query, index) {
                                                    return (
                                                        <td className={ ""Query "" + query.elapsedClassName}>
                                                            {query.formatElapsed}
                                                            <div className=""popover left"">
                                                                <div className=""popover-content"">{query.query}</div>
                                                                <div className=""arrow""/>
                                                            </div>
                                                        </td>
                                                    );
                                                })
                                            }
                                    </tr>
                                );
                            })
                        }
                    </tbody>
                </table>
            </div>
        );
    }
}
    
ReactDOM.render(<DBMon />, document.getElementById('dbmon'));","Generate a React component that displays a table of data about a sample of databases. The table should have the following columns:
- Database Name
- Query Count
- Query Elapsed Times (5 columns)"
"'use strict'

import test from 'ava'
import React from 'react'
import { shallow, mount } from 'enzyme'
import 'jsdom-global/register'

import AppWrapper from '../app/containers/app'

test('shallow unit component <AppWrapper />', t => {
  let mock = {}
  mock.name = 'moo'

  const wrapper = shallow(<AppWrapper />)
  const wrapperMoo = shallow(<AppWrapper name={mock.name} />)

  t.is(wrapper.contains(<p>Hello <strong>World</strong></p>), true)
  t.is(wrapperMoo.contains(<p>Hello <strong>{mock.name}</strong></p>), true)
})

test('mount <AppWrapper />', t => {
  const wrapper = mount(<AppWrapper />)
  const fooInner = wrapper.find('p')
  t.is(fooInner.length, 1, 'Tiene un único strong')
})

test('<AppWrapper /> -> setNameFromProps set name hello + name', t => {
  let appWrapper = new AppWrapper()
  let result = {}
  let mock = {}

  mock.text = 'mooo'
  mock.number = 123
  mock.voidString = ''

  result.paramText = appWrapper.setNameFromProps(mock.text)
  result.paramVoid = appWrapper.setNameFromProps()
  result.paramNumber = appWrapper.setNameFromProps(mock.number)
  result.paramVoidString = appWrapper.setNameFromProps(mock.voidString)

  t.is(typeof appWrapper.setNameFromProps, 'function', 'setNameFromProps is function')
  t.is(result.paramText, mock.text, 'Param shold return param')
  t.is(result.paramVoid, 'World', 'Default void param shold return World')
  t.is(result.paramNumber, 'World', 'Not String returns World')
  t.is(result.paramVoidString, 'World', 'void string returns World')
})
",Design two unit tests for two different aspects of a React component called <AppWrapper /> using Enzyme.
"import React from 'react';
import Column from '../ui/components/column';
import ColumnBackButtonSlim from '../../components/column_back_button_slim';
import { defineMessages, injectIntl, FormattedMessage } from 'react-intl';
import PropTypes from 'prop-types';
import ImmutablePureComponent from 'react-immutable-pure-component';

const messages = defineMessages({
  heading: { id: 'keyboard_shortcuts.heading', defaultMessage: 'Keyboard Shortcuts' },
});

@injectIntl
export default class KeyboardShortcuts extends ImmutablePureComponent {

  static propTypes = {
    intl: PropTypes.object.isRequired,
    multiColumn: PropTypes.bool,
  };

  render () {
    const { intl } = this.props;

    return (
      <Column icon='question' heading={intl.formatMessage(messages.heading)}>
        <ColumnBackButtonSlim />
        <div className='keyboard-shortcuts scrollable optionally-scrollable'>
          <table>
            <thead>
              <tr>
                <th><FormattedMessage id='keyboard_shortcuts.hotkey' defaultMessage='Hotkey' /></th>
                <th><FormattedMessage id='keyboard_shortcuts.description' defaultMessage='Description' /></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><kbd>r</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.reply' defaultMessage='to reply' /></td>
              </tr>
              <tr>
                <td><kbd>m</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.mention' defaultMessage='to mention author' /></td>
              </tr>
              <tr>
                <td><kbd>f</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.favourite' defaultMessage='to favourite' /></td>
              </tr>
              <tr>
                <td><kbd>b</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.boost' defaultMessage='to boost' /></td>
              </tr>
              <tr>
                <td><kbd>enter</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.enter' defaultMessage='to open status' /></td>
              </tr>
              <tr>
                <td><kbd>up</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.up' defaultMessage='to move up in the list' /></td>
              </tr>
              <tr>
                <td><kbd>down</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.down' defaultMessage='to move down in the list' /></td>
              </tr>
              <tr>
                <td><kbd>1</kbd>-<kbd>9</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.column' defaultMessage='to focus a status in one of the columns' /></td>
              </tr>
              <tr>
                <td><kbd>n</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.compose' defaultMessage='to focus the compose textarea' /></td>
              </tr>
              <tr>
                <td><kbd>alt</kbd>+<kbd>n</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.toot' defaultMessage='to start a brand new toot' /></td>
              </tr>
              <tr>
                <td><kbd>backspace</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.back' defaultMessage='to navigate back' /></td>
              </tr>
              <tr>
                <td><kbd>s</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.search' defaultMessage='to focus search' /></td>
              </tr>
              <tr>
                <td><kbd>esc</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.unfocus' defaultMessage='to un-focus compose textarea/search' /></td>
              </tr>
              <tr>
                <td><kbd>?</kbd></td>
                <td><FormattedMessage id='keyboard_shortcuts.legend' defaultMessage='to display this legend' /></td>
              </tr>
            </tbody>
          </table>
        </div>
      </Column>
    );
  }

}
",Describe the contents of the Keyboard Shortcuts page. Include the heading and the table of hotkeys and corresponding actions.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NotificationAirlineSeatLegroomExtra = (props) => (
  <SvgIcon {...props}>
    <path d=""M4 12V3H2v9c0 2.76 2.24 5 5 5h6v-2H7c-1.66 0-3-1.34-3-3zm18.83 5.24c-.38-.72-1.29-.97-2.03-.63l-1.09.5-3.41-6.98c-.34-.68-1.03-1.12-1.79-1.12L11 9V3H5v8c0 1.66 1.34 3 3 3h7l3.41 7 3.72-1.7c.77-.36 1.1-1.3.7-2.06z""/>
  </SvgIcon>
);
NotificationAirlineSeatLegroomExtra = pure(NotificationAirlineSeatLegroomExtra);
NotificationAirlineSeatLegroomExtra.displayName = 'NotificationAirlineSeatLegroomExtra';
NotificationAirlineSeatLegroomExtra.muiName = 'SvgIcon';

export default NotificationAirlineSeatLegroomExtra;
",Generate a React component for a Material Design icon of an airline seat with extra legroom. Use the pure HOC from the recompose library to prevent unnecessary re-renders. Include type annotations and a display name for the component.
"import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import StatusListContainer from '../../ui/containers/status_list_container';
import {
  refreshCommunityTimeline,
  expandCommunityTimeline,
} from '../../../actions/timelines';
import Column from '../../../components/column';
import ColumnHeader from '../../../components/column_header';
import { defineMessages, injectIntl } from 'react-intl';
import { connectCommunityStream } from '../../../actions/streaming';

const messages = defineMessages({
  title: { id: 'standalone.public_title', defaultMessage: 'A look inside...' },
});

@connect()
@injectIntl
export default class CommunityTimeline extends React.PureComponent {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    intl: PropTypes.object.isRequired,
  };

  handleHeaderClick = () => {
    this.column.scrollTop();
  }

  setRef = c => {
    this.column = c;
  }

  componentDidMount () {
    const { dispatch } = this.props;

    dispatch(refreshCommunityTimeline());
    this.disconnect = dispatch(connectCommunityStream());
  }

  componentWillUnmount () {
    if (this.disconnect) {
      this.disconnect();
      this.disconnect = null;
    }
  }

  handleLoadMore = () => {
    this.props.dispatch(expandCommunityTimeline());
  }

  render () {
    const { intl } = this.props;

    return (
      <Column ref={this.setRef}>
        <ColumnHeader
          icon='users'
          title={intl.formatMessage(messages.title)}
          onClick={this.handleHeaderClick}
        />

        <StatusListContainer
          timelineId='community'
          loadMore={this.handleLoadMore}
          scrollKey='standalone_public_timeline'
          trackScroll={false}
        />
      </Column>
    );
  }

}
","Create a React component called CommunityTimeline that displays a timeline of community posts. The component should include a header with a title and a button to refresh the timeline, and a list of posts. The component should also handle loading more posts when the user scrolls to the bottom of the list."
"'use strict';

import React from 'react';
import DataTableView from './../DataTableView';
import Map from './../../containers/MapContainer';

class EventsDetailView extends React.Component {

  constructor(props) {
    super(props);
    const path = window.location.pathname.split('/');
    this.eventId = path[path.length - 1];

    this.state = {
      activeTab: ""tab1"",
      currentEvent: this.eventId
    };
  }

  componentDidMount() {
    //All mapathons
    this.props.setEventDetail(this.eventId);
  }

  changeTab(tab) {
    this.setState({activeTab: tab});
  }

  render() {
    /*
    Slug must match with column name from API.
     */
    const taskTable = (
      <DataTableView
        identity=""tasks""
        base_url=""/tasks""
        data={this.props.eventDetail && this.props.eventDetail.tasks}
        columns={[
          { title: 'Deadline', slug: 'deadline' },
          { title: 'Task Name', slug: 'name' },
          { title: 'Type', slug: 'task_type' },
          { title: 'State', slug: 'status' }
        ]}
      />
    );

    return (
      <div>
        <Map
          tasksList={this.props.eventDetail && this.props.eventDetail.tasks}
          campaignId={this.props.eventDetail && this.props.eventDetail.campaign_id}
          eventId={this.props.eventDetail && this.props.eventDetail.id}
        />
      </div>
    );
  }
}

export default EventsDetailView;
",Generate the code snippet for a React class component that displays a Map and a sortable DataTable. The component should be able to handle tab navigation and fetch data for the DataTableView.
"import React from 'react'
import { List } from 'semantic-ui-react'

const ListExampleOrderedValue = () => (
  <List as='ol'>
    <List.Item as='li' value='*'>Signing Up</List.Item>
    <List.Item as='li' value='*'>User Benefits</List.Item>
    <List.Item as='li' value='*'>
      User Types
      <List.Item as='ol'>
        <List.Item as='li' value='-'>Admin</List.Item>
        <List.Item as='li' value='-'>Power User</List.Item>
        <List.Item as='li' value='-'>Regular User</List.Item>
      </List.Item>
    </List.Item>
    <List.Item as='li' value='*'>Deleting Your Account</List.Item>
  </List>
)

export default ListExampleOrderedValue
","Describe an ordered list with a value for each item in React using Semantic UI. The value should be a bullet point. Additionally, the list should contain a nested ordered list under one of the items."
"import React from 'react'

import styles from './styles.css'
import HomeIcon from '../HomeIcon'

export default function Header() {
  return (
    <div className={styles.Header}>
      <div className={styles.Title}>
        <HomeIcon />
      </div>
      <div className={styles.Actions}>
      </div>
    </div>
  )
}
",Design a simple React component for a header that includes a home icon and a container for actions.
"import R from 'ramda'
import React from 'react'
import {forward, mapEffects, message, targetValue} from '../elmar'

const init = component => (...args) => {
  const [model, effects] = component.init(...args)
  return [{
    component: model,
    lastAction: performance.now(),
    history: [],
    future: [],
    time: 0,
    realtime: false,
    speed: 200
  }, mapEffects(Action.UpdateComponent(component), effects)]
}

const timeDelta = start => {
  const now = performance.now()
  return [now, now - start]
}

const Action = {
  UpdateComponent: component => action => model => {
    const [componentModel, effects] = component.update(action, model.component)
    const [now, elapsed] = timeDelta(model.lastAction)
    return [{...model,
      component: componentModel,
      history: R.append([elapsed, model.component], model.history),
      future: [],
      lastAction: now,
    }, mapEffects(Action.UpdateComponent(component), effects)]
  },
  Undo: model => {
    const [time, component] = R.last(model.history)
    return [{...model,
      component,
      time,
      future: R.append([model.time, model.component], model.future),
      history: R.dropLast(1, model.history),
      lastAction: performance.now()
    }, []]
  },
  Redo: model => {
    const [time, component] = R.last(model.future)
    return [{...model,
      component,
      time,
      future: R.dropLast(1, model.future),
      history: R.append([model.time, model.component], model.history),
      lastAction: performance.now()
    }, []]
  },
  Rewind: model => {
    const [time, component] = R.head(model.history)
    return [{...model,
      component,
      time,
      future: model.future.concat([[model.time, model.component]], R.drop(1, model.history).reverse()),
      history: [],
      lastAction: performance.now()
    }, []]
  },
  Replay: model => {
    if (model.future.length > 0) {
      const nextModel = R.head(update(Action.Redo, model))
      return [
        nextModel,
        [delayAction(Action.Replay, model.realtime ? nextModel.time : model.speed)]
      ]
    } else {
      return [model, []]
    }
  },
  ToggleRealtime: model => [{...model,
      lastAction: performance.now(),
      realtime: !model.realtime
    }, []],
  ChangeSpeed: value => model => [{...model,
      lastAction: performance.now(),
      speed: Math.max(100, Math.min(1000, parseInt(value, 10)))
    }, []]
}

const delayAction = (action, delay) => () =>
  new Promise(resolve => setTimeout(() => resolve(action), delay))

const update = (action, model) => action(model)

const view = component => (signal, model) => (
  <div>
    <div style={{background:'#ccc', padding:'.2em'}}>
      <strong>TimeTravelContainer</strong>
      <div>
        <button disabled={model.history.length < 1} onClick={signal(Action.Undo)}>Undo</button>
        <button disabled={model.future.length < 1} onClick={signal(Action.Redo)}>Redo</button>
        <button disabled={model.future.length < 1} onClick={signal(Action.Replay)}>Replay</button>
        <button disabled={model.history.length < 1} onClick={signal(Action.Rewind)}>Rewind</button>
        <label>Speed:</label>
        <input type=""number"" min=""100"" max=""1000"" step=""100""
               value={model.realtime ? model.time : model.speed}
               disabled={model.realtime}
               onChange={message(signal, R.compose(Action.ChangeSpeed, targetValue))}/>
        <span>ms</span>
        <input type=""checkbox""
               checked={model.realtime}
               onChange={signal(Action.ToggleRealtime)}/>
        <label>Realtime</label>
      </div>
    </div>
    <table width=""100%"" style={{borderSpacing:2}}>
      <tbody>
        <tr>
          <td width=""50%"" style={{border:'2px solid #999', verticalAlign:'top'}}>
            {component.view(forward(signal, Action.UpdateComponent(component)), model.component)}
          </td>
          <td style={{border:'2px solid #999', verticalAlign:'top'}}>
            <textarea spellCheck={false}
                      autoComplete={false}
                      rows={10}
                      value={JSON.stringify(model.component)}
                      readOnly={true}
                      style={{width:'99%', border:0}}/>
          </td>
        </tr>
      </tbody>
      </table>
  </div>
)

export default component => ({
  init: init(component),
  update,
  view: view(component)
})
","Create a time travel container that allows a user to undo, redo, replay, and rewind actions on a component while viewing the state of the component and the actions taken in a human-readable format."
"import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  Text,
  View
} from 'react-native';
import StackNavigator from './src/components/app/StackNavigator';

AppRegistry.registerComponent('Brazos', () => StackNavigator);","Create a React Native application with a stack navigator as its root component, register the application with the name ""Brazos"" using AppRegistry, and generate the necessary React component classes."
"import React from 'react'
import ReactDOM from 'react-dom'
import { Provider } from 'react-redux'
import DevTools from '../../containers/DevToolsWindow'

export default function createDevToolsWindow (store) {
  const win = window.open(
    null,
    'redux-devtools', // give it a name so it reuses the same window
    `width=400,height=${window.outerHeight},menubar=no,location=no,resizable=yes,scrollbars=no,status=no`
  )

  // reload in case it's reusing the same window with the old content
  win.location.reload()

  // wait a little bit for it to reload, then render
  setTimeout(() => {
    // Wait for the reload to prevent:
    // ""Uncaught Error: Invariant Violation: _registerComponent(...): Target container is not a DOM element.""
    win.document.write('<div id=""react-devtools-root""></div>')
    win.document.body.style.margin = '0'

    ReactDOM.render(
      <Provider store={store}>
        <DevTools />
      </Provider>
      , win.document.getElementById('react-devtools-root')
    )
  }, 10)
}
","Create a React Redux DevTools window that can be opened in a separate browser window. The window should be named ""redux-devtools"" and have a width of 400 pixels and a height equal to the outer height of the main window. It should not have a menu bar, location bar, resizable borders, scrollbars, or status bar."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NotificationNetworkCheck = (props) => (
  <SvgIcon {...props}>
    <path d=""M15.9 5c-.17 0-.32.09-.41.23l-.07.15-5.18 11.65c-.16.29-.26.61-.26.96 0 1.11.9 2.01 2.01 2.01.96 0 1.77-.68 1.96-1.59l.01-.03L16.4 5.5c0-.28-.22-.5-.5-.5zM1 9l2 2c2.88-2.88 6.79-4.08 10.53-3.62l1.19-2.68C9.89 3.84 4.74 5.27 1 9zm20 2l2-2c-1.64-1.64-3.55-2.82-5.59-3.57l-.53 2.82c1.5.62 2.9 1.53 4.12 2.75zm-4 4l2-2c-.8-.8-1.7-1.42-2.66-1.89l-.55 2.92c.42.27.83.59 1.21.97zM5 13l2 2c1.13-1.13 2.56-1.79 4.03-2l1.28-2.88c-2.63-.08-5.3.87-7.31 2.88z""/>
  </SvgIcon>
);
NotificationNetworkCheck = pure(NotificationNetworkCheck);
NotificationNetworkCheck.displayName = 'NotificationNetworkCheck';
NotificationNetworkCheck.muiName = 'SvgIcon';

export default NotificationNetworkCheck;
","Generate the code for a React component that renders an SVG icon for a network indicator with a checkmark, using the Material UI library and the `pure` HOC from the `recompose` library."
"import React from 'react';
import {withInfo} from '@storybook/addon-info';
import styled from '@emotion/styled';

import * as newIconset from 'app/icons';

export default {
  title: 'Core/Style/Icons',
};

export const IconSet = withInfo('Replace `InlineSvg` with icon components')(() => {
  return (
    <SwatchWrapper>
      <Header>Icon Set</Header>
      <Swatches>
        {Object.entries(newIconset).map(([key, Icon]) => (
          <Swatch key={key}>
            <Icon />
            <LabelWrapper>{key}</LabelWrapper>
          </Swatch>
        ))}
      </Swatches>
    </SwatchWrapper>
  );
});

const Header = styled('h5')`
  margin-bottom: 16px;
`;

const LabelWrapper = styled('div')`
  font-size: 14px;
  margin-left: 16px;
`;

const SwatchWrapper = styled('div')`
  border: 1px solid ${p => p.theme.border};
  padding: 24px;
`;

const Swatches = styled('div')`
  display: grid;
  grid-template-columns: repeat(auto-fill, 160px);
  grid-gap: 8px;
`;

const Swatch = styled('div')`
  display: flex;
  align-items: center;
  min-height: 32px;

  svg {
    min-width: 32px;
  }
`;
",Generate React code that displays a set of icons with their corresponding names in a grid layout. Use the emotion library for styling.
"import React from 'react'
import { Grid } from '@material-ui/core'
import { Field } from 'redux-form'
import CustomInput from 'components/Form/CustomInput'
import { InputAdornment, withStyles } from '@material-ui/core'

import FaceIcon from '@material-ui/icons/Face';
import EmailIcon from '@material-ui/icons/Email';
import HttpsIcon from '@material-ui/icons/Https';

const style = {
  gridRow: {
    margin: '12px 0',
  }
}

class UpWorkForm extends React.Component {

  render() {
    const { classes } = this.props

    return (
      <Grid item xs={12} md={12} >
        <Grid container justify='center'>
          <Grid item xs={12} md={8} className={classes.gridRow}>
            <h5>Import UpWork reviews</h5>

            <Field
              component={CustomInput}
              labelText={<span>UpWork profile URL</span>}
              name='upwork-url'
              formControlProps={{ fullWidth: true }}
              inputProps={{
                endAdornment: (
                  <InputAdornment position='end' className={classes.inputAdornment}>
                    <FaceIcon className={classes.inputAdornmentIcon} />
                  </InputAdornment>
                )
              }}
            />
          </Grid>
        </Grid>

        <Grid container justify='center'>
          {this.renderLogin()}
        </Grid>
      </Grid>
    )
  }

  renderLogin() {
    const { classes } = this.props

    return (
      <Grid item xs={12} md={8} className={classes.gridRow}>
        <Grid container justify='space-between' spacing={8} style={{ marginTop: -24 }}>
          <Grid item xs={12} sm={12} md={6} className={classes.gridRow}>
            <Field
              component={CustomInput}
              labelText={<span>UpWork e-mail <small>(optional)</small></span>}
              name='upwork-user'
              formControlProps={{ fullWidth: true }}
              inputProps={{
                endAdornment: (
                  <InputAdornment position='end' className={classes.inputAdornment}>
                    <EmailIcon className={classes.inputAdornmentIcon} />
                  </InputAdornment>
                )
              }}
            />
          </Grid>

          <Grid item xs={12} sm={12} md={6} className={classes.gridRow}>
            <Field
              component={CustomInput}
              labelText={<span>UpWork password <small>(optional)</small></span>}
              id='upwork-password'
              name='upwork-password'
              formControlProps={{ fullWidth: true }}
              inputProps={{
                type: 'password',
                endAdornment: (
                  <InputAdornment position='end' className={classes.inputAdornment}>
                    <HttpsIcon className={classes.inputAdornmentIcon} />
                  </InputAdornment>
                )
              }}
            />
          </Grid>
        </Grid>
      </Grid>
    )
  }

  /**
   * @param {string} url
   */
  isUpWorkProfileUrlValid(url) {
    if (!url) return false;

    url = url.toLowerCase();

    if (url.indexOf(""upwork.com"") === 0) return true;
    if (url.indexOf(""www.upwork.com"") === 0) return true;
    if (url.indexOf(""http://upwork.com"") === 0) return true;
    if (url.indexOf(""https://upwork.com"") === 0) return true;
    if (url.indexOf(""http://www.upwork.com"") === 0) return true;
    if (url.indexOf(""https://www.upwork.com"") === 0) return true;

    return false;
  }
}

export default withStyles(style)(UpWorkForm)
","Generate the React component code snippet for a form with inputs to import UpWork reviews including a profile URL, optional email, and optional password. The profile URL should be validated to ensure it is a valid UpWork URL. Use the Material UI library for styling."
"import React, { Component } from 'react';

class Comment extends Component {
    render() {
        return (
            <div className=""comment"">
                <div className=""ui comments"">
                    <div className=""comment"">
                        <a className=""avatar"">
                            <img src=""/src/assets/images/avatar.jpg"" />
                        </a>
                        <div className=""content"">
                            <a className=""author"">{this.props.author}</a>
                            <div className=""metadata"">
                                <div className=""date"">{this.props.date}</div>
                            </div>
                            <div className=""text"">{this.props.children}</div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default Comment;","Create a React component called Comment that displays a single comment in a thread. It should include an avatar image, author name, date, and comment text."
"import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import App from './containers/App';
import store from './store';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>
, document.getElementById('app'));
","Assemble an application layout with a React front-end and a Redux store, providing the container and store, and mount the application into a container in the HTML."
"import './style/index.css'
import React from 'react'
import { Row, Col } from 'antd';
import SiderMenu from '../common/sidermenu'
import AreaStack from '../echarts/areastack'
import UserMgt from '../antd/usermgt'
import HeatmapCartesian from '../echarts/heatmapcartesian'

export default class Index extends React.Component{

  constructor(props){
    super(props);
  }

  render() {

    return (
			<div className=""main-div"">
        <Row>
          <Col span={24} offset={0}>
            <div className=""main-top"">Java Web工程Demo</div>
          </Col>
        </Row>
        <Row>
          <Col span={4} offset={0}>
            <SiderMenu location={this.props.location} />
          </Col>
          <Col span={20} >
            <div className=""content-div"">
              {this.props.children}
            </div>
          </Col>
        </Row>
			</div>
    );
  }
}
","Create a React component that establishes the layout and navigation structure of a web application. It should include a header with a title, a sidebar for navigation, and a main content area that displays child components based on routing."
"// @flow
import React from 'react';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
import { Router, hashHistory } from 'react-router';
import { syncHistoryWithStore } from 'react-router-redux';
import routes from './routes';
import configureStore from './store/configureStore';
import './app.global.css';

const store = configureStore();
const history = syncHistoryWithStore(hashHistory, store);

render(
  <Provider store={store}>
    <Router history={history} routes={routes} />
  </Provider>,
  document.getElementById('root')
);
","Create the entry point for a React Redux application, including the configuration of the store, routing, and the rendering of the application to the DOM using React DOM."
"import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import request from 'superagent';
import CountTo from '../../dist/react-count-to';

class App extends Component {
  constructor() {
    super();

    this.state = {
      isLoading: true,
      to: 0,
    };

    this.onComplete = this.onComplete.bind(this);
    this.callback = this.callback.bind(this);
    this.renderCountTo = this.renderCountTo.bind(this);
    this.renderLoading = this.renderLoading.bind(this);
  }

  componentDidMount() {
    request
      .get('https://api.github.com/repos/facebook/react')
      .end(this.callback);
  }

  onComplete() {
    console.log('completed!');
  }

  callback(err, res) {
    this.setState({
      isLoading: false,
      to: res.body.stargazers_count,
    });
  }

  renderLoading() {
    return (
      <span>Loading...</span>
    );
  }

  renderCountTo() {
    return (
      <CountTo to={this.state.to} speed={1000} onComplete={this.onComplete} />
    );
  }

  render() {
    return (
      <div>
        <h1>How many stars does React.js have?</h1>
        {this.state.isLoading ? this.renderLoading() : this.renderCountTo()}
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('count-to'));
",Create a React application that displays a real-time count of the number of stars the React repository on GitHub has.
"import React from 'react';
import IconBase from '@suitejs/icon-base';

function MdPanoramaHorizontal(props) {
  return (
    <IconBase viewBox=""0 0 48 48"" {...props}>
      <path d=""M42.86 8c.66 0 1.14.47 1.12 1.25v29.5c.01.78-.47 1.25-1.13 1.25-.19 0-.4-.04-.62-.12a52.262 52.262 0 0 0-18.24-3.29c-6.18 0-12.36 1.1-18.24 3.29-.22.08-.43.12-.62.12-.66 0-1.12-.47-1.13-1.25V9.25C4 8.47 4.47 8 5.13 8c.2 0 .41.04.63.12A52.262 52.262 0 0 0 24 11.41c6.18 0 12.36-1.1 18.24-3.29.22-.08.43-.12.62-.12zM40 13.09a56.197 56.197 0 0 1-16 2.32c-5.44 0-10.81-.78-16-2.32v21.82c5.2-1.54 10.56-2.32 16-2.32 5.44 0 10.81.78 16 2.32V13.09z"" />
    </IconBase>
  );
}

export default MdPanoramaHorizontal;
",Generate a React component that renders an icon representing a horizontal panorama based on Material Design guidelines. The component should be named `MdPanoramaHorizontal` and should take props for customizing its appearance.
"import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import './index.css';
import App from './containers/App';
import registerServiceWorker from './registerServiceWorker';
import store from './store';


ReactDOM.render(
  <Provider store={store}>
      <App />
  </Provider>,
  document.getElementById('root')
);
registerServiceWorker();

",Create a snippet of code that will render a React application using Redux for state management. The application should have a root component named App that is wrapped in a Provider component which provides the Redux store to the application.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionDeleteForever = (props) => (
  <SvgIcon {...props}>
    <path d=""M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z""/>
  </SvgIcon>
);
ActionDeleteForever = pure(ActionDeleteForever);
ActionDeleteForever.displayName = 'ActionDeleteForever';
ActionDeleteForever.muiName = 'SvgIcon';

export default ActionDeleteForever;
",Create a React component that renders the SVG icon for the `ActionDeleteForever` icon from Material UI. The component should be called `ActionDeleteForever` and should be exported as the default export.
"
// CSS
import styles from './style.css';

import React from 'react';
import PureComponent from 'react-pure-render/component';
import classNames from 'classnames';

import * as values from '../../../constants/DefaultValues';
import Mixins from '../../../mixins/global';
import EditItem from '../EditItem';

class EditMultiOptions extends PureComponent {

    constructor() {
        super();

        this._addOption = this._addOption.bind(this);
        this._onDeleteHandle = this._onDeleteHandle.bind(this);
        this._onChangeHandle = this._onChangeHandle.bind(this);
        this._moveItem = this._moveItem.bind(this);
        this._renderData = this._renderData.bind(this);
        this._handleFocusEvent = this._handleFocusEvent.bind(this);
    }

    render() {
        const { surveyEditable, editQuestion } = this.props;
        const data = editQuestion.data;
        let optList = [];
        const otherBtn = [];
        let editClass = {};

        // Once add new question, it should add case content
        switch (editQuestion.type) {
        case 'radio':
        case 'checkbox':
        case 'rating':
            optList = this._renderData(data);
            editClass = {
                [styles.addBtn]: true,
                link: true,
                'ut-btn': true,
                [styles.disabled]: !surveyEditable
            };
            otherBtn.push(
                <a
                    data-type=""other""
                    className={classNames(editClass)}
                    onClick={surveyEditable ? this._addOption : () => {}}
                    key={1}
                >+ Add Option</a>);
            break;
        case 'text':
            optList.push(
                <div key={1}>
                    <input
                        data-id={1}
                        data-type=""input""
                        type=""text""
                        className={`${styles.longText} js-text ut-input input input--medium`}
                        value={editQuestion.input}
                        onChange={this._onChangeHandle}
                        onFocus={this._handleFocusEvent}
                    />
                    <div className=""input__msg js-text-msg""></div>
                </div>);
            break;
        case 'textarea':
            optList.push(
                <div key={1}>
                    <textarea
                        data-id={1}
                        data-type=""input""
                        className=""textarea js-text""
                        type=""text""
                        value={editQuestion.input}
                        onChange={this._onChangeHandle}
                        onFocus={this._handleFocusEvent}
                        rows={editQuestion.rows}
                    ></textarea>
                    <div className=""input__msg js-text-msg""></div>
                </div>);
            break;
        default:
        }

        if (editQuestion.type === 'radio' || editQuestion.type === 'checkbox') {
            editClass = {
                [styles.otherBtn]: true,
                link: true,
                'ut-other': true,
                [styles.disabled]: !surveyEditable
            };
            // radio/checkbox have this button
            otherBtn.push(
                <a
                    className={classNames(editClass)}
                    onClick={surveyEditable ? this._addOption : () => {}}
                    key={2}
                >Add ""Other""</a>);
        }

        return (
            <div className={styles.item}>
                {optList}
                {otherBtn}
            </div>
        );
    }

    _renderData(data) {
        const { surveyEditable } = this.props;
        const optList = [];
        data.forEach((opt, idx) => {
            const pros = {
                key: idx,
                data: opt,
                onChangeHandle: this._onChangeHandle,
                onDeleteHandle: this._onDeleteHandle,
                moveItem: this._moveItem,
                surveyEditable
            };
            optList.push(
                <EditItem
                    id={idx}
                    {...pros}
                    className=""ut-opt""
                />
            );
        });
        return optList;
    }

    _onChangeHandle(e) {
        const { editQuestion, handleChangeEvent } = this.props;
        const idx = e.target.getAttribute('data-id');
        const type = e.target.getAttribute('data-type');
        let newData;
        if (!editQuestion.hasOwnProperty('data')) {
            newData = e.target.value;
            handleChangeEvent({ input: newData });
        } else {
            newData = [...editQuestion.data];
            const data = {
                [type]: e.target.value
            };
            newData[idx] = Object.assign({}, newData[idx], data);
            handleChangeEvent({ data: newData });
        }
    }

    _onDeleteHandle(idx) {
        const { editQuestion, handleChangeEvent } = this.props;
        const newData = [...editQuestion.data];
        newData.splice(idx, 1);
        handleChangeEvent({ data: newData });
    }

    _addOption(e) {
        const { editQuestion, handleChangeEvent } = this.props;
        let opt;
        if (e.target.getAttribute('data-type') === 'other') {
            opt = {
                value: Mixins.generateQuestionID(),
                label: values.OPTION_TITLE
            };
        } else {
            opt = {
                value: Mixins.generateQuestionID(),
                label: values.OPTION_TITLE,
                input: values.PLACEHOLDER_TITLE
            };
        }

        const newData = [...editQuestion.data, opt];
        handleChangeEvent({ data: newData });
    }

    _moveItem(dragIndex, hoverIndex) {
        const { editQuestion, handleChangeEvent } = this.props;
        if (dragIndex !== hoverIndex) {
            const newData = [...editQuestion.data];
            const moveOpt = newData[dragIndex];
            newData.splice(dragIndex, 1);
            newData.splice(hoverIndex, 0, moveOpt);
            handleChangeEvent({ data: newData });
        }
    }

    _handleFocusEvent(e) {
        const target = e.target;
        const compareStr = target.getAttribute('data-type') === 'label' ?
            values.OPTION_TITLE : values.PLACEHOLDER_TITLE;
        if (target.value === compareStr) {
            target.value = '';
        }
    }
}

export default EditMultiOptions;
","Generate a React component that allows users to add, remove, and edit options for multiple-choice questions in a survey. The component should include features such as drag-and-drop reordering of options, a way to mark an option as ""other"", and a button to add a new option."
"import React from 'react'
import PropTypes from 'prop-types'
import {
    injectIntl,
    defineMessages,
} from 'react-intl'

import { Input } from '../../common/components/FormComponents'

const RecipeHeader = ({ cookTime, prepTime, servings, customServings, info, updateServings, clearServings, intl }) => {
  const messages = defineMessages({
    servings: {
      id: 'recipe.servings',
      description: 'Servings',
      defaultMessage: 'Servings',
    },
    prep_time: {
      id: 'recipe.prep_time',
      description: 'Preparation time',
      defaultMessage: 'Prep time',
    },
    cooking_time: {
      id: 'recipe.cooking_time',
      description: 'Cooking time',
      defaultMessage: 'Cooking time',
    },
    minutes: {
      id: 'recipe.minutes',
      description: 'minutes',
      defaultMessage: 'minutes'
    },
  });

  let clearInput = '';
  if (servings != customServings && !!customServings) {
    clearInput = (
      <span className=""input-group-btn"">
        <button className=""btn btn-default"" type=""button"" onClick={ clearServings }>
          <span className=""glyphicon glyphicon-remove"" aria-hidden=""true""/>
        </button>
      </span>
    )
  }

  return (
    <div className=""panel panel-default"">
      <table className=""table table-bordered"">
        <thead>
          <tr className=""active"">
            <th>{ intl.formatMessage(messages.servings) }</th>
            <th>{ intl.formatMessage(messages.prep_time) }</th>
            <th>{ intl.formatMessage(messages.cooking_time) }</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>
              <div className=""input-group print-hidden"">
                <Input
                  name=""servings""
                  type=""number""
                  size=""servings-textbox""
                  change={ updateServings }
                  value={ customServings ? customServings : servings } />
                { clearInput }
              </div>
              <p className=""print-only"">{ customServings ? customServings : servings }</p>
            </td>
            <td>{ prepTime } { intl.formatMessage(messages.minutes) }</td>
            <td>{ cookTime } { intl.formatMessage(messages.minutes) }</td>
          </tr>
        </tbody>
      </table>
      <div className=""panel-body"">
        <p>{ info }</p>
      </div>
    </div>
  );
};

RecipeHeader.PropTypes = {
  cookTime: PropTypes.number.isRequired,
  prepTime: PropTypes.number.isRequired,
  servings: PropTypes.number.isRequired,
  customServings: PropTypes.string,
  info: PropTypes.string.isRequired,
  updateServings: PropTypes.func.isRequired,
  clearServings: PropTypes.func.isRequired,
  intl: PropTypes.object.isRequired,
};

export default injectIntl(RecipeHeader);
","Generate a React component called RecipeHeader that takes in props for cookTime, prepTime, servings, customServings, info, updateServings, clearServings, and intl. The component should display a table with servings, prep time, and cooking time. It should also have an input field for custom servings, a clear button to clear the custom servings input, and a panel body for additional info. The component should be localized using React Intl."
"import React from 'react';
import ReactDom from 'react-dom';
// import { Provider } from 'react-redux';

// import configureStore from './store';

// const wrapper = document.getElementById('app');
// ReactDOM.render(
//   <Provider store={configureStore()}>
//   </Provider>, wrapper,
// );

class Main extends React.Component {
  render() {
    return (
        <div className={'my-extension'}>
            <h1>Hello world - My first Extension</h1>
        </div>
    )
  }
}
","Generate a React app built with Create React App that displays a basic ""Hello World"" message in an extension."
"import React from 'react';
import { connect } from 'react-redux';
import { defineMessages, injectIntl } from 'react-intl';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import Column from 'mastodon/components/column';
import ColumnHeader from 'mastodon/components/column_header';
import { addColumn, removeColumn, moveColumn, changeColumnParams } from 'mastodon/actions/columns';
import { fetchDirectory, expandDirectory } from 'mastodon/actions/directory';
import { List as ImmutableList } from 'immutable';
import AccountCard from './components/account_card';
import RadioButton from 'mastodon/components/radio_button';
import LoadMore from 'mastodon/components/load_more';
import ScrollContainer from 'mastodon/containers/scroll_container';
import LoadingIndicator from 'mastodon/components/loading_indicator';

const messages = defineMessages({
  title: { id: 'column.directory', defaultMessage: 'Browse profiles' },
  recentlyActive: { id: 'directory.recently_active', defaultMessage: 'Recently active' },
  newArrivals: { id: 'directory.new_arrivals', defaultMessage: 'New arrivals' },
  local: { id: 'directory.local', defaultMessage: 'From {domain} only' },
  federated: { id: 'directory.federated', defaultMessage: 'From known fediverse' },
});

const mapStateToProps = state => ({
  accountIds: state.getIn(['user_lists', 'directory', 'items'], ImmutableList()),
  isLoading: state.getIn(['user_lists', 'directory', 'isLoading'], true),
  domain: state.getIn(['meta', 'domain']),
});

export default @connect(mapStateToProps)
@injectIntl
class Directory extends React.PureComponent {

  static contextTypes = {
    router: PropTypes.object,
  };

  static propTypes = {
    isLoading: PropTypes.bool,
    accountIds: ImmutablePropTypes.list.isRequired,
    dispatch: PropTypes.func.isRequired,
    columnId: PropTypes.string,
    intl: PropTypes.object.isRequired,
    multiColumn: PropTypes.bool,
    domain: PropTypes.string.isRequired,
    params: PropTypes.shape({
      order: PropTypes.string,
      local: PropTypes.bool,
    }),
  };

  state = {
    order: null,
    local: null,
  };

  handlePin = () => {
    const { columnId, dispatch } = this.props;

    if (columnId) {
      dispatch(removeColumn(columnId));
    } else {
      dispatch(addColumn('DIRECTORY', this.getParams(this.props, this.state)));
    }
  }

  getParams = (props, state) => ({
    order: state.order === null ? (props.params.order || 'active') : state.order,
    local: state.local === null ? (props.params.local || false) : state.local,
  });

  handleMove = dir => {
    const { columnId, dispatch } = this.props;
    dispatch(moveColumn(columnId, dir));
  }

  handleHeaderClick = () => {
    this.column.scrollTop();
  }

  componentDidMount () {
    const { dispatch } = this.props;
    dispatch(fetchDirectory(this.getParams(this.props, this.state)));
  }

  componentDidUpdate (prevProps, prevState) {
    const { dispatch } = this.props;
    const paramsOld = this.getParams(prevProps, prevState);
    const paramsNew = this.getParams(this.props, this.state);

    if (paramsOld.order !== paramsNew.order || paramsOld.local !== paramsNew.local) {
      dispatch(fetchDirectory(paramsNew));
    }
  }

  setRef = c => {
    this.column = c;
  }

  handleChangeOrder = e => {
    const { dispatch, columnId } = this.props;

    if (columnId) {
      dispatch(changeColumnParams(columnId, ['order'], e.target.value));
    } else {
      this.setState({ order: e.target.value });
    }
  }

  handleChangeLocal = e => {
    const { dispatch, columnId } = this.props;

    if (columnId) {
      dispatch(changeColumnParams(columnId, ['local'], e.target.value === '1'));
    } else {
      this.setState({ local: e.target.value === '1' });
    }
  }

  handleLoadMore = () => {
    const { dispatch } = this.props;
    dispatch(expandDirectory(this.getParams(this.props, this.state)));
  }

  render () {
    const { isLoading, accountIds, intl, columnId, multiColumn, domain } = this.props;
    const { order, local }  = this.getParams(this.props, this.state);
    const pinned = !!columnId;

    const scrollableArea = (
      <div className='scrollable'>
        <div className='filter-form'>
          <div className='filter-form__column' role='group'>
            <RadioButton name='order' value='active' label={intl.formatMessage(messages.recentlyActive)} checked={order === 'active'} onChange={this.handleChangeOrder} />
            <RadioButton name='order' value='new' label={intl.formatMessage(messages.newArrivals)} checked={order === 'new'} onChange={this.handleChangeOrder} />
          </div>

          <div className='filter-form__column' role='group'>
            <RadioButton name='local' value='1' label={intl.formatMessage(messages.local, { domain })} checked={local} onChange={this.handleChangeLocal} />
            <RadioButton name='local' value='0' label={intl.formatMessage(messages.federated)} checked={!local} onChange={this.handleChangeLocal} />
          </div>
        </div>

        <div className='directory__list'>
          {isLoading ? <LoadingIndicator /> : accountIds.map(accountId => (
            <AccountCard id={accountId} key={accountId} />
          ))}
        </div>

        <LoadMore onClick={this.handleLoadMore} visible={!isLoading} />
      </div>
    );

    return (
      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>
        <ColumnHeader
          icon='address-book-o'
          title={intl.formatMessage(messages.title)}
          onPin={this.handlePin}
          onMove={this.handleMove}
          onClick={this.handleHeaderClick}
          pinned={pinned}
          multiColumn={multiColumn}
        />

        {multiColumn && !pinned ? <ScrollContainer scrollKey='directory'>{scrollableArea}</ScrollContainer> : scrollableArea}
      </Column>
    );
  }

}
","Create a React component to render a directory of Mastodon users. The component should include:
- A header with a title, an icon, and a pin button
- A filter form with radio buttons to sort by recently active or new arrivals and filter by local or Federated
- A list of account cards, each representing a user in the directory
- A load more button to load additional users
- A scrollbar if the list of users is too long to fit on the screen"
"import React from 'react';
import { connect } from 'react-redux';
import { ProgressBar, Collapse, Row, Col } from 'react-bootstrap';
import TimeDisplay from './Time-display';

function totalPlayingTime(player, currentTime) {
    if (player.isPlaying) {
        return player.previousPlaytime + (currentTime - player.subInTime);
    }
    return player.previousPlaytime;
}

function totalPlayingPercent(player, currentTime){
    return 100*(totalPlayingTime(player,currentTime) / currentTime);
}

function timeSinceLastSub(player, currentTime) {
    if (player.isPlaying) {
        return currentTime - player.subInTime;
    }
    return currentTime - player.subOutTime;
}

const Player = ({ player, currentTime, onSubClick, onGoalScored, onToggleClock}) => (
  <Row>
    <Col xs={2}>
        <button type=""button"" className=""btn btn-primary"" onClick={() => onSubClick(player.id)}>SUB</button>
    </Col>
    <Col xs={4}>
        <span className=""player-name""> {player.name} </span>
    </Col>
    <Col xs={2}>
        <button type=""button"" className=""btn"" onClick={() => onGoalScored(player.id)}> {player.goals} </button>
    </Col>
    <Col xs={4}>
        <ProgressBar bsStyle=""success"" now={totalPlayingPercent(player, currentTime)} onClick={() => onToggleClock(player.id)} />
        <Collapse in={player.showClock}>
          <div>
            <TimeDisplay clockStyle=""last-sub"" time={timeSinceLastSub(player, currentTime)} />
            <TimeDisplay clockStyle=""total-played"" time={totalPlayingTime(player, currentTime)} />
          </div>
        </Collapse>
    </Col>
  </Row>
);

const mapStateToProps = (state, ownProps) => {
  return { currentTime: state.clock.currentTime };
};

const mapDispatchToProps = dispatch => {
  return {
    onSubClick: (playerId, currentTime) => dispatch({ type: 'SUB_PLAYER', playerId, currentTime }),
    onGoalScored: (playerId) => dispatch({ type: 'GOAL', playerId }),
    onToggleClock: (playerId) => dispatch({ type: 'TOGGLE_CLOCK', playerId})
  };
};

function mergeProps(stateProps, dispatchProps, ownProps) {
  return Object.assign({}, ownProps, {
    onSubClick: (playerId) => dispatchProps.onSubClick(playerId, stateProps.currentTime),
    onGoalScored: (playerId) => dispatchProps.onGoalScored(playerId),
    onToggleClock: (playerId) => dispatchProps.onToggleClock(playerId),
    currentTime: stateProps.currentTime
  })
}

export default connect(mapStateToProps, mapDispatchToProps, mergeProps)(Player)
","Create a React component for a player in a sports game that displays their name, a button to substitute them out, a button to track the number of goals they score, and a collapsible progress bar that shows the percentage of the game they have played and the time since they were last substituted in."
"// @flow
import type { State } from '../../common/types';
import React from 'react';
import { compose } from 'ramda';
import { connect } from 'react-redux';
import { setCurrentLocale } from '../../common/intl/actions';
import {
  Box,
  Button,
} from '../app/components';

type SwitchLocaleProps = {
  currentLocale: string,
  locales: Array<string>,
  setCurrentLocale: typeof setCurrentLocale,
};

const SwitchLocale = ({
  currentLocale,
  locales,
  setCurrentLocale,
}: SwitchLocaleProps) => (
  <Box
    marginBottom={1}
    marginHorizontal={-0.25}
  >
    {locales.map(locale =>
      <Button
        active={locale === currentLocale}
        display=""inline-block""
        key={locale}
        marginHorizontal={0.25}
        onClick={() => setCurrentLocale(locale)}
        primary
      >
        {locale}
      </Button>,
    )}
  </Box>
);

export default compose(
  connect(
    (state: State) => ({
      currentLocale: state.intl.currentLocale,
      locales: state.intl.locales,
    }),
    { setCurrentLocale },
  ),
)(SwitchLocale);
","Create a React component that allows the user to switch between different locales. The component should take the current locale and a list of available locales as props. It should display a button for each available locale. When the user clicks on a button, the current locale should be updated to the selected locale."
"import 'purecss';
import './main.css';

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App.jsx';

main();

function main() {
  var app = document.createElement('div');

  document.body.appendChild(app);

  ReactDOM.render(<App />, app);
}
","Create a basic React application structure with a custom main.css file and an App.jsx component, ensuring the code is clean and organized."
"import React from 'react';
import { GeneralPropTypes, createClassName, generalClassNames } from '../utils';

/**
 * Top bar component.
 * http://foundation.zurb.com/sites/docs/top-bar.html
 *
 * @param {Object} props
 * @returns {Object}
 */
export const TopBar = props => {
  const className = createClassName(
    props.noDefaultClassName ? null : 'top-bar',
    props.className,
    generalClassNames(props)
  );

  return (
    <div {...props} className={className}/>
  );
};

TopBar.propTypes = {
  ...GeneralPropTypes
};

/**
 * Top bar title sub-component.
 *
 * @param {Object} props
 * @returns {Object}
 */
export const TopBarTitle = props => {
  const className = createClassName(
    props.noDefaultClassName ? null : 'top-bar-title',
    props.className,
    generalClassNames(props)
  );

  return (
    <div {...props} className={className}/>
  );
};

TopBarTitle.propTypes = {
  ...GeneralPropTypes
};

/**
 * Top bar left sub-component.
 *
 * @param {Object} props
 * @returns {Object}
 */
export const TopBarLeft = props => {
  const className = createClassName(
    props.noDefaultClassName ? null : 'top-bar-left',
    props.className,
    generalClassNames(props)
  );

  return (
    <div {...props} className={className}/>
  );
};

TopBarLeft.propTypes = {
  ...GeneralPropTypes
};

/**
 * Top bar right sub-component.
 *
 * @param {Object} props
 * @returns {Object}
 */
export const TopBarRight = props => {
  const className = createClassName(
    props.noDefaultClassName ? null : 'top-bar-right',
    props.className,
    generalClassNames(props)
  );

  return (
    <div {...props} className={className}/>
  );
};

TopBarRight.propTypes = {
  ...GeneralPropTypes
};
","Generate the React code for a top bar component with title, left and right sections that can be used in a front-end application."
"import React, { Component } from 'react';
import { View } from 'react-native';

import { connectStyle } from '@shoutem/theme';
import variables from '../theme/variables/platform';
import mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';

class Badge extends Component {


  render() {
    return (
      <View ref={c => this._root = c} {...this.props}>
        {this.props.children}
      </View>
    );
  }

}


Badge.propTypes = {
  ...View.propTypes,
  style: React.PropTypes.object,
};

const StyledBadge = connectStyle('NativeBase.Badge', {}, mapPropsToStyleNames)(Badge);

export {
  StyledBadge as Badge,
};
","Generate the React Native code snippet for a simple Badge component, which is a view that can be used to display a small badge or label on the UI."
"import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { connect } from 'react-redux';
import ImmutablePureComponent from 'react-immutable-pure-component';
import { injectIntl } from 'react-intl';
import { setupListEditor, clearListSuggestions, resetListEditor } from '../../actions/lists';
import Account from './components/account';
import Search from './components/search';
import EditListForm from './components/edit_list_form';
import Motion from '../ui/util/optional_motion';
import spring from 'react-motion/lib/spring';

const mapStateToProps = state => ({
  accountIds: state.getIn(['listEditor', 'accounts', 'items']),
  searchAccountIds: state.getIn(['listEditor', 'suggestions', 'items']),
});

const mapDispatchToProps = dispatch => ({
  onInitialize: listId => dispatch(setupListEditor(listId)),
  onClear: () => dispatch(clearListSuggestions()),
  onReset: () => dispatch(resetListEditor()),
});

export default @connect(mapStateToProps, mapDispatchToProps)
@injectIntl
class ListEditor extends ImmutablePureComponent {

  static propTypes = {
    listId: PropTypes.string.isRequired,
    onClose: PropTypes.func.isRequired,
    intl: PropTypes.object.isRequired,
    onInitialize: PropTypes.func.isRequired,
    onClear: PropTypes.func.isRequired,
    onReset: PropTypes.func.isRequired,
    accountIds: ImmutablePropTypes.list.isRequired,
    searchAccountIds: ImmutablePropTypes.list.isRequired,
  };

  componentDidMount () {
    const { onInitialize, listId } = this.props;
    onInitialize(listId);
  }

  componentWillUnmount () {
    const { onReset } = this.props;
    onReset();
  }

  render () {
    const { accountIds, searchAccountIds, onClear } = this.props;
    const showSearch = searchAccountIds.size > 0;

    return (
      <div className='modal-root__modal list-editor'>
        <EditListForm />

        <Search />

        <div className='drawer__pager'>
          <div className='drawer__inner list-editor__accounts'>
            {accountIds.map(accountId => <Account key={accountId} accountId={accountId} added />)}
          </div>

          {showSearch && <div role='button' tabIndex='-1' className='drawer__backdrop' onClick={onClear} />}

          <Motion defaultStyle={{ x: -100 }} style={{ x: spring(showSearch ? 0 : -100, { stiffness: 210, damping: 20 }) }}>
            {({ x }) => (
              <div className='drawer__inner backdrop' style={{ transform: x === 0 ? null : `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>
                {searchAccountIds.map(accountId => <Account key={accountId} accountId={accountId} />)}
              </div>
            )}
          </Motion>
        </div>
      </div>
    );
  }

}
","            Provide a detailed description of a React component called ""ListEditor"" which integrates with Redux and React-Motion. This component should allow users to edit a list, search for accounts to add to the list, and manage the list's contents. Specify the component's props, state, and lifecycle methods, as well as any UI or visual aspects to include."
"import React, { Component } from 'react';
import { capitalize } from './../helpers';
import Button from './Button';
import ButtonsGroup from './ButtonsGroup';

export default class ProjectsFilter extends Component {
    constructor(props) {
        super(props);

        this.state = {
            types: this.getProjectsTypes(),
            tags: this.getProjectsTags()
        };
    }

    getProjectsTypes() {
        const { projects } = this.props;
        const typesFounded = [];

        projects.forEach((project) => {
            const { type } = project;

            if (typesFounded.indexOf(type) === -1) {
                typesFounded.push(type);
            }
        });

        const types = [{
            id: 'all',
            label: 'All'
        }];

        typesFounded.forEach((id) => {
            types.push({
                id,
                label: capitalize(id)
            });
        });

        return types;
    }

    getProjectsTags() { // To-do: Refactorize...
        const { projects } = this.props;
        const tagsFounded = [];
        const tagsMetadata = [];

        projects.forEach((project) => {
            const { tags: projectsTags } = project;

            if (projectsTags) {
                projectsTags.forEach((tag) => {
                    tagsFounded.push(tag);
                });
            }
        });

        tagsFounded.forEach((tag) => {
            const count = tagsFounded.reduce((i, value) => {
                return i + (value === tag);
            }, 0);

            tagsMetadata.push({
                name: tag,
                count
            });
        });

        const tagsFiltered = tagsMetadata.filter((tag, i, self) => {
            return self.findIndex((t) => {
                return t.name === tag.name;
            }) === i;
        });

        tagsFiltered.sort((a, b) => {
            if (a.count < b.count) {
                return 1;
            } else if (a.count > b.count) {
                return -1;
            }

            return 0;
        });

        return tagsFiltered;
    }

    render() {
        const { changeFilter, alignment, hideTags, filter } = this.props;
        const { types, tags } = this.state;

        const TypesBlock = () => {
            return (
                <ButtonsGroup headline=""Types"" alignment={alignment || 'left'} extraClasses=""types"">
                    {
                        types.map((type) => {
                            return (
                                <Button key={type.id} title={type.label} onClick={() => changeFilter(type.id, 'type')} extraClasses={type.id === filter.type ? 'selected' : null} />
                            );
                        })
                    }
                </ButtonsGroup>
            );
        };

        const TagsBlock = () => {
            if (hideTags) {
                return null;
            }

            return (
                <ButtonsGroup headline=""Tags"" alignment={alignment || 'left'} extraClasses=""tags"">
                    {
                        tags.map((tag) => {
                            return (
                                <Button key={tag.name} title={`${tag.name} (${tag.count}x)`} onClick={() => changeFilter(tag.name, 'tag')} extraClasses={tag.name === filter.tag ? 'selected' : null} />
                            );
                        })
                    }
                </ButtonsGroup>
            );
        };

        return (
            <div data-component=""ProjectsFilter"">
                <TypesBlock />
                <TagsBlock />

                <Button title=""Reset filter"" onClick={() => changeFilter('all', 'type')} />
            </div>
        );
    }
}
","Design a React component that lets users filter a list of projects by type or tag. The component should display a list of buttons for each type and tag, and allow users to select a single type or tag to filter the projects. Include a button to reset the filter to show all projects."
"/* eslint max-len: 0 */
import React from 'react';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';


const products = [];

function addProducts(quantity) {
  const startId = products.length;
  for (let i = 0; i < quantity; i++) {
    const id = startId + i;
    products.push({
      id: id,
      name: 'Item name ' + id,
      price: 2100 + i
    });
  }
}

addProducts(5);

export default class SimpleNavTable extends React.Component {
  render() {
    const selectRow = {
      mode: 'checkbox'
    };
    return (
      <BootstrapTable data={ products } selectRow={ selectRow } keyBoardNav>
          <TableHeaderColumn dataField='id' isKey={ true }>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
","Provide a React code snippet that utilizes the 'react-bootstrap-table' library to create a simple navigable table consisting of three columns: Product ID, Product Name, and Product Price. Populate the table with 5 sample products, where the product ID is an incrementing number, the product name is a string beginning with 'Item name', and the product price is an incrementing number starting from 2100. Include the necessary import statements and ensure that all data is rendered in a table format."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { intlShape } from 'react-intl';
import { Field, reduxForm } from 'redux-form';
import { TextField } from 'redux-form-material-ui';
import { AvatarImageField } from '../ReduxFormFields';
import ReactList from 'react-list';
import {List} from 'material-ui/List';
import Toggle from 'material-ui/Toggle';
import Subheader from 'material-ui/Subheader';

class UserForm extends Component {

  render() {
    const {
      handleSubmit,
      intl,
      initialized,
      uid,
      renderRoleItem,
      roles,
      handleAdminChange,
      isAdmin
    } = this.props;

    return (
      <form onSubmit={handleSubmit} style={{
        height: '100%',
        alignItems: 'strech',
        display: 'flex',
        flexWrap: 'wrap',
        justifyContent: 'flex-start'
      }}>
      <button type=""submit"" style={{display: 'none'}} />

      <div style={{marginLeft: -10}}>
        <AvatarImageField
          disabled={true}
          uid={uid}
          change={this.props.change}
          initialized={initialized}
          intl={intl}
          path={'users'}
        />

      </div>


      <div>
        <div>
          <Field
            name=""displayName""
            disabled={true}
            component={TextField}
            hintText={intl.formatMessage({id: 'name_hint'})}
            floatingLabelText={intl.formatMessage({id: 'name_label'})}
            ref=""displayName""
            withRef
          />
        </div>
        <div>
          <Field
            name=""email""
            disabled={true}
            component={TextField}
            hintText={intl.formatMessage({id: 'email_hint'})}
            floatingLabelText={intl.formatMessage({id: 'email_label'})}
            ref=""email""
            withRef
          />
        </div>

        <br/>

        <div>
          <Toggle
            label={intl.formatMessage({id: 'is_admin_label'})}
            toggled={isAdmin}
            onToggle={handleAdminChange}
          />
        </div>

      </div>

      <div>
        <Subheader>{intl.formatMessage({id: 'roles'})}</Subheader>
        <List style={{height: '100%'}} ref={(field) => { this.roles = field; }}>
          <ReactList
            itemRenderer={renderRoleItem}
            length={roles?roles.length:0}
            type='simple'
          />
        </List>
      </div>

    </form>
  );
}
}


UserForm.propTypes = {
  handleSubmit: PropTypes.func.isRequired,
  renderRoleItem: PropTypes.func.isRequired,
  renderTerminalNotifierItem: PropTypes.func.isRequired,
  handleAdminChange: PropTypes.func.isRequired,
  isAdmin: PropTypes.bool.isRequired,
  intl: intlShape.isRequired,
  initialized: PropTypes.bool.isRequired,
  setDialogIsOpen: PropTypes.any.isRequired,
  uid: PropTypes.string.isRequired,
};


export default reduxForm({form: 'user'})(UserForm);
","A React component that renders a form using Redux Form for editing a user profile. The form should include fields for display name, email, a toggle for admin status, and a list of user roles. The component should be able to handle form submission and display validation errors."
"import React from 'react';
import SvgIcon from '../../SvgIcon';

const ActionViewHeadline = (props) => (
  <SvgIcon {...props}>
    <path d=""M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z""/>
  </SvgIcon>
);
ActionViewHeadline.displayName = 'ActionViewHeadline';
ActionViewHeadline.muiName = 'SvgIcon';

export default ActionViewHeadline;
","Create a React component using a Material UI SVG Icon that displays the ""view headline"" icon. The component should include the necessary imports, styling, and metadata."
"import React, { Component } from 'react';
import { ScrollView, View, Text, Platform, Linking } from 'react-native';
import { Button, Card, Icon } from 'react-native-elements';
import { MapView } from 'expo';
import { connect } from 'react-redux';

class ReviewScreen extends Component {
  // static make it a property of the class and not the instance
  // React Navigation uses navigationOptions as configuration for the navigator
  static navigationOptions = ({ navigation }) => ({
    title: 'Review Jobs',
    tabBarIcon: ({ tintColor }) => <Icon name='favorite' size={30} color={tintColor} />,
    headerRight: (
      <Button
        title=""Settings""
        onPress={() => navigation.navigate('settings')}
        backgroundColor=""rgba(0,0,0,0)""
        color=""rgba(0,122,255,1)""
      />
    ),
    headerTitleStyle: {
      marginTop: (Platform.OS === 'andriod' ? 24 : 0)
    }
  });

  renderLikedJobs() {
    return this.props.likedJobs.map(job => {
      const {
        company, formattedRelativeTime, url,
        latitude, longitude, jobtitle, jobkey
      } = job;
      const initialRegion = {
        longitude,
        latitude,
        latitudeDelta: 0.045,
        longitudeDelta: 0.02
      };
      return (
        <Card title={jobtitle} key={jobkey}>
          <View style={{ height: 200 }}>
            <MapView
              style={{ flex: 1 }}
              cacheEnabled={Platform.OS === 'android'}
              scrollEnabled={false}
              initialRegion={initialRegion}
            />
            <View style={styles.detailWrapper}>
              <Text style={styles.italics}>{company}</Text>
              <Text style={styles.italics}>{formattedRelativeTime}</Text>
            </View>
            <Button
              title='Apply Now!'
              backgroundColor='#03A9F4'
              onPress={() => Linking.openURL(url)}
            />
          </View>
        </Card>
      );
    });
  }

  render() {
    return (
      <ScrollView>
        {this.renderLikedJobs()}
      </ScrollView>
    );
  }
}

const styles = {
  italics: {
    fontStyle: 'italic'
  },
  detailWrapper: {
    marginTop: 10,
    marginBottom: 10,
    flexDirection: 'row',
    justifyContent: 'space-around'
  }
};

function mapStateToProps(state) {
  return { likedJobs: state.likedJobs };
}

export default connect(mapStateToProps)(ReviewScreen);
","Create a functional React Native component that displays a list of job cards that includes details about each job's company, formatted relative time, location, and a button to apply to the job. Include navigation and styling options, such as a header title, tab bar icon, header right button, and custom styles."
"import React from 'react';
import Navigation from './Navigation';
import ComponentPage from './ComponentPage';
import componentData from '../../config/componentData';

export default class Docs extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      route: window.location.hash.substr(1)
    };
  }

  componentDidMount() {
    window.addEventListener('hashchange', () => {
      this.setState({route: window.location.hash.substr(1)})
    })
  }

  render() {
    const {route} = this.state;
    const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];

    return (
      <div>
        <Navigation components={componentData.map(component => component.name)} />
        <ComponentPage component={component} />
      </div>
    )
  }
}
","Create a React component that displays a navigation bar and a component page. The navigation bar should display a list of component names, and the component page should display information about the selected component. The component should update the displayed component when the URL hash changes."
"import React, { Component } from 'react';
import { connect } from 'react-redux';
import { asyncSetTodosFilter } from '../../actions/AppActions';

const FilterLink = ({
	active,
	children,
	onClick
}) => {
	if (active) {
		return <span>{children}</span>;
	};
	return (
		<a href='#'
			onClick={e => {
				e.preventDefault();
				onClick();
			}}
		>
			{children}
		</a>
	);
};

const mapStateToProps = (
	state,
	props
) => {
	return {
		active: props.filter === state.todosFilterReducer
	};
};

const mapDispatchToProps = (
	dispatch,
	props
) => {
	return {
		onClick: () => {
			dispatch(asyncSetTodosFilter(props.filter));
		}
	};
};

export default connect(
	mapStateToProps,
	mapDispatchToProps
)(FilterLink);",Create a React component that shows a link that can set the value of a Redux state key when clicked. The 'active' styles of the component depend on whether the link is clicked.
"import React from 'react';

const ColorBlock = React.forwardRef(
  (
    {
      block, // eslint-disable-line no-unused-vars
      blockProps, // eslint-disable-line no-unused-vars
      customStyleMap, // eslint-disable-line no-unused-vars
      customStyleFn, // eslint-disable-line no-unused-vars
      decorator, // eslint-disable-line no-unused-vars
      forceSelection, // eslint-disable-line no-unused-vars
      offsetKey, // eslint-disable-line no-unused-vars
      selection, // eslint-disable-line no-unused-vars
      tree, // eslint-disable-line no-unused-vars
      contentState, // eslint-disable-line no-unused-vars
      blockStyleFn, // eslint-disable-line no-unused-vars
      preventScroll, // eslint-disable-line no-unused-vars
      style,
      ...elementProps
    },
    ref
  ) => (
    <div
      ref={ref}
      {...elementProps}
      style={{ width: 200, height: 80, backgroundColor: '#9bc0c7', ...style }}
    />
  )
);

const createColorBlockPlugin = (config = {}) => {
  const component = config.decorator
    ? config.decorator(ColorBlock)
    : ColorBlock;
  return {
    blockRendererFn: (block, { getEditorState }) => {
      if (block.getType() === 'atomic') {
        const contentState = getEditorState().getCurrentContent();
        const entity = contentState.getEntity(block.getEntityAt(0));
        const type = entity.getType();
        if (type === 'colorBlock') {
          return {
            component,
            editable: false,
          };
        }
      }
      return null;
    },
  };
};
ColorBlock.displayName = 'ColorBlock';
export default createColorBlockPlugin;
","Create a React component that renders a colored block within a rich text editor. The block should be 200px wide, 80px high, and have a light blue background."
"import React, { Component } from 'react';
import {
    View,
    Text,
    StyleSheet,
    TouchableOpacity,
    TouchableHighlight,
    Image,
    Platform
} from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import Video from 'react-native-video';

class VideoButton extends Component {

    _tappedWatchVideo() {
        this.props.tappedWatch(this.props.setID, this.props.videoFileURL);
    }

    _tappedRecord() {
        this.props.tappedRecord(this.props.setID);
    }

    _tappedCommentary() {
        this.props.tappedCommentary(this.props.setID);
    }

    render() {
        switch (this.props.mode) {
            case 'record':
                return (
                    <TouchableOpacity style={{paddingLeft: 5}} onPress={()=> this._tappedRecord()}>
                        <View style={[{flex:1, flexDirection:'column'}, styles.button, styles.activeButton]}>
                            <Icon name=""camera"" size={20} color='rgba(47, 128, 227, 1)' style={{marginTop: 10, marginBottom: 5}} />
                            <Text style={styles.activeText}>Record</Text>
                            <Text style={styles.activeText}>Video</Text>
                        </View>
                    </TouchableOpacity>
                );
            case 'commentary':
                return (
                    <View style={{paddingLeft: 5}}>
                        <View style={[{flex:1}, styles.button, styles.grayButton]}>
                            <TouchableHighlight onPress={()=> this._tappedCommentary()} underlayColor='#e0e0e0'>
                                <View style={[styles.buttonContent, {flex:1, flexDirection:'column'}]}>
                                    <Icon name=""camera"" size={20} color='gray' style={{marginTop: 10, marginBottom: 5}} />
                                    <Text style={styles.grayText}>Add</Text>
                                    <Text style={styles.grayText}>Video Log</Text>
                                </View>
                            </TouchableHighlight>
                        </View>
                    </View>
                );
            case 'watch':
                // TODO: see if can make this a true image preview instead of a full video
                // probably requires RCTCameraRoll
                if (Platform.OS === 'ios') {
                    if (!this.props.videoFileURL) {
                        return (
                            <TouchableOpacity style={styles.videoButtonContainer} onPress={()=> this.props.tappedWatch(this.props.setID, this.props.videoFileURL) }>
                                <View style={styles.videoButton}>
                                </View>
                            </TouchableOpacity>
                        );
                    } else {
                        return (
                            <TouchableOpacity style={{paddingLeft: 5}} onPress={()=> this._tappedWatchVideo() }>
                                <View style={[{flex: 1}, styles.button, styles.blackButton]}>
                                    <Video
                                        ref={(ref) => {
                                            this.player = ref
                                        }}
                                        style={styles.button}
                                        source={{uri: this.props.videoFileURL}}
                                        paused={true}
                                        repeat={true}
                                    />
                                </View>
                            </TouchableOpacity>
                        );
                    }
                } else {
                    return (
                        <TouchableOpacity style={{paddingLeft: 5}} onPress={()=> this._tappedWatchVideo() }>
                            <View style={[styles.button, styles.blackButton]}>
                                <Image
                                    style={[{flex:1, flexDirection:'column'}, styles.imagePreview]}
                                    source={{uri: this.props.videoFileURL}} />
                            </View>
                        </TouchableOpacity>
                    );
                }
            default:
                console.tron.log(""video button props failed with mode "" + this.props.mode);
                return null;
        }
    }
}

const styles = StyleSheet.create({
    button: {
        width: 75,
        height: 75,
        alignItems: 'center',
        justifyContent: 'center',
        borderWidth: 5,
        borderRadius: 5,
    },
    buttonContent: {
        width: 65,
        height: 75,
        alignItems: 'center',
        justifyContent: 'center',
    },
    imagePreview: {
        width: 75,
        height: 75,
    },
    activeButton: {
        backgroundColor: 'rgba(176, 208, 252, 1)',
        borderColor: 'rgba(176, 208, 252, 1)',
    },
    grayButton: {
        backgroundColor: 'rgba(239, 239, 239, 1)',
        borderColor: 'rgba(239, 239, 239, 1)',
    },
    blackButton: {
        backgroundColor: 'black',
        borderColor: 'black',
    },
    activeText: {
        color: 'rgba(47, 128, 227, 1)',
        fontSize: 11,
        fontWeight: '500'
    },
    grayText: {
        color: 'rgba(77, 77, 77, 1)',
        fontSize: 11
    },
});

export default VideoButton;
","Describe a react functional component that renders a button that can show one of three states: record video, add commentary, or watch video."
"import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import StatusContainer from '../../../containers/status_container';
import AccountContainer from '../../../containers/account_container';
import { FormattedMessage } from 'react-intl';
import Permalink from '../../../components/permalink';
import ImmutablePureComponent from 'react-immutable-pure-component';
import { HotKeys } from 'react-hotkeys';

export default class Notification extends ImmutablePureComponent {

  static contextTypes = {
    router: PropTypes.object,
  };

  static propTypes = {
    notification: ImmutablePropTypes.map.isRequired,
    hidden: PropTypes.bool,
    onMoveUp: PropTypes.func.isRequired,
    onMoveDown: PropTypes.func.isRequired,
    onMention: PropTypes.func.isRequired,
  };

  handleMoveUp = () => {
    const { notification, onMoveUp } = this.props;
    onMoveUp(notification.get('id'));
  }

  handleMoveDown = () => {
    const { notification, onMoveDown } = this.props;
    onMoveDown(notification.get('id'));
  }

  handleOpen = () => {
    const { notification } = this.props;

    if (notification.get('status')) {
      this.context.router.history.push(`/statuses/${notification.get('status')}`);
    } else {
      this.handleOpenProfile();
    }
  }

  handleOpenProfile = () => {
    const { notification } = this.props;
    this.context.router.history.push(`/accounts/${notification.getIn(['account', 'id'])}`);
  }

  handleMention = e => {
    e.preventDefault();

    const { notification, onMention } = this.props;
    onMention(notification.get('account'), this.context.router.history);
  }

  getHandlers () {
    return {
      moveUp: this.handleMoveUp,
      moveDown: this.handleMoveDown,
      open: this.handleOpen,
      openProfile: this.handleOpenProfile,
      mention: this.handleMention,
      reply: this.handleMention,
    };
  }

  renderFollow (account, link) {
    return (
      <HotKeys handlers={this.getHandlers()}>
        <div className='notification notification-follow focusable' tabIndex='0'>
          <div className='notification__message'>
            <div className='notification__favourite-icon-wrapper'>
              <i className='fa fa-fw fa-user-plus' />
            </div>

            <FormattedMessage id='notification.follow' defaultMessage='{name} followed you' values={{ name: link }} />
          </div>

          <AccountContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />
        </div>
      </HotKeys>
    );
  }

  renderMention (notification) {
    return (
      <StatusContainer
        id={notification.get('status')}
        withDismiss
        hidden={this.props.hidden}
        onMoveDown={this.handleMoveDown}
        onMoveUp={this.handleMoveUp}
      />
    );
  }

  renderFavourite (notification, link) {
    return (
      <HotKeys handlers={this.getHandlers()}>
        <div className='notification notification-favourite focusable' tabIndex='0'>
          <div className='notification__message'>
            <div className='notification__favourite-icon-wrapper'>
              <i className='fa fa-fw fa-star star-icon' />
            </div>
            <FormattedMessage id='notification.favourite' defaultMessage='{name} favourited your status' values={{ name: link }} />
          </div>

          <StatusContainer id={notification.get('status')} account={notification.get('account')} muted withDismiss hidden={!!this.props.hidden} />
        </div>
      </HotKeys>
    );
  }

  renderReblog (notification, link) {
    return (
      <HotKeys handlers={this.getHandlers()}>
        <div className='notification notification-reblog focusable' tabIndex='0'>
          <div className='notification__message'>
            <div className='notification__favourite-icon-wrapper'>
              <i className='fa fa-fw fa-retweet' />
            </div>
            <FormattedMessage id='notification.reblog' defaultMessage='{name} boosted your status' values={{ name: link }} />
          </div>

          <StatusContainer id={notification.get('status')} account={notification.get('account')} muted withDismiss hidden={this.props.hidden} />
        </div>
      </HotKeys>
    );
  }

  render () {
    const { notification } = this.props;
    const account          = notification.get('account');
    const displayNameHtml  = { __html: account.get('display_name_html') };
    const link             = <bdi><Permalink className='notification__display-name' href={account.get('url')} title={account.get('acct')} to={`/accounts/${account.get('id')}`} dangerouslySetInnerHTML={displayNameHtml} /></bdi>;

    switch(notification.get('type')) {
    case 'follow':
      return this.renderFollow(account, link);
    case 'mention':
      return this.renderMention(notification);
    case 'favourite':
      return this.renderFavourite(notification, link);
    case 'reblog':
      return this.renderReblog(notification, link);
    }

    return null;
  }

}
","Generate the React component code that displays a notification. The component should support different types of notifications, such as follows, mentions, favourites, and reblogs. It should have the ability to handle keyboard shortcuts for moving up and down, opening the notification, and opening the user profile. It should also have the ability to mention the user who sent the notification."
"/* eslint-disable react/jsx-indent */
import React from 'react';
import { compose, withState, withProps } from 'recompose';
import { withModel } from 'ui/utils/hocs';
import { Map, List, fromJS } from 'immutable';
import classNames from 'classnames';
import styled from 'styled-components';
import ValidationList from 'ui/components/ValidationList';
import Checkbox from 'ui/components/Material/Checkbox';
import uuid from 'uuid';
import { validatePasswordUtil } from 'lib/utils/validators/User';
import { connect } from 'react-redux';
import {
  hasScopeSelector,
  loggedInUserId as loggedInUserIdSelector
} from 'ui/redux/modules/auth';
import { SITE_ADMIN } from 'lib/constants/scopes';

const VerifiedIcon = styled.i`
  margin-left: 1em;
  ${props => props.isVerified && 'color: green;' || 'color: red;'}
`;

const changeModelAttr = (updateModel, model, attr) => value =>
  updateModel({ path: [attr], value });

const onChangeModelAttr = (updateModel, model) => attr => e =>
  changeModelAttr(updateModel, model, attr)(e.target.value);

const onPasswordCheckboxChange = (updateModel, model, setChangePasswordChecked) => (checkedAttr) => {
  if (!checkedAttr) {
    updateModel({ path: ['password'], value: '' });
    updateModel({ path: ['passwordConfirmation'], value: '' });
  }
  setChangePasswordChecked(checkedAttr);
};

const renderVerified = (model) => {
  const verifiedId = uuid.v4();
  const isVerified = model.get('verified');

  return (
    <div className=""form-group"">
      <label htmlFor={verifiedId} className=""control-label"">Verified:</label>
      <span id={verifiedId}>
        <VerifiedIcon
          isVerified={isVerified}
          className={`icon ${isVerified ? 'ion-checkmark' : 'ion-close'}`} />
      </span>
    </div>
  );
};

const renderName = (model, onChangeAttr) => {
  const nameId = uuid.v4();
  return (
    <div className=""form-group"">
      <label htmlFor={nameId} className=""control-label"">Name</label>
      <input
        id={nameId}
        className=""form-control""
        placeholder=""Name""
        value={model.get('name', '')}
        onChange={onChangeAttr('name')} />
    </div>
  );
};

const renderEmail = (model, onChangeAttr, isSiteAdmin) => {
  const emailId = uuid.v4();
  return (
    <div
      className={classNames({
        'form-group': true,
        'has-error': model.getIn(['errors', 'messages', 'email'], false)
      })} >
      <label htmlFor={emailId} className=""control-label"">Email</label>
      <input
        id={emailId}
        className=""form-control""
        disabled={model.has('googleId') || !isSiteAdmin}
        placeholder=""E-Mail""
        value={model.get('email', '')}
        onChange={onChangeAttr('email')} />
      {model.getIn(['errors', 'messages', 'email'], false) &&
        (<span className=""help-block"">
          <ValidationList errors={model.getIn(['errors', 'messages', 'email'])} />
        </span>)
      }
    </div>
  );
};

const renderPasswordChanges = (model, onCheck, changePasswordChecked) => {
  const passwordId = uuid.v4();
  return (
    <div className=""form-group"">
      <label htmlFor={passwordId}>Password</label>
      <div id={passwordId}>
        {model.get('verified') ? (
          <Checkbox
            key=""change-password""
            checked={changePasswordChecked}
            label=""Change password""
            onChange={onCheck} />
        ) : (
            <p className=""help-block"">Set a valid password in order to verify this user</p>
          )}
      </div>
    </div>
  );
};

const renderPassword = (password, setPassword, passwordGroupClasses, passwordErrors) => {
  const passwordId = uuid.v4();
  return (
    <div className={passwordGroupClasses}>
      <label htmlFor={passwordId} className=""control-label"">Password</label>
      <input
        id={passwordId}
        className=""form-control""
        placeholder=""Password""
        autoComplete=""false""
        type=""password""
        value={password}
        onChange={event => setPassword(event.target.value)} />
      {!passwordErrors.isEmpty() && (
        <span className=""help-block"">
          <ValidationList errors={passwordErrors} />
        </span>
      )}
    </div>
  );
};

const renderPasswordConfirmation = (passwordConfirmation, setPasswordConfirmation, passwordGroupClasses) => {
  const confirmationId = uuid.v4();
  return (
    <div className={passwordGroupClasses}>
      <label htmlFor={confirmationId} className=""control-label"">Confirm Password</label>
      <input
        id={confirmationId}
        className=""form-control""
        placeholder=""Confirm Password""
        autoComplete=""false""
        type=""password""
        value={passwordConfirmation}
        onChange={event => setPasswordConfirmation(event.target.value)} />
    </div>
  );
};

const validatePassword = (password, passwordConfirmation, ownerOrganisationSettings) => {
  if (password.length > 0) {
    const passwordValidation = validatePasswordUtil(password, ownerOrganisationSettings);
    const messages = passwordValidation.messages || [];

    if (password !== passwordConfirmation) {
      messages.push('Password confirmation does not match');
    }

    return fromJS(messages);
  }
  return new List();
};

const changeModelPassword = (
  saveModel, model, password, setPassword, setPasswordConfirmation
) => () => {
  saveModel({ attrs: new Map({ password }) });
  setPassword('');
  setPasswordConfirmation('');
};

const UserForm = ({
  model = new Map(),
  changePasswordChecked,
  updateModel,
  saveModel,
  setChangePasswordChecked,
  password,
  setPassword,
  passwordConfirmation,
  setPasswordConfirmation,
  isSiteAdmin,
  loggedInUserId
}) => {
  const ownerOrganisationSettings = model.get('ownerOrganisationSettings', new Map()).toJS();

  // Set password input-visible and change-password checked states
  const serverErrors = model.getIn(['errors', 'messages', 'password'], new List());
  const passwordErrors = validatePassword(
    password, passwordConfirmation, ownerOrganisationSettings
  ).concat(password === '' ? serverErrors : new List());
  const hasPasswordErrors = !passwordErrors.isEmpty();
  const canChangePassword =
    (changePasswordChecked || hasPasswordErrors);
  const isAuthorisedToChangePassword = (
    isSiteAdmin ||
    model.get('_id') === loggedInUserId
  );
  const passwordInputsVisible = isAuthorisedToChangePassword && (!model.get('verified') || canChangePassword);
  const passwordGroupClasses = classNames({
    'form-group': true,
    'has-error': hasPasswordErrors
  });
  const onChangeAttr = onChangeModelAttr(updateModel, model);
  const cantSetPassword = password === '' || hasPasswordErrors;

  return (
    <div className=""row"">
      <div className=""col-md-12"" >

        {renderVerified(model)}
        {renderName(model, onChangeAttr)}
        {renderEmail(model, onChangeAttr, isSiteAdmin)}
        {isAuthorisedToChangePassword && renderPasswordChanges(model, onPasswordCheckboxChange(updateModel, model, setChangePasswordChecked), canChangePassword)}

        {passwordInputsVisible && (
          <div className=""form-group"">
            {renderPassword(password, setPassword, passwordGroupClasses, passwordErrors)}
            {renderPasswordConfirmation(passwordConfirmation, setPasswordConfirmation, passwordGroupClasses)}
            <button
              className=""btn btn-primary btn-sm""
              disabled={cantSetPassword}
              onClick={changeModelPassword(
                saveModel,
                model,
                password,
                setPassword,
                setPasswordConfirmation
              )}>
              <i className=""ion ion-checkmark"" /><span> Set Password</span>
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default compose(
  withState('changePasswordChecked', 'setChangePasswordChecked', false),
  withState('password', 'setPassword', ''),
  withState('passwordConfirmation', 'setPasswordConfirmation', ''),
  withProps(({ model }) => ({
    schema: 'user',
    id: model.get('_id')
  })),
  connect(state => ({
    isSiteAdmin: hasScopeSelector(SITE_ADMIN)(state),
    loggedInUserId: loggedInUserIdSelector(state)
  })),
  withModel
)(UserForm);
","Generate a React component that takes a User model as props, allows editing of the user's name, email, and password (if the user is verified or an admin), and shows a verified icon if the user is verified. The component should use the recompose library for state management and the styled-components library for styling."
"/* eslint camelcase: 0, no-underscore-dangle: 0 */

import React from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import TextField from 'material-ui/TextField';
import RaisedButton from 'material-ui/RaisedButton';
import Paper from 'material-ui/Paper';

import * as actionCreators from '../actions/auth';

import { validateEmail } from '../utils/misc';

function mapStateToProps(state) {
    return {
        isRegistering: state.auth.isRegistering,
        registerStatusText: state.auth.registerStatusText,
    };
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreators, dispatch);
}

const style = {
    marginTop: 50,
    paddingBottom: 50,
    paddingTop: 25,
    width: '100%',
    textAlign: 'center',
    display: 'inline-block',
};

@connect(mapStateToProps, mapDispatchToProps)
export default class RegisterView extends React.Component {

    constructor(props) {
        super(props);
        const redirectRoute = '/login';
        this.state = {
            email: '',
            password: '',
            email_error_text: null,
            password_error_text: null,
            redirectTo: redirectRoute,
            disabled: true,
        };
    }

    isDisabled() {
        let email_is_valid = false;
        let password_is_valid = false;

        if (this.state.email === '') {
            this.setState({
                email_error_text: null,
            });
        } else if (validateEmail(this.state.email)) {
            email_is_valid = true;
            this.setState({
                email_error_text: null,
            });

        } else {
            this.setState({
                email_error_text: 'Sorry, this is not a valid email',
            });
        }

        if (this.state.password === '' || !this.state.password) {
            this.setState({
                password_error_text: null,
            });
        } else if (this.state.password.length >= 6) {
            password_is_valid = true;
            this.setState({
                password_error_text: null,
            });
        } else {
            this.setState({
                password_error_text: 'Your password must be at least 6 characters',
            });

        }

        if (email_is_valid && password_is_valid) {
            this.setState({
                disabled: false,
            });
        }

    }

    changeValue(e, type) {
        const value = e.target.value;
        const next_state = {};
        next_state[type] = value;
        this.setState(next_state, () => {
            this.isDisabled();
        });
    }

    _handleKeyPress(e) {
        if (e.key === 'Enter') {
            if (!this.state.disabled) {
                this.login(e);
            }
        }
    }

    login(e) {
        e.preventDefault();
        this.props.registerUser(this.state.email, this.state.password, this.state.redirectTo);
    }

    render() {
        return (
            <div className=""col-md-6 col-md-offset-3"" onKeyPress={(e) => this._handleKeyPress(e)}>
                <Paper style={style}>
                    <div className=""text-center"">
                        <h2>Register to view protected content!</h2>
                        {
                            this.props.registerStatusText &&
                                <div className=""alert alert-info"">
                                    {this.props.registerStatusText}
                                </div>
                        }

                        <div className=""col-md-12"">
                            <TextField
                              hintText=""Email""
                              floatingLabelText=""Email""
                              type=""email""
                              errorText={this.state.email_error_text}
                              onChange={(e) => this.changeValue(e, 'email')}
                            />
                        </div>
                        <div className=""col-md-12"">
                            <TextField
                              hintText=""Password""
                              floatingLabelText=""Password""
                              type=""password""
                              errorText={this.state.password_error_text}
                              onChange={(e) => this.changeValue(e, 'password')}
                            />
                        </div>

                        <RaisedButton
                          disabled={this.state.disabled}
                          style={{ marginTop: 50 }}
                          label=""Submit""
                          onClick={(e) => this.login(e)}
                        />

                    </div>
                </Paper>

            </div>
        );

    }
}

RegisterView.propTypes = {
    registerUser: React.PropTypes.func,
    registerStatusText: React.PropTypes.string,
};
","Create a registration form with a Material UI theme, that validates email and password. On submit, it calls the `registerUser` method from Redux, passing email and password as arguments."
"// https://jsbin.com/yiboxe/edit?js,output

import React from 'react';
import ReactDOM from 'react-dom';
class App extends React.Component {
  constructor(){
    super();
    this.state = {
      red: 0
    }
    this.update = this.update.bind(this)
  }
  update(e){
    this.setState({
      red: ReactDOM.findDOMNode(this.refs.red.refs.inp).value
    })
  }
  render(){
    return (
      <div>
        <NumInput
          ref=""red""
          min={0}
          max={255}
          step={0.01}
          val={+this.state.red}
          label=""Red""
          update={this.update} />
      </div>
    );
  }
}

class NumInput extends React.Component {
  render(){
    let label = this.props.label !== '' ?
      <label>{this.props.label} -  {this.props.val}</label> : ''
    return (
        <div>
        <input ref=""inp""
          type={this.props.type}
          min={this.props.min}
          max={this.props.max}
          step={this.props.step}
          defaultValue={this.props.val}
          onChange={this.props.update} />
          {label}
        </div>
    );
  }
}

NumInput.propTypes = {
  min: React.PropTypes.number,
  max: React.PropTypes.number,
  step: React.PropTypes.number,
  val: React.PropTypes.number,
  label: React.PropTypes.string,
  update: React.PropTypes.func.isRequired,
  type: React.PropTypes.oneOf(['number', 'range'])
}

NumInput.defaultProps = {
  min: 0,
  max: 0,
  step: 1,
  val: 0,
  label: '',
  type: 'range'
}


export default App
","Create a React component called `NumInput` that takes in the following props: min, max, step, val, label, update, and type. This component should be used to create a range input field with a label that displays the current value of the input. The update prop should be a function that is called whenever the value of the input changes."
"// @flow
import React from 'react';
import { withLocalize, Translate } from 'react-localize-redux';
import '../Main.css';

class Movies extends React.Component<any, any> {
  constructor(props) {
    super(props);

    this.state = {
      name: ''
    };

    this.addTranslationsForActiveLanguage();
  }

  componentDidUpdate(prevProps, prevState) {
    const hasActiveLanguageChanged =
      prevProps.activeLanguage !== this.props.activeLanguage;

    if (hasActiveLanguageChanged) {
      this.addTranslationsForActiveLanguage();
    }
  }

  addTranslationsForActiveLanguage() {
    const { activeLanguage } = this.props;

    if (!activeLanguage) {
      return;
    }

    import(`../translations/${activeLanguage.code}.movies.json`).then(
      translations => {
        this.props.addTranslationForLanguage(translations, activeLanguage.code);
      }
    );

    import(`../translations/${
      activeLanguage.code
    }.seed-translations.json`).then(translations => {
      this.props.addTranslationForLanguage(translations, activeLanguage.code);
    });
  }

  render() {
    return (
      <div className=""content"">
        In this section the following features are demostrated:
        <ul>
          <li>Splitting translation data by language</li>
          <li>Dynamically load translation data based on active language</li>
          <li>Using Translate component with and without children</li>
          <li>Using translation data with placeholders</li>
          <li>Adding localize props using withLocalize HOC</li>
        </ul>
        <div>
          <label>Enter Name:</label>
          <input
            type=""text""
            value={this.state.name}
            onChange={e => this.setState({ name: e.target.value })}
          />
        </div>
        <Translate tester=""sdfsdfsf"" />
        <h2>
          <Translate id=""greeting"" data={{ name: this.state.name }}>
            {'Welcome ${name}!'}
          </Translate>
        </h2>
        {[1, 2].map(item => (
          <div key={item}>
            <h3>
              <Translate id={`movie${item}.title`} />
            </h3>
            <p>
              <Translate id={`movie${item}.description`} />
            </p>
          </div>
        ))}
      </div>
    );
  }
}

export default withLocalize(Movies);
","Use react-localize-redux to localize a React component named ""Movies"". Allow the user to change their name, and display a greeting message that uses the user's name. Split the translation data by language and dynamically load it based on the active language, demonstrate placeholder usage and translate elements with and without children. Add localize props using the withLocalize HOC."
"import React from 'react';
import { QueryRenderer, graphql } from 'react-relay/compat';
import Relay from 'react-relay/classic';
import ProjectsComponent from './ProjectsComponent';

const renderQuery = ({ error, props }) => {
  if (!error && props) {
    return (
      <ProjectsComponent
        team={props.team}
        projects={props.team.projects.edges.map(p => p.node)}
        projectGroups={props.team.project_groups.edges.map(pg => pg.node)}
        savedSearches={props.team.saved_searches.edges.map(ss => ss.node)}
      />
    );
  }

  // TODO: We need a better error handling in the future, standardized with other components
  return null;
};

const Projects = () => {
  const teamSlug = window.location.pathname.match(/^\/([^/]+)/)[1];

  // Not in a team context
  if (teamSlug === 'check') {
    return null;
  }

  return (
    <QueryRenderer
      environment={Relay.Store}
      query={graphql`
        query ProjectsQuery($teamSlug: String!) {
          team(slug: $teamSlug) {
            dbid
            slug
            medias_count
            permissions
            get_trends_enabled
            smooch_bot: team_bot_installation(bot_identifier: ""smooch"") {
              id
            }
            fetch_bot: team_bot_installation(bot_identifier: ""fetch"") {
              id
            }
            alegre_bot: team_bot_installation(bot_identifier: ""alegre"") {
              id
              alegre_settings
            }
            projects(first: 10000) {
              edges {
                node {
                  id
                  dbid
                  title
                  medias_count
                  project_group_id
                }
              }
            }
            project_groups(first: 10000) {
              edges {
                node {
                  id
                  dbid
                  title
                  medias_count
                }
              }
            }
            saved_searches(first: 10000) {
              edges {
                node {
                  id
                  dbid
                  title
                  filters
                }
              }
            }
          }
        }
      `}
      variables={{
        teamSlug,
      }}
      render={renderQuery}
    />
  );
};

export default Projects;
","Generate the React code for a component that displays a list of projects, project groups, and saved searches for a specific team. The data for the component should be fetched using a GraphQL query to the Relay Modern library, and the component should render the data using the ProjectsComponent component."
"import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { filterTable } from '../actions';
import ProductTable from '../components/ProductTable';
import { filterableTable } from '../styles/filterableTable.scss';

const FilterableTable = ({ filter, onFilter }) => {
    let input;

    return (
        <div className={filterableTable}>
            <input
                value={filter}
                ref={node => {input = node;}}
                onChange={() => onFilter(input.value)} />

            <ProductTable filter={filter} />
        </div>
    );
};

FilterableTable.propTypes = {
    filter: PropTypes.string,
    onFilter: PropTypes.func
};

const mapStateToProps = (state) => {
    return {
        filter: state.filter
    };
};

const mapDispatchToProps = (dispatch) => {
    return {
        onFilter: filterText => dispatch(filterTable(filterText))
    };
};

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(FilterableTable);
","Generate a React class component called FilterableTable that connects to a Redux store to read a filterText state property. The class component must:
- display an HTML input element that allows a user to type in.
- when a user types into the input, it dispatches a filterTable action creator to update the filterText state property.
- renders a ProductTable component with the filtered text."
"/* eslint react/prefer-es6-class: 0 */

import React from 'react';
import Formsy from 'formsy-react';
import ColorPicker from './ColorPicker';

const FormsyColorPicker = React.createClass({

  mixins: [Formsy.Mixin],

  changeValue(color) {
    this.setValue(color);
  },

  render() {
    return (
      <div>
        <ColorPicker onChange={this.changeValue}/>
      </div>
    );
  }
});

export default FormsyColorPicker;
","Create a React component that wraps a color picker and connects it to Formsy for form validation. The component should allow the user to select a color using the color picker, and the selected color should be reflected in the form data."
"import React from 'react';

export default class SparklinesLine extends React.Component {

    static propTypes = {
        color: React.PropTypes.string,
        style: React.PropTypes.object
    };

    static defaultProps = {
        style: {}
    };

    render() {
        const { points, width, height, margin, color, style } = this.props;

        const linePoints = points
            .map((p) => [p.x, p.y])
            .reduce((a, b) => a.concat(b));
        const closePolyPoints = [
            points[points.length - 1].x, height - margin,
            margin, height - margin,
            margin, points[0].y
        ];
        const fillPoints = linePoints.concat(closePolyPoints);

        const lineStyle = {
            stroke: color || style.stroke || 'slategray',
            strokeWidth: style.strokeWidth || '1',
            strokeLinejoin: style.strokeLinejoin || 'round',
            strokeLinecap: style.strokeLinecap || 'round',
            fill: 'none'
        };
        const fillStyle = {
            stroke: style.stroke || 'none',
            strokeWidth: '0',
            fillOpacity: style.fillOpacity || '.1',
            fill: color || style.fill || 'slategray'
        };

        return (
            <g>
                <polyline points={fillPoints.join(' ')} style={fillStyle} />
                <polyline points={linePoints.join(' ')} style={lineStyle} />
            </g>
        )
    }
}
",Create a React component to display a sparkline line chart. The line should have a color and style that is customizable. The chart should also be able to display a filled area underneath the line.
"import React from 'react'
import R from 'ramda'

import { connect } from 'react-redux'

// todo: refactoring

const notNum = node => !R.defaultTo(false)(parseInt(node))


export const arrayFromString = s =>
  R.filter(R.identity,
    R.replace(/\]/g, '',
      R.replace(/\[/g, '.', s)
    ).split('.')
  )

const normalizeLensPath = lp => (typeof lp === 'string') ? arrayFromString(lp) : lp


export const asyncLensFamily = url => lensPathPrefix => lensPaths => ([])



export const lensFamily = lensPathPrefix => lensPaths =>
  lensPaths.map(lp => R.concat(normalizeLensPath(lensPathPrefix), normalizeLensPath(lp)))


const prettyPath = path => {
  const withNums = path.map(
    pathNode => {
      return notNum(pathNode) ? pathNode : `[${parseInt(pathNode)}]`
    }
  )
  .join('.')

  const withFixedLeftBrackets = R.replace(/\.\[/g, '[', withNums)
  const withFixedRightBrackets = R.replace(/\]\.\[/g, ']', withFixedLeftBrackets)

  return withFixedRightBrackets
}


const normalizedName = path => {
  if (notNum(path[path.length - 1])) {
    return path[path.length - 1]
  }

  const noNumPath = path.filter(node => notNum(node))
  return noNumPath[noNumPath.length - 1]
}


//todo: rename me
const mapLenses = (lensPaths, state) =>{
  const mappedLensPath = lensPaths.map(lensPath => {
      const lens = R.lensPath(lensPath)
      const view = R.view(lens, state)
      const path = normalizeLensPath(lensPath)
      return { [`${normalizedName(path)}`]: view }
  })
  return R.mergeAll(mappedLensPath)
}


export const viewLensFamilies = lensFamilies => (state, ownProps) =>
  R.mergeAll(lensFamilies.map(family => mapLenses(family, state)))


export const viewLenses = lensPaths => (state, ownProps) =>
  mapLenses(lensPaths, state)


export const lensAction = (lensPath, newVal) => ({
  type: `LENS-UPDATE: ${prettyPath(lensPath)}`,
  lensPath,
  newVal,
})


const capitalize = node =>
  node.substr(0, 1).toUpperCase() + node.substr(1)


export const lensRequest = dispatch => ({ path, url, method='GET', body={} }) => {
  const lensPath = normalizeLensPath(path)
  const requestFunc = async (getState) => {
    dispatch({
      type: `LENS-REQUEST-STARTED: ${prettyPath(lensPath)}`,
      lensPath,
      url,
      newVal: { loading: true, finished: false },
    })


    try {
      const response = await fetch(url, { method, body })
      const json = await response.json()
      dispatch({ type: `LENS-REQUEST-RECEIVED: ${prettyPath(lensPath)}`, lensPath, newVal: { loading: false, finished: true, value: json } })
    } catch (e) {
      dispatch({ type: `LENS-REQUEST-RECEIVED: ${prettyPath(lensPath)}`, lensPath, newVal: { loading: false, finished: true, error: e.message } })
    }
  }

  const name = capitalize(normalizedName(normalizeLensPath(lensPath)))

  return ({
    [`request${name}`]: requestFunc
  })

}



export const lensReducer = (reducer=R.identity) => (state = {}, action) => {

  const lens = R.lensPath(action.lensPath)

  if (action.type.startsWith('LENS-UPDATE')           ||
      action.type.startsWith('LENS-REQUEST-RECEIVED') ||
      action.type.startsWith('LENS-REQUEST-STARTED')) {

    return R.set(lens, action.newVal, state)
  }

  return reducer(state)
}


const dispatchFromLens = dispatch => lensPath => ({
  [`set${capitalize(normalizedName(lensPath))}`]: (value) => dispatch(lensAction(lensPath, value)),
})


// todo: refactor me, sheesh
const generateLensDispatches = (lensFamilies, dispatch) => {
  const dispatches =
    R.mergeAll(
      lensFamilies.map(fam =>
        R.mergeAll( fam.map(dispatchFromLens(dispatch)) ))
    )
  return dispatches
}


const mergeProps = (stateProps, dispatchProps, ownProps) => {
  return { ...stateProps, ...dispatchProps, ...ownProps }
}


const dispatchWrapper = (mapDispatchToProps, lensFamilies, dataSources) => (dispatch, props) => {
  const dispatchProps = typeof mapDispatchToProps === 'function' ? mapDispatchToProps(dispatch, props) : mapDispatchToProps;
  const lensDispatchProps = generateLensDispatches(lensFamilies, dispatch)
  const asyncDispatchProps = R.mergeAll(dataSources.map(lensRequest(dispatch)))
  return { ...dispatchProps, ...lensDispatchProps, ...asyncDispatchProps }
}

const mapStateWrapper = (mapStateToProps, lensFamilies) => (state, props) => {
  const stateProps = typeof mapDispatchToProps === 'function' ? mapStateToProps(state, props) : mapStateToProps;
  const lensStateProps = viewLensFamilies(lensFamilies)(state, props)
  return { ...stateProps, ...lensStateProps }
}


const lookingGlass = (lensFamilies, dataSources=[]) => (mapStateToProps, mapDispatchToProps) => Comp => ({ ...rest }) => {
  const dispatchProps = dispatchWrapper(mapDispatchToProps, lensFamilies, dataSources)
  const stateProps = mapStateWrapper(mapStateToProps, lensFamilies)
  const ComponentWithLenses = connect(stateProps, dispatchProps, mergeProps)(Comp)
  return <ComponentWithLenses {...rest} />
}


export default lookingGlass
","Generate the code for a React component that allows for easy management of complex data structures using lenses and asynchronous data fetching. The component should take in a list of lens paths and a data source object, and automatically generate actions for updating the data and request functions for fetching data from the API."
"import $ from 'jquery'
import React from 'react';
import gql from 'graphql-tag';
import {graphql} from 'react-apollo';
import moment from 'moment';
import {Link} from 'react-router';
import scrollToElement from 'scroll-to-element';

let Blog = React.createClass({
  componentDidMount(){
    require('../assets/css/main.css')
  },

  handleScrolly(e){
    var value = e.value;
    scrollToElement(""#two"", {
      duration: 1500,
      offset: 0,
      ease: 'in-sine'
    })
  },

  render(){
    let { theConfig, latestPosts: data, thePagination, loadDone } = this.props;

    return (
      <div>
        <div id=""wrapper"" style={{opacity: 1}}>
            <nav id=""nav"">
              {this.props.theMenu()}
            </nav>
            <div id=""main"" style={{height: ""1650px""}}>
              <article id=""work"" className=""panel"" style={{display: ""block""}}>
                <section>
                  <div className=""row"">
                    {data && data.map((post, index) => (
                      <div className=""6u 12u$(mobile)"">
                        <Link className=""image fit"" to={""/post/"" + post.id}>
                          <img src={post.imageFeatured ? post.imageFeatured.blobUrl: require('images/logo-128.png') } alt="""" />
                        </Link>
                        <h4><Link to={""/post/"" + post.id}>{post.title && post.title}</Link></h4>
                      </div>
                    ))}
                  </div>
                </section>
                <div style={{textAlign: ""center""}}>
                  {this.props.thePagination}
                </div> 
                <div className=""row"" id=""footerWidgets"">
                  {this.props.footerWidgets &&
                  this.props.footerWidgets.map((fw, idx) => <div className=""4u 12u(mobile)"">{fw}</div>)}
                </div>
              </article>
            </div>
            <div id=""footer"">
              <ul className=""copyright"">
                <li>&copy; Rendact</li><li>Design: <a href=""http://html5up.net"">HTML5 UP</a></li>
              </ul>
            </div>
        </div>
      </div> 
    )
  }
});

export default Blog;","Generate a React component that has a div for a wrapper, a div for the main content, and a div for the footer. The main content should include a scrolling section with a grid of blog posts, with a pagination section below. The footer should include some copyright text."
"import React from 'react';
import PropTypes from 'prop-types';

import config from './config';

function ProgressBar({ delay, isRunning, closeToast, type, hide }) {
  const style = {
    animationDuration: `${delay}ms`,
    animationPlayState: isRunning ? 'running' : 'paused'
  };
  style.WebkitAnimationPlayState = style.animationPlayState;

  if (hide) {
    style.opacity = 0;
  }

  return (
    <div
      className={`toastify__progress toastify__progress--${type}`}
      style={style}
      onAnimationEnd={closeToast}
    />
  );
}

ProgressBar.propTypes = {
  /**
   * The animation delay which determine when to close the toast
   */
  delay: PropTypes.number.isRequired,

  /**
   * Whether or not the animation is running or paused
   */
  isRunning: PropTypes.bool.isRequired,

  /**
   * Func to close the current toast
   */
  closeToast: PropTypes.func.isRequired,

  /**
   * Optional type : info, success ...
   */
  type: PropTypes.string,

  /**
   * Hide or not the progress bar
   */
  hide: PropTypes.bool
};

ProgressBar.defaultProps = {
  type: config.TYPE.DEFAULT,
  hide: false
};

export default ProgressBar;
",Generate a component in React that displays an animated progress bar.
"import React from 'react'
import PropTypes from 'prop-types'
// import the game for create instances & 
import {createPlayer} from '../../game'

import Login from '../Login/Login'
import GameInfo from '../Infos/GameInfo/GameInfo'

import logo from './logo.svg'
import './Header.css'

const Header = ({ onClick, connected, player }) => (
  <div className=""Header"">
    <img src={logo} className=""Header-logo"" alt=""logo"" />
    {connected ? 
      <GameInfo player={player} />
    : <Login onClick={onClick} />
    }

  </div>
)

Header.propTypes = {
  onClick: PropTypes.func.isRequired,
  connected: PropTypes.bool.isRequired
}

const Test = ({ state, actions }) => {
  const player = state.player
  const connected = state.player.slug ? true : false
  const onClick = () => {
    actions.initGame(createPlayer('kesslerdev'))
  }

  return (<Header {...{ player, connected, onClick }} />)
}

export default Test",Generate the React code for a header component that displays a logo and either a login form or game information depending on whether the player is connected. The login form should have an onClick handler that triggers a login action.
"import 'aframe';
import React from 'react';

export default class DemoAframeScene extends React.Component {
  constructor(props) {
    super(props);

    this.interactableObjects = [];
    this.handleContextMenu = this.handleContextMenu.bind(this);
  }

  attachEventHandlers(objects) {
    for (let object of objects) {
      object.addEventListener('mouseenter', this.props.handleMouseEnter);
      object.addEventListener('mouseleave', this.props.handleMouseLeave);
      object.addEventListener('click', this.props.handleClick); // FIXME this doesn't distinguish between left and right click
    }
  }

  handleContextMenu(e) {
    e.preventDefault();
  }

  componentDidMount() {
    this.attachEventHandlers(this.interactableObjects);
  }

  render() {
    return (
      <a-scene onContextMenu={this.handleContextMenu} cursor=""rayOrigin: mouse"">
        <a-box
          ref={obj => { this.interactableObjects.push(obj); }}
          position=""-1 0.5 -3""
          rotation=""0 45 0""
          color=""#4CC3D9""
        />
        <a-sphere
          ref={obj => { this.interactableObjects.push(obj); }}
          position=""0 1.25 -5""
          radius=""1.25""
          color=""#EF2D5E""
        />
        <a-cylinder
          ref={obj => { this.interactableObjects.push(obj); }}
          position=""1 0.75 -3""
          radius=""0.5""
          height=""1.5""
          color=""#FFC65D""
        />
        <a-plane
          ref={obj => { this.interactableObjects.push(obj); }}
          position=""0 0 -4""
          rotation=""-90 0 0""
          width=""4""
          height=""4""
          color=""#7BC8A4""
        />
        <a-sky color=""#ECECEC""></a-sky>
      </a-scene>
    );
  }
}
","Create a simple A-Frame scene with a box, sphere, cylinder, and plane. Attach event listeners to the objects to handle mouse enter, leave, and click events. Prevent the context menu from opening on the scene."
"// require('./assets/styles/bootstrap.scss');
// require('./assets/styles/main.scss');

import './assets/styles/bootstrap.scss';
import './assets/styles/main.scss';

import React from 'react'
import { render } from 'react-dom'
import { Router, Route, IndexRoute, useRouterHistory, browserHistory } from 'react-router'
import { createHistory } from 'history';

import App from ""./App"";
import About from ""./components/About"";
import Reel from ""./components/Reel"";
import Projects from ""./components/projects/Projects"";
import Project from ""./components/projects/Project"";

render(
  <Router history={browserHistory}>
    <Route path="""" component={App}>
      <Route path=""/"" component={Projects}>
        <Route path=""reel"" component={Reel} />
        <Route path=""projects/:projectId"" component={Project}>
        </Route>
      </Route>
      <Route path=""about"" component={About} />
    </Route>
  </Router>,
  document.getElementById('app')
)
","Generate the main file for a React application that uses React Router for navigation and contains routes for an about page, a projects page, a reel page, and a project details page."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionVisibility = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z""/>
  </SvgIcon>
);
ActionVisibility = pure(ActionVisibility);
ActionVisibility.displayName = 'ActionVisibility';
ActionVisibility.muiName = 'SvgIcon';

export default ActionVisibility;
",Create a React component that renders the Material Design visibility icon. The icon should be composed of an SVG path and should be pure using the recompose library.
"import React from 'react';
import { IndexRoute, Redirect, Route, Router } from 'react-router';

import App from '../containers/App';
import ErrorPage from '../containers/ErrorPage';
import ExperimentPage from '../containers/ExperimentPage';
import HomePage from '../containers/HomePage';
import LegacyPage from '../containers/LegacyPage';
import NotFoundPage from '../containers/NotFoundPage';
import OnboardingPage from '../containers/OnboardingPage';
import RestartPage from '../containers/RestartPage';
import RetirePage from '../containers/RetirePage';
import SharePage from '../containers/SharePage';


export default class Routes extends React.Component {
  render() {
    return (
      <Router history={this.props.history}>
        <Route path=""/"" component={App}>
          <IndexRoute component={HomePage} />
          <Redirect from=""/experiments(/)"" to=""/"" />
          <Route path=""/experiments/:slug"" component={ExperimentPage} />
          <Route path=""/legacy"" component={LegacyPage} />
          <Route path=""/404"" component={NotFoundPage} />
          <Route path=""/share"" component={SharePage} />
          <Route path=""/restart"" component={RestartPage} />
          <Route path=""/error"" component={ErrorPage} />
          <Route path=""/onboarding"" component={OnboardingPage} />
          <Route path=""/retire"" component={RetirePage} />
          <Route path=""*"" component={NotFoundPage} />
        </Route>
      </Router>
    );
  }
}
","Create a function that will generate a React Router configuration for a custom SPA. The generated code should include a root component and the following nested routes:

- Root component at `/`
- Redirect from `/experiments` to `/`
- Route for `/experiments/:slug`
- Route for legacy page at `/legacy`
- 404 not found page at `/404`
- Route for share page at `/share`
- Route for restart page at `/restart`
- Error page route at `/error`
- Onboarding page at `/onboarding`
- Retire page at `/retire`
- Catchall route for any other paths, redirecting to the not found page"
"import React from 'react'
import PropTypes from 'prop-types'
import Dialog from 'material-ui/Dialog'
import RaisedButton from 'material-ui/RaisedButton'

import t from '../../common/i18n'

const ConfirmDialog = ({open = true, title, text, onYes, onNo}) =>
  <Dialog
    title={title}
    actions={ <div>
      <RaisedButton secondary={true} label={t('common.no')} onClick={onNo} />
      <RaisedButton primary={true} label={t('common.yes')} onClick={onYes} /> </div> }
    open={open}
    modal={true}
  >
    {text}
  </Dialog>
ConfirmDialog.propTypes = {
  open: PropTypes.bool,
  text: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
  onYes: PropTypes.func.isrequired,
  onNo: PropTypes.func.isrequired
}

export default ConfirmDialog

// React HOC that wraps a given component and adds 'confirmWithUser' to its
// props. When called as a function it displays a confirmation dialog to the
// user and returns a promise that resolves to true or false, depending on
// whether the user selects Yes or No. confirmWithUser takes two arguments,
// the title and the text of the confirm dialog.
export function withConfirmDialog (WrappedComponent) {
  return class ConfirmDialogProvider extends React.Component {
    constructor (props) {
      super(props)
      this.state = {
        open: false,
        // TODO: Better defaults, using t()
        title: 'NO TITLE',
        text: 'Confirm placeholder',
        handleYes: () => null,
        handleNo: () => null
      }
    }

    showConfirm = (title, text) => {
      return new Promise((resolve, reject) => {
        const hideAndResolve = (result) => {
          this.hideConfirm()
          resolve(result)
        }
        this.setState({
          open: true,
          title,
          text,
          handleYes: () => { hideAndResolve(true) },
          handleNo: () => { hideAndResolve(false) }
        })
      })
    }

    hideConfirm = () => {
      this.setState({open: false})
    }

    render () {
      return <div>
        <WrappedComponent
          confirmWithUser={this.showConfirm}
          {...this.props}
        />
        <ConfirmDialog
          open={this.state.open}
          title={this.state.title}
          text={this.state.text}
          onYes={this.state.handleYes}
          onNo={this.state.handleNo}
        />
      </div>
    }
  }
}
","Generate the React component and HOC that allows a wrapped component to prompt the user for confirmation via a modal dialog. The modal should have a title, text, and Yes/No buttons. The HOC should add a `confirmWithUser` function to the wrapped component's props, which when called, displays the modal and returns a Promise that resolves to true or false depending on the user's selection."
"import React from 'react'
import GoogleMap from 'google-map-react'
import {ToggleFavorite} from './Components.js'
import {Link} from 'react-router-dom'

// import {findById} from '../Utility/Utility.js'
const findById = (stores, id) => stores.find(store => store.id === id)
// ViewPromo component renders info of chosen store, store localization, and  promotions in chosen store

const ViewPromo = props => {
  scroll(0, 0)
  const indexToStart = props.stringLoc.indexOf('=')
  const storeId = props.stringLoc.substr(indexToStart + 1)
  const store = findById(props.stores, storeId)
  return(
  <div
    key={storeId}>
    <div className='row'>
      <div className='four columns' >
        <h2>{store.storeName}</h2>
      </div>
      <div className='four columns'>
        <Link
          className='button in-line'
          to={props.pastPath}
          >Powrot</Link>
      </div>
      <div className='four columns'>
        <ToggleFavorite
          favToggle={store.favToggle}
          toggleValue={store.id}
          handleFavorite={props.handleToggleFavorite}
          />
      </div>
    </div>
    <div className='row view-separator'>
      <div className='four columns'>
        <img
          className='image'
          src={store.pictureUrl} />
        <p>{store.type}</p>
        <p><b>Liczba Promocji: {store.items.length}</b></p>
        <p>{store.info}</p>
      </div>
      <div className='four columns'>
        <h5>Lokalizacja: </h5>
        <p><b>Kraj: </b>{store.localization.country}</p>
        <p><b>Miejscowosc: </b>{store.localization.city}</p>
        <p><b>Ulica: </b>{store.localization.street} {store.localization.houseNumber}</p>
        <p><b>Kod pocztowy: </b>{store.localization.postCode}</p>
      </div>
      <div className='four columns'>
        <ul>Godziny otwarcia</ul>
        <li>Poniedzialek: {store.localization.openHours[0]}</li>
        <li>Wtorek: {store.localization.openHours[1]}</li>
        <li>Sroda: {store.localization.openHours[2]}</li>
        <li>Czwartek: {store.localization.openHours[3]}</li>
        <li>Piatek: {store.localization.openHours[4]}</li>
        <li>Sobota: {store.localization.openHours[5]}</li>
        <li>Niedziela: {store.localization.openHours[6]}</li>
      </div>
    </div>
    <div className='row view-separator'>
      <div className='columns'>
        <h3>Lokalizacja:</h3>
        <div className='view-map'>
          <GoogleMap
            bootstrapURLKeys={{key: 'AIzaSyAMK_YroYmfcz_5YJifD_14uEobOtrUT4c'}}
            center={store.localization.centerCoord}
            zoom={14}>
            <div className='store-icon-container'
              lat={store.localization.centerCoord[0]}
              lng={store.localization.centerCoord[1]} >
              <Link
                className='button collored in-line'
                to={{pathname: '/mapa', search: 'id='+store.id}}
                >{store.storeName}</Link>
            </div>
          </GoogleMap>
        </div>
      </div>
    </div>
    <div className='row view-separator'>
      <div className='row promo-separator'>
        <div
          className='columns'
          >
          <h3>Promocje: </h3>
        </div>
      </div>
      {store.items.map(item =>
        <div
          key={item.id}
          className='row promo-separator'>
          <div className='five columns'>
            <h4>{item.title}</h4>
            <img
              className='image'
              src={item.itemPictureUrl}
              />
          </div>
          <div className='seven columns'>
            <h5><b>{item.promo}</b></h5>
            <h6>{item.type}</h6>
            <h6>{item.text}</h6>
          </div>
        </div>
      )}
      </div>
  </div>
)}

ViewPromo.propTypes = {
  lat: React.PropTypes.number,
  lng: React.PropTypes.number,
  handleToggleFavorite: React.PropTypes.func.isRequired,
  toggleValue: React.PropTypes.string,
  favToggle: React.PropTypes.string,
  stores: React.PropTypes.array.isRequired,
  stringLoc: React.PropTypes.string.isRequired
}
// --- --- --- --- --- ---

export {ViewPromo}
","Generate a React component that displays detailed information about a selected store, including store name, image, location, opening hours, map with store location, and a list of the store's promotions. The component should also include a button to toggle the store as a favorite and a button to return to the previous page."
"import React from 'react';
import classNames from 'classnames';
import BootstrapMixin from './BootstrapMixin';
import CustomPropTypes from './utils/CustomPropTypes';
import ButtonInput from './ButtonInput';

const Button = React.createClass({
  mixins: [BootstrapMixin],

  propTypes: {
    active: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    block: React.PropTypes.bool,
    navItem: React.PropTypes.bool,
    navDropdown: React.PropTypes.bool,
    /**
     * You can use a custom element for this component
     */
    componentClass: CustomPropTypes.elementType,
    href: React.PropTypes.string,
    target: React.PropTypes.string,
    /**
     * Defines HTML button type Attribute
     * @type {(""button""|""reset""|""submit"")}
     * @defaultValue 'button'
     */
    type: React.PropTypes.oneOf(ButtonInput.types)
  },

  getDefaultProps() {
    return {
      active: false,
      block: false,
      bsClass: 'button',
      bsStyle: 'default',
      disabled: false,
      navItem: false,
      navDropdown: false
    };
  },

  render() {
    let classes = this.props.navDropdown ? {} : this.getBsClassSet();
    let renderFuncName;

    classes = {
      active: this.props.active,
      'btn-block': this.props.block,
      ...classes
    };

    if (this.props.navItem) {
      return this.renderNavItem(classes);
    }

    renderFuncName = this.props.href || this.props.target || this.props.navDropdown ?
      'renderAnchor' : 'renderButton';

    return this[renderFuncName](classes);
  },

  renderAnchor(classes) {
    let Component = this.props.componentClass || 'a';
    let href = this.props.href || '#';
    classes.disabled = this.props.disabled;

    return (
      <Component
        {...this.props}
        href={href}
        className={classNames(this.props.className, classes)}
        role=""button"">
        {this.props.children}
      </Component>
    );
  },

  renderButton(classes) {
    let Component = this.props.componentClass || 'button';

    return (
      <Component
        {...this.props}
        type={this.props.type || 'button'}
        className={classNames(this.props.className, classes)}>
        {this.props.children}
      </Component>
    );
  },

  renderNavItem(classes) {
    let liClasses = {
      active: this.props.active
    };

    return (
      <li className={classNames(liClasses)}>
        {this.renderAnchor(classes)}
      </li>
    );
  }
});

export default Button;
","Create a React component that can render a button or an anchor tag depending on the properties passed to it. The component should have the following features:

- Accepts various props to customize the appearance and behavior of the button, such as `active`, `disabled`, `block`, `navItem`, `navDropdown`, `componentClass`, `href`, `target`, and `type`.
- Renders an anchor tag if `href` or `target` props are provided, otherwise it renders a button.
- Wraps the content in a `<li>` element when `navItem` prop is true."
"import React from 'react';
import PureComponent from 'react-pure-render/component';

import CSSModules from ""react-css-modules"";
import styles from  './styles.module.scss';

class DragBox extends PureComponent {
	render() {
		const {modal} = this.props;

		let styles = ""cropper-drag-box cropper-crop"";

		return <div styleName={modal ? styles + ' cropper-modal' : styles}></div>
	}
}

export default CSSModules(DragBox, styles, {allowMultiple: true})
","Create a React component that uses react-css-modules to style a draggable box. The box should have a CSS class of 'cropper-drag-box' and 'cropper-crop'. If a prop called 'modal' is set to true, the box should also have a class of 'cropper-modal'."
"import React from 'react';
import { View, ViewPropTypes } from 'react-native';
import T from 'prop-types';
import s from './styles';

const Separator = ({
  withShadow,
  withOpacity,
  marginVertical,
  marginTop,
  marginBottom,
  style,
}) => (
  <View
    style={[
      s.root,
      marginVertical && { marginVertical },
      marginTop && { marginTop },
      marginBottom && { marginBottom },
      withShadow && s.shadow,
      withOpacity && s.opacity,
      style,
    ]}
  />
);
Separator.propTypes = {
  withShadow: T.bool,
  withOpacity: T.bool,
  marginVertical: T.number,
  marginTop: T.number,
  marginBottom: T.number,
  style: ViewPropTypes.style,
};

export default Separator;
","Provide a React Native component that displays a separator line. The component should take props to customize its appearance, including shadow, opacity, and margins."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionCardTravel = (props) => (
  <SvgIcon {...props}>
    <path d=""M20 6h-3V4c0-1.11-.89-2-2-2H9c-1.11 0-2 .89-2 2v2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zM9 4h6v2H9V4zm11 15H4v-2h16v2zm0-5H4V8h3v2h2V8h6v2h2V8h3v6z""/>
  </SvgIcon>
);
ActionCardTravel = pure(ActionCardTravel);
ActionCardTravel.displayName = 'ActionCardTravel';
ActionCardTravel.muiName = 'SvgIcon';

export default ActionCardTravel;
","Generate the React component code for the Material Design ""Card Travel"" SVG icon."
"import React, { Component } from 'react';
import { Provider } from 'react-redux';
import CounterApp from './CounterApp';
import configureStore from '../store/configureStore';

const store = configureStore();

export default class Root extends Component {
  render() {
    return (
      <Provider store={store}>
        {() => <CounterApp />}
      </Provider>
    );
  }
}
","Create a React application using React Redux with a Counter Application, setting up the store with Redux Toolkit and exporting the root component."
"import React from 'react';
import SPELLS from 'common/SPELLS';
import SpellLink from 'common/SpellLink';
import { STATISTIC_ORDER } from 'interface/others/StatisticBox';

import HitCountAoE from '../core/HitCountAoE';

/**
 * Despite being an AoE ability Brutal Slash is usually the best talent on its row for single target fights.
 * It can be useful to count how many targets it hits, but hitting just one is not a mistake.
 */
class BrutalSlashHitCount extends HitCountAoE {
  static spell = SPELLS.BRUTAL_SLASH_TALENT;
  
  constructor(...args) {
    super(...args);
    this.active = this.selectedCombatant.hasTalent(SPELLS.BRUTAL_SLASH_TALENT.id);
  }

  statistic() {
    return this.generateStatistic(STATISTIC_ORDER.OPTIONAL(10));
  }

  get hitNoneThresholds() {
    return {
      actual: this.hitZeroPerMinute,
      isGreaterThan: {
        minor: 0,
        average: 0.2,
        major: 0.5,
      },
      style: 'number',
    };
  }

  suggestions(when) {
    when(this.hitNoneThresholds).addSuggestion((suggest, actual, recommended) => {
      return suggest(
        <>
          You are using <SpellLink id={SPELLS.BRUTAL_SLASH_TALENT.id} /> out of range of any targets. Try to get familiar with the range of your area of effect abilities so you can avoid wasting charges and energy when they'll not hit anything.
        </>
      )
        .icon(SPELLS.BRUTAL_SLASH_TALENT.icon)
        .actual(`${actual.toFixed(1)} uses per minute that hit nothing.`)
        .recommended(`${recommended} is recommended`);
    });
  }
}

export default BrutalSlashHitCount;
",Provide a description for the code snippet that explains how a player can use the Brutal Slash talent effectively in World of Warcraft by tracking the number of targets it hits.
"import React from 'react';
import PropTypes from 'prop-types';
import Skeleton from '../../Skeleton';
import EditableText from '../../EditableText';
import titleSubHeaderCssModule from './TitleSubHeader.scss';
import Icon from '../../Icon';
import Inject from '../../Inject';
import getDefaultT from '../../translate';
import TooltipTrigger from '../../TooltipTrigger';
import { getTheme } from '../../theme';

const theme = getTheme(titleSubHeaderCssModule);

function TitleSubHeader({
	title,
	iconId,
	loading,
	inProgress,
	editable,
	getComponent,
	onEdit,
	onCancel,
	onSubmit,
	...rest
}) {
	const [isEditMode, setIsEditMode] = React.useState(false);
	function handleEdit(...args) {
		setIsEditMode(true);
		if (onEdit) {
			onEdit(...args);
		}
	}

	function handleCancel(...args) {
		setIsEditMode(false);
		if (onCancel) {
			onCancel(...args);
		}
	}

	function handleSubmit(...args) {
		setIsEditMode(false);
		if (onSubmit) {
			onSubmit(...args);
		}
	}

	if (loading) {
		return <Skeleton type={Skeleton.TYPES.text} size={Skeleton.SIZES.large} />;
	}

	const InjectedEditableText = Inject.get(getComponent, 'EditableText', EditableText);

	return (
		<div
			className={theme('tc-subheader-details', {
				'tc-subheader-details-blink': inProgress,
			})}
		>
			{iconId && <Icon name={iconId} className={theme('tc-subheader-details-icon')} />}
			<div className={theme('tc-subheader-details-text')}>
				<div className={theme('tc-subheader-details-text-title')}>
					{editable ? (
						<InjectedEditableText
							text={title}
							inProgress={inProgress}
							feature=""subheaderbar.rename""
							componentClass=""h1""
							onEdit={handleEdit}
							onCancel={handleCancel}
							onSubmit={handleSubmit}
							editMode={isEditMode}
							{...rest}
						/>
					) : (
						<TooltipTrigger label={title} tooltipPlacement=""bottom"">
							<h1 className={theme('tc-subheader-details-text-title-wording')} {...rest.titleProps}>{title}</h1>
						</TooltipTrigger>
					)}
				</div>
				{!isEditMode ? <SubTitle {...rest} /> : null}
			</div>
		</div>
	);
}

function DefaultSubTitle({ subTitle, subTitleProps }) {
	return <small className={theme('tc-subheader-details-text-subtitle')} {...subTitleProps}>{subTitle}</small>;
}

DefaultSubTitle.propTypes = {
	subTitle: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),
	subTitleProps: PropTypes.object,
};

function SubTitle({ subTitleLoading, subTitle, subTitleAs: SubTitleAs = DefaultSubTitle, ...rest }) {
	if (subTitleLoading) {
		return (
			<Skeleton
				className={theme('tc-subheader-details-loading-subtitle')}
				type={Skeleton.TYPES.text}
				size={Skeleton.SIZES.large}
			/>
		);
	}

	if (subTitle) {
		return <SubTitleAs subTitle={subTitle} {...rest} />;
	}

	return null;
}

SubTitle.propTypes = {
	subTitle: PropTypes.node,
	subTitleLoading: PropTypes.bool,
	subTitleAs: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
};

TitleSubHeader.propTypes = {
	title: PropTypes.string.isRequired,
	iconId: PropTypes.string,
	loading: PropTypes.bool,
	inProgress: PropTypes.bool,
	editable: PropTypes.bool,
	subTitle: PropTypes.node,
	onEdit: PropTypes.func,
	onSubmit: PropTypes.func,
	onCancel: PropTypes.func,
	t: PropTypes.func,
	...Inject.PropTypes,
};

TitleSubHeader.defaultProps = {
	loading: false,
	inProgress: false,
	t: getDefaultT(),
	editable: false,
};

export { TitleSubHeader as default, SubTitle };
","Generate a React component called `TitleSubHeader` that displays a title and optional subtitle. The title should be editable and support tooltips. If the component is loading, display a skeleton. If the component is in progress, display a blinking effect. Include an optional icon."
"import React from 'react';
import { Button, Grow, Typography, withStyles } from '@material-ui/core';

import withMouseOver from './Hocs/withMouseOver';

let styles = theme => {
    let base = {
        flexShrink: 1,
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center'
    }

    return {
        collapsed: {
            ...base,
            width: '64px',
            transition: theme.transitions.create('width'),
        },

        expanded: {
            ...base,
            width: '132px', // Using Percents here causes objects next door to Snap into the smaller footprint instead of Sliding.
            transition: theme.transitions.create('width'),
        },

        textCollapsed: {
            ...base,
            width: '0%',
            overflowX: 'hidden',
        },

        textExpanded: {
            ...base,
            width: '100%',
            overflowX: 'hidden',
        }
    }
}

const ExpandingButton = (props) => {
    let { classes } = props;

    return (
        <div
        className={classes[ props.mouseOver ? 'expanded' : 'collapsed']}>
            <Button
                color={props.color}
                onClick={props.onClick}>
                {props.iconComponent}
 
                <div
                className={classes[ props.mouseOver ? 'textExpanded' : 'textCollapsed']}>
                    <Typography
                        color={props.color}
                        noWrap={true}>
                        {props.text}
                    </Typography>
                </div>
            </Button>
        </div>
    );
};

export default withStyles(styles)(withMouseOver(ExpandingButton));",Design a React button that expands to show the full text of the button when hovered over. The button should have an optional icon and the button label should truncate when collapsed.
"import React from 'react'
import { FormattedMessage, intlShape } from 'react-intl'

import * as paths from '@/paths'
import {
  SettingsPageLayout,
  SettingsPageMenuLayout,
  SettingsPageContentLayout
} from '@/components/layout'
import { Avatar, Name } from '@/mobilizations/components/list/items'
import { FormRedux, FormGroup, FormControl, ControlLabel } from '@/components/forms'

const TemplatesCreatePage = ({ mobilization, fields: { name, goal }, intl, history, ...formProps }) => (
  <SettingsPageLayout>
    <SettingsPageMenuLayout
      title={
        <FormattedMessage
          id='page--templates-create.header.title'
          defaultMessage='Crie um template a partir da mobilização'
        />
      }
      className='pb4'
    />
    <SettingsPageContentLayout
      wrapClassName='lg-col-5 mx-auto mt3'
      style={{ whiteSpace: 'nowrap', overflow: 'hidden' }}
    >
      <div className='mobilization-list bg-white clearfix'>
        <Avatar
          {...mobilization}
          imageSize={{ width: '100px', height: '100px' }}
        />
        <Name
          {...mobilization}
          className='lg-col-8 darkengray'
          style={{ fontSize: '1.1rem' }}
        />
      </div>

      <div className='py3' style={{ textAlign: 'center' }}>
        <div className='arrow-down' />
      </div>

      <FormRedux
        className='bg-white'
        onCancel={() => history.push(paths.mobilizations())}
        onFinishSubmit={() => history.push(paths.mobilizations())}
        {...formProps}
      >
        <FormGroup controlId='name' {...name}>
          <ControlLabel maxLength={100}>
            <FormattedMessage
              id='page--templates-create.form.name.label'
              defaultMessage='Nome do seu template'
            />
          </ControlLabel>
          <FormControl
            type='text'
            placeholder={intl.formatMessage({
              id: 'page--templates-create.form.name.placeholder',
              defaultMessage: 'Pela criação de uma delegacia de desaparecidos'
            })}
            maxLength={100}
          />
        </FormGroup>
        <FormGroup controlId='goal' {...goal}>
          <ControlLabel maxLength={500}>
            <FormattedMessage
              id='page--templates-create.form.goal.label'
              defaultMessage='Descrição'
            />
          </ControlLabel>
          <FormControl
            componentClass='textarea'
            placeholder={intl.formatMessage({
              id: 'page--templates-create.form.goal.placeholder',
              defaultMessage:
                'Faça um texto curto, capaz de motivar outras pessoas a se unirem à ' +
                'sua mobilização. Você poderá alterar este texto depois.'
            })}
            maxLength={500}
            rows='4'
          />
        </FormGroup>
      </FormRedux>
    </SettingsPageContentLayout>
  </SettingsPageLayout>
)

TemplatesCreatePage.propTypes = {
  intl: intlShape.isRequired
}

export default TemplatesCreatePage
","Design a React component that creates a new template from an existing mobilization. The component should include fields for the template name and goal, and should use a form library to handle form submission."
"import React from 'react';
import IconBase from 'react-icon-base';

export default class FaKey extends React.Component {
    render() {
        return (
            <IconBase viewBox=""0 0 40 40"" {...this.props}>
                <g><path d=""m19.6 11.4q0-1.8-1.3-3t-3-1.3-3.1 1.3-1.2 3q0 1 0.4 1.9-0.9-0.4-1.8-0.4-1.8 0-3.1 1.2t-1.2 3 1.2 3.1 3.1 1.2 3-1.2 1.3-3.1q0-0.9-0.5-1.8 0.9 0.4 1.9 0.4 1.8 0 3-1.2t1.3-3.1z m19 15.7q0 0.4-1.1 1.5t-1.5 1.1q-0.2 0-0.6-0.3t-0.9-0.8-0.8-0.9-0.6-0.6l-2.1 2.2 4.9 4.9q0.6 0.6 0.6 1.5 0 1-0.8 1.8t-1.8 0.9q-0.9 0-1.6-0.6l-14.9-15q-4 2.9-8.2 2.9-3.6 0-5.9-2.3t-2.3-5.9q0-3.6 2.1-7t5.6-5.5 6.9-2.1q3.7 0 6 2.2t2.3 6q0 4.2-3 8.1l8 7.9 2.1-2.1q-0.1-0.1-0.6-0.5t-0.9-0.9-0.7-0.8-0.4-0.7q0-0.3 1.1-1.4t1.5-1.1q0.3 0 0.5 0.2 0.1 0.1 1 1t1.9 1.8 1.9 1.9 1.6 1.7 0.7 0.9z""/></g>
            </IconBase>
        );
    }
}
","Generate the React code for the Font Awesome 5 ""key"" icon."
"import React from 'react'
import Point from './Point'


/**
<Movable>
  <WillChange transform>
    {
      ({move, movableRef, style, willChange, willChangeRef}) => (
        <div
          ref={willChangeRef}
          style={{
            width: 200,
            height: 200,
            backgroundColor: '#000',
            transition: 'transform 160ms cubic-bezier(0.4, 0, 0.7, 1.0)',
            ...style
          }}
        >
          <Point>
            {
              ({setX, setY, x, y}) => (
                <div>
                  <button
                    className='btn btn--s m--4'
                    onClick={() => {willChange(); move(x, y)}}
                  >
                    Move me
                  </button>
                  <input type='number' onChange={e => setX(e.target.value)} defaultValue={x}/>
                  <input type='number' onChange={e => setY(e.target.value)} defaultValue={y}/>
                </div>
              )
            }
          </Point>
        </div>
      )
    }
  </WillChange>
</Movable>
*/

export function Movable ({children, style, x, y, z}) {
  let transform = style && style.transform ? style.transform.split(' ') : []
  transform.push(`translate3d(${x}px, ${y}px, ${z || 0})`)
  transform = transform.join(' ')

  style = {
    ...style,
    MozTransform: transform,
    MsTransform: transform,
    WebkitTransform: transform,
    transform
  }

  return children({style, x, y})
}


export default function ({onMove, ...props}) {
  props.onChange = onMove
  return (
    <Point {...props}>
      {function (pointContext) {
        return Movable({...pointContext, ...props})
      }}
    </Point>
  )
}
","Generate a React component that makes any children movable by clicking a ""Move me"" button and dragging with the cursor. When the button is clicked, it should calculate the current position of the element and allow the user to move it by dragging the cursor. The component should also include input fields to manually set the position of the element."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageNature = (props) => (
  <SvgIcon {...props}>
    <path d=""M13 16.12c3.47-.41 6.17-3.36 6.17-6.95 0-3.87-3.13-7-7-7s-7 3.13-7 7c0 3.47 2.52 6.34 5.83 6.89V20H5v2h14v-2h-6v-3.88z""/>
  </SvgIcon>
);
ImageNature = pure(ImageNature);
ImageNature.displayName = 'ImageNature';
ImageNature.muiName = 'SvgIcon';

export default ImageNature;
","Generate the React component code needed to display an SVG icon of a nature scene. The component should be reusable and pure, meaning it will not re-render unless its props change."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ToggleCheckBoxOutlineBlank = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z""/>
  </SvgIcon>
);
ToggleCheckBoxOutlineBlank = pure(ToggleCheckBoxOutlineBlank);
ToggleCheckBoxOutlineBlank.displayName = 'ToggleCheckBoxOutlineBlank';
ToggleCheckBoxOutlineBlank.muiName = 'SvgIcon';

export default ToggleCheckBoxOutlineBlank;
","Generate the React code for a stateless functional component using the `pure` high-order component, which wraps the `SvgIcon` component with a `displayName` and `muiName`."
"import React from 'react'
import ReactDOM from 'react-dom'
import LoginView from './login-view'
import login from './login-reducers'
import {createStore, applyMiddleware} from 'redux'
import thunk from 'redux-thunk'
import {Provider} from 'react-redux'

const store = createStore(login, applyMiddleware(thunk))

class App extends React.Component { // eslint-disable-line no-unused-vars
  render () {
    return (
      <div className=""container-fluid"">
        <div className=""row"">
          <div className=""jumbotron text-center"">
            <h1>Login Screen</h1>
          </div>
        </div>
        <div className=""row center-block"">
          <LoginView />
        </div>
      </div>
    )
  }
}

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('react-app')
)",Create a React application with a login view that allows users to log in and see a message confirming their login.
"import React, { Component } from 'react';
import { Map } from 'immutable';
import Editor, { createEditorStateWithText } from 'draft-js-plugins-editor';
import createHashtagPlugin from 'draft-js-hashtag-plugin';
import editorStyles from './editorStyles.css';
import hashtagStyles from './hashtagStyles.css';

const theme = Map({
  hashtag: hashtagStyles.hashtag,
});
const hashtagPlugin = createHashtagPlugin({ theme });
const plugins = [hashtagPlugin];
const text = 'In this editor, we can even apply our own styles … #design #theme';

export default class CustomHashtagEditor extends Component {

  state = {
    editorState: createEditorStateWithText(text),
  };

  onChange = (editorState) => {
    this.setState({
      editorState,
    });
  };

  focus = () => {
    this.refs.editor.focus();
  };

  render() {
    return (
      <div className={ editorStyles.editor } onClick={ this.focus }>
        <Editor
          editorState={this.state.editorState}
          onChange={this.onChange}
          plugins={plugins}
          ref=""editor""
        />
      </div>
    );
  }
}
","Design a React component that utilizes the Draft.js editor and includes a hashtag plugin. The plugin should apply custom styling to hashtags, and the component should handle the editor's state and provide a method to focus the editor."
"import React from 'react';
import PropTypes from 'prop-types';
import Header from '../../components/organisms/header';
import ErrorDetails from '../../components/organisms/error-detail';
import styles from './styles';


class Error extends React.Component {
  static propTypes = {
    params: PropTypes.object.isRequired,
  }

  render() {
    return (
      <div style={styles.root}>
        <Header disableInterval back=""/errors"" autoRefresh={false} />
        <ErrorDetails errorId={Number(this.props.params.errorId)} />
      </div>
    );
  }
}


export default Error;
",Create a React component for displaying error details. The component should include a header and an error details section. The error details section should display the error code passed as a prop.
"/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  Image
} from 'react-native';

// 导入json数据
var BadgeData = require('./BadgeData.json');
var Dimensions = require('Dimensions');
var {width, height} = Dimensions.get('window');


// 定义一些全局的变量
var cols = 3;
var boxW = 100;
var vMargin = (width - cols * boxW) / (cols + 1);//设置宽高
var hMargin = 25;


class AImageDemo extends Component {
  render() {
    return (
      <View style={styles.container}>
        {/*返回6个包, this代表这个类,调用类里面的方法 */}
        {this.returnAllBadge()}
      </View>
    );
  }

  // 返回所有的包
  returnAllBadge(){
    // 定义数组装所有的子组件,每个元素是一个子组件
    var allBadge = [];
    // 遍历json数据
    for(var i=0; i<BadgeData.data.length; i++){
       // 取出单独的数据对象
       var badge = BadgeData.data[i];
       // 直接转入数组
      allBadge.push(
          <View key={i} style={styles.outViewStyle}>
             <Image source={{uri:badge.icon}} style={styles.imageStyle}/>
             <Text style={styles.mainTitleStyle}>
               {badge.title}
             </Text>
          </View>
      );
    }
    // 返回数组
    return allBadge;
  }


  // returnAllBags(){
  //   var allBags = [];
  //   for(var i = 0; i< BadgeData.data.length;i++){
  //     var singleBag = BadgeData.data[i];
  //     allBags.push(
  //         <View key={i} style={styles.outViewStyle}>
  //             <Image source={{uri:""http://img2.imgtn.bdimg.com/it/u=3333486539,2128030501&fm=26&gp=0.jpg""}} style={styles.imageStyle}>
  //             </Image>
  //             <Text style={styles.mainTitleStyle}>
  //               {singleBag.title}
  //             </Text>
  //         </View>
  //     );    
  //   }
  //   return allBags;
  // }

}

const styles = StyleSheet.create({
  container: {

    // 确定主轴的方向
    flexDirection:'row',

    // 换行显示
    flexWrap:'wrap'

  },

  outViewStyle:{
     backgroundColor:'red',
     // 设置侧轴的对齐方式
     alignItems:'center',
     width:boxW,
     height:boxW,
     marginLeft:vMargin,
     marginTop:hMargin
  },

  imageStyle:{
     backgroundColor: 'transparent',
     width:80,
     height:80
  },

  mainTitleStyle:{
    backgroundColor:'gray',
  }
});

AppRegistry.registerComponent('component_demo', () => AImageDemo);
","Generate a React Native code snippet that renders a grid of images and text from a JSON data source. The grid should have a specific number of columns, and the images and text should be centered within each cell."
"/* eslint-disable react/jsx-filename-extension */
import React from 'react';
import styled from 'styled-components';
import tinycolor from 'tinycolor2';

import {
  fontFamilyBase,
  fontSizeBase,
  lineHeightBase,
  fontWeightBase,
  sidebarWidth,
  sidebarMiniWidth,
  screenSmMin,
  lightBlue,
  green,
  yellow,
  red,
  aqua,
} from '../../styles/variables';

const Label = styled.div`
  /* shared */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: ${fontFamilyBase};
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;

  cursor: pointer;
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Chrome/Safari/Opera */
  -khtml-user-select: none; /* Konqueror */
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none; /* Non-prefixed version, currently not supported by any browser */

  font-size: 75%;
  font-weight: 700;
  line-height: 1;
  display: inline;
  padding: .2em .6em .3em .6em;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: .25em;
  float: right!important;
  color: #fff;
  margin-right: 5px;

  /* ----- color ----- */
  background-color: ${(props) => {
    switch (props.type) {
      case 'primary':
        return lightBlue;
      case 'success':
        return green;
      case 'danger':
        return red;
      case 'warning':
        return yellow;
      case 'information':
        return aqua;
      default:
        return lightBlue;
    }
  }};

  /* ----- collapse ----- */
  ${props => props.collapse && `
    display: ${props.hover ? 'block' : 'none'};
    float: right;
  `}
`;

const RightSpan = styled.span`
  position: absolute;
  right: 10px;
  top: 50%;
  margin-top: -7px;

  color: ${props => props.theme.sidebarLinkColor || '#fff'};

  /* ----- hover ----- */
  ${props => (props.collapse && props.hover && !props.level) && `
    display: block;
    left: ${parseInt(sidebarWidth, 10) - 30}px;
    top: 10px!important;
    margin-left: -3px;
    padding: 12px 5px 12px 20px;
    float: right;
    overflow-x: visible;
  `}
`;

const StyledTitle = styled.span`
  cursor: pointer;
  -webkit-touch-callout: none; /* iOS Safari */
  -webkit-user-select: none; /* Chrome/Safari/Opera */
  -khtml-user-select: none; /* Konqueror */
  -moz-user-select: none; /* Firefox */
  -ms-user-select: none; /* Internet Explorer/Edge */
  user-select: none; /* Non-prefixed version, currently not supported by any browser */

  /* collapse */
  ${props => (!props.level && props.collapse) &&
    `@media (min-width: ${screenSmMin}) {
      border-top-right-radius: 4px;
      ${(props.hover ?
        `
          display: block !important;
          position: absolute;
          width: ${parseInt(sidebarWidth, 10) - parseInt(sidebarMiniWidth, 10)}px;
          left: ${sidebarMiniWidth};
          top: 0;
          margin-left: -3px;
          padding: 12px 5px 12px 20px;
          background-color: inherit;
        ` :
        `
          display: none !important;
          -webkit-transform: translateZ(0);
        `
      )}
    }`
  }
`;

const StyledRightIcon = styled.i`
  width: auto;
  height: auto;
  padding: 0;
  margin-right: 10px;
  margin-left: .3em;
  float: right;

  ${props => props.open && `
    -ms-transform: rotate(-90deg);
    -webkit-transform: rotate(-90deg);
    transform: rotate(-90deg);
  `}

  /* ----- collapse ----- */
  ${props => (props.collapse && !props.hover) && 'display: none !important;'};
`;

const StyledLeftIcon = styled.i`
  width: 20px;

  /* ----- color ----- */
  ${(props) => {
    switch (props.color) {
      case 'primary':
        return `color: ${lightBlue};`;
      case 'success':
        return `color: ${green};`;
      case 'danger':
        return `color: ${red};`;
      case 'warning':
        return `color: ${yellow};`;
      case 'information':
        return `color: ${aqua};`;
      default: {
        const c = tinycolor(props.color);
        return c.isValid() ?
          `color: ${c.toString()};` :
          null;
      }
    }
  }};
`;

const StyledLink = styled.a`
  cursor: auto;
  text-decoration: none !important;
  display: block;
  padding: ${props => (!props.level ? '12px 5px 12px 15px' : '5px 5px 5px 15px')};
  position: relative;
  margin: 0;
  font-size: ${fontSizeBase};
  background-color: transparent;

  &:active,
  &:focus,
  &:hover {
    outline: none !important;
    text-decoration: none !important;
  }

  /* ----- theme ----- */
  /* text color - different in submenu */
  color: ${props =>
    (props.level ? props.theme.sidebarSubmenuLinkColor : props.theme.sidebarLinkColor)} !important;
  /* left border - none in submenu */
  border-left: ${props => (!props.level ? props.theme.sidebarLinkBorderLeft : 'none')};
  /* transition */
  ${props => (props.theme.sidebarLinkTransition && `
    -webkit-transition: ${props.theme.sidebarLinkTransition};
    -moz-transition: ${props.theme.sidebarLinkTransition};
    -o-transition: ${props.theme.sidebarLinkTransition};
    transition: ${props.theme.sidebarLinkTransition};
  `)}
  /* font weight */
  ${props => (props.theme.sidebarLinkFontWeight && `
    font-weight: ${props.theme.sidebarLinkFontWeight};
  `)}

  /* ----- active or hover properties ----- */
  ${props => (props.active || props.hover) && `
    color: ${props.theme.sidebarLinkActiveColor || '#fff'} !important;
    background: ${!props.level && props.theme.sidebarLinkActiveBg};
    border-left-color: ${props.theme.sidebarLinkActiveBorderLeftColor || '#3c8dbc'};
    font-weight: ${props.theme.sidebarLinkActiveFontWeight || 'normal'};
    text-decoration: none !important;
  `}
`;

const StyledSubMenu = styled.ul`
  display: ${props => (props.open ? 'block' : 'none')};
  list-style: none;
  padding: 0 0 0 ${props => ((props.level + 1) * 5)}px;

  /* ----- theme ----- */
  margin: ${props => props.theme.sidebarSubmenuMargin || '0'};
  background-color: ${props => props.theme.sidebarSubmenuBg || '#222d32'};

  /* ----- collapse ----- */
  ${props => props.collapse &&
    `@media (min-width: ${screenSmMin}) {
      ${props.theme.sidebarSubmenuLgBorderLeft &&
        `border-left: ${props.theme.sidebarSubmenuLgBorderLeft}`}
    }`
  }
  ${props => (props.collapse && props.open && !props.level) &&
    `@media (min-width: ${screenSmMin}) {
      position: absolute;
      width: ${parseInt(sidebarWidth, 10) - 50}px;
      left: ${sidebarMiniWidth};
      top: 44px;
      margin-left: 0;
      border-bottom-right-radius: 4px;
      ${(props.theme.sidebarSubmenuLgBorderLeft) &&
        `border-left: ${props.theme.sidebarSubmenuLgBorderLeft}`}
    }`
  }
`;

const StyledMenuItem = styled.li`
  /* shared */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: ${fontFamilyBase};
  font-weight: ${fontWeightBase};
  font-size: ${fontSizeBase};
  line-height: ${lineHeightBase};
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;

  list-style: none;
  position: relative;
  margin: 0;
  padding: 0;
  white-space: nowrap;
  display: list-item;
  text-align: -webkit-match-parent;
`;

const renderChildren = (children, sidebarCollapse, level, hover) => {
  const newLevel = level + 1;
  return React.Children.map(children, (child, index) => (
    React.cloneElement(child, {
      key: index.toString(),
      collapse: sidebarCollapse,
      level: newLevel,
      parentHover: hover,
    })
  ));
};

const renderLabels = (labels, collapse, hover) => (
  labels.map((l) => {
    if (l.key && l.type && l.text) {
      if (l.key === 1) {
        return (<Label
          collapse={collapse}
          hover={hover}
          key={l.key.toString()}
          type={l.type}
        >
          {l.text}
        </Label>);
      } else if (!collapse) {
        return (<Label
          collapse={collapse}
          hover={hover}
          key={l.key.toString()}
          type={l.type}
        >
          {l.text}
        </Label>);
      }
    }
    return null;
  })
);

class MenuItem extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      open: false,
      hover: false,
    };
    this._toggleMenu = this.toggleMenu.bind(this);
    this._toggleHover = this.toggleHover.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    (nextProps.collapse !== this.props.collapse) &&
      this.setState({ open: false });
  }

  toggleMenu() {
    this.props.children && this.setState({ open: !this.state.open });
  }

  toggleHover(state) { this.setState({ hover: state }); }

  render() {
    return (
      <StyledMenuItem
        collapse={this.props.collapse}
        hover={this.props.parentHover}
        level={this.props.level}
        onMouseLeave={() => this._toggleHover(false)}
      >
        <StyledLink
          active={this.props.active}
          collapse={this.props.collapse}
          hover={this.state.hover}
          href={(this.props.children || this.props.onClick) ?
            null : this.props.href}
          level={this.props.level}
          onClick={this.props.children ?
            this._toggleMenu : this.props.onClick}
          onMouseEnter={() => this._toggleHover(true)}
        >
          <StyledLeftIcon
            className={`fa ${this.props.icon.className || 'fa-circle-o'}`}
            color={this.props.icon.color || 'none'}
          />
          <StyledTitle
            collapse={this.props.collapse}
            hover={this.state.hover}
            level={this.props.level}
          >
            {this.props.title}
          </StyledTitle>
          <RightSpan
            collapse={this.props.collapse}
            hover={this.state.hover}
            level={this.props.level}
          >
            {(this.props.labels ?
              renderLabels(
                this.props.labels,
                this.props.collapse,
                this.state.hover,
              ) :
              this.props.children &&
                (<StyledRightIcon
                  className=""fa fa-angle-left""
                  open={this.state.open}
                  collapse={this.props.collapse}
                  hover={this.state.hover}
                />)
            )}
          </RightSpan>
        </StyledLink>
        {this.props.children && (
          <StyledSubMenu
            collapse={this.props.collapse}
            hover={this.state.hover}
            level={this.props.level}
            open={this.state.open}
          >
            {renderChildren(
              this.props.children,
              this.props.collapse,
              this.props.level,
              (this.state.hover || this.props.parentHover),
            )}
          </StyledSubMenu>
        )}
      </StyledMenuItem>
    );
  }
}

MenuItem.propTypes = {
  children: React.PropTypes.node,
  active: React.PropTypes.bool,
  collapse: React.PropTypes.bool,
  icon: React.PropTypes.objectOf(React.PropTypes.string),
  href: React.PropTypes.string,
  labels: React.PropTypes.arrayOf(React.PropTypes.object),
  level: React.PropTypes.number,
  onClick: React.PropTypes.func,
  parentHover: React.PropTypes.bool,
  title: React.PropTypes.string,
};

MenuItem.defaultProps = {
  collapse: false,
  icon: { className: 'fa-circle-o' },
  href: null,
  level: 0,
  parentHover: false,
  title: 'Title',
};

export default MenuItem;
","Create a React component for a menu item that can be used in a sidebar navigation. This component should be able to display a menu title, an optional icon, and a list of labels. The menu item should be able to be expanded and collapsed to reveal a submenu."
"/*
 *
 * LinkListContainer
 *
 */

import React from 'react';
import { connect } from 'react-redux';
import selectLinkListContainer from './selectors';
import LinkList from '../../components/LinkList';

export class LinkListContainer extends React.Component { // eslint-disable-line react/prefer-stateless-function
  render() {
    return (
      <LinkList {...this.props} />
    );
  }
}

const mapStateToProps = selectLinkListContainer();

function mapDispatchToProps(dispatch) {
  return {
    dispatch,
  };
}

export default connect(mapStateToProps, mapDispatchToProps)(LinkListContainer);
",Create a React component that renders a list of links. The component should be connected to the Redux store and use the `connect` function to map state and dispatch props to the component.
"import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import ReduxPromise from 'redux-promise';

import App from './components/app';
import reducers from './reducers';

const createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);

ReactDOM.render(
  <Provider store={createStoreWithMiddleware(reducers)}>
    <App />
  </Provider>
  , document.querySelector('.container'));
","Provide the React code for setting up a Redux store with the Redux Promise middleware, connecting it to a React app, and rendering the App component with the store as a provider."
"/**
 * 认证需填写字段
 * 17-03-07 判断来源add_alumni
 * @Date: 2017-02-19 15:58:37
 * @Last Modified by:   Administrator
 * @Last Modified time: 2017-03-18 23:14:45
 */
'use strict';

import React from 'react';
import { form, observer } from 'decorators';
import { $auth } from 'stores';
import { List, Button } from 'antd-mobile';
import { Spin, Title, ButtonWrap, AppForm } from 'components';
import './index.less';

const prefixCls = 'pages-admin__auth-fields';

@form
@observer
export default class AdminAuthFields extends React.Component {
    constructor() {
        super();

        Utils.binds(this, ['handleSubmit']);
    }

    componentDidMount() {
        $auth.fetch_auth_fields({ 
            alumni_id: this.alumni_id,
        });
    }

    async handleSubmit(values) {
        const { alumni_id } = this;

        await $auth.update_auth_fields({
            alumni_id,
            ...values,
        });

        switch (this.query.from) {
            case 'add_alumni':
                Utils.router.replace({
                    pathname: Const.router.admin_auth_show({ 
                        alumni_id,
                    }),
                    query: this.query,
                });
                break;

            default:
                Utils.onSuccess();
                break;
        }
    }

    get alumni_id() {
        return this.props.params.alumni_id;
    }

    get query() {
        return this.props.location.query;
    }

    get data() {
        return {
            auth_fields: $auth.getStateById(this.alumni_id, 'auth_fields'),
        };
    }

    renderForms() {
        const { form } = this.props;
        const { auth_fields } = this.data;

        return Utils.generateFieldsConfig(auth_fields).map((item, index) => (
            <AppForm 
                key={index}
                form={form}
                renderHeader={() => (
                    <div className={`${prefixCls}__form-header`}>
                        <span>{Const.fileds_group[index]}</span>
                        {
                            index == 0 && 
                            <div>
                                <span>必填</span>
                                <span>选填</span>
                            </div>
                        }
                    </div>
                )}
            >
                {
                    item.map((i, idx) => (
                        <List.Item 
                            key={`${index}-${i[0]}`} 
                            extra={this.renderRadios(i)}
                        >
                            {i[2]}
                        </List.Item>
                    ))
                }
            </AppForm>
        ));
    }

    //右侧两个单选item
    renderRadios(item) {
        const { form } = this.props;

        return (
            <div className={`${prefixCls}__radios`}>
                <AppForm.Radio 
                    form={form} 
                    name={item[0]}
                    initialValue={item[1]}
                    value=""1""
                    clear=""0""
                    disabled={item[3] == 0} /*分组0的项目不能修改*/
                />
                <AppForm.Radio 
                    form={form} 
                    name={item[0]}
                    initialValue={item[1]}
                    value=""2""
                    clear=""0""
                    disabled={item[3] == 0}
                />
            </div>
        );
    }

    renderBtn() {
        const { form, onSubmit } = this.props;
        let text;

        switch (this.query.from) {
            case 'add_alumni':
                text = '下一步 (2/4)';
                break;

            default: 
                text = '保存';
                break;
        }

        return (
            <ButtonWrap>
                <Button 
                    type=""primary"" 
                    onClick={(e) => onSubmit(e, form, this.handleSubmit)}
                >
                    {text}
                </Button>
            </ButtonWrap>
        );
    }

    render() {
        return (
            <Spin
                className={prefixCls}
                spinning={Utils.isSpinning(this.data)}
            >
                <Title>请设置加入该校友录的校友需要填写的个人信息。</Title>

                {this.renderForms()}

                {this.renderBtn()}
            </Spin>
        );
    } 
};","Generate the code to create a React component to allow admin users to set authentication fields that new users in a system must fill out. The component should have the following features:

* Lists the authentication fields in groups
* For each field, allow the admin to specify whether the field is required or optional
* Include a submit button to save the changes"
"/*
 *
 * LanguageProvider
 *
 * this component connects the redux state language locale to the
 * IntlProvider component and i18n messages (loaded from `app/translations`)
 */

import React from 'react';
import { connect } from 'react-redux';
import { createSelector } from 'reselect';
import { IntlProvider } from 'react-intl';

import { makeSelectLocale } from './selectors';

export class LanguageProvider extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function
  render() {
    return (
      <IntlProvider locale={this.props.locale} key={this.props.locale} messages={this.props.messages[this.props.locale]}>
        {React.Children.only(this.props.children)}
      </IntlProvider>
    );
  }
}

LanguageProvider.propTypes = {
  locale: React.PropTypes.string,
  messages: React.PropTypes.object,
  children: React.PropTypes.element.isRequired,
};

const mapStateToProps = createSelector(
  makeSelectLocale(),
  (locale) => ({ locale })
);

export default connect(mapStateToProps)(LanguageProvider);
",Create a React component that provides internationalization (i18n) functionality. It should connect to the Redux store and use the IntlProvider component to render localized messages based on the current language locale. The messages should be loaded from a separate file containing translations for different locales.
"import React from 'react'
import { Router } from 'react-router-dom'
import { Provider } from 'react-redux'

import createStore from './src/redux/redux'

exports.replaceRouterComponent = ({ history }) => {
    const store = createStore()

    const ConnectedRouterWrapper = ({ children }) => (
        <Provider store={store}>
            <Router history={history}>{children}</Router>
        </Provider>
    )

    return ConnectedRouterWrapper
}
",Create a React component that wraps the Router component with Redux and returns it.
"import React from 'react';
import PropTypes from 'prop-types';
import Input from 'wix-style-react/Input';

const style = {
  display: 'inline-block',
  padding: '0 5px',
  width: '200px',
  lineHeight: '22px',
  verticalAlign: 'top'
};

const defaultProps = {
  size: 'normal',
  magnifyingGlass: true,
  placeholder: 'They did not know it was impossible, so they did it!',
  unit: '$'
};

const Example = ({theme}) =>
  <div className=""ltr"">
    <div style={style}>
      Small
      <Input theme={theme} {...defaultProps} size=""small"" roundInput/>
    </div>
    <div style={style}>
      Normal<br/>
      <Input theme={theme} {...defaultProps} size=""normal"" roundInput/>
    </div>
    <div style={style}>
      Large<br/>
      <Input theme={theme} {...defaultProps} size=""large"" roundInput/>
    </div>
  </div>;

Example.propTypes = {
  theme: PropTypes.string
};

export default Example;
","Provide an input text that will generate a React component with configurable size and round input styling for the Wix Style React Input component. The component should support small, normal, and large sizes and use default props for placeholder text, unit, and magnifying glass icon visibility."
"import React from 'react'
import { Flex, Box } from 'reflexbox'
import { useOAuth2, WhileIO } from 'react-hook-oauth2'
import Header from './Header'
import Registry from '../Registry'
import Issue from '../Issue'

const IO = WhileIO(undefined, Issue, Registry)

const UI = () => {
  const status = useOAuth2()
  return (<IO status={status} />)
}

const Account = () => (
  <>
    <Header />
    <Flex>
      <Box width={[1]} m=""1em"">
        <UI />
      </Box>
    </Flex>
  </>
)

export default Account
","Generate a React functional component that uses the 'react-hook-oauth2' package to manage authentication, and conditionally renders either a 'Issue' component or a 'Registry' component based on the authentication status."
"import React from 'react'
import { FormattedMessage, injectIntl } from 'react-intl'
import Dialog from 'material-ui/Dialog'
import FlatButton from 'material-ui/FlatButton'
import RaisedButton from 'material-ui/RaisedButton'
import TextField from 'material-ui/TextField'
import DatePicker from 'material-ui/DatePicker'

import styles from './styles.scss'

const initialDate = new Date()
initialDate.setFullYear(initialDate.getFullYear())
initialDate.setHours(0, 0, 0, 0)

const initialState = {
  open: false,
  disabled: true,
  label_error_text: null,
  amount_error_text: null,
  dateValue: initialDate,
  labelValue: '',
  amountValue: ''
}

class AddTransaction extends React.Component {
  constructor(props) {
    super(props)
    this.state = initialState
  }

  handleOpen = () => {
    this.setState({ open: true })
  }

  handleClose = () => {
    this.setState(initialState)
  }

  changeValue(e, type) {
    const value = e.target.value
    const next_state = {}
    next_state[type] = value
    this.setState(next_state, () => {
      this.isDisabled()
    })
  }

  changeDateValue(date, type) {
    const value = date
    const next_state = {}
    next_state[type] = value
    this.setState(next_state, () => {
      this.isDisabled()
    })
  }

  isCurrency(amount) {
    let amountAsNum = +amount
    return !isNaN(amountAsNum)
  }

  isDisabled() {
    let stateToUpdate = {}
    let date_is_valid = true
    let label_is_valid = false
    let amount_is_valid = false

    if (this.state.dateValue === null) {
      date_is_valid = false
    } else {
      date_is_valid = true
    }

    if (this.state.labelValue === '') {
      stateToUpdate['label_error_text'] = (
        <FormattedMessage id=""addTransaction.modal.label_error_text"" />
      )
    } else {
      stateToUpdate['label_error_text'] = null
      label_is_valid = true
    }

    if (this.state.amountValue === '') {
      stateToUpdate['amount_error_text'] = (
        <FormattedMessage id=""addTransaction.modal.amount_error_text.empty"" />
      )
    } else if (!this.isCurrency(this.state.amountValue)) {
      stateToUpdate['amount_error_text'] = (
        <FormattedMessage id=""addTransaction.modal.amount_error_text.invalid"" />
      )
    } else {
      stateToUpdate['amount_error_text'] = null
      amount_is_valid = true
    }

    if (date_is_valid && label_is_valid && amount_is_valid) {
      stateToUpdate['disabled'] = false
    } else {
      stateToUpdate['disabled'] = true
    }

    this.setState(stateToUpdate)
  }

  onSubmit = () => {
    if (!this.state.disabled) {
      var dateObject = new Date(this.state.dateValue)
      var date = new Date(
        dateObject.getTime() - dateObject.getTimezoneOffset() * 60000
      )
        .toISOString()
        .substring(0, 10)
      this.props.createTransaction({
        accountId: this.props.selectedAccount,
        date: date,
        label: this.state.labelValue,
        amount: Number(this.state.amountValue).toFixed(2),
        recurringGroupId: null
      })
      this.handleClose()
    }
  }

  render() {
    const actions = [
      <FlatButton
        label={<FormattedMessage id=""buttons.cancel"" />}
        primary={true}
        onTouchTap={this.handleClose}
      />,
      <FlatButton
        label={<FormattedMessage id=""buttons.add"" />}
        primary={true}
        keyboardFocused={true}
        onTouchTap={this.onSubmit}
        disabled={this.state.disabled}
      />
    ]

    return (
      <div>
        <RaisedButton
          label={<FormattedMessage id=""addTransaction.buttons.add"" />}
          fullWidth={true}
          primary={true}
          onTouchTap={this.handleOpen}
        />
        <Dialog
          title={this.props.intl.formatMessage({
            id: 'addTransaction.modal.title'
          })}
          actions={actions}
          modal={false}
          className={styles.dialog}
          open={this.state.open}
          onRequestClose={this.handleClose}
          autoScrollBodyContent={true}
        >
          <div>
            <DatePicker
              floatingLabelText={
                <FormattedMessage id=""addTransaction.modal.date"" />
              }
              hintText={
                <FormattedMessage id=""addTransaction.modal.date_hint"" />
              }
              autoOk={true}
              value={this.state.dateValue}
              onChange={(e, date) => this.changeDateValue(date, 'dateValue')}
            />
            <br />
            <TextField
              floatingLabelText={
                <FormattedMessage id=""addTransaction.modal.label"" />
              }
              hintText={
                <FormattedMessage id=""addTransaction.modal.label_hint"" />
              }
              errorText={this.state.label_error_text}
              onChange={e => this.changeValue(e, 'labelValue')}
            />
            <br />
            <TextField
              floatingLabelText={
                <FormattedMessage id=""addTransaction.modal.amount"" />
              }
              hintText={
                <FormattedMessage id=""addTransaction.modal.amount_hint"" />
              }
              errorText={this.state.amount_error_text}
              onChange={e => this.changeValue(e, 'amountValue')}
            />
            <br />
          </div>
        </Dialog>
      </div>
    )
  }
}

export default injectIntl(AddTransaction)
","Implement a React component for a dialog that allows users to add a new transaction. The dialog should have fields for the date, label, and amount. 
The component should validate the user input and disable the submit button if the input is invalid. The component should use material-ui for styling."
"import React, { Component } from 'react';


export default class HomePage extends Component {
  render() {
    return (
      <div>
        <h1>Домашняя страница</h1>
      </div>
    );
  }
}
","Generate the code for a React component; make it a default export, for use as a webpage home page; have it render an h1 element with the text ""Homepage"", and return the element in a div."
"import React from 'react';
import { render } from 'react-dom';
import ButtonGroup from './components/ButtonGroup/ButtonGroup.js';

render(
  <ButtonGroup
    className='ButtonGroup'
    buttons={[
      {
        'className': 'Button',
        onClick() { console.log('button') },
        'textContent': 'button'
      },
      {
        'className': 'Button Button--default',
        onClick() { console.log('default') },
        'textContent': 'default'
      },
      {
        'className': 'Button Button--primary',
        onClick() { console.log('primary') },
        'textContent': 'primary'
      },
      {
        'className': 'Button Button--info',
        onClick() { console.log('info') },
        'textContent': 'info'
      },
      {
        'className': 'Button Button--success',
        onClick() { console.log('success') },
        'textContent': 'success'
      },
      {
        'className': 'Button Button--warning',
        onClick() { console.log('warning') },
        'textContent': 'warning'
      },
      {
        'className': 'Button Button--danger',
        onClick() { console.log('danger') },
        'textContent': 'danger'
      }
    ]} />,
  document.getElementById('ButtonGroup')
);",Create a react code snippet for a button group component that renders buttons with different styles and onClick events. Include event listeners for each button that logs a message to the console.
"import React, { Component } from 'react';
import './Dashboard.css';

class Admin extends Component {
    constructor(props) {
        super(props);
        this.props.Collapse('dashboard');
    }

    render() {
        return (
            <div className='Admin'>
                <div className='App-header'>
                    <h2>Welcome Admin</h2>
                </div>
            </div>
        );
    }
}

export default Admin;
","Create a React component called Admin that displays a welcome message to the user. The component should have a constructor that calls a function to collapse a specific element in the UI. The component should render an HTML div with the class name 'Admin' containing a header with the text ""Welcome Admin""."
"import React from 'react';

import SPELLS from 'common/SPELLS';
import SpellIcon from 'common/SpellIcon';
import SpellLink from 'common/SpellLink';
import { formatNumber } from 'common/format';

import Module from 'Parser/Core/Module';
import calculateEffectiveHealing from 'Parser/Core/calculateEffectiveHealing';
import Combatants from 'Parser/Core/Modules/Combatants';

import { BEACON_TYPES, BASE_BEACON_TRANSFER, BEACON_OF_FAITH_TRANSFER_REDUCTION } from '../../Constants';

import LightOfDawn from '../PaladinCore/LightOfDawn';

const LIGHTS_EMBRACE_BEACON_HEAL_INCREASE = 0.4;

/**
 * 4 pieces (Holy) : For 5 sec after casting Light of Dawn, your healing spells will transfer an additional 40% to your Beacon of Light target.
 */
class Tier20_4set extends Module {
  static dependencies = {
    combatants: Combatants,
    lightOfDawn: LightOfDawn,
  };

  healing = 0;
  totalBeaconHealingDuringLightsEmbrace = 0;

  on_initialized() {
    this.active = this.combatants.selected.hasBuff(SPELLS.HOLY_PALADIN_T20_4SET_BONUS_BUFF.id);
  }

  on_beacon_heal(beaconTransferEvent, healEvent) {
    const baseBeaconTransferFactor = this.getBaseBeaconTransferFactor(healEvent);
    const lightsEmbraceBeaconTransferFactor = this.getLightsEmbraceBeaconTransferFactor(healEvent);
    if (lightsEmbraceBeaconTransferFactor === 0) {
      return;
    }
    const totalBeaconTransferFactor = baseBeaconTransferFactor + lightsEmbraceBeaconTransferFactor;
    const lightsEmbraceBeaconTransferHealingIncrease = lightsEmbraceBeaconTransferFactor / totalBeaconTransferFactor;

    const effectiveHealing = calculateEffectiveHealing(beaconTransferEvent, lightsEmbraceBeaconTransferHealingIncrease);

    this.healing += effectiveHealing;
    this.totalBeaconHealingDuringLightsEmbrace += beaconTransferEvent.amount + (beaconTransferEvent.absorbed || 0) + (beaconTransferEvent.overheal || 0);
  }

  getBaseBeaconTransferFactor(healEvent) {
    let beaconFactor = BASE_BEACON_TRANSFER;

    if (this.beaconType === BEACON_TYPES.BEACON_OF_FATH) {
      beaconFactor *= (1 - BEACON_OF_FAITH_TRANSFER_REDUCTION);
    }

    return beaconFactor;
  }
  getLightsEmbraceBeaconTransferFactor(healEvent) {
    let beaconTransferFactor = 0;
    // What happens here are 2 situations:
    // - Light of Dawn applies Light's Embrace, it acts a bit weird though since the FIRST heal from the cast does NOT get the increased beacon transfer, while all sebsequent heals do (even when the combatlog has't fired the Light's Embrace applybuff event yet). The first part checks for that. The combatlog looks different when the first heal is a self heal vs they're all on other people, but in both cases it always doesn't apply to the first LoD heal and does for all subsequent ones.
    // - If a FoL or something else is cast right before the LoD, the beacon transfer may be delayed until after the Light's Embrace is applied. This beacon transfer does not appear to benefit. My hypothesis is that the server does healing and buffs async and there's a small lag between the processes, and I think 100ms should be about the time required.
    const hasLightsEmbrace = (healEvent.ability.guid === SPELLS.LIGHT_OF_DAWN_HEAL.id && healEvent.lightOfDawnHealIndex > 0) || this.combatants.selected.hasBuff(SPELLS.LIGHTS_EMBRACE_BUFF.id, null, 0, 100);
    if (hasLightsEmbrace) {
      beaconTransferFactor += LIGHTS_EMBRACE_BEACON_HEAL_INCREASE;
    }
    if (this.beaconType === BEACON_TYPES.BEACON_OF_FATH) {
      beaconTransferFactor *= (1 - BEACON_OF_FAITH_TRANSFER_REDUCTION);
    }
    // console.log(hasLightsEmbrace, healEvent.ability.name, healEvent, '-', (healEvent.timestamp - this.owner.fight.start_time) / 1000, 'seconds into the fight');

    return beaconTransferFactor;
  }

  item() {
    return {
      id: `spell-${SPELLS.HOLY_PALADIN_T20_4SET_BONUS_BUFF.id}`,
      icon: <SpellIcon id={SPELLS.HOLY_PALADIN_T20_4SET_BONUS_BUFF.id} />,
      title: <SpellLink id={SPELLS.HOLY_PALADIN_T20_4SET_BONUS_BUFF.id} />,
      result: (
        <dfn data-tip={`The actual effective healing contributed by the tier 20 4 set bonus. A total of ${formatNumber(this.totalBeaconHealingDuringLightsEmbrace)} <span style=""color:orange"">raw</span> healing was done on beacons during the Light's Embrace buff.`}>
          {this.owner.formatItemHealingDone(this.healing)}
        </dfn>
      ),
    };
  }
}

export default Tier20_4set;
","Generate a description of how the healing from the Paladin Tier 20 4-piece set bonus is calculated, including any special conditions that apply to the first heal and delayed beacon transfers."
"import React, { Component } from 'react';
import withStyles from 'isomorphic-style-loader/lib/withStyles';
import s from './NewEntry.css';
import Dialog from 'material-ui/Dialog';
import {grey400, cyan500} from 'material-ui/styles/colors';
import IconButton from 'material-ui/IconButton';
import EditorBorderColor from 'material-ui/svg-icons/editor/border-color';
import EditorPublish from 'material-ui/svg-icons/editor/publish';
import ContentDrafts from 'material-ui/svg-icons/content/drafts';
import TextField from 'material-ui/TextField';

const styles = {
    iconSize: {
        width: 21,
        height: 21,
    }
};

class NewEntry extends Component {
    state = {
        open: false,
    };
    handleOpen = () => {
        this.setState({open: true});
    };

    handleClose = () => {
        this.setState({open: false});
    };

    render() {
        const actions = [
            <IconButton tooltip=""Publish""
                        tooltipPosition=""bottom-center""
                        onTouchTap={this.handleClose}>
                <EditorPublish color={cyan500} className={s.actionIcon}/>
            </IconButton>,
            <IconButton tooltip=""Save as a draft""
                        tooltipPosition=""bottom-center""
                        onTouchTap={this.handleClose}>
                <ContentDrafts color={grey400} className={s.actionIcon}/>
            </IconButton>
        ];

        return (
            <div>
                <IconButton tooltip=""Write an Entry""
                            tooltipPosition=""bottom-right""
                            iconStyle={styles.iconSize}
                            onTouchTap={this.handleOpen}>
                    <EditorBorderColor color={grey400} className={s.viewsIcon}/>
                </IconButton>
                <Dialog
                    title=""Create new entry""
                    modal={false}
                    open={this.state.open}
                    actions={actions}
                    autoScrollBodyContent={true}
                    autoDetectWindowHeight={true}
                    actionsContainerClassName={s.actionsContainer}
                    onRequestClose={this.handleClose}
                    className={s.dialogWindow}
                >
                    <div className={s.entryFormContainer}>
                        <TextField
                            hintText=""Enter title for your entry""
                            floatingLabelText=""Title""
                        />
                        <TextField
                            hintText=""Enter text for your entry""
                            floatingLabelText=""Text""
                            multiLine={true}
                            rows={2}
                        />
                    </div>
                </Dialog>
            </div>
        );
    }
}

export default withStyles(s)(NewEntry);","Craft a React component that opens a Material UI dialog with a form for users to create a new diary entry. The dialog should have a title, a text field for the entry title, a multi-line text field for the entry text, and buttons to save as a draft or publish."
"import React from 'react';

function Header(props) {
  return <h1>{ props.title }</h1>;
}

export default Header;
","Design a React component titled ""Header"" that dynamically displays a title passed as a prop."
"import React from 'react';
import { translate } from 'i18n-calypso';
import { overEvery as and } from 'lodash';

import {
	makeTour,
	Tour,
	Step,
	Next,
	Quit,
	Continue,
	Link,
} from 'layout/guided-tours/config-elements';
import {
	isNewUser,
	isEnabled,
	selectedSiteIsPreviewable,
	selectedSiteIsCustomizable,
	previewIsNotShowing,
	previewIsShowing,
} from 'state/ui/guided-tours/contexts';
import Gridicon from 'components/gridicon';

export const MainTour = makeTour(
	<Tour name=""main"" version=""20160601"" path=""/"" when={ and( isNewUser, isEnabled( 'guided-tours/main' ) ) }>
		<Step name=""init"" placement=""right"" next=""my-sites"" className=""guided-tours__step-first"">
			<p className=""guided-tours__step-text"">
				{
					translate( ""{{strong}}Need a hand?{{/strong}} We'd love to show you around the place,"" +
											'and give you some ideas for what to do next.',
						{
							components: {
								strong: <strong />,
							}
						} )
				}
			</p>
			<div className=""guided-tours__choice-button-row"">
				<Next step=""my-sites"">{ translate( ""Let's go!"" ) }</Next>
				<Quit>{ translate( 'No thanks.' ) }</Quit>
			</div>
		</Step>

		<Step name=""my-sites""
			target=""my-sites""
			placement=""below""
			arrow=""top-left""
			next=""sidebar""
		>
			<p className=""guided-tours__step-text"">
				{
					translate( ""{{strong}}First things first.{{/strong}} Up here, you'll find tools for managing "" +
											""your site's content and design."",
						{
							components: {
								strong: <strong />,
							}
						} )
				}
			</p>
			<p className=""guided-tours__actionstep-instructions"">
				<Continue icon=""my-sites"" target=""my-sites"" step=""sidebar"" click>
					{
						translate( 'Click the {{GridIcon/}} to continue.', {
							components: {
								GridIcon: <Gridicon icon=""my-sites"" size={ 24 } />,
							}
						} )
					}
				</Continue>
			</p>
		</Step>

		<Step name=""sidebar""
			target=""sidebar""
			arrow=""left-middle""
			placement=""beside""
			next=""click-preview""
		>
			<p className=""guided-tours__step-text"">
				{ translate( 'This menu lets you navigate around, and will adapt to give you the tools you need when you need them.' ) }
			</p>
			<div className=""guided-tours__choice-button-row"">
				<Next step=""click-preview"" />
				<Quit />
			</div>
		</Step>

		<Step name=""click-preview""
			className=""guided-tours__step-action""
			target=""site-card-preview""
			arrow=""top-left""
			placement=""below""
			when={ selectedSiteIsPreviewable }
			scrollContainer="".sidebar__region""
			next=""in-preview""
		>
			<p className=""guided-tours__step-text"">
				{
					translate( ""This shows your currently {{strong}}selected site{{/strong}}'s name and address."", {
						components: {
							strong: <strong />,
						}
					} )
				}
			</p>
			<p className=""guided-tours__actionstep-instructions"">
				<Continue step=""in-preview"" target=""site-card-preview"" click>
					{
						translate( ""Click {{strong}}your site's name{{/strong}} to continue."", {
							components: {
								strong: <strong/>,
							},
						} )
					}
				</Continue>
			</p>
		</Step>

		<Step name=""in-preview""
			placement=""center""
			when={ selectedSiteIsPreviewable }
			next=""close-preview""
		>
			<p className=""guided-tours__step-text"">
				{
					translate( ""This is your site's {{strong}}Preview{{/strong}}. From here you can see how your site looks to others."", {
						components: {
							strong: <strong />,
						}
					} )
				}
			</p>
			<div className=""guided-tours__choice-button-row"">
				<Next step=""close-preview"" />
				<Quit />
				<Continue step=""close-preview"" when={ previewIsNotShowing } hidden />
			</div>
		</Step>

		<Step name=""close-preview""
			className=""guided-tours__step-action""
			target=""web-preview__close""
			arrow=""left-top""
			placement=""beside""
			when={ and( selectedSiteIsPreviewable, previewIsShowing ) }
			next=""themes""
		>
			<p className=""guided-tours__step-text"">
				{ translate( 'Take a look at your site — and then close the site preview. You can come back here anytime.' ) }
			</p>
			<p className=""guided-tours__actionstep-instructions"">
				<Continue step=""themes"" target=""web-preview__close"" when={ previewIsNotShowing }>
					{
						translate( 'Click the {{GridIcon/}} to continue.', {
							components: {
								GridIcon: <Gridicon icon=""cross-small"" size={ 24 } />,
							}
						} )
					}
				</Continue>
			</p>
		</Step>

		<Step name=""themes""
			target=""themes""
			arrow=""top-left""
			placement=""below""
			when={ selectedSiteIsCustomizable }
			scrollContainer="".sidebar__region""
			next=""finish""
		>
			<p className=""guided-tours__step-text"">
				{
					translate( 'Change your {{strong}}Theme{{/strong}} to choose a new layout, or {{strong}}Customize{{/strong}} ' +
											""your theme's colors, fonts, and more."",
						{
							components: {
								strong: <strong />,
							}
						} )
				}
			</p>
			<div className=""guided-tours__choice-button-row"">
				<Next step=""finish"" />
				<Quit />
			</div>
		</Step>

		<Step name=""finish""
			placement=""center""
			className=""guided-tours__step-finish""
		>
			<p className=""guided-tours__step-text"">
				{
					translate( ""{{strong}}That's it!{{/strong}} Now that you know a few of the basics, feel free to wander around."", {
						components: {
							strong: <strong />,
						}
					} )
				}
			</p>
			<div className=""guided-tours__single-button-row"">
				<Quit primary>{ translate( ""We're all done!"" ) }</Quit>
			</div>
			<Link href=""https://lean.wordpress.com"">
				{ translate( 'Learn more about WordPress.com' ) }
			</Link>
		</Step>
	</Tour>
);
","Generate a React component that provides a guided tour for a user interface, walking them through basic functionality and providing helpful tips."
"import React from 'react';
import routes from '../shared/routes';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
import { Router, browserHistory } from 'react-router';
import { configureStore } from '../shared/redux/store/configureStore';

const store = configureStore(window.__INITIAL_STATE__);
const history = browserHistory;
const dest = document.getElementById('root');

render(<Provider store={store}>
        <Router history={history} routes={routes} />
       </Provider>, dest);
","Create a React application that uses React Router for routing and Redux for state management. The application should have a store, history, and root component defined."
"import cx from 'classnames'
import _ from 'lodash'
import PropTypes from 'prop-types'
import React from 'react'

import {
  childrenUtils,
  customPropTypes,
  getElementType,
  getUnhandledProps,
  META,
  SUI,
  useTextAlignProp,
} from '../../lib'

/**
 * A card can contain a description with one or more paragraphs.
 */
function CardDescription(props) {
  const { children, className, content, textAlign } = props
  const classes = cx(
    useTextAlignProp(textAlign),
    'description',
    className,
  )
  const rest = getUnhandledProps(CardDescription, props)
  const ElementType = getElementType(CardDescription, props)

  return (
    <ElementType {...rest} className={classes}>
      {childrenUtils.isNil(children) ? content : children}
    </ElementType>
  )
}

CardDescription._meta = {
  name: 'CardDescription',
  parent: 'Card',
  type: META.TYPES.VIEW,
}

CardDescription.propTypes = {
  /** An element type to render as (string or function). */
  as: customPropTypes.as,

  /** Primary content. */
  children: PropTypes.node,

  /** Additional classes. */
  className: PropTypes.string,

  /** Shorthand for primary content. */
  content: customPropTypes.contentShorthand,

  /** A card content can adjust its text alignment. */
  textAlign: PropTypes.oneOf(_.without(SUI.TEXT_ALIGNMENTS, 'justified')),
}

export default CardDescription
","Generate a React component called CardDescription that displays a description within a card. It should accept children or content as props, and allow for custom styles through the className prop. Include textAlign as a prop to control the alignment of the text."
"import React from 'react'
import DuckImage from '../assets/Duck.jpg'
import './HomeView.scss'

export const HomeView = () => (
  <div>
    <h4>Welcome!</h4>
    <img alt='This is a duck, because Redux!' className='duck' src={DuckImage} />
  </div>
)

export default HomeView
",Create a basic React component that displays a welcome message and an image of a duck. The component should be named HomeView and should use a stylesheet named HomeView.scss.
"import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { fetchBookmarkedStatuses, expandBookmarkedStatuses } from '../../actions/bookmarks';
import Column from '../ui/components/column';
import ColumnHeader from '../../components/column_header';
import { addColumn, removeColumn, moveColumn } from '../../actions/columns';
import StatusList from '../../components/status_list';
import { defineMessages, injectIntl, FormattedMessage } from 'react-intl';
import ImmutablePureComponent from 'react-immutable-pure-component';
import { debounce } from 'lodash';

const messages = defineMessages({
  heading: { id: 'column.bookmarks', defaultMessage: 'Bookmarks' },
});

const mapStateToProps = state => ({
  statusIds: state.getIn(['status_lists', 'bookmarks', 'items']),
  isLoading: state.getIn(['status_lists', 'bookmarks', 'isLoading'], true),
  hasMore: !!state.getIn(['status_lists', 'bookmarks', 'next']),
});

export default @connect(mapStateToProps)
@injectIntl
class Bookmarks extends ImmutablePureComponent {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    shouldUpdateScroll: PropTypes.func,
    statusIds: ImmutablePropTypes.list.isRequired,
    intl: PropTypes.object.isRequired,
    columnId: PropTypes.string,
    multiColumn: PropTypes.bool,
    hasMore: PropTypes.bool,
    isLoading: PropTypes.bool,
  };

  componentWillMount () {
    this.props.dispatch(fetchBookmarkedStatuses());
  }

  handlePin = () => {
    const { columnId, dispatch } = this.props;

    if (columnId) {
      dispatch(removeColumn(columnId));
    } else {
      dispatch(addColumn('BOOKMARKS', {}));
    }
  }

  handleMove = (dir) => {
    const { columnId, dispatch } = this.props;
    dispatch(moveColumn(columnId, dir));
  }

  handleHeaderClick = () => {
    this.column.scrollTop();
  }

  setRef = c => {
    this.column = c;
  }

  handleLoadMore = debounce(() => {
    this.props.dispatch(expandBookmarkedStatuses());
  }, 300, { leading: true })

  render () {
    const { intl, shouldUpdateScroll, statusIds, columnId, multiColumn, hasMore, isLoading } = this.props;
    const pinned = !!columnId;

    const emptyMessage = <FormattedMessage id='empty_column.bookmarked_statuses' defaultMessage=""You don't have any bookmarked toots yet. When you bookmark one, it will show up here."" />;

    return (
      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.heading)}>
        <ColumnHeader
          icon='bookmark'
          title={intl.formatMessage(messages.heading)}
          onPin={this.handlePin}
          onMove={this.handleMove}
          onClick={this.handleHeaderClick}
          pinned={pinned}
          multiColumn={multiColumn}
          showBackButton
        />

        <StatusList
          trackScroll={!pinned}
          statusIds={statusIds}
          scrollKey={`bookmarked_statuses-${columnId}`}
          hasMore={hasMore}
          isLoading={isLoading}
          onLoadMore={this.handleLoadMore}
          shouldUpdateScroll={shouldUpdateScroll}
          emptyMessage={emptyMessage}
          bindToDocument={!multiColumn}
        />
      </Column>
    );
  }

}
","Generate a React component using React Redux that displays a list of bookmarked statuses (toots) and allows users to pin or move the column, load more statuses, and handle header clicks. The component should have a header with an icon, title, and buttons for pinning, moving, and loading more. The statuses should be displayed in a list with infinite scrolling. If the column is pinned, it should be bound to the document for smooth scrolling. If the column is not pinned, the scroll position should be updated when the header is clicked. The component should handle empty states and display an appropriate message."
"import React from 'react'
import HomeProyectos from '../home-proyectos/component'
import HomePropuestas from '../home-propuestas/component'

const HomeForum = (props) => {
  const { params: { forum } } = props
  switch (forum) {
    case 'propuestas':
      return <HomePropuestas {...props} />
    default:
      return <HomeProyectos {...props} />
  }
}

export default HomeForum
","Create a React component that renders a forum page based on a forum parameter in the URL. If the parameter is ""propuestas"", render a ""Home Propuestas"" component. Otherwise, render a ""Home Proyectos"" component."
"import React from 'react'
import { connect } from 'react-redux'
import { Table } from 'antd'

@connect(
  state => ({
    detail: state.pages.reviewSettings.strategyDetail
  })
)

export default class DetailBoxView extends React.Component {

  render () {
    const { info, detail } = this.props

    const columns = [{
      title: '策略编号',
      dataIndex: 'authId',
      key: 'authId'
    }, {
      title: '策略名称',
      dataIndex: 'alias',
      key: 'alias'
    }, {
      title: '授权方式',
      dataIndex: 'authType',
      key: 'authType',
      render: (text, record) => {
        return text === '0' || text === 0 ? <span>无序</span> : <span>有序</span>
      }
    }, {
      title: '授权定义',
      children: [{
        title: '一级',
        dataIndex: 'add1',
        key: 'add1'
      }, {
        title: '二级',
        dataIndex: 'add2',
        key: 'add2'
      }, {
        title: '三级',
        dataIndex: 'add3',
        key: 'ad3'
      }, {
        title: '四级',
        dataIndex: 'add4',
        key: 'add4'
      }, {
        title: '五级',
        dataIndex: 'add5',
        key: 'add5'
      }]
    }]

    let dataSource = []
    if (detail.alias) {
      dataSource.push({
        ...detail,
        key: 1
      })
    }

    return (
      <div className='detailBox'>
        <h4 style={{ paddingBottom: '15px' }}>交易名称：{info.bsnName}</h4>
        <div className='app-narrow-table'>
          <Table
            bordered
            columns={columns}
            dataSource={dataSource}
            pagination={false}
          />
        </div>
      </div>
    )
  }
}
",Generate a React component that renders a table with specific columns and data. The data should be provided as props and the component should render a header with a title.
"import React from 'react';
import {Component} from 'react';


export default class Support extends Component {
  askUltimateQuestion() {
      alert('the answer is 42');
  }

  render() {
    return (
      <form onSubmit={this.askUltimateQuestion}>
      <input type=""text"" className=""support"" placeholder=""ask us anything"" />
      </form>
    )
  }}
","Create a React component that includes a text input and a submit button that displays an alert with the text ""the answer is 42"" when the button is clicked."
"import React from 'react';
import { View, Button, StyleSheet } from 'react-native';

const styles = StyleSheet.create({
  button: {
    marginBottom: 8,
    marginLeft: 40,
    marginRight: 40,
  }
});

const PButton = ({ title, onPress}) => {
  return (
    <View style={styles.button}>
      <Button title={title} onPress={onPress}></Button>
    </View>
  )
};

export default PButton;",Create a reusable React Native component that can be used to display a button. The button should have a title and an onPress event handler. Style the button with a margin of 8px on the bottom and 40px on the left and right sides.
"import React from 'react';
import FloatingActionButton from 'material-ui/FloatingActionButton';
import ContentAdd from 'material-ui/svg-icons/content/add';

const style = {
  marginRight: 20,
};

/**
 * Default size and `mini` FABs, in primary (default), `secondary` and `disabled` colors.
 */
const FloatingActionButtonExampleSimple = () => (
  <div>
    <FloatingActionButton style={style}>
      <ContentAdd />
    </FloatingActionButton>
    <FloatingActionButton mini={true} style={style}>
      <ContentAdd />
    </FloatingActionButton>
    <FloatingActionButton secondary={true} style={style}>
      <ContentAdd />
    </FloatingActionButton>
    <FloatingActionButton mini={true} secondary={true} style={style}>
      <ContentAdd />
    </FloatingActionButton>
    <FloatingActionButton disabled={true} style={style}>
      <ContentAdd />
    </FloatingActionButton>
    <FloatingActionButton mini={true} disabled={true} style={style}>
      <ContentAdd />
    </FloatingActionButton>
  </div>
);

export default FloatingActionButtonExampleSimple;
","Create a React component that displays a set of floating action buttons (FABs) in different sizes, colors, and states, including default, mini, primary, secondary, and disabled states."
"import React from 'react';
import {useDispatch, useSelector} from 'react-redux';
import {get} from 'lodash';

import Kiosk from '../../base/Kiosk/Kiosk';

import {loadKiosk} from '../../../redux/kiosk.thunk';
import {OPEN_MODAL, CLOSE_MODAL} from '../../../redux/modal.reducer';

import permissions from './permissions.json';

import T from '../../base/T';
import Button from '../../base/Button';

function getUserRoles(roles) {
  return roles.map(role => role.machineName);
}

const defaultPremiumContext = {
  title: 'Du har desværre ikke adgang',
  reason: 'Indholdet er ikke tilgængeligt for dit bibliotek'
};

const defaultLoginContext = {
  title: 'Login',
  reason:
    'Log ind for at finde ud af, om dit bibliotek abonnerer på Læsekompas.dk – og dermed giver mulighed for at bestille bøger til biblioteket.'
};

/**

  Permissions.hoc usage example:

  export default withPermissions(YourComponent, Options);

  Options parameters
  @param {string} name {required}
  @param {obj} context premium + login modal context (same context for both)
  @param {obj} modals individual modal context settings

 Options example:
    {
      name: 'YourComponentName',

    -- set context like this --

      context: {
        title: 'all prompted modals will have this title',
        reason: 'all prompted modals will have this description'
      },

    -- or this --

      modals:  {
        login: {
          context: {title: 'only login modal will have this title', reason: '...'}
        },
        premium: {
          context: {title: '...', reason: '....'}
        }
      }

    }

  Set permissions for your component in the /permissions.json file

  Permissions object in permissions.json example:

  ""YourComponentName"": {
    ""free"": false,
    ""premium"": true,
    ""kiosk"": false,
    ""role"": {
      ""contentFirstAdmin"": false,
      ""contentFirstEditor"": false
    }
  }

**/

export default (WrappedComponent, ComponentOptions) => props => {
  /* Get the name of the wrapped component, this name is used to
  get the component options from the permissions.json object. */
  const name = get(ComponentOptions, 'name', false) || props.name;

  /* If user is denied acces to a premium functionality,
    they will be prompted with a modal. content of the
    modal is given by the premium context */
  const premiumContext =
    get(ComponentOptions, 'context', false) ||
    get(ComponentOptions, 'modals.premium.context', false) ||
    get(props, 'premium.context', false);

  /* If user is denied acces to a logged-in-user functionality,
      they will be prompted with a modal. content of the
      modal is given by the login context */
  const loginContext =
    get(ComponentOptions, 'context', false) ||
    get(ComponentOptions, 'modals.login.context', false) ||
    get(props, 'login.context', false);

  const dispatch = useDispatch();

  // Kiosk
  const kioskState = useSelector(state => get(state, 'kiosk', false));

  // Premium
  const isPremium = useSelector(state =>
    get(state, 'userReducer.isPremium', false)
  );

  const isLoggedIn = useSelector(state =>
    get(state, 'userReducer.isLoggedIn', false)
  );

  // Roles
  const roles = useSelector(state => get(state, 'userReducer.roles', []));

  const isAdmin = getUserRoles(roles).includes('contentFirstAdmin');
  const isEditor = getUserRoles(roles).includes('contentFirstEditor');

  // Get component Permissions
  const p = permissions[name];

  // If no name or settings is found for the wrapped component
  if (!p) {
    return <WrappedComponent {...props} />;
  }

  // If Kioskmode is enabled and allowed - return component without further checks.
  if (kioskState.enabled) {
    // const agency = get(kiosk, 'configuration.agencyId', false);
    // const branch = get(kiosk, 'configuration.branch', false);

    // Get kiosk configuration if not loaded
    if (!kioskState.loaded) {
      dispatch(loadKiosk({}));
    }

    // Return
    if (p.kiosk) {
      // if (p.kiosk && agency && branch) {
      // return <WrappedComponent {...props} />;
      return (
        <Kiosk
          render={({kiosk}) => <WrappedComponent kiosk={kiosk} {...props} />}
        />
      );
    }
  }

  // If permission is allowed on a free plan.
  if (p.free) {
    return <WrappedComponent {...props} />;
  }

  // Checks, which is only available if user is logged in
  if (isLoggedIn) {
    // If user has a paying library (Premium access)
    if (p.premium && isPremium) {
      return <WrappedComponent {...props} />;
    }

    // if user has a editor role
    if (p.role.contentFirstEditor && isEditor) {
      return <WrappedComponent {...props} />;
    }

    // if user has an admin role
    if (p.role.contentFirstAdmin && isAdmin) {
      return <WrappedComponent {...props} />;
    }

    // If component has premium options set
    if (premiumContext) {
      // Promt the user with a premium-only order book modal
      if (ComponentOptions.name === 'OrderButton') {
        return (
          <WrappedComponent
            {...props}
            onClick={e => {
              e.preventDefault();
              e.stopPropagation();
              dispatch({
                type: OPEN_MODAL,
                modal: 'confirm',
                context: {
                  ...defaultPremiumContext,
                  ...premiumContext,
                  className: 'premium-modal',
                  hideCancel: true,
                  hideConfirm: false,
                  onConfirm: () => {
                    dispatch({
                      type: CLOSE_MODAL,
                      modal: 'confirm'
                    });
                  },
                  reason: (
                    <React.Fragment>
                      <p>{premiumContext.reason}</p>
                      <Button
                        type=""link""
                        size=""medium""
                        href=""https://bibliotek.dk/""
                        style={{paddingLeft: '0'}}
                      >
                        <T component=""order"" name=""findOnBibliotekDK"" />
                      </Button>
                      <p style={{marginTop: '1rem'}}>
                        <T component=""order"" name=""orderButtonModalText"" />
                      </p>
                    </React.Fragment>
                  )
                }
              });
            }}
          />
        );
      }
      // Promt the user with a premium-only modal (for non-order buttons)
      return (
        <WrappedComponent
          {...props}
          onClick={e => {
            e.preventDefault();
            e.stopPropagation();
            dispatch({
              hideCancel: true,
              hideConfirm: true,
              type: OPEN_MODAL,
              modal: 'confirm',
              context: {
                ...defaultPremiumContext,
                ...premiumContext,
                className: 'premium-modal'
              }
            });
          }}
        />
      );
    }
  }

  if (!isLoggedIn && p.premium) {
    return (
      <WrappedComponent
        {...props}
        onClick={e => {
          e.preventDefault();
          e.stopPropagation();
          dispatch({
            type: OPEN_MODAL,
            modal: 'login',
            context: {
              ...defaultLoginContext,
              ...loginContext
            }
          });
        }}
      />
    );
  }

  return null;
};
","Generate the code snippet for a wrapper function that checks permissions for a React component based on a configuration object and a permissions JSON file. The function should handle different permission scenarios, such as premium access, login requirements, and specific roles. If permission is denied, the function should display a modal with a custom message."
"/*
 * Copyright (c) 2011-2016 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import React from 'react';
import Nvd3 from './../../core/chart/Nvd3';
import { Link } from 'react-router'

class Host extends React.Component {

  constructor(props) {
    super(props);
  }

  render() {

    var name = <div className=""host-label"">
      <Link to={`/pylon/system/host/${this.props.host.id}`}>
        {this.props.host.name}: <strong>{this.props.host.ip}</strong>
      </Link>
    </div>;

    var info = <ul>
        <li>OS: <strong>Debian OS</strong></li>
        <li>Version: <strong>12.1</strong></li>
        <li>Status: <strong>pending</strong></li>
        <li>Memory: <strong>2Go / 20Go</strong></li>
        <li>CPU: <strong>Intel Core 4Q</strong></li>
      </ul>;

    var result = null;
    if (this.props.mode == 0) {
      result = (
          <div className=""host"">
            <div className=""host-container"">
              {name}
              <div className=""row host-general"">
                <div className=""gr-4"">
                  <div className=""donut-chart"">
                    {
                      React.createElement(Nvd3, {
                        id: ""toto2"",
                        type:'pieChart',
                        datum: this.getDummy2(),
                        showLegend: false,
                        showLabels: false,
                        margin: {top:0,left:10,right:0,bottom:0},
                        duration: 1,
                        x:""key"",
                        y:""y"",
                        donut: true,
                        donutRatio: 0.6
                      })
                    }
                    <div className=""label"">CPU usage</div>
                    <div className=""percent"">80%</div>
                  </div>
                </div>
                <div className=""gr-8"">
                  <div className=""host-infos"">
                    <img src=""/assets/images/host/linux.png"" width=""60px"" />
                    {info}
                  </div>
                </div>
              </div>
              <div>
                {
                  React.createElement(Nvd3, {
                    type:'lineChart',
                    id: ""toto1"",
                    datum: this.getDummy(),
                    margin: {left: 20, bottom: 20, right: 10, top:0},
                    useInteractiveGuideline: true,
                    showYAxis: true,
                    showXAxis: true,
                    forceY: [0,100],
                    duration: 1
                  })
                }
              </div>
            </div>
          </div>
      )
    } else {
      result = <div className=""host-small"">
        <div className=""left"">
          {name}
          {info}
        </div>
        <div className=""right"">
          <div className=""progress""><div style={{width:'40%'}} className=""value green""></div></div>
          <div className=""progress""><div style={{width:'66%'}} className=""value blue""></div></div>
          <div className=""progress""><div style={{width:'32%'}} className=""value red""></div></div>
        </div>
      </div>
    }

    return result
  }

  getDummy() {
    var c1 = [],c2 = [], c3 = [];
    for (var i = 0; i < 60; i++) {
      c1.push({x: i, y: Math.round(Math.random() * 0.9 * 100)});
      c2.push({x: i, y: Math.round(Math.random() * 0.5 * 100)});
      c3.push({x: i, y: Math.round(Math.random() * 0.2 * 100)});
    }
    return [
      { values: c1, key: 'CPU', color: '#60b124' },
      { values: c2, key: 'Memory', color: '#40a7ff' },
      { values: c3, key: 'In flight', color: '#ff5240' }
    ];
  }

  getDummy2() {
    return [
      {key: ""One"", y: 80, color: ""#60b124""},
      {key: ""Two"", y: 20, color: ""#e5e5e5""},
    ];
  }

}

export default Host;
","Generate an interface that shows host-related information, including CPU and memory usage. The interface should have two modes: a detailed mode with a chart and more information, and a simplified mode with a smaller footprint and a progress bar."
