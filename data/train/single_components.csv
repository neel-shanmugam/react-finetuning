output,prompt
"import React from 'react'
import DateWidgetMixin from '../mixins/DateWidgetMixin'


const KendoDatePicker = React.createClass({
    mixins: [DateWidgetMixin('kendoDatePicker')],

    statics: {
        fieldClass: function () { return 'formFieldDatepicker'; }
    },

    getDefaultProps: function () {
        return {
            format: 'dd-MMM-yyyy'
        };
    },

    /*jshint ignore:start */
    render: function () {
        return (this.props.noControl
            ? (<span>{this.renderValue()}</span>)
            : (<input type=""text"" />));
    }
    /*jshint ignore:end */
});

export default KendoDatePicker;
",Create a React-based date picker component that uses the KendoDatePicker widget for rendering and provides a mixin for date-related functionality. Ensure that the component includes the 'fieldClass' static method and a 'noControl' property for controlling whether to render an input element or display the selected date as text.
"import React from 'react'
import { Table } from 'semantic-ui-react'

const TableExamplePadded = () => (
  <Table padded>
    <Table.Header>
      <Table.Row>
        <Table.HeaderCell>Name</Table.HeaderCell>
        <Table.HeaderCell>Status</Table.HeaderCell>
        <Table.HeaderCell>Notes</Table.HeaderCell>
      </Table.Row>
    </Table.Header>

    <Table.Body>
      <Table.Row>
        <Table.Cell>John</Table.Cell>
        <Table.Cell>Approved</Table.Cell>
        <Table.Cell>
          He is a very nice guy and I enjoyed talking to him on the telephone. I
          hope we get to talk again.
        </Table.Cell>
      </Table.Row>
      <Table.Row>
        <Table.Cell>Jamie</Table.Cell>
        <Table.Cell>Approved</Table.Cell>
        <Table.Cell>
          Jamie was not interested in purchasing our product.
        </Table.Cell>
      </Table.Row>
    </Table.Body>
  </Table>
)

export default TableExamplePadded
","Create a React component that renders a table with the following specifications:
- The table should have a padded appearance.
- It should include a header row with three columns: Name, Status, and Notes.
- The table should have two body rows, each with three columns that contain the following data:
  - Row 1: Name: John, Status: Approved, Notes: He is a very nice guy and I enjoyed talking to him on the telephone. I hope we get to talk again.
  - Row 2: Name: Jamie, Status: Approved, Notes: Jamie was not interested in purchasing our product."
"/**
 * External dependecies.
 */
import React from 'react'

/**
 * Internal dependecies.
 */
import EndpointsList from './EndpointsList'

const ReferenceRoute = ( route ) => (
	<div className=""reference-route"">
		<h2 className=""reference-route__title"">Route: { route.routeName }</h2>
		<EndpointsList endpoints={ route.endpoints } />
	</div>
)

export default ReferenceRoute
","Generate a React component that displays a route's information, including its name and a list of endpoints. The component should be called `ReferenceRoute`."
"import React from 'react';
import Sequence from './Sequence';
import MainMenu from './MainMenu';

const Navigation = (props) => {
  const Empty = () => null; 
  return (
    <nav>
      <div className=""pure-menu pure-menu-horizontal"">
        {props.step === 0 ? <MainMenu {...props} /> : <Empty />}
        {props.step > 0 ? <Sequence {...props} /> : <Empty />}
      </div>
    </nav>
  );
};

Navigation.propTypes = {
  step: React.PropTypes.number.isRequired
};

export default Navigation;
","Create a React component named Navigation that renders a navigation bar with a MainMenu component when the step property is 0, and a Sequence component when the step property is greater than 0. If the step property is not 0 or greater than 0, render nothing."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvRepeat = (props) => (
  <SvgIcon {...props}>
    <path d=""M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z""/>
  </SvgIcon>
);
AvRepeat = pure(AvRepeat);
AvRepeat.displayName = 'AvRepeat';
AvRepeat.muiName = 'SvgIcon';

export default AvRepeat;
","Create a React component for a repeatable icon. The icon should have a loop of arrows, with two arrows pointing clockwise and two arrows pointing counterclockwise. The icon should be a square with rounded corners."
"import React from 'react'
import invariant from 'invariant'
import warning from 'warning'
import { createRouteFromReactElement } from './RouteUtils'
import { component, components, falsy } from './PropTypes'

const { bool, func } = React.PropTypes

/**
 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
 * a JSX route config.
 */
const IndexRoute = React.createClass({

  statics: {

    createRouteFromReactElement(element, parentRoute) {
      if (parentRoute) {
        parentRoute.indexRoute = createRouteFromReactElement(element)
      } else {
        warning(
          false,
          'An <IndexRoute> does not make sense at the root of your route config'
        )
      }
    }

  },

  propTypes: {
    path: falsy,
    ignoreScrollBehavior: bool,
    component,
    components,
    getComponents: func
  },

  render() {
    invariant(
      false,
      '<IndexRoute> elements are for router configuration only and should not be rendered'
    )
  }

})

export default IndexRoute
","Create a React component called `IndexRoute` that can be used in a JSX route configuration to specify the `indexRoute` property of its parent `Route` component. The `IndexRoute` component should have the following propTypes: `path`, `ignoreScrollBehavior`, `component`, `components`, and `getComponents`."
"import React from 'react';

var PrivKeyImport = require('./PrivKeyImport');
var PrivKeyTable = require('./PrivKeyTable');
var privKeyActions = require('actions/privKeyActions');

var PrivKeyBox = React.createClass({

  _generateNewKeypair: function() {
    privKeyActions.addPrivKey();
  },

  render: function() {
    var button = <button onClick={this._generateNewKeypair} className=""btn btn-warning btn-xs pull-right"" type=""input"">Generate <span className=""hidden-xs"">New </span>Keypair</button>;

    return (
      <div className=""panel panel-default"">
        <div className=""panel-heading""><span className=""hidden-xs"">Bitcoin </span>Private Keys {button}</div>
        <div className=""panel-body"">
          <PrivKeyImport />
          <PrivKeyTable />
    </div>
      </div>
    );
  }
});

module.exports = PrivKeyBox;",Create a React component that includes a button to generate a new keypair and displays a private key import form and a private key table.
"import React from 'react';
import deprecationWarning from './utils/deprecationWarning';
import Tab from './Tab';

const TabPane = React.createClass({
  componentWillMount() {
    deprecationWarning(
      'TabPane', 'Tab',
      'https://github.com/react-bootstrap/react-bootstrap/pull/1091'
    );
  },

  render() {
    return (
      <Tab {...this.props} />
    );
  }
});

export default TabPane;
","Convert the TabPane component to a Tab component, issuing a deprecation warning."
"// npm packages
import _ from 'lodash';
import React from 'react';
import {Observable} from 'rxjs';
// my packages
import db from '../db';
import {Crunchyroll} from '../api';
// my components
import Navbar from '../components/navbar';
import Series from '../components/series';

export default class Home extends React.Component {
  constructor() {
    super();

    this.state = {
      series: [],
    };

    // trigger list update
    Crunchyroll.getAllSeries();
  }

  componentDidMount() {
    this.sub = Observable.fromEvent(
      db.series.changes({
        since: 0,
        live: true,
        include_docs: true,
      }),
      'change'
    )
      .filter(change => !change.deleted)
      .map(change => change.doc)
      .scan((acc, doc) => acc.concat([doc]), [])
      .debounceTime(1000)
      .subscribe(series => this.setState({series}));
  }

  componentWillUnmount() {
    this.sub.unsubscribe();
  }

  render() {
    const {series} = this.state;


    return (
      <div>
        <Navbar />

        {_.chunk(series, 4).map((chunk, i) => (
          <div key={`chunk_${i}`} className=""tile is-ancestor"">
            {chunk.map(s => <Series key={s._id} series={s} />)}
          </div>
        ))}


        <footer className=""footer"">
          <div className=""container"">
            <div className=""content has-text-centered"">
              <p>
                <strong>Japanistic Anime</strong> by <a>Chris M. Perez</a>. The source code is licensed
                  <a> MIT.</a>
              </p>
            <p>
              <a className=""icon"">
                <i className=""fa fa-github""></i>
              </a>
            </p>
          </div>
        </div>
      </footer>
      </div>
    );
  }
}
","Generate a React component that displays a list of anime series from a database, with a header and footer. The data should be updated in real-time using a change feed and debounced to improve performance. Display the series in tiles of 4. Include a footer with a copyright notice and a link to the source code on GitHub."
"import React from 'react';
import LotteryList from '../LotteryList/LotteryList';
import ButtonAppBar from '../ButtonAppBar/ButtonAppBar';
import AlertDialog from '../AlertDialog/AlertDialog';
import './Page.css';

export default class Page extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      'max': 100,
      'start':false,
      'reset':false
    };
    this.handleChangeMax = this.handleChangeMax.bind(this);
  }

  handleChangeMax(max) {
    this.setState({
      'max':max,
      'start':false,
      'reset':false
    });
  }

  render() {
    return (
      <div className='page'>
        <ButtonAppBar className='app-bar' handler={this.handleChangeMax}/>
        <LotteryList max={this.state.max} start={this.state.start} reset={this.state.reset}/>
      </div>
    );
  }
}
","Create a React component with the following features:
- A maximum number input field that accepts user input and sets the state of the component.
- A button that starts a lottery after the maximum number has been set.
- A list of lottery numbers that updates based on the maximum number and the state of the lottery (started or reset).
- A reset button that resets the lottery and clears the list of numbers."
"import React from 'react';
import PropTypes from 'prop-types';

// components
import ModalVideo from 'react-modal-video';

// CSS
import '../../node_modules/react-modal-video/scss/modal-video.scss';

// images

import play from './img/play.svg';

class VideoPlayer extends React.Component {
  constructor() {
    super();
    this.state = {
      isOpen: false,
    };
  }

  openModal = () => {
    this.setState({
      isOpen: true,
    });
  }

  render() {
    return (
      <div className=""video-player"">

        <ModalVideo
          channel=""youtube""
          isOpen={this.state.isOpen}
          videoId={this.props.videoId}
          onClose={() => this.setState({ isOpen: false })}
        />

        <span onClick={this.openModal}>
          <span className=""h2 video-player__text"">Launch Video Player</span>
          <img className=""video-player__icon"" src={play} alt=""play icon"" />
        </span>

      </div>
    );
  }
}

VideoPlayer.propTypes = {
  videoId: PropTypes.string.isRequired,
};

export default VideoPlayer;
","Create a React component that, when clicked, opens a YouTube video player modal. The player should accept a video ID as a prop and should close when the user clicks outside of the modal. Include styling using imported SCSS."
"import React from 'react'
import PropTypes from 'prop-types'

const Counter = ({
  increment, incrementIfOdd, incrementAsync, decrement, counter,
}) => (
  <p>
    Clicked: {counter} times
    {' '}
    <button onClick={increment}>+</button>
    {' '}
    <button onClick={decrement}>-</button>
    {' '}
    <button onClick={incrementIfOdd}>Increment if odd</button>
    {' '}
    <button onClick={() => incrementAsync()}>Increment async</button>
  </p>
)

Counter.propTypes = {
  counter: PropTypes.number.isRequired,
  decrement: PropTypes.func.isRequired,
  increment: PropTypes.func.isRequired,
  incrementAsync: PropTypes.func.isRequired,
  incrementIfOdd: PropTypes.func.isRequired,
}

export default Counter
","Create a React component named ""Counter"" that displays a counter value and provides buttons to increment, decrement, increment only if the counter is odd, and increment asynchronously. Define PropTypes for the counter value and event handlers. Export the component."
"import React from 'react'
import { render } from 'react-dom'
import '../public/style.css'

const App = React.createClass({
  render () {
    return (
      <div className='app'>
        <div className='landing'>
          <h1>svideo</h1>
          <input type='text' placeholder='Search' />
          <a>or Browse All</a>
        </div>
      </div>
    )
  }
})

render(<App />, document.getElementById('app'))
","Create the JSX code for the landing page, which includes a header, search input, and browse all link."
"import React from 'react';

export default class CodeExample extends React.Component {
  render() {
    return (
      <pre className=""cm-s-solarized cm-s-light"">
        <code>
          {this.props.codeText}
        </code>
      </pre>
    );
  }

  componentDidMount() {
    if (CodeMirror === undefined) {
      return;
    }

    CodeMirror.runMode(
      this.props.codeText,
      this.props.mode,
      React.findDOMNode(this).children[0]
    );
  }
}
","Generate a React component that renders a code snippet in a syntax-highlighted theme using CodeMirror, given the code text and the desired mode."
"import React from 'react'

const BurgerIcon = React.createClass({
    propTypes: {
        onClick: React.PropTypes.func.isRequired
    },

    getInitialState() {
        return {hover: false}
    },

    getLineStyle(index) {
        return {
            position: 'absolute',
            height: '20%',
            left: 0,
            right: 0,
            top: 20 * (index * 2) + '%',
            opacity: this.state.hover ? 0.6 : 1
        }
    },

    handleHover() {
        this.setState({hover: !this.state.hover})
    },

    render() {
        const buttonStyle = {
            position: 'absolute',
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            margin: 0,
            padding: 0,
            border: 'none',
            fontSize: 14,
            color: 'transparent',
            background: 'transparent',
            outline: 'none',
            cursor: 'pointer'
        }

        return (
            <div className=""rbn-burger-button"" style={{zIndex: 1}}>
                <span className=""rbn-burger-bars"" style={this.getLineStyle(0)}></span>
                <span className=""rbn-burger-bars"" style={this.getLineStyle(1)}></span>
                <span className=""rbn-burger-bars"" style={this.getLineStyle(2)}></span>
                <button onClick={this.props.onClick}
                  onMouseEnter={this.handleHover}
                  onMouseLeave={this.handleHover}
                  style={buttonStyle}>
                    Open Menu
                </button>
            </div>
        )
    }
})

export default BurgerIcon
","Create a React component that renders a hamburger menu icon using SVG. The icon should have three horizontal lines that change opacity when hovered over, and a button that triggers a function when clicked."
"import React, { Component } from 'react';
import reactCSS, { hover } from 'reactcss';
import ReactDOM from 'react-dom';


class HeaderButton extends Component {

    // _onHintTextClick() {
    //     const component = ReactDOM.findDOMNode(this.refs.ButtonComponent);
    //
    //     console.dir(component)
    //     // component.mouseenter();
    // }
    //
    // componentDidMount() {
    //     this.refs.container.addEventListener('mouseenter', ::this._onHintTextClick, false);
    // }
    //
    // componentWillUnmount() {
    //     this.refs.container.removeEventListener('mouseenter', this._onHintTextClick);
    // }

    render() {
        const ButtonComponent = this.props.component;
        const styles = reactCSS({
            'hover': {
                button: {
                    background: this.props.backgroundColor,
                },
            },
        }, this.props, this.state);

        const {
            className,
            style,
            iconStyle,
            ownProps
        } = this.props;


        return (
            <div
                ref=""container""
                className={className}
                style={{
                    transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1)',
                    ...style,
                    ...styles.button
                }}
            >
                <ButtonComponent
                    ref=""ButtonComponent""
                    style={iconStyle}
                    {...ownProps}
                />
            </div>
        );
    }
}

export default hover(HeaderButton);
",Describe the logic for a hover effect on a header button component. The button should change background color when the mouse hovers over it.
"import React from 'react';
import TextInputBEM from 'ps-react/TextInputBEM';

/** Required TextBox with error */
export default class ExampleError extends React.Component {
  render() {
    return (
      <TextInputBEM
        htmlId=""example-optional""
        label=""First Name""
        name=""firstname""
        onChange={() => {}}
        required
        error=""First name is required.""
       />
    )
  }
}","Generate a code snippet for a React component that uses the TextBox with an error message. The component should include the following features:
- Label: ""First Name""
- Name: ""firstname""
- Required
- Error message: ""First name is required."""
"import React from 'react'
import { Step } from 'semantic-ui-react'

const StepExampleDescriptions = () => (
  <div>
    <Step.Group>
      <Step>
        <Step.Title>Shipping</Step.Title>
        <Step.Description>Choose your shipping options</Step.Description>
      </Step>
    </Step.Group>

    <br />

    <Step.Group>
      <Step>
        <Step.Title title='Shipping' />
        <Step.Description description='Choose your shipping options' />
      </Step>
    </Step.Group>

    <br />

    <Step.Group>
      <Step title='Shipping' description='Choose your shipping options' />
    </Step.Group>
  </div>
)

export default StepExampleDescriptions
","Create a React code snippet that uses the Semantic UI React library to display a step group with a title and description for each step. The code should demonstrate three different ways to define the title and description: using children, using props, and using a combination of both."
"import _$ from 'jquery';
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import jsdom from 'jsdom';
import chai, { expect } from 'chai';
import chaiJquery from 'chai-jquery';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import reducers from '../src/reducers';

global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
global.window = global.document.defaultView;
global.navigator = global.window.navigator;
const $ = _$(window);

chaiJquery(chai, chai.util, $);

function renderComponent(ComponentClass, props = {}, state = {}) {
  const componentInstance =  TestUtils.renderIntoDocument(
    <Provider store={createStore(reducers, state)}>
      <ComponentClass {...props} />
    </Provider>
  );

  return $(ReactDOM.findDOMNode(componentInstance));
}

$.fn.simulate = function(eventName, value) {
  if (value) {
    this.val(value);
  }
  TestUtils.Simulate[eventName](this[0]);
};

export {renderComponent, expect};
","Provide a function that creates a React component and renders it into a test document. The function should take a component class, props, and initial state as arguments. It should also include a helper function to simulate events on the rendered component."
"import React from 'react';
import {NavLeft, NavRight} from '../../components/Common/Content';



export default class ContentContainer extends React.Component{
  render(){
    return (
      <section className={'content'}>
        <NavLeft {...this.props} />
        <div className={'content__middle'}>
          {this.props.children}
        </div>
        <NavRight {...this.props}/>
      </section>
    )
  }
}
","Create a React component called ""ContentContainer"" that displays three sections: a left navigation, a middle section for child components, and a right navigation."
"'use strict'

import React from 'react'
import { Route, IndexRoute } from 'react-router'
import App from 'containers/App'
import Home from './Home/Home'

import About from './About/About'
import Contact from './Contact/Contact'

import NoMatch from 'containers/NoMatch'

export default (
  <Route path=""/"" component={App}>
    <IndexRoute component={Home} />

    <Route path=""about"" component={About} />
    <Route path=""contact"" component={Contact} />

    <Route path=""*"" component={NoMatch} />
  </Route>
)","Create a React component with multiple routes that direct to specific pages based on the URL. The main page should be the Home page, and there should also be separate About and Contact pages. Include a default Not Found (404) page for URLs that don't match any of the defined routes."
"import test from 'ava'
import buildComponentTest from '../../src/generate/build-component-test'

const expected = `import test from 'ava'
import React from 'react'
import sinon from 'sinon'

import { render } from 'react-dom'
import { renderToStaticMarkup } from 'react-dom/server'
import { Simulate } from 'react-addons-test-utils'

import Awesome from './Awesome'

test('does something awesome', t => {
  const output = renderStatic()
  t.true(output.includes('children'))
})

function renderStatic (props) {
  return renderToStaticMarkup(<Awesome {...props} />)
}

function renderToDiv (props) {
  const div = document.createElement('div')
  render (
    <Awesome {...props}>
      {props.children || 'ohai!'}
    </Awesome>,
    div
  )

  return div
}
`

test('creates component test', t => {
  t.plan(1)

  const output = buildComponentTest('awesome', {
    props: ['foo:number:required', 'bar']
  })

  t.same(output, expected)
})
","Create a component test for the Awesome component with the following props:
- required prop 'foo' of type number
- optional prop 'bar'"
"/* global document */

import { MuiThemeProvider } from 'material-ui/styles';
import { Meteor } from 'meteor/meteor';
import React from 'react';
import { render } from 'react-dom';
import App from '../imports/ui/components/App';

Meteor.startup(() => {
  render(
    <MuiThemeProvider>
      <App />
    </MuiThemeProvider>,
    document.getElementById('app'),
  );
});
",Create a React application that uses Material UI and connect to a Meteor backend. The app should render a top-level component `App` into the `#app` element.
"import React from 'react';
import Paper from 'material-ui/Paper';
import Menu from 'material-ui/Menu';
import MenuItem from 'material-ui/MenuItem';
import { white } from 'material-ui/styles/colors';
import AssignmentLate from 'material-ui/svg-icons/action/assignment-late';
import Work from 'material-ui/svg-icons/action/work';
import NoteAdd from 'material-ui/svg-icons/action/note-add';
import Divider from 'material-ui/Divider';
import { Link } from 'react-router';


const style = {
  paper: {
    position: 'fixed',
    top: 0,
    left: 0,
    zIndex: 100,
    height: '100%',
    width: '224px',
    backgroundColor: '#5E7B8D',
  },
  rightIcon: {
    textAlign: 'center',
    lineHeight: '24px',
  },
  header: {
    display: 'flex',
    marginLeft: '10px',
    marginBottom: '5px',
  },
  headerImg: {
    marginTop: '5px',
    width: '54px',
    height: '54px',
  },
  headerText: {
    color: 'white',
    marginLeft: '8px',
    fontSize: '1.6em',
  },
};

const menuItemStyles = {
  color: 'white',
};

const SideBar = () =>
  <Paper style={style.paper}>
    <div style={style.header}>
      <img src=""logo_sml.png"" role=""presentation"" style={style.headerImg} />
      <h1 style={style.headerText}>JustNUM</h1>
    </div>
    <Menu>
      <MenuItem
        primaryText=""Tasks""
        style={menuItemStyles}
        leftIcon={<AssignmentLate color={white} />}
        containerElement={<Link to=""/authenticated/tasks"" />}
      />
      <MenuItem
        primaryText=""Cases""
        style={menuItemStyles}
        leftIcon={<Work color={white} />}
        containerElement={<Link to=""/authenticated/cases"" />}
      />
      <Divider />
      <MenuItem
        primaryText=""Add Case""
        style={menuItemStyles}
        leftIcon={<NoteAdd color={white} />}
        containerElement={<Link to=""/authenticated/cases/new"" />}
      />
      <Divider />
    </Menu>
  </Paper>;

export default SideBar;
","Design a React component for a vertical sidebar menu with the following specifications:

* Fixed position at the top left corner of the screen
* Height: 100% of the parent container
* Width: 224px
* Background color: #5E7B8D
* Header section with a logo image and the text ""JustNUM""
* Menu with the following options:
    * Tasks (icon: AssignmentLate)
    * Cases (icon: Work)
    * Add Case (icon: NoteAdd)
* Text color for menu items: white
* Divider lines between menu sections"
"import React from 'react'

export default (props) => {
  const project = props.project
  return (
    <div className='project-card card'>
      <h3>Project {project.name}</h3>
      <div className='card-links'>
        {project.url ? <a href={project.url} className='fa fa-desktop' /> : null}
        {project.github_url ? <a href={project.github_url} className='fa fa-github' /> : null}
      </div>
      <p>{project.description}</p>
    </div>
  )
}
","Generate a React component that displays a project card with the following information: name, URL, GitHub URL, and description."
"// @flow
import React from 'react';
import { View } from 'react-native';

// ------------------------
// Javascript Built-Ins
// ------------------------
// Ensure Date.now and new Date() give us the same date for snapshots.
import timekeeper from 'timekeeper';
timekeeper.freeze(new Date(2017, 3, 1, 8, 0, 0));

// ------------------------
// React Native Built-Ins
// ------------------------
// React Native UI Manager needs a focus function.
// $FlowFixMe
import { UIManager } from 'NativeModules';
UIManager.focus = jest.fn();
UIManager.createView = jest.fn(() => <View />);
UIManager.updateView = jest.fn();

// ------------------------
// NPM Modules
// ------------------------
// Provide a manual mock for native modules.
jest.mock('react-native-maps');
","Prepare a testing environment for React Native components by mocking essential dependencies, including Javascript built-ins, React Native built-ins, and NPM modules. Ensure accurate date and time snapshotting and stub essential functions for UI interactions."
"import React from 'react';
import classes from './Counter.scss';

export const Counter = (props) => (
  <div>
    <h2 className={classes.counterContainer}>
      Counter:
      {' '}
      <span className={classes['counter--green']}>
        {props.counter}
      </span>
    </h2>
    <button className=""btn btn-default"" onClick={props.increment}>
      Increment
    </button>
    {' '}
    <button className=""btn btn-default"" onClick={props.doubleAsync}>
      Double (Async)
    </button>
  </div>
);

Counter.propTypes = {
  counter: React.PropTypes.number.isRequired,
  doubleAsync: React.PropTypes.func.isRequired,
  increment: React.PropTypes.func.isRequired
};

export default Counter;
","Generate a React component that displays a counter with increment and double async button handlers. The component should have a counter container with a green counter value and two buttons, one for incrementing and one for doubling the counter asynchronously."
"import React from 'react';
import ItemsTableCell from '../../components/ItemsTableCell';
import ItemsTableValue from '../../components/ItemsTableValue';

var UrlColumn = React.createClass({
	displayName: 'UrlColumn',
	propTypes: {
		col: React.PropTypes.object,
		data: React.PropTypes.object,
	},
	renderValue () {
		var value = this.props.data.fields[this.props.col.path];
		if (!value) return;

		// if the value doesn't start with a prototcol, assume http for the href
		var href = value;
		if (href && !/^(mailto\:)|(\w+\:\/\/)/.test(href)) {
			href = 'http://' + value;
		}

		// strip the protocol from the link if it's http(s)
		var label = value.replace(/^https?\:\/\//i, '');

		return (
			<ItemsTableValue to={href} padded exterior field={this.props.col.type}>
				{label}
			</ItemsTableValue>
		);
	},
	render () {
		return (
			<ItemsTableCell>
				{this.renderValue()}
			</ItemsTableCell>
		);
	},
});

module.exports = UrlColumn;
","Generate a custom React component called ""UrlColumn"" that displays a table cell containing a URL field. The URL field should be clickable and open the link in a new tab or window when clicked. If the URL doesn't specify a protocol (e.g., ""http"" or ""https""), assume ""http"" for the link href. The component should use the provided ""ItemsTableValue"" and ""ItemsTableCell"" components for styling."
"'use strict';

import React from 'react';
import NewChoiceInput from './NewChoiceInput';
import { communicateNewPoll } from '../actions/pollActions';

export default class NewPollPage extends React.Component {
  constructor (props) {
    super(props);
    this.state = {
      name: '',
      choices: ['']
    };
  }

  handleTitleChange = (e) => {
    this.setState({ name: e.target.value });
  }

  updateInput = (value, index) => {
    this.setState({
      choices: this.state.choices.map((v, i) => i === index ? value : v)
    });
  }

  addNewChoice = () => {
    this.setState({ choices: [...this.state.choices, ''] });
  }

  deleteChoice = (idx) => {
    this.setState({ choices: this.state.choices.filter((v, i) => i !== idx) });
  }

  submitPoll = () => {
    const newPoll = {
      name: this.state.name,
      choices: this.state.choices.map(val => ({ choice: val, votes: 0 })),
      // dateCreated is set by the server
      owner: this.props.user._id
    };
    const newPollData = communicateNewPoll(newPoll);
    this.props.ws.send(JSON.stringify(newPollData));
    this.props.history.push('/');
  }

  render () {
    return (
      <div className=""app-root"">
        <h1>New Poll</h1>
        <label>
          Title:
          <input type=""text"" value={this.state.name}
            onChange={this.handleTitleChange}
          />
        </label>
        <h4>Options:</h4>
        <button className=""btn"" onClick={this.addNewChoice}>New choice</button>
        <br/>
        {
          this.state.choices.map((choice, idx) => (
            <NewChoiceInput key={idx} idx={idx} val={this.state.choices[idx]}
              updateInput={this.updateInput} deleteChoice={this.deleteChoice}
            />
          ))
        }
        <br/>
        <button className=""btn btn-info"" onClick={this.submitPoll}>Submit</button>
      </div>
    );
  }
}
","Generate a React component that allows a user to create a new poll, including a title and multiple choices. The component should handle user input for both the title and choices, and allow users to add or delete choices as needed. When the user submits the form, the component should send the poll data to a server using a WebSocket connection."
"import './Animal.css';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Field, reduxForm } from 'redux-form';
import { Link } from 'react-router-dom';
import { registerAnimal } from '../../../actions/animals';

class AnimalForm extends Component {
  renderField(field) {
    const { meta: { touched, error } } = field;
    const className = '';
    return (
      <div className={className}>
        <input className=""form-control""
          type={field.type}
          placeholder={field.placeholder}
          {...field.input} />
        <div className=""text-help"">
          {touched ? error : ''}
        </div>
      </div>
    );
  }

  onSubmit(values) {
    this.props.registerAnimal(values)
  }

  render() {
    const { handleSubmit } = this.props;
    return (
      <div className={'animalForm'}>
        <h3>Cadastre seu pet</h3>
        <form onSubmit={handleSubmit(this.onSubmit.bind(this))} className={'form-inline'}>
          <Field
            name=""name""
            label=""Nome""
            placeholder=""Nome""
            type=""text""
            component={this.renderField}
          />
          <Field
            name=""id""
            label=""ID""
            placeholder=""ID""
            type=""text""
            component={this.renderField}
          />
          <Field
            name=""age""
            label=""Idade""
            placeholder=""Idade""
            type=""text""
            component={this.renderField}
          />
          <Field
            name=""breed""
            label=""Raça""
            placeholder=""Raça""
            component={this.renderField}
          />
          <button type=""submit"" className=""btn btn-primary"">Entrar</button>
          <Link to=""/"" className=""btn btn-danger"">Cancelar</Link>
        </form>
      </div>

    );
  }
}

export default reduxForm({
    form: 'Animal'
})(
    connect(null, {registerAnimal})(AnimalForm)
);","Generate the code snippet for a React form component that allows users to register a new pet. The form should have fields for the pet's name, ID, age, and breed. When the form is submitted, the pet's information should be sent to the registerAnimal action creator."
"/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */

import React, { Component } from 'react';
import styles from './Header.css';
import withStyles from '../../decorators/withStyles';
import Link from '../Link';
import Navigation from '../Navigation';

@withStyles(styles)
class Header extends Component {

  render() {
    return (
      <div className=""Header"">
        <div className=""Header-container"">
          <a className=""Header-brand"" href=""/"" onClick={Link.handleClick}>
            <img className=""Header-brandImg"" src={require('./logo-small.png')} width=""38"" height=""38"" alt=""React"" />
            <span className=""Header-brandTxt"">Your Company</span>
          </a>
          <Navigation className=""Header-nav"" />
          <div className=""Header-banner"">
            <h1 className=""Header-bannerTitle"">React</h1>
            <p className=""Header-bannerDesc"">Complex web apps made easy</p>
          </div>
        </div>
      </div>
    );
  }

}

export default Header;
","Create a React component called ""Header"" that includes a brand logo, navigation links, and a banner with a title and description. Use CSS styles to format the header."
"import React from 'react';
import {Popover} from '@material-ui/core';
import ItemForm from './ItemForm'

export default function FormPopver(props) {
    return (
        <div>
            <Popover
                open={props.open}
                anchorReference={props.anchorReference}
                anchorPosition={props.anchorPosition}
                anchorEl={props.anchorEl}
                onClose={props.onClose}
                anchorOrigin={props.anchorOrigin}
                transformOrigin={props.transformOrigin}
            >
                <ItemForm
                    onClose={props.onClose}
                    onAddItem={props.onAddItem}
                    onEditItem={props.onEditItem}
                    onRemoveItem={props.onRemoveItem}
                    data={props.data}
                    isNewItem={props.isNewItem}
                    startDate={props.startDate}
                    travelObjects={props.travelObjects}
                    isFromSuggestions={props.isFromSuggestions}
                />
            </Popover>
        </div>
    )
}",Create a React component that renders a popover containing a form with the specified props.
"import React from 'react';
import classNames from 'classnames';
import CustomPropTypes from './utils/CustomPropTypes';

const Row = React.createClass({
  propTypes: {
    /**
     * You can use a custom element for this component
     */
    componentClass: CustomPropTypes.elementType
  },

  getDefaultProps() {
    return {
      componentClass: 'div'
    };
  },

  render() {
    let ComponentClass = this.props.componentClass;

    return (
      <ComponentClass {...this.props} className={classNames(this.props.className, 'row')}>
        {this.props.children}
      </ComponentClass>
    );
  }
});

export default Row;
",Create a React component called Row that renders a row element with a custom component class. The component should have a default component class of 'div' and should accept any props passed to it.
"import React from 'react';

export default class SparklinesBars extends React.Component {

    static propTypes = {
        style: React.PropTypes.object
    };

    static defaultProps = {
        style: { fill: 'slategray' }
    };

    render() {

        const { points, width, height, margin, style } = this.props;
        const barWidth = points.length >= 2 ? points[1].x - points[0].x : 0;

        return (
            <g>
                {points.map((p, i) =>
                    <rect
                        key={i}
                        x={p.x} y={p.y}
                        width={barWidth} height={height - p.y}
                        style={style} />
                )}
            </g>
        )
    }
}
","Generate a React component that renders a set of bars in a sparkline graph. The component should take in a list of data points, a width, a height, and a style. The bars should be filled with the specified style."
"import { css } from '../css';
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import Velocity from 'velocity-animate';

// const uuid = require('uuid');


class AnimatedBox extends Component {
    constructor(props) {
        super(props);

        this.state = { mounted: false };
    }

    componentWillMount() {
        // silence
    }

    componentWillAppear(callback) {
        // const el = findDOMNode(this);
        const el = findDOMNode(this);
        Velocity(el, { opacity: 1 }, { visibility: 'visible' }, 800)
        .then(() => {
            this.setState({ mounted: true });
            callback();
        });
    }

    componentWillEnter(callback) {
        // const el = findDOMNode(this);
        callback();
    }

    componentDidEnter() {
        const el = findDOMNode(this);
        Velocity(el, { opacity: 1 }, { visibility: 'visible' }, 800)
        .then(() => {
            this.setState({ mounted: true });
        });
    }

    componentWillLeave(callback) {
        const el = findDOMNode(this);
        Velocity(el, { opacity: 0 }, { visibility: 'hidden' }, { delay: 250, duration: 800 })
        .then(() => {
            this.setState({ mounted: false });
            callback();
        });
    }

    render() {
        const children = !!this.props.children ? this.props.children : null;
        return (
            <div className={css.baseCSS.animatedBox + ' ' + css.baseCSS.fullHeight}>
                {children}
            </div>
        );
    }
}

AnimatedBox.propTypes = {
    id: React.PropTypes.string,
    children: React.PropTypes.node
};

export default AnimatedBox;
",Create a component in React that uses velocity animations to fade in and out when mounting and unmounting.
"/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  Text,
  View
} from 'react-native';

export default class Livefyy extends Component {
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>
          Welcome to React Native!
        </Text>
        <Text style={styles.instructions}>
          To get started, edit index.android.js
        </Text>
        <Text style={styles.instructions}>
          Double tap R on your keyboard to reload,{'\n'}
          Shake or press menu button for dev menu
        </Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

AppRegistry.registerComponent('Livefyy', () => Livefyy);
","Generate a React Native code snippet that displays a welcome message and instructions on the screen. The message should say ""Welcome to React Native!"" and the instructions should say ""To get started, edit index.android.js\nDouble tap R on your keyboard to reload, Shake or press menu button for dev menu"". The code should be well-structured and follow best practices."
"import React from 'react';
import {blue500, red500, greenA200} from 'material-ui/styles/colors';
import SvgIcon from 'material-ui/SvgIcon';

const iconStyles = {
  marginRight: 24,
};

const HomeIcon = (props) => (
  <SvgIcon {...props}>
    <path d=""M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"" />
  </SvgIcon>
);

const SvgIconExampleSimple = () => (
  <div>
    <HomeIcon style={iconStyles} />
    <HomeIcon style={iconStyles} color={blue500} />
    <HomeIcon style={iconStyles} color={red500} hoverColor={greenA200} />
  </div>
);

export default SvgIconExampleSimple;
","Generate the React code for an SVG icon component, which displays a home icon, and accepts props for styling and color."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageFilterVintage = (props) => (
  <SvgIcon {...props}>
    <path d=""M18.7 12.4c-.28-.16-.57-.29-.86-.4.29-.11.58-.24.86-.4 1.92-1.11 2.99-3.12 3-5.19-1.79-1.03-4.07-1.11-6 0-.28.16-.54.35-.78.54.05-.31.08-.63.08-.95 0-2.22-1.21-4.15-3-5.19C10.21 1.85 9 3.78 9 6c0 .32.03.64.08.95-.24-.2-.5-.39-.78-.55-1.92-1.11-4.2-1.03-6 0 0 2.07 1.07 4.08 3 5.19.28.16.57.29.86.4-.29.11-.58.24-.86.4-1.92 1.11-2.99 3.12-3 5.19 1.79 1.03 4.07 1.11 6 0 .28-.16.54-.35.78-.54-.05.32-.08.64-.08.96 0 2.22 1.21 4.15 3 5.19 1.79-1.04 3-2.97 3-5.19 0-.32-.03-.64-.08-.95.24.2.5.38.78.54 1.92 1.11 4.2 1.03 6 0-.01-2.07-1.08-4.08-3-5.19zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z""/>
  </SvgIcon>
);
ImageFilterVintage = pure(ImageFilterVintage);
ImageFilterVintage.displayName = 'ImageFilterVintage';
ImageFilterVintage.muiName = 'SvgIcon';

export default ImageFilterVintage;
",Write the React component code for the Material Design icon ImageFilterVintage.
"import React from 'react';
import { string } from 'prop-types';

const DragHandle = ({ fill, ...props }) =>
  <svg
    fill={fill}
    height=""24""
    viewBox=""0 0 24 24""
    width=""24""
    xmlns=""http://www.w3.org/2000/svg""
    {...props}
  >
    <defs>
      <path d=""M0 0h24v24H0V0z"" id=""a"" />
    </defs>
    <clipPath id=""b"">
      <use overflow=""visible"" />
    </clipPath>
    <path d=""M20 9H4v2h16V9zM4 15h16v-2H4v2z"" />
  </svg>;

DragHandle.propTypes = {
  fill: string,
};

DragHandle.defaultProps = {
  fill: 'currentColor',
};

export default DragHandle;
",Create a React component that renders an SVG icon with a drag handle shape. The icon should have a fill color that can be customized via props.
"import React from 'react'
import { Button, Divider, Input, Segment } from 'semantic-ui-react'

const DividerExampleHorizontal = () => (
  <Segment basic textAlign='center'>
    <Input
      action={{ color: 'blue', content: 'Search' }}
      icon='search'
      iconPosition='left'
      placeholder='Order #'
    />

    <Divider horizontal>Or</Divider>

    <Button
      color='teal'
      content='Create New Order'
      icon='add'
      labelPosition='left'
    />
  </Segment>
)

export default DividerExampleHorizontal
","Design a user interface that would allow a user to enter a search query or create a new order. The interface should include a search input field with a search icon, a horizontal divider with the text ""Or"", and a button with a label and an icon."
"import React from 'react'
import { render } from 'react-dom'
import { AppContainer } from 'react-hot-loader'
import App from './components/App'

function renderHTML() {
  render(
    <AppContainer>
      <App />
    </AppContainer>,
    document.getElementById('root')
  )
}

renderHTML()

if (module.hot) {
  module.hot.accept('./components/App', () => {
    renderHTML()
  })
}
","Generate a React code snippet that creates an application container using React Hot Loader, rendering an App component to the root HTML element."
"/* eslint max-len: 0 */
import React from 'react';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';


const jobs = [];
const jobTypes = [ 'A', 'B', 'C', 'D' ];

function addJobs(quantity) {
  const startId = jobs.length;
  for (let i = 0; i < quantity; i++) {
    const id = startId + i;
    jobs.push({
      id: id,
      name: 'Item name ' + id,
      type: 'B',
      active: i % 2 === 0 ? 'Y' : 'N'
    });
  }
}

addJobs(5);

export default class DataInsertTypeTable extends React.Component {
  render() {
    return (
      <BootstrapTable data={ jobs } insertRow={ true }>
          <TableHeaderColumn dataField='id' isKey={ true }>Job ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name' editable={ { type: 'textarea' } }>Job Name</TableHeaderColumn>
          <TableHeaderColumn dataField='type' editable={ { type: 'select', options: { values: jobTypes } } }>Job Type</TableHeaderColumn>
          <TableHeaderColumn dataField='active' editable={ { type: 'checkbox', options: { values: 'Y:N' } } }>Active</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
","Provide a React code snippet that displays a table with data insertion capabilities, allowing users to add new rows. The table should include editable columns with different input types, such as text areas, dropdowns, and checkboxes."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let EditorShortText = (props) => (
  <SvgIcon {...props}>
    <path d=""M4 9h16v2H4zm0 4h10v2H4z""/>
  </SvgIcon>
);
EditorShortText = pure(EditorShortText);
EditorShortText.displayName = 'EditorShortText';
EditorShortText.muiName = 'SvgIcon';

export default EditorShortText;
",Create a React component that renders an SVG icon with two horizontal lines. The component should be pure and have a display name of 'EditorShortText'.
"// @flow
import React from 'react';
import Button from '../Button';

type Props = {
  counterApp: {
    count: number
  },
  increment: CounterAction,
  decrement: CounterAction
};

const Counter = (props: Props) =>
  <div>
    Counter: {props.counterApp.count} <br />
    <Button onClick={props.increment} primary> + </Button>
    <Button onClick={props.decrement}> - </Button>
  </div>;

export default Counter;
","Create a description for a React component called ""Counter"" which will display the current count, and provide buttons to increment or decrement the count."
"import React from 'react';
import {Route, IndexRoute} from 'react-router';

import App from './containers/App';
import Home from './containers/HomePage';
import Users from './containers/Users';
import AddUser from './containers/AddUser';
import NotFound from './containers/NotFound';

export default (
  <Route path=""/"" component={App}>
    <IndexRoute component={Home} />
    <Route path=""/users"" component={Users} />
    <Route path=""/create/user"" component={AddUser} />
    <Route path=""*"" component={NotFound} />
  </Route>
)
","Create React Router v4 code to define routes for an application with a home page, a users page, a 'create user' page, and a 404 page."
"import React from 'react'
import ComponentExample from 'docs/app/Components/ComponentDoc/ComponentExample'
import ExampleSection from 'docs/app/Components/ComponentDoc/ExampleSection'

import { Message } from 'semantic-ui-react'

const ImageTypesExamples = () => (
  <ExampleSection title='Types'>
    <ComponentExample
      title='Image'
      description='An image.'
      examplePath='elements/Image/Types/ImageExampleImage'
    >
      <Message>
        Unless a size is specified, images will use the original dimensions of
        the image up to the size of its container.
      </Message>
    </ComponentExample>
    <ComponentExample
      description='An image can render wrapped in a div.ui.image as alternative HTML markup.'
      examplePath='elements/Image/Types/ImageExampleWrapped'
    />
    <ComponentExample
      title='Image Link'
      description='An image can be formatted to link to other content.'
      examplePath='elements/Image/Types/ImageExampleLink'
    />
  </ExampleSection>
)

export default ImageTypesExamples
","Generate a React code snippet that displays a section of examples for the ""Image"" component. Include examples for an image, an image wrapped in a div, and an image link. Provide a brief description for each example."
"import React from 'react';

export const conferenceNavigationRef = React.createRef();

/**
 * User defined navigation action included inside the reference to the container.
 *
 * @param {string} name - Destination name of the route that has been defined somewhere.
 * @param {Object} params - Params to pass to the destination route.
 * @returns {Function}
 */
export function navigate(name: string, params?: Object) {
    return conferenceNavigationRef.current?.navigate(name, params);
}

/**
 * User defined navigation action included inside the reference to the container.
 *
 * @returns {Function}
 */
export function goBack() {
    return conferenceNavigationRef.current?.goBack();
}

/**
 * User defined navigation action included inside the reference to the container.
 *
 * @param {Object} params - Params to pass to the destination route.
 * @returns {Function}
 */
export function setParams(params: Object) {
    return conferenceNavigationRef.current?.setParams(params);
}

","Generate the code to set up navigation for a React application, including functions for navigating to a specific route, going back, and setting parameters. Provide a reference to the navigation container to use the navigation functions within the component."
"/* eslint max-len: 0 */
/* eslint no-unused-vars: 0 */
import React from 'react';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';


const products = [];

function addProducts(quantity) {
  const startId = products.length;
  for (let i = 0; i < quantity; i++) {
    const id = startId + i;
    products.push({
      id: id,
      name: 'Item name ' + id,
      price: 2100 + i
    });
  }
}

addProducts(5);

export default class SortTable extends React.Component {

  customSortStyle = (order, dataField) => {
    if (order === 'desc') {
      return 'sort-desc';
    }
    return 'sort-asc';
  }

  render() {
    return (
      <div>
        <BootstrapTable ref='table' data={ products }>
          <TableHeaderColumn dataField='id' isKey dataSort sortHeaderColumnClassName='sorting'>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name' dataSort sortHeaderColumnClassName={ this.customSortStyle }>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
        </BootstrapTable>
      </div>
    );
  }
}
","Provide a code snippet of a React component that uses the React-Bootstrap-Table library to create a sortable table with custom sorting styles. The table should have three columns: Product ID, Product Name, and Product Price. The Product Name column should be sortable in both ascending and descending order, and the custom sorting styles should be applied to the header cell."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from 'material-ui/SvgIcon';

let BorderInner = props =>
  <SvgIcon {...props}>
    <path d=""M3 21h2v-2H3v2zm4 0h2v-2H7v2zM5 7H3v2h2V7zM3 17h2v-2H3v2zM9 3H7v2h2V3zM5 3H3v2h2V3zm12 0h-2v2h2V3zm2 6h2V7h-2v2zm0-6v2h2V3h-2zm-4 18h2v-2h-2v2zM13 3h-2v8H3v2h8v8h2v-8h8v-2h-8V3zm6 18h2v-2h-2v2zm0-4h2v-2h-2v2z"" />
  </SvgIcon>;

BorderInner = pure(BorderInner);
BorderInner.muiName = 'SvgIcon';

export default BorderInner;
","Create a React component utilising Material UI's `SvgIcon` that renders an icon with a specific path. Implement the `pure` function from the `recompose` library to enhance performance, and assign a meaningful name to the component for easy identification."
"// @flow

import React from 'react';
import { HashRouter as Router, Route } from 'react-router-dom';

import Dev from './containers/Dev';
import Test from './containers/Test';
import './stylesheets/styles.scss';

const App = () => (
  <Router basename=""/"">
    <div>
      <Route exact path=""/"" render={(props) => <Dev {...props} />} />
      <Route path=""/testing"" render={(props) => <Test {...props} />} />
    </div>
  </Router>
);

export default App;
","Create a React application with a router to direct to two pages, one for development and another for testing, and have a basic stylesheet."
"import React from 'react';
import {BaseMixin, ElementaryMixin, ColorSchemaMixin} from './../common/common.js';

import './table-col.less';

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ColorSchemaMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Table.Col',
    classNames: {
      main: 'uu5-bricks-table-col',
      bg: 'uu5-common-bg'
    },
    defaults: {
      parentTagName: 'UU5.Bricks.Table.ColGroup'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    span: React.PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      span: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    this.checkParentTagName(this.getDefault().parentTagName);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainProps: function () {
    var props = this.buildMainAttrs();
    this.getColorSchema() && (props.className += ' ' + this.getClassName().bg);
    this.props.span && (props.span = this.props.span);
    return props;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return <col {...this._getMainProps()} />;
  }
  //@@viewOff:render
});","Generate a React class component called TableCol that inherits from the BaseMixin, ElementaryMixin, and ColorSchemaMixin mixins. It should have the following propTypes: span. It should have a default span of null. It should check that its parentTagName is UU5.Bricks.Table.ColGroup. It should have a getColorSchema function and a getClassName function. It should implement a _getMainProps function that returns the main props for the component, including the className and span. It should render a <col> element with the main props."
"import React from 'react'

import ComponentExample from 'docs/app/Components/ComponentDoc/ComponentExample'
import ExampleSection from 'docs/app/Components/ComponentDoc/ExampleSection'

const EmbedStatesExamples = () => (
  <ExampleSection title='States'>
    <ComponentExample
      title='Active'
      description='An embed can be active.'
      examplePath='modules/Embed/States/EmbedExampleActive'
    />
  </ExampleSection>
)

export default EmbedStatesExamples
","Create a React component that renders an example section for a component documentation page, with the following details:
- Title: ""States""
- Child component: ComponentExample, with the following props:
  - Title: ""Active""
  - Description: ""An embed can be active.""
  - Example path: modules/Embed/States/EmbedExampleActive"
"import React, { Component } from 'react';
import { createStore } from 'redux';
import { Provider } from 'react-redux';
import TeslaCarContainer from './containers/TeslaCarContainer';
import TeslaStatsContainer from './containers/TeslaStatsContainer';
import TeslaSpeedCounterContainer from './containers/TeslaSpeedCounterContainer';
import TeslaTempCounterContainer from './containers/TeslaTempCounterContainer';
import TeslaClimateContainer from './containers/TeslaClimateContainer';
import TeslaWheelsContainer from './containers/TeslaWheelsContainer';
import TeslaNotice from './components/TeslaNotice/TeslaNotice';
import './App.css';
import Header from './components/Header/Header';
import appReducer from './reducers/teslaRangeApp';

const store = createStore(appReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());

/**
 * Top-level component of entire app
 */
class App extends Component {
  render() {
    return (
        <Provider store={store}>
            <div>
                <Header />
                <div className=""wrapper"">
                    <form className=""tesla-battery"">
                        <h1>Range Per Charge</h1>
                        <TeslaCarContainer />
                        <TeslaStatsContainer />
                        <div className=""tesla-controls cf"">
                            <TeslaSpeedCounterContainer />
                            <div className=""tesla-climate-container cf"">
                                <TeslaTempCounterContainer />
                                <TeslaClimateContainer />
                            </div>
                            <TeslaWheelsContainer />
                        </div>
                        <TeslaNotice />
                    </form>
                </div>
            </div>
        </Provider>
    );
  }
}

export default App;
","Create the top-level React component of a dashboard application that displays the range per charge of a Tesla car. The application should include a header, a form to configure the car's settings, a notice area, and containers for the following components: car model selector, statistics display, speed counter, temperature counter, climate control, and wheels selector."
"/**
 * External Dependencies
 */
import React from 'react';

/**
 * Internal Dependencies
 */
import i18n from 'lib/mixins/i18n';
import titleActions from 'lib/screen-title/actions';
import Main from './main';

export default {
	acceptInvite( context ) {
		titleActions.setTitle( i18n.translate( 'Accept Invite', { textOnly: true } ) );

		React.unmountComponentAtNode( document.getElementById( 'secondary' ) );

		React.render(
			React.createElement( Main, context.params ),
			document.getElementById( 'primary' )
		);
	}
};
",Generate the code to change the title and render the main component when a user accepts an invitation.
"import React from 'react';
import deprecationWarning from './utils/deprecationWarning';
import Tab from './Tab';

const TabPane = React.createClass({
  componentWillMount() {
    deprecationWarning(
      'TabPane', 'Tab',
      'https://github.com/react-bootstrap/react-bootstrap/pull/1091'
    );
  },

  render() {
    return (
      <Tab {...this.props} />
    );
  }
});

export default TabPane;
","Describe how React's TabPane component should be deprecated and replaced with the Tab component, including where to find more information about the deprecation."
"import React from 'react'
import autoBind from 'react-autobind';
import { connect } from 'react-redux';

// redux
import editorActions from '../../../../actions';

// component
import TooltipItemButton from '../TooltipItemButton';


class TooltipLIMC extends React.Component {

	constructor(props) {
		super(props);
		autoBind(this);
	}

	async promptForLIMC(e) {
		e.preventDefault();
		const { setTooltip, tooltip } = this.props;
		await setTooltip({ ...tooltip, mode: 'limc' });
	}

	isActive() {
		const { editorState } = this.props;

		if (!editorState) {
			return null;
		}

		let selection = editorState.getSelection();
		let activeBlockType = editorState
			.getCurrentContent()
			.getBlockForKey(selection.getStartKey())
			.getType();
		return 'LIMC' === activeBlockType;
	}

	render() {
		return (
			<TooltipItemButton
				className={`${this.isActive() ? 'active' : ''}`}
				onClick={this.promptForLIMC}
	 		>
				LIMC
			</TooltipItemButton>
		);
	}
}

const mapStateToProps = state => ({
	...state.editor,
});

const mapDispatchToProps = dispatch => ({
	setTooltip: (tooltip) => {
		dispatch(editorActions.setTooltip(tooltip));
	},
});

export default connect(
	mapStateToProps,
	mapDispatchToProps,
)(TooltipLIMC);
","Generate the React component that will render a tooltip button for the quote editor, which when clicked, prompts the user to add a LIMC (Linked Indirect + Margin of Credit) block."
"import React from 'react';
import { connect } from 'react-redux';
import styled from 'styled-components';
import { logout } from '../actions/';
import { Button } from '../common';

const StyledLogoutButton = styled(Button)`
  background-color: ${props => props.theme.primaryColour};
  color: white;
  border: 1px solid white;
  border-radius: 4px;
  font-size: 20px;
`;

const LogoutButton = ({ onLogout }) => (
  <StyledLogoutButton onClick={onLogout}>Logout</StyledLogoutButton>
);

const mapDispatchToProps = dispatch => ({
  onLogout: () => dispatch(logout()),
});

export default connect(() => ({}), mapDispatchToProps)(LogoutButton);
","Provide a React component that accepts an onLogout function handler and when triggered, it fires the logout function while displaying a Logout button with customizable styling and text."
"// @flow

import React from 'react';

class MyComponent extends React.Component {
  constructor() {}

  defaultProps: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component {
    constructor() {}

    defaultProps: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
","Provide a React class component definition. The class should have properties and methods typed with a generic type T. Include a defaultProps declaration, a static state declaration, an instance property with the type T but no initializer, an instance property with the type T and an initializer of 5, and an instance method with no arguments and no return value. Also include an expression that defines an anonymous subclass of React.Component with the same properties and methods as the class component."
"import React from 'react';
import cx from 'suitcx';

export default function Error({ message, severity }) {
  return (
    <div className={cx('Panel')}>
      <div className=""top-bar"">
        <div className=""top-bar-left"">
          <div className=""menu-text"">Error</div>
        </div>
      </div>
      <div className={`callout ${severity}`}>
        <h5>Unknown panel</h5>
        <p>
          {message}
        </p>
      </div>
    </div>
  );
}
","Create a React component that displays an error message and severity level in a panel. The message should be displayed between a `<h5>` tag and a `<p>` tag. The panel should have a red border if the severity is ""error"" or a yellow border if the severity is ""warning""."
"import React from 'react'
import warning from 'warning'
import invariant from 'invariant'
import { createRouteFromReactElement } from './RouteUtils'
import { component, components } from './PropTypes'

const { string, bool, func } = React.PropTypes

/**
 * A <Route> is used to declare which components are rendered to the page when
 * the URL matches a given pattern.
 *
 * Routes are arranged in a nested tree structure. When a new URL is requested,
 * the tree is searched depth-first to find a route whose path matches the URL.
 * When one is found, all routes in the tree that lead to it are considered
 * ""active"" and their components are rendered into the DOM, nested in the same
 * order as they are in the tree.
 */
const Route = React.createClass({

  statics: {

    createRouteFromReactElement(element) {
      const route = createRouteFromReactElement(element)

      if (route.handler) {
        warning(
          false,
          '<Route handler> is deprecated, use <Route component> instead'
        )

        route.component = route.handler
        delete route.handler
      }

      return route
    }
  
  },

  propTypes: {
    path: string,
    ignoreScrollBehavior: bool,
    handler: component, // deprecated
    component,
    components,
    getComponents: func
  },

  render() {
    invariant(
      false,
      '<Route> elements are for router configuration only and should not be rendered'
    )
  }

})

export default Route
","Create a React component named `Route` that declares which components should be rendered based on the URL. This component should have the following features:

* It should be used to define a nested tree structure of routes.
* It should search the tree to find a route that matches the URL.
* It should render the components associated with the active routes.
* It should include a static method called `createRouteFromReactElement` that converts a React element into a route.
* It should accept the following props:
    * `path`: A string representing the URL pattern.
    * `ignoreScrollBehavior`: A boolean indicating whether to ignore the scroll behavior.
    * `handler`: A deprecated component prop.
    * `component`: A component prop.
    * `components`: A components prop.
    * `getComponents`: A function prop."
"import React from 'react';
import SvgIcon from '../../SvgIcon';

const AvVolumeOff = (props) => (
  <SvgIcon {...props}>
    <path d=""M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z""/>
  </SvgIcon>
);
AvVolumeOff.displayName = 'AvVolumeOff';
AvVolumeOff.muiName = 'SvgIcon';

export default AvVolumeOff;
","Create a React component for an SVG icon representing a muted volume. The icon should include a path with specific coordinates to draw the shape. Additionally, set the display name and muiName properties for the component."
"import React from 'react';

const VideoListItem = ({video, onVideoSelect}) => {
  const imageUrl      = video.snippet.thumbnails.high.url;
  const titleVideo    = video.snippet.title;
  const channelTitle  = video.snippet.channelTitle;
  // const dataPublish   = video.snippet.publishedAt;

  return(
    <div style={{cursor: 'pointer'}} className=""col s12 m12 l11 offset-l1"" onClick={() => onVideoSelect(video)}>
        <div className=""card-panel grey lighten-5 z-depth-1"" >
          <div className=""row valign-wrapper"">
            <div className=""col s6"">
              <img src={imageUrl} height={100} width={120} alt=""""/>
            </div>
            <div className=""col s10"">
              <h6><strong>{titleVideo}</strong></h6>
              <span className=""black-text"">
                  {channelTitle}<br/>
              </span>
            </div>
          </div>
        </div>
      </div>
  );
};

export default VideoListItem;
","Create a React component called VideoListItem that displays a video's thumbnail, title, and channel title in a Materialize CSS card. When clicked, the component should call a function to select the video."
"import React from 'react'
import {connect} from 'cerebral/react'
import {state, props} from 'cerebral/tags'
import {isValidForm, getInvalidFormFields, formToJSON} from 'cerebral-forms'
import {css} from 'aphrodite'
import syntaxHighlight from '../../helpers/syntaxHighlight'
import styles from './styles'

export default connect({
  form: state`${props`currentView`}.form.**`,
  showPanel: state`app.settings.showErrors`
},
  function PrettyPrint ({form, showPanel}) {
    if (!showPanel) {
      return null
    }
    const isValid = isValidForm(form)
    let invalidFormFields = getInvalidFormFields(form)
    let result = Object.keys(invalidFormFields).reduce((acc, field) => {
      const {value} = invalidFormFields[field]
      acc[field] = {
        value
      }
      return acc
    }, {})
    if (isValid) {
      result = formToJSON(form)
    }
    const resultPane = css(
      isValid ? styles.successPane : styles.errorPane
    )
    return (
      <div className={css(styles.container)}>
        <div className={resultPane}>
          {isValid ? 'The form is valid' : 'The form is invalid. See invalid fields below'}
        </div>
        <div className={css(styles.innerContainer)}>
          <pre
            className={css(styles.pretty)}
            dangerouslySetInnerHTML={{__html: syntaxHighlight(JSON.stringify(result, undefined, 2))}}
          />
        </div>
      </div>
    )
  }
)
","Create a React component that pretty prints a JSON object. The component should have a `form` prop that is a Cerebral `state` object. The component should also have a `showPanel` prop that is a boolean. If the `showPanel` prop is `false`, the component should return null. Otherwise, the component should determine if the form is valid using `isValidForm` from `cerebral-forms`. If the form is valid, the component should use `formToJSON` from `cerebral-forms` to convert the form to a JSON object. Otherwise, the component should use `getInvalidFormFields` from `cerebral-forms` to get the invalid form fields and extract the values from them. The component should highlight the syntax of the JSON object using the `syntaxHighlight` helper. The component should return a div with a div containing the pretty-printed JSON object. The div containing the pretty-printed JSON object should have a class that is either `successPane` or `errorPane` depending on whether the form is valid."
"import {PageContainer as PhenomicPageContainer} from 'phenomic';
import {Route} from 'react-router';
import React from 'react';

import AboutPage from 'layouts/AboutPage';
import ContactPage from 'layouts/ContactPage';
import CoursesPage from 'layouts/CoursesPage';
import ErrorPage from 'layouts/ErrorPage';
import HomePage from 'layouts/HomePage';
import KnowledgePage from 'layouts/KnowledgePage';
import Page from 'layouts/Page';
import StartupsPage from 'layouts/StartupsPage';
import ServicesPage from 'layouts/ServicesPage';
import TopicPage from 'layouts/TopicPage';

import AppContainer from './AppContainer';

const PageContainer = props => (
  <PhenomicPageContainer
    {...props}
    layouts={{
      AboutPage,
      ContactPage,
      CoursesPage,
      ErrorPage,
      HomePage,
      KnowledgePage,
      Page,
      StartupsPage,
      ServicesPage,
      TopicPage,
    }}
  />
);

const Routes = (
  <Route component={AppContainer}>
    <Route path=""*"" component={PageContainer} />
  </Route>
);

export default Routes;
","Generate the React routing configuration for a website with the following pages: About, Contact, Courses, Error, Home, Knowledge, Page, Startups, Services, and Topic."
"import React from 'react';
import PropTypes from 'prop-types';
import { Switch, NavLink, Route } from 'react-router-dom';

import LandingPage from '../containers/Landing/LandingPage';
import RegisterPage from '../containers/Auth/RegisterPage';
import HomePage from '../containers/Home/HomePage';
import LoginPage from '../containers/Login/LoginPage';
import PortfolioPage from '../containers/Portfolio/PortfolioPage';

import { MuiThemeProvider } from 'material-ui/styles';

const isLoggedIn = () => {
  if(!sessionStorage.jwt_token){
    return browserHistory.push('/login');
  }
};

class App extends React.Component {
  render() {
    return (
      <MuiThemeProvider>
        <div className={""crypy-app""}>
          <Switch>
            <Route exact path=""/"" component={LandingPage}/>
            <Route path=""login"" component={LoginPage}/>
            <Route path=""register"" component={RegisterPage}/>
            <Route path=""home"" component={HomePage} onEnter={isLoggedIn}/>
            <Route path=""portfolio"" component={PortfolioPage}/>
          </Switch>
        </div>
      </MuiThemeProvider>
    );
  }
}

App.propTypes = {
  children: PropTypes.element
};

export default App;
","Create a React application with the following structure:
- A main App component that includes the necessary imports for React and its components, as well as the Material UI library.
- Use the <MuiThemeProvider> component to wrap the entire application and apply the Material UI theme.
- Have multiple routes defined using <Route> and <Switch>, including routes for a landing page, register page, login page, home page, and portfolio page.
- Implement a function to check if the user is logged in (isLoggedIn), and use this function as the `onEnter` prop for the home page route to prevent access to the home page if the user is not logged in.
- Also include the necessary imports for all the specified pages and components."
"import cx from 'clsx'
import PropTypes from 'prop-types'
import React from 'react'

import {
  createHTMLImage,
  getElementType,
  getUnhandledProps,
  htmlImageProps,
  partitionHTMLProps,
} from '../../lib'

/**
 * A comment can contain an image or avatar.
 */
function CommentAvatar(props) {
  const { className, src } = props

  const classes = cx('avatar', className)
  const rest = getUnhandledProps(CommentAvatar, props)
  const [imageProps, rootProps] = partitionHTMLProps(rest, { htmlProps: htmlImageProps })
  const ElementType = getElementType(CommentAvatar, props)

  return (
    <ElementType {...rootProps} className={classes}>
      {createHTMLImage(src, { autoGenerateKey: false, defaultProps: imageProps })}
    </ElementType>
  )
}

CommentAvatar.propTypes = {
  /** An element type to render as (string or function). */
  as: PropTypes.elementType,

  /** Additional classes. */
  className: PropTypes.string,

  /** Specifies the URL of the image. */
  src: PropTypes.string,
}

export default CommentAvatar
","Generate code for a customizable comment avatar component in React that allows users to specify the image source, additional classes, and an optional custom element type."
"// (C) Copyright 2014-2016 Hewlett Packard Enterprise Development LP

import React, { Component } from 'react';
import Paragraph from 'grommet/components/Paragraph';
import DocsArticle from '../components/DocsArticle';

export default class Components extends Component {

  render () {
    return (
      <DocsArticle title=""Components"">
        <Paragraph>
          Whether it's structuring content, controlling interaction,
          or visualizing data, Grommet provides a wide range of components for
          a variety of situations. And, all components are fully responsive
          and accessible.
        </Paragraph>
      </DocsArticle>
    );
  }
};
","Provide a description for the following React code snippet: This React component is a documentation article about the concept of components in the Grommet UI library, emphasizing their versatility, responsiveness, and accessibility features."
"import React from 'react'

import {
  customPropTypes,
  getElementType,
  getUnhandledProps,
  META,
} from '../../lib'
import Dropdown from '../../modules/Dropdown'
import FormField from './FormField'

/**
 * Sugar for <Form.Field control={Dropdown} />.
 * @see Dropdown
 * @see Form
 */
function FormDropdown(props) {
  const { control } = props
  const rest = getUnhandledProps(FormDropdown, props)
  const ElementType = getElementType(FormDropdown, props)

  return <ElementType {...rest} control={control} />
}

FormDropdown._meta = {
  name: 'FormDropdown',
  parent: 'Form',
  type: META.TYPES.COLLECTION,
}

FormDropdown.propTypes = {
  /** An element type to render as (string or function). */
  as: customPropTypes.as,

  /** A FormField control prop. */
  control: FormField.propTypes.control,
}

FormDropdown.defaultProps = {
  as: FormField,
  control: Dropdown,
}

export default FormDropdown
","Create a React component called `FormDropdown` that renders a `FormField` with a `Dropdown` control. The component should accept the same props as `Form` and `Dropdown`, and should default to rendering a `FormField` with a `Dropdown` control."
"import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import DevTools from '../../containers/DevToolsWindow';

export default function createDevToolsWindow (store) {
  const win = window.open(
    null,
    'redux-devtools', // give it a name so it reuses the same window
    `width=400,height=${window.outerHeight},menubar=no,location=no,resizable=yes,scrollbars=no,status=no`
  );

  // reload in case it's reusing the same window with the old content
  win.location.reload();

  // wait a little bit for it to reload, then render
  setTimeout(() => {
    // Wait for the reload to prevent:
    // ""Uncaught Error: Invariant Violation: _registerComponent(...): Target container is not a DOM element.""
    win.document.write('<div id=""react-devtools-root""></div>');
    win.document.body.style.margin = '0';

    ReactDOM.render(
      <Provider store={store}>
        <DevTools />
      </Provider>
      , win.document.getElementById('react-devtools-root')
    );
  }, 10);
}
","Create a function that opens a new window and renders a React component within that window, passing in a Redux store as a prop to the component."
"import React from 'react';
import { compose, mapProps, withHandlers, withState } from 'recompose';
import styled, { ThemeProvider } from 'styled-components';
import * as actionCreators from '../actionCreators';
import ArtboardSection from './ArtboardSection';
import ToolbarSection from './ToolbarSection';
import MenuWrapper from './MenuWrapper';
import ToolMenu from './ToolMenu';
import LayersMenu from './LayersMenu';
import DocumentMenu from './DocumentMenu';
import PreviewMenu from './PreviewMenu';
import theme from '../theme';
import { toDataURI } from '../utils';

const transformProps = props => {
  return {
    ...props,
    selectedTool: {
      name: props.tool,
      ...props.toolbar[props.tool]
    }
  };
};

const enhance = compose(
  mapProps(transformProps),
  withState('bottomMenuHeight', 'setBottomMenuHeight', '25vh'),
  withHandlers(actionCreators)
);

export default enhance(props => (
  <ThemeProvider theme={theme}>
    <main>
      <ArtboardSection {...props} />
      <ToolbarSection {...props}>
        <ToolMenu active={props.panel === 'tool'} {...props} />
        <LayersMenu active={props.panel === 'layers'} {...props} />
        <PreviewMenu active={props.panel === 'preview'} {...props} />
        {/* <DocumentMenu active={props.panel === 'document'} {...props} /> */}
      </ToolbarSection>
    </main>
  </ThemeProvider>
));
","Generate the React component code to render an artboard and toolbar for a drawing application. The toolbar should contain a tool menu, a layers menu, a document menu, and a preview menu. Use the 'recompose' library to enhance the component with props transformation and state management."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from 'material-ui/SvgIcon';

let SettingsInputAntenna = props =>
  <SvgIcon {...props}>
    <path d=""M12 5c-3.87 0-7 3.13-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.87-3.13-7-7-7zm1 9.29c.88-.39 1.5-1.26 1.5-2.29 0-1.38-1.12-2.5-2.5-2.5S9.5 10.62 9.5 12c0 1.02.62 1.9 1.5 2.29v3.3L7.59 21 9 22.41l3-3 3 3L16.41 21 13 17.59v-3.3zM12 1C5.93 1 1 5.93 1 12h2c0-4.97 4.03-9 9-9s9 4.03 9 9h2c0-6.07-4.93-11-11-11z"" />
  </SvgIcon>;

SettingsInputAntenna = pure(SettingsInputAntenna);
SettingsInputAntenna.muiName = 'SvgIcon';

export default SettingsInputAntenna;
",Generate a React component that renders an SVG icon of an antenna inside a circle.
"import React from 'react';
import PropTypes from 'prop-types';
import { compose } from 'react-apollo';
import _ from 'underscore';

import ItemEmbed from '../../components/ItemEmbed';
import itemDetailQuery from '../../graphql/queries/detail';


class ItemEmbedContainer extends React.Component {
	render() {
		let item = null;
		console.log(this.props);
		console.log(this.props);
		console.log(this.props);
		console.log(this.props);

		if (
			this.props.itemDetailQuery
			&& this.props.itemDetailQuery.ORPHEUS_project
		) {
			item = this.props.itemDetailQuery.ORPHEUS_project.item;
		}

		if (!item) {
			return null;
		}

		return (
			<ItemEmbed
				{...item}
			/>
		);
	}
}

ItemEmbedContainer.propTypes = {
	itemDetailQuery: PropTypes.object,
};

export default compose(
	itemDetailQuery,
)(ItemEmbedContainer);
","Create a React component that embeds an item in a page, using the ItemEmbed component to display the embedded item and using the itemDetailQuery GraphQL query to fetch the item details."
"/**
 * react routes模块
 * @description:定义路由跳转组件
 */
import React from 'react'
import {
	BrowserRouter as Router,
	Switch,
	Route
} from 'react-router-dom'
/**
 * App:base component
 * @description:Entry component, first entered the rendering page
 */
import App from '../containers/AppContainer'
/**
 * NotFound:404 component
 * @description:route not match
 */
import NotFound from '../components/NotFound'

/**
 * route config
 */
const routes = (
	<Router>
	  	<Switch>
	  		{/*base route*/}
		    <Route exact path=""/"" component={App}/>
		    {/*404页面*/}
		    <Route component={NotFound}/>
	   </Switch>
	</Router>
)
export default routes","Provide the code to create a basic React Router v5 application with the following routes:

1. A base route at `/` which renders the `App` component.
2. A 404 route at `/*` which renders the `NotFound` component."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvExplicit = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h4v2h-4v2h4v2H9V7h6v2z""/>
  </SvgIcon>
);
AvExplicit = pure(AvExplicit);
AvExplicit.displayName = 'AvExplicit';
AvExplicit.muiName = 'SvgIcon';

export default AvExplicit;
",Create a React component for the Material UI icon library that renders an explicit content icon.
"import cx from 'classnames'
import PropTypes from 'prop-types'
import React from 'react'

import {
  customPropTypes,
  getElementType,
  getUnhandledProps,
  META,
} from '../../lib'

/**
 * A comment can contain content.
 */
function CommentContent(props) {
  const { className, children } = props
  const classes = cx(className, 'content')
  const rest = getUnhandledProps(CommentContent, props)
  const ElementType = getElementType(CommentContent, props)

  return <ElementType {...rest} className={classes}>{children}</ElementType>
}

CommentContent._meta = {
  name: 'CommentContent',
  parent: 'Comment',
  type: META.TYPES.VIEW,
}

CommentContent.propTypes = {
  /** An element type to render as (string or function). */
  as: customPropTypes.as,

  /** Primary content. */
  children: PropTypes.node,

  /** Additional classes. */
  className: PropTypes.string,
}

export default CommentContent
","Generate the React component code for a `CommentContent` component that renders the content of a comment, including an optional `className` prop."
"import React, { Component } from 'react';
import {Link} from 'react-router-dom';
import FontAwesome from 'react-fontawesome';
import ""./css/FaButton.css"";

class FaButton extends Component {
    //noinspection JSMethodCanBeStatic
    render() {

        const linkInner = (
            <div className=""fabutton-shade"">
                <div className=""fabutton-inner"">
                    <FontAwesome name={this.props.icon}/>
                    <div className=""fabutton-text"">
                        {this.props.text}
                    </div>
                </div>
            </div>
        );

        // Check if <a> tag is required or router Link tag. Link tags do not support other origins
        if (/[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/.test(this.props.to)) {
            return (
                <div className=""FaButton"">
                    <a href={this.props.to} style={{backgroundColor: this.props.color}}>
                        {linkInner}
                    </a>
                </div>
            )
        } else {
            return (
                <div className=""FaButton"">
                    <Link to={this.props.to} style={{backgroundColor: this.props.color}}>
                        {linkInner}
                    </Link>
                </div>
            )
        }
    }
}

export default FaButton;","Generate the React component that renders a button with a FontAwesome icon, text, and a background color. The button can be linked to a URL or a React router Link."
"/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

import React from 'react'

export default () => (
  <span id=""feature-public-url"">{process.env.PUBLIC_URL}.</span>
)
",Provide a React component that exposes the value of the `PUBLIC_URL` environment variable as the text content of a span element with an ID of `feature-public-url`.
"import React, { Component } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
} from 'react-native';

import Icon from 'react-native-vector-icons/MaterialIcons';

import HaircutDetails from './HaircutDetails';
import Touchable from '../common/Touchable';

export default class HaircutHistoryItem extends Component {
  _openDetails() {
    this.props.navigator.push({
      component: HaircutDetails,
      passProps: {appointment: this.props.appointment}
    });
  }

  _iconForStatus(status) {
    switch (status) {
      case 'finished':
        return 'alarm-on';
      case 'canceled':
        return 'alarm-off';
      case 'scheduled':
        return 'alarm';
    }
  }

  render() {
    const { appointment } = this.props;
    const { schedule, barber } = appointment;

    return(
      <Touchable style={styles.card} onPress={this._openDetails.bind(this)}>
        <View>
          <View>
            <Text style={styles.date} numberOfLines={1}>{schedule.day_number} de {schedule.month_name} às {schedule.hour}</Text>
            <Text style={styles.barber} numberOfLines={1}>{barber.name}</Text>
            <View style={styles.statusContainer}>
              <Icon name={this._iconForStatus(appointment.status)} size={24} color='#003459' style={styles.icon} />
              <Text>{appointment.translated_status}</Text>
            </View>
          </View>
        </View>
      </Touchable>
    );
  }
}

var styles = StyleSheet.create({
  card: {
    flexDirection: 'column',
    backgroundColor: 'white',
    borderColor: '#E8E8E8',
    borderWidth: 1,
    padding: 10,
    marginBottom: 10,
    borderRadius: 2,
    elevation: 2,
    flex: 1
  },
  date: {
    fontWeight: 'bold',
    color: '#292929',
    fontSize: 18
  },
  barber: {
    color: '#A2A2A2',
    fontSize: 18
  },
  icon: {
    marginRight: 5
  },
  statusContainer: {
    flexDirection: 'row',
    marginTop: 5,
    alignItems: 'center'
  }
});
","Generate the code for a React Native component that displays a list item for a haircare appointment history. The component should have the following features:

- It should accept an appointment object as a prop that has the following properties:
  - schedule: An object with the date and time of the appointment
  - barber: An object with the name of the barber
  - status: A string indicating the status of the appointment (e.g., ""finished"", ""canceled"", ""scheduled"")
  - translated_status: A localized string representing the status of the appointment
- It should display the date and time of the appointment, the name of the barber, and the status of the appointment.
- It should display an icon next to the status that represents the status (e.g., a checkmark for ""finished"", an ""x"" for ""canceled"", and a clock for ""scheduled"").
- It should be clickable and, when clicked, it should navigate to a details page for the appointment."
"import React from 'react';
import PropTypes from 'prop-types';
import c from 'classnames';
import { Wrapper, Button, Menu, MenuItem } from 'react-aria-menubutton';
import { Icon } from 'UI';

const Dropdown = ({
  label,
  button,
  className,
  classNameButton = '',
  dropdownWidth = 'auto',
  dropdownPosition = 'left',
  dropdownTopOverlap = '0',
  children
}) => {
  const style = {
    width: dropdownWidth,
    top: dropdownTopOverlap,
    left: dropdownPosition === 'left' ? 0 : 'auto',
    right: dropdownPosition === 'right' ? 0 : 'auto',
  };
  return (
    <Wrapper className={c('nc-dropdown', className)} onSelection={handler => handler()}>
      {
        button
          ? <Button>{button}</Button>
          : <Button className={c('nc-dropdownButton', classNameButton)}>{label}</Button>
      }
      <Menu>
        <ul className=""nc-dropdownList"" style={style}>
          {children}
        </ul>
      </Menu>
    </Wrapper>
  );
};

const DropdownItem = ({ label, icon, iconDirection, onClick, className }) => (
  <MenuItem className={c('nc-dropdownItem', className)} value={onClick}>
    <span>{label}</span>
    {
      icon
        ? <span className=""nc-dropdownItemIcon"">
            <Icon type={icon} direction={iconDirection} size=""small""/>
          </span>
        : null
    }
  </MenuItem>
);


export { Dropdown, DropdownItem };
","Create a React component that renders a dropdown menu using the Aria-menubutton package. The dropdown should have the following features:

* A label or button to open the dropdown.
* A dropdown menu that appears beneath or to the side of the button.
* An optional width for the dropdown menu.
* An optional position for the dropdown menu (left, right, or below).
* An optional top overlap for the dropdown menu.
* Support for nesting dropdown items."
"
/** @jsx h */

import React from 'react'
import h from '../helpers/h'

export const rules = [
  {
    serialize(obj, children) {
      if (obj.kind != 'block') return
      switch (obj.type) {
        case 'paragraph': return React.createElement('p', {}, children)
        case 'quote': return React.createElement('blockquote', {}, children)
      }
    }
  }
]

export const input = (
  <state>
    <document>
      <quote>
        <paragraph>
          one
        </paragraph>
      </quote>
    </document>
  </state>
)

export const output = `
<blockquote><p>one</p></blockquote>
`.trim()
",Generate a React element for a quote from provided state.
"'use strict';
import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  TouchableHighlight,
  Image
} from 'react-native';

import styles from '../styles/basestyles.js';

export default class iconButton extends Component {

  render () {
    return (
      <TouchableHighlight
        style={this.props.touchableHighlightStyle}
        underlayColor={this.props.underlayColor}
        onPress={() => { this.props.onButtonPressed(this.props.pressedParam) }}>
        <Image style={this.props.imageStyle} source={this.props.iconSource} />
      </TouchableHighlight>
    );
  }
}

AppRegistry.registerComponent('iconButton', () => iconButton);
","Create a react native component that takes props for a touchable highlight style, an underlay color, image source, and an image style. The component should render the touchable highlight with the given style, underlay color, and image source. The touchable highlight should onPress call the function passed as a prop and pass along a parameter also passed as a prop."
"import React from 'react'
import { webcastPropType } from '../../utils/webcastUtils'

const EmbedLivestream = (props) => {
  const channel = props.webcast.channel
  const file = props.webcast.file
  const iframeSrc = `https://new.livestream.com/accounts/${channel}/events/${file}/player?width=640&height=360&autoPlay=true&mute=false`
  return (
    <iframe
      src={iframeSrc}
      frameBorder=""0""
      scrolling=""no""
      height=""100%""
      width=""100%""
      allowFullScreen
    />
  )
}

EmbedLivestream.propTypes = {
  webcast: webcastPropType.isRequired,
}

export default EmbedLivestream
","Generate a React component that embeds a livestream from a given channel and file, using the Livestream Embed Player. The player should be 640px wide, 360px high, and autoplay without being muted."
"import React from 'react';
import ActionHome from 'material-ui/svg-icons/action/home';
import ActionFlightTakeoff from 'material-ui/svg-icons/action/flight-takeoff';
import FileCloudDownload from 'material-ui/svg-icons/file/cloud-download';
import HardwareVideogameAsset from 'material-ui/svg-icons/hardware/videogame-asset';
import {red500, yellow500, blue500} from 'material-ui/styles/colors';

const iconStyles = {
  marginRight: 24,
};

const SvgIconExampleIcons = () => (
  <div>
    <ActionHome style={iconStyles} />
    <ActionFlightTakeoff style={iconStyles} color={red500} />
    <FileCloudDownload style={iconStyles} color={yellow500} />
    <HardwareVideogameAsset style={iconStyles} color={blue500} />
  </div>
);

export default SvgIconExampleIcons;
","Generate a React component that displays a series of SVG icons. Each icon should be styled with a margin to the right and specific colors. The icons should include a home icon, a flight takeoff icon, a cloud download icon, and a video game asset icon."
"import React from 'react';
import PulseGroup from 'skeletons/PulseGroup';
import createArray from 'extensions/createArray';

const SkeletonGroup = ({ count = 1, children, ...rest }) => (
  <React.Fragment>
    {createArray(count).map(rowIdx => (
      <PulseGroup {...rest} key={rowIdx}>
        {children}
      </PulseGroup>
    ))}
  </React.Fragment>
);

/**
 * @component
 */
export default SkeletonGroup;
","Create a React component function called `SkeletonGroup` that accepts a count (defaults to 1) and a `children` prop. It should render as many `PulseGroup` components as the provided count, each wrapped in a fragment with a unique key. The `children` prop should be rendered inside each `PulseGroup`. Pass all other props to each `PulseGroup`."
"import React from 'react';
import PropTypes from 'prop-types';

const propTypes = {
  children: PropTypes.string,
  isCompleted: PropTypes.bool
};

function ChallengeTitle({ children, isCompleted }) {
  let icon = null;
  if (isCompleted) {
    icon = (
      // TODO Use SVG here
      <i className='ion-checkmark-circled text-primary' title='Completed' />
    );
  }
  return (
    <h2 className='text-center challenge-title'>
      {children || 'Happy Coding!'}
      {icon}
    </h2>
  );
}

ChallengeTitle.displayName = 'ChallengeTitle';
ChallengeTitle.propTypes = propTypes;

export default ChallengeTitle;
",Create a React component titled 'ChallengeTitle' that displays a title and an optional checkmark icon. The title should be centered and the icon should only appear if the 'isCompleted' prop is set to true. Use the 'ion-checkmark-circled' class for the icon.
"import React from 'react';
import Icon from '../Icon';

export default class SearchIcon extends Icon {
  getSVG(){return <svg xmlns=""http://www.w3.org/2000/svg"" width=""48"" height=""48"" viewBox=""0 0 48 48""><path d=""M31 28h-1.59l-.55-.55C30.82 25.18 32 22.23 32 19c0-7.18-5.82-13-13-13S6 11.82 6 19s5.82 13 13 13c3.23 0 6.18-1.18 8.45-3.13l.55.55V31l10 9.98L40.98 38 31 28zm-12 0c-4.97 0-9-4.03-9-9s4.03-9 9-9 9 4.03 9 9-4.03 9-9 9z""/></svg>;}
};",Generate an SVG icon for searching with a magnifying glass.
"
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { actions } from 'react-native-navigation-redux-helpers';
import { Container, Header, Title, Content, Button, Icon, Text, Body, Left, Right, Input, Item } from 'native-base';
import { Actions } from 'react-native-router-flux';

import styles from './styles';

const {
  popRoute,
} = actions;

class Regular extends Component {

  static propTypes = {
    popRoute: React.PropTypes.func,
    navigation: React.PropTypes.shape({
      key: React.PropTypes.string,
    }),
  }

  popRoute() {
    this.props.popRoute(this.props.navigation.key);
  }

  render() {
    return (
      <Container style={styles.container}>
        <Header>
          <Left>
            <Button transparent onPress={() => Actions.pop()}>
              <Icon name=""arrow-back"" />
            </Button>
          </Left>
          <Body>
            <Title>Regular</Title>
          </Body>
          <Right />
        </Header>

        <Content padder>
          <Item regular>
            <Input placeholder=""Regular Textbox"" />
          </Item>
        </Content>
      </Container>
    );
  }
}

function bindAction(dispatch) {
  return {
    popRoute: key => dispatch(popRoute(key)),
  };
}

const mapStateToProps = state => ({
  navigation: state.cardNavigation,
  themeState: state.drawer.themeState,
});

export default connect(mapStateToProps, bindAction)(Regular);
","Create a React Native scene that contains a regular text input. The input should be placed inside a content area and should have a placeholder text of ""Regular Textbox"". The scene should also have a header with a back button and a title of ""Regular""."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageColorize = (props) => (
  <SvgIcon {...props}>
    <path d=""M20.71 5.63l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-3.12 3.12-1.93-1.91-1.41 1.41 1.42 1.42L3 16.25V21h4.75l8.92-8.92 1.42 1.42 1.41-1.41-1.92-1.92 3.12-3.12c.4-.4.4-1.03.01-1.42zM6.92 19L5 17.08l8.06-8.06 1.92 1.92L6.92 19z""/>
  </SvgIcon>
);
ImageColorize = pure(ImageColorize);
ImageColorize.displayName = 'ImageColorize';
ImageColorize.muiName = 'SvgIcon';

export default ImageColorize;
",Generate a React component for an SVG icon of an image colorize icon. The code should make use of the `recompose/pure` library to optimize for performance and should include type annotations.
"// @flow
import React, { Component } from 'react';
import { Grid } from 'semantic-ui-react';

import List from '../../components/photos/List';
import Photos from '../../utils/photos';

const api = new Photos();

export default class UnsplashPage extends Component {
  state = {photos: [], isLoading: true};

  loadPhotos () {
    this.setState({isLoading: true});
    api.getPhotos().then(photos => {
      this.setState({photos, isLoading: false});
    });
  };

  componentDidMount() {
    this.loadPhotos();
  };

  render() {
    const { photos } = this.state;

    return (
      <Grid columns={2} style={{ padding: '2%' }}>
        <Grid.Column width={10}>
          <List 
          	photos={photos}
          	loadMore={this.loadPhotos.bind(this)}
          	isLoading={this.state.isLoading}/>
        </Grid.Column>
      </Grid>
    );
  }
}
",Generate a React component class that displays a list of photos loaded from an API. The component should use the Semantic UI React library to style the layout and should include a button to load more photos.
"/**
 * 在球场
 * zaiqiuchang.com
 */

import React from 'react'
import {StyleSheet, View, Image, TouchableOpacity} from 'react-native'
import flattenStyle from 'flattenStyle'

import {COLOR} from '../../config'
import * as helpers from '../../helpers'
import * as components from '../'

export default ({playIconVisible = false, duration, onPress, containerStyle,
  style, playIconStyle, ...props}) => {
  let child = <Image style={style} {...props} />
  if (onPress) {
    let {width, height} = flattenStyle(style)
    let {fontSize} = flattenStyle([styles.playIcon, playIconStyle])
    let left = Math.floor((width - fontSize) / 2)
    let top = Math.floor((height - fontSize) / 2)
    return (
      <TouchableOpacity onPress={onPress} style={containerStyle}>
        {child}

        {playIconVisible
          ? <components.Icon
            name='play-circle-outline'
            style={[styles.playIcon, playIconStyle, {top, left}]} />
          : null}

        {duration
          ? <components.Text style={styles.durationText}>
            {helpers.durationText(duration)}
          </components.Text>
          : null}
      </TouchableOpacity>
    )
  } else {
    return (
      <View style={containerStyle}>
        {child}
      </View>
    )
  }
}

const styles = StyleSheet.create({
  playIcon: {
    position: 'absolute',
    top: 0,
    left: 0,
    color: COLOR.textLightNormal,
    opacity: 0.8,
    backgroundColor: 'transparent',
    fontSize: 36
  },
  durationText: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    color: COLOR.textLightNormal,
    fontSize: 12,
    padding: 5
  }
})
","Generate the code snippet for a React Native component that displays an image and optionally includes a play icon and duration text. The component should support the following features:

* Display an image.
* Optionally display a play icon in the center of the image.
* Optionally display duration text in the bottom right corner of the image.
* Handle onPress events.
* Allow for customization of the image, play icon, and duration text styles."
"import React, { Component } from 'react';
import { DragSource, DragDropContext } from 'react-dnd';
import HTML5Backend from 'react-dnd-html5-backend';
import Block from './Block';
import BlockList from './BlockList';
import AvailableBlocksSpace from './AvailableBlocksSpace'

class Problem extends Component {
    render() {
        return (
            <div className=""problem col-lg-12"">
                <div className=""page-header"">
                      <h1>Problem 4</h1>
                </div>
                <pre className=""code-space"">{this.props.baseBlockString}</pre>
                <pre>
                <Block block={this.props.baseBlock}
                       onMoveBlock={this.props.onMoveBlock}
                       onSwapBlocks={this.props.onSwapBlocks} />
                <AvailableBlocksSpace onMoveBlock={this.props.onMoveBlock}>
                    <BlockList blocks={this.props.blocks}
                               onMoveBlock={this.props.onMoveBlock}
                               onSwapBlocks={this.props.onSwapBlocks} />
                </AvailableBlocksSpace>
                </pre>
                <div className=""btn-group"" role=""group"" aria-label=""..."">
                    <button type=""button"" className=""btn btn-default"" onClick={this.props.onReset.bind(this)}>Reset</button>
                    <button type=""button"" className=""btn btn-default"" >Submit</button>
                </div>
            </div>
        );
    }
};

export default DragDropContext(HTML5Backend)(Problem);
","Create a React drag-and-drop problem-solving module that displays problem statements, allows users to move blocks to solve the problem, and interacts with the backend."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let CommunicationContactMail = (props) => (
  <SvgIcon {...props}>
    <path d=""M21 8V7l-3 2-3-2v1l3 2 3-2zm1-5H2C.9 3 0 3.9 0 5v14c0 1.1.9 2 2 2h20c1.1 0 1.99-.9 1.99-2L24 5c0-1.1-.9-2-2-2zM8 6c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H2v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1zm8-6h-8V6h8v6z""/>
  </SvgIcon>
);
CommunicationContactMail = pure(CommunicationContactMail);
CommunicationContactMail.displayName = 'CommunicationContactMail';
CommunicationContactMail.muiName = 'SvgIcon';

export default CommunicationContactMail;
",Generate a Material Design React SVG icon component for a mail outline.
"import React from 'react';
import Analyzer from 'parser/core/Analyzer';
import StatisticsListBox, { STATISTIC_ORDER } from 'interface/others/StatisticsListBox';
import DeepWoundsUptime from './DeepWoundsUptime';
import RendUptime from './RendUptime';

class DotUptimeStatisticBox extends Analyzer {
  static dependencies = {
    deepwoundsUptime: DeepWoundsUptime,
    rendUptime: RendUptime,
  };

  constructor(...args) {
    super(...args);
    this.active = Object.keys(this.constructor.dependencies)
      .map(name => this[name].active)
      .includes(true);
  }

  statistic() {
    return (
      <StatisticsListBox
        position={STATISTIC_ORDER.CORE(3)}
        title=""DoT uptimes""
      >
        {Object.keys(this.constructor.dependencies).map(name => {
          const module = this[name];
          if (!module.active) {
            return null;
          }
          return (
            <React.Fragment key={name}>
              {module.subStatistic()}
            </React.Fragment>
          );
        })}
      </StatisticsListBox>
    );
  }
}

export default DotUptimeStatisticBox;
","Generate the React component for a box displaying statistics about the uptime of certain debuffs. The component should include a title and a list of sub-components, each displaying the uptime of a specific debuff."
"import React from 'react'

export default class extends React.Component {
  constructor (props) {
    super(props)
    this.state = { response: '' }
  }

  static async getInitialProps ({ pathname, query }) {
    return {
      pathname,
      query,
      queryString: Object.keys(query).join('')
    }
  }

  async componentDidMount () {
    const response = JSON.stringify(
      await window
        .fetch(`/api/${this.props.queryString}`)
        .then(response => response.json().then(data => data)),
      null,
      2
    )
    this.setState({ response })
  }

  render () {
    return (
      <content>
        <p>
          /api/{this.props.queryString} routed to https://swapi.co/api/
          {this.props.queryString}
        </p>
        <p>
          <a href='?people/2'>Try</a>
          &nbsp;
          <a href='/'>Reset</a>
        </p>
        <pre>{this.state.response ? this.state.response : 'Loading...'}</pre>
      </content>
    )
  }
}
",Create a React component using the class syntax. Include async `getInitialProps` and `componentDidMount` lifecycle methods to fetch and display the response from an API endpoint based on a query string.
"import React from 'react';
import './Path'; // must import Path first, don`t know why. without this will throw an `Super expression must either be null or a function, not undefined`
import createReactNativeComponentClass from 'react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js';
import {pathProps, numberProp} from '../lib/props';
import {RectAttributes} from '../lib/attributes';
import extractProps from '../lib/extract/extractProps';
import Shape from './Shape';

export default class extends Shape {
    static displayName = 'Rect';

    static propTypes = {
        ...pathProps,
        x: numberProp.isRequired,
        y: numberProp.isRequired,
        width: numberProp.isRequired,
        height: numberProp.isRequired,
        rx: numberProp,
        ry: numberProp
    };

    static defaultProps = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        rx: 0,
        ry: 0
    };

    setNativeProps = (...args) => {
        this.root.setNativeProps(...args);
    };

    render() {
        let props = this.props;

        return <RNSVGRect
            ref={ele => {this.root = ele;}}
            {...extractProps({
                ...props,
                x: null,
                y: null
            }, this)}
            x={props.x.toString()}
            y={props.y.toString()}
            width={props.width.toString()}
            height={props.height.toString()}
            rx={props.rx.toString()}
            ry={props.ry.toString()}
        />;
    }
}

const RNSVGRect = createReactNativeComponentClass({
    validAttributes: RectAttributes,
    uiViewClassName: 'RNSVGRect'
});
","Generate the React Native component class code for a rectangle shape. The component should have the following properties: x, y, width, height, rx, and ry. The x and y properties must be required, while the others can have default values of 0. The component should also have a render method that returns an RNSVGRect component with the appropriate props."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let FileAttachment = (props) => (
  <SvgIcon {...props}>
    <path d=""M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z""/>
  </SvgIcon>
);
FileAttachment = pure(FileAttachment);
FileAttachment.displayName = 'FileAttachment';
FileAttachment.muiName = 'SvgIcon';

export default FileAttachment;
",Create a React component that renders an SVG icon representing a file attachment. The icon should be a blue square with a paperclip in the center.
"import React from 'react';
import { Route } from 'react-router-dom';
import { NavItem } from 'react-bootstrap';

export default props => (
  <Route
    path={props.href}
    exact
    children={({ match, history }) => (
      <NavItem
        onClick={e => history.push(e.currentTarget.getAttribute('href'))}
        {...props}
        active={match ? true : false}
      >
        {props.children}
      </NavItem>
    )}
  />
);
",Generate a React component that utilizes React Router and Bootstrap to create a navigation item that changes appearance when the current URL matches the item's href.
"import React from 'react';
import AppBar from 'material-ui/AppBar';
import Toolbar from 'material-ui/Toolbar';
import Typography from 'material-ui/Typography';
import Button from 'material-ui/Button';
import IconButton from 'material-ui/IconButton';
import MenuIcon from 'material-ui-icons/Menu';

export const Header = ({ children }) => (
	<AppBar position=""static"">
		<Toolbar>
			<IconButton color=""contrast"" aria-label=""Menu"">
				<MenuIcon />
			</IconButton>
			<Typography type=""title"" color=""inherit"">
				FDTD Solver
			</Typography>
		</Toolbar>
	</AppBar>
);

export default Header;
","Generate a React functional component called Header that takes children as props and renders a Material UI AppBar with a Toolbar. The AppBar should have a MenuIcon on the left with aria-label ""Menu"" and a title ""FDTD Solver"" in the center. The component should export default Header."
"import React from 'react';
import Select from 'react-select';

var RemoteSelectField = React.createClass({
	displayName: 'RemoteSelectField',
	propTypes: {
		hint: React.PropTypes.string,
		label: React.PropTypes.string,
	},
	loadOptions (input, callback) {
		input = input.toLowerCase();
		var rtn = {
			options: [
				{ label: 'One', value: 'one' },
				{ label: 'Two', value: 'two' },
				{ label: 'Three', value: 'three' }
			],
			complete: true
		};
		if (input.slice(0, 1) === 'a') {
			if (input.slice(0, 2) === 'ab') {
				rtn = {
					options: [
						{ label: 'AB', value: 'ab' },
						{ label: 'ABC', value: 'abc' },
						{ label: 'ABCD', value: 'abcd' }
					],
					complete: true
				};
			} else {
				rtn = {
					options: [
						{ label: 'A', value: 'a' },
						{ label: 'AA', value: 'aa' },
						{ label: 'AB', value: 'ab' }
					],
					complete: false
				};
			}
		} else if (!input.length) {
			rtn.complete = false;
		}

		setTimeout(function() {
			callback(null, rtn);
		}, 500);
	},
	renderHint () {
		if (!this.props.hint) return null;
		return (
			<div className=""hint"">{this.props.hint}</div>
		);
	},
	render () {
		return (
			<div className=""section"">
				<h3 className=""section-heading"">{this.props.label}</h3>
				<Select asyncOptions={this.loadOptions} className=""remote-example"" />
				{this.renderHint()}
			</div>
		);
	}
});

module.exports = RemoteSelectField;
","Create a React component that employs a third-party library to demonstrate the implementation of a select field with remote data loading. The component should include options to be populated asynchronously based on user input, as well as a hint text display."
"import React from 'react';
import { ListGroupItem, Collapse, Button} from 'reactstrap';
import NPCStatBlock from './NPCStatBlock';
import classNames from 'classnames';

class MonsterManualItem extends React.Component {

  constructor(props, context) {
    super(props, context);

    this.toggle = this.toggle.bind(this);
    this.state = { collapse: false };

    this.addToInitiative = this.addToInitiative.bind(this);
  }

  toggle() {
    this.setState({ collapse: !this.state.collapse });
  }

  addToInitiative(item) {
    this.props.actions.addCombatant({
      ...item,
      'initiative': 0,
      'isKO': false,
      'isDead': false
    });
    this.props.actions.sortCombatants();
  }

  render() {
    const {item} = this.props;
    const listItemClasses = classNames({
      'monster-manual-list__item': true,
      'monster-manual-list__item--open': this.state.collapse,
      'justify-content-between': true
    });
    return (
      <div>
      <ListGroupItem className={listItemClasses} >
        <Button size=""sm"" onClick={() => { this.toggle(); }}>Details</Button>
        {item.name}
        <Button size=""sm"" onClick={() => { this.addToInitiative(item); }}>+</Button>
      </ListGroupItem>
      <Collapse isOpen={this.state.collapse}>
        <NPCStatBlock item={item} />
      </Collapse>
      </div>
    );
  }
}

MonsterManualItem.propTypes = {
  item     : React.PropTypes.object.isRequired,
  actions  : React.PropTypes.object.isRequired
};

export default MonsterManualItem;
",Create a React component that renders a list item with a button that toggles a collapsible section. This collapsible section should contain another component that displays detailed information about the list item. The list item should also have a button to add the list item to a stateful array.
"import React from 'react';
import { IndexRoute, Route } from 'react-router';
import App from '../containers/App';
import AboutPage from '../containers/AboutPage';
import CounterPage from '../containers/CounterPage';

export default (
  <Route path=""/"" component={ App }>
    <IndexRoute component={ CounterPage }/>
    <Route path=""about"" component={ AboutPage }/>
  </Route>
);
","Generate a React router configuration with a home page (CounterPage), an about page (AboutPage) and an index route (CounterPage)."
"import React from 'react';
import ColumnHeader from './column_header';
import PropTypes from 'prop-types';
import { debounce } from 'lodash';
import { scrollTop } from '../../../scroll';
import { isMobile } from '../../../is_mobile';

export default class Column extends React.PureComponent {

  static propTypes = {
    heading: PropTypes.string,
    icon: PropTypes.string,
    children: PropTypes.node,
    active: PropTypes.bool,
    hideHeadingOnMobile: PropTypes.bool,
  };

  handleHeaderClick = () => {
    const scrollable = this.node.querySelector('.scrollable');

    if (!scrollable) {
      return;
    }

    this._interruptScrollAnimation = scrollTop(scrollable);
  }

  scrollTop () {
    const scrollable = this.node.querySelector('.scrollable');

    if (!scrollable) {
      return;
    }

    this._interruptScrollAnimation = scrollTop(scrollable);
  }


  handleScroll = debounce(() => {
    if (typeof this._interruptScrollAnimation !== 'undefined') {
      this._interruptScrollAnimation();
    }
  }, 200)

  setRef = (c) => {
    this.node = c;
  }

  render () {
    const { heading, icon, children, active, hideHeadingOnMobile } = this.props;

    const showHeading = heading && (!hideHeadingOnMobile || (hideHeadingOnMobile && !isMobile(window.innerWidth)));

    const columnHeaderId = showHeading && heading.replace(/ /g, '-');
    const header = showHeading && (
      <ColumnHeader icon={icon} active={active} type={heading} onClick={this.handleHeaderClick} columnHeaderId={columnHeaderId} />
    );
    return (
      <div
        ref={this.setRef}
        role='region'
        aria-labelledby={columnHeaderId}
        className='column'
        onScroll={this.handleScroll}
      >
        {header}
        {children}
      </div>
    );
  }

}
","Create a React component that renders a column with optional heading, icon, and scroll handling. The component should have the following:
- A heading that is displayed if it is provided and not hidden on mobile devices, and should have an ID derived from the heading text with spaces replaced with hyphens.
- A scroll handler that debounces scroll events and interrupts any ongoing scroll animations.
- A reference to the component's DOM node for scrolling and event handling."
"/**
 * React Starter Kit (https://www.reactstarterkit.com/)
 *
 * Copyright © 2014-present Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

import React from 'react';
import PropTypes from 'prop-types';
import withStyles from 'isomorphic-style-loader/lib/withStyles';
import s from './NotFound.css';

class NotFound extends React.Component {
  static propTypes = {
    title: PropTypes.string.isRequired,
  };

  render() {
    return (
      <div className={s.root}>
        <div className={s.container}>
          <h1>{this.props.title}</h1>
          <p>Sorry, the page you were trying to view does not exist.</p>
        </div>
      </div>
    );
  }
}

export default withStyles(s)(NotFound);
",Generate a React 404 error page component with styling called `NotFound` that takes a `title` prop. The component should display a title and a message saying the requested page doesn't exist.
"import React, { Component } from 'react';
import PropTypes from 'subschema-prop-types';
import { FREEZE_OBJ } from 'subschema-utils';


function strip(obj) {
    return !obj ? FREEZE_OBJ : Object.keys(obj).reduce(function (ret, key) {
        if (key == 'dataType' || key == 'fieldAttrs' || obj[key]
                                                        == null) {
            return ret;
        }
        ret[key] = obj[key];
        return ret;
    }, {});
}

export class ContentWrapper extends Component {
    static defaultProps = {
        type   : 'span',
        content: ''
    };

    static propTypes = {
        content   : PropTypes.expression,
        type      : PropTypes.domType,
        value     : PropTypes.any,
        onChange  : PropTypes.any,
        title     : PropTypes.any,
        className : PropTypes.cssClass,
        id        : PropTypes.any,
        name      : PropTypes.any,
        fieldAttrs: PropTypes.any
    };

    render() {
        const { type, content, dataType, children, context, path, fieldAttrs, title, ...props } = this.props;

        const allProps = {
            ...strip(fieldAttrs),
            title: title === false ? void(0) : title,
            ...props,

        };
        if (typeof type == 'string') {
            return React.createElement(type, {
                ...allProps,
                dangerouslySetInnerHTML: { __html: content }
            });
        }
        const Type = type;
        return <Type {...allProps}/>;

    }
}

export default ({
    types: {
        ContentWrapper
    }
})
","Generate the code for a React component that takes any arbitrary data and renders it as HTML, including support for React elements and arrays of child nodes."
"import React from 'react';
import RegistrationForm from 'ps-react/RegistrationForm';

/** Registration from with email and password inputs */
export default class ExampleRegistrationForm extends React.Component {
  onSubmit = (user) => {
    console.log(user);
  }

  render() {
    return <RegistrationForm 
              confirmationMessage=""Success!!!"" 
              onSubmit={this.onSubmit}
              minPasswordLength={8}
              />
  }
}","Create a registration form with email and password inputs, a minimum password length of 8 characters, and a confirmation message that says ""Success!!!"" upon successful registration."
"var _jsxFileName = 'layout/DefaultLayout.jsx',
    _this = this;

import React from 'react';
import { ReactElementType as _ReactElementType, LayoutPropsType as _LayoutPropsType } from '../types';
import { Html, Head, Body } from './index';

import t from 'flow-runtime';
const ReactElementType = t.tdz(function () {
  return _ReactElementType;
});
const LayoutPropsType = t.tdz(function () {
  return _LayoutPropsType;
});
export default (function defaultLayout(_arg) {
  const _returnType = t.return(t.ref(ReactElementType));

  let { helmet, content } = t.ref(LayoutPropsType).assert(_arg);
  return _returnType.assert(React.createElement(
    Html,
    { helmet: helmet, __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 5
      }
    },
    React.createElement(Head, { helmet: helmet, __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 6
      }
    }),
    React.createElement(
      Body,
      {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 7
        }
      },
      React.createElement('div', { id: 'app', dangerouslySetInnerHTML: { __html: content }, __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 8
        }
      })
    )
  ));
});
//# sourceMappingURL=DefaultLayout.js.map","Create a lightweight React component that renders HTML, Head, and Body components and injects dangerously set innerHTML into a div."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NavigationFullscreenExit = (props) => (
  <SvgIcon {...props}>
    <path d=""M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z""/>
  </SvgIcon>
);
NavigationFullscreenExit = pure(NavigationFullscreenExit);
NavigationFullscreenExit.displayName = 'NavigationFullscreenExit';
NavigationFullscreenExit.muiName = 'SvgIcon';

export default NavigationFullscreenExit;
",Create a React component that renders an SVG icon for a fullscreen exit button.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionSupervisorAccount = (props) => (
  <SvgIcon {...props}>
    <path d=""M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z""/>
  </SvgIcon>
);
ActionSupervisorAccount = pure(ActionSupervisorAccount);
ActionSupervisorAccount.displayName = 'ActionSupervisorAccount';
ActionSupervisorAccount.muiName = 'SvgIcon';

export default ActionSupervisorAccount;
",Generate the React component code for a Supervisor Account icon from Material UI.
"import React from 'react';
import styled from 'styled-components';
import magnifierIcon from '../../../../images/magnifier.svg';

import { CancelIconButton, CancelIconPlaceHolder, SearchBar } from './common';

const MobileSearchBarWrapper = styled.div`
    display: flex;
    justify-content: center;
    margin: 0 auto;
    padding: 20px 0;
`;

const MobileSearchBar = ({
    handleSearchSubmitKeyUp,
    handleSearchingTextChange,
    handleSearchingTextClear,
    searchingText
}) => (
    <MobileSearchBarWrapper>
        <SearchBar isMobile={true}>
            <img src={magnifierIcon} />
            <input
                autoFocus
                maxLength={50}
                onChange={handleSearchingTextChange}
                onKeyUp={handleSearchSubmitKeyUp}
                type=""text""
                value={searchingText}
            />
            {
                searchingText ?
                    <CancelIconButton
                        handleSearchingTextClear={handleSearchingTextClear}
                        height=""25px""
                        isMobile={true}
                        width=""25px""
                    />
                :
                    <CancelIconPlaceHolder
                        height=""25px""
                        width=""25px""
                    />
            }
        </SearchBar>
    </MobileSearchBarWrapper>
);

export default MobileSearchBar;
","Generate a React component that includes an input field to search for something and a button to submit the search. Also, add a button to cancel the search and clear the input field. The input should be responsive to different screen sizes."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let EditorStrikethroughS = (props) => (
  <SvgIcon {...props}>
    <path d=""M7.24 8.75c-.26-.48-.39-1.03-.39-1.67 0-.61.13-1.16.4-1.67.26-.5.63-.93 1.11-1.29.48-.35 1.05-.63 1.7-.83.66-.19 1.39-.29 2.18-.29.81 0 1.54.11 2.21.34.66.22 1.23.54 1.69.94.47.4.83.88 1.08 1.43.25.55.38 1.15.38 1.81h-3.01c0-.31-.05-.59-.15-.85-.09-.27-.24-.49-.44-.68-.2-.19-.45-.33-.75-.44-.3-.1-.66-.16-1.06-.16-.39 0-.74.04-1.03.13-.29.09-.53.21-.72.36-.19.16-.34.34-.44.55-.1.21-.15.43-.15.66 0 .48.25.88.74 1.21.38.25.77.48 1.41.7H7.39c-.05-.08-.11-.17-.15-.25zM21 12v-2H3v2h9.62c.18.07.4.14.55.2.37.17.66.34.87.51.21.17.35.36.43.57.07.2.11.43.11.69 0 .23-.05.45-.14.66-.09.2-.23.38-.42.53-.19.15-.42.26-.71.35-.29.08-.63.13-1.01.13-.43 0-.83-.04-1.18-.13s-.66-.23-.91-.42c-.25-.19-.45-.44-.59-.75-.14-.31-.25-.76-.25-1.21H6.4c0 .55.08 1.13.24 1.58.16.45.37.85.65 1.21.28.35.6.66.98.92.37.26.78.48 1.22.65.44.17.9.3 1.38.39.48.08.96.13 1.44.13.8 0 1.53-.09 2.18-.28s1.21-.45 1.67-.79c.46-.34.82-.77 1.07-1.27s.38-1.07.38-1.71c0-.6-.1-1.14-.31-1.61-.05-.11-.11-.23-.17-.33H21z""/>
  </SvgIcon>
);
EditorStrikethroughS = pure(EditorStrikethroughS);
EditorStrikethroughS.displayName = 'EditorStrikethroughS';
EditorStrikethroughS.muiName = 'SvgIcon';

export default EditorStrikethroughS;
","Craft a React component that encapsulates the Material Design icon for a strikethrough, matching the visual style of the Material Design specification."
"import PropTypes from 'prop-types';
import React from 'react';
import Modal from 'Components/Modal/Modal';
import { sizes } from 'Helpers/Props';
import ExcludeMovieModalContentConnector from './ExcludeMovieModalContentConnector';

function ExcludeMovieModal(props) {
  const {
    isOpen,
    onModalClose,
    ...otherProps
  } = props;

  return (
    <Modal
      isOpen={isOpen}
      size={sizes.MEDIUM}
      onModalClose={onModalClose}
    >
      <ExcludeMovieModalContentConnector
        {...otherProps}
        onModalClose={onModalClose}
      />
    </Modal>
  );
}

ExcludeMovieModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onModalClose: PropTypes.func.isRequired
};

export default ExcludeMovieModal;
","Generate a React component that renders a modal. The modal should have a title and a body, and it should be able to be opened and closed. The modal should be a child of the Modal component, and it should use the sizes helper to set the size of the modal. The modal should also use the ExcludeMovieModalContentConnector component to render the content of the modal."
"import React from 'react';
import { parse } from 'react-docgen';
import CodeExample from '../../../components/CodeExample';
import ComponentHeader from '../../../components/ComponentHeader';
import PropTypeDescription from '../../../components/PropTypeDescription';

import Demo from './Demo';
// eslint-disable-next-line
import demoCode from '!raw-loader!./Demo';
// eslint-disable-next-line
import componentCode from '!raw-loader!ringcentral-widgets/components/PresenceSettingSection';

const PresenceSettingSectionPage = () => {
  const info = parse(componentCode);
  return (
    <div>
      <ComponentHeader name=""PresenceSettingSection"" description={info.description} />
      <CodeExample
        code={demoCode}
        title=""PresenceSettingSection Example""
      >
        <Demo />
      </CodeExample>
      <PropTypeDescription componentInfo={info} />
    </div>
  );
};

export default PresenceSettingSectionPage;
","Generate the React component for a settings section that allows the user to select their presence status. This component should have the following functionality:
- Parse the component code to extract its description and prop types.
- Display a header with the component's name and description.
- Provide a code example that demonstrates how to use the component.
- Display a table of the component's props and their descriptions."
"import React from 'react';
import EllipsisWithTooltip from 'react-ellipsis-with-tooltip';
import PropTypes from 'prop-types';

import InfoItem from './InfoItem';
import { itemIteratorId } from './helpers';

const StringInfoItem = ({
  template,
  attr,
  tooltipText,
  translate,
  mapAttr,
  elipsed,
}) => {
  const inner = (
    <span>
      {translate ? __(mapAttr(template, attr)) : mapAttr(template, attr)}
    </span>
  );
  const innerContent = elipsed ? (
    <EllipsisWithTooltip placement=""top"">{inner}</EllipsisWithTooltip>
  ) : (
    inner
  );

  return (
    <InfoItem itemId={itemIteratorId(template, attr)} tooltipText={tooltipText}>
      {innerContent}
    </InfoItem>
  );
};

StringInfoItem.propTypes = {
  template: PropTypes.object.isRequired,
  attr: PropTypes.string.isRequired,
  tooltipText: PropTypes.string,
  translate: PropTypes.bool,
  mapAttr: PropTypes.func,
  elipsed: PropTypes.bool,
};

StringInfoItem.defaultProps = {
  translate: false,
  mapAttr: (template, attr) => template[attr],
  elipsed: false,
  tooltipText: undefined,
};

export default StringInfoItem;
","Generate a React component that displays a string value as an info item. The component should allow for the value to be truncated and displayed with a tooltip, and for the value to be translated or mapped before display."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageCameraRear = (props) => (
  <SvgIcon {...props}>
    <path d=""M10 20H5v2h5v2l3-3-3-3v2zm4 0v2h5v-2h-5zm3-20H7C5.9 0 5 .9 5 2v14c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm-5 6c-1.11 0-2-.9-2-2s.89-2 1.99-2 2 .9 2 2C14 5.1 13.1 6 12 6z""/>
  </SvgIcon>
);
ImageCameraRear = pure(ImageCameraRear);
ImageCameraRear.displayName = 'ImageCameraRear';
ImageCameraRear.muiName = 'SvgIcon';

export default ImageCameraRear;
",Create a React component that renders an SVG icon for a rear-facing camera. The icon should be made up of paths that define the shape of the camera and its lens. The component should be pure and should have a display name of 'ImageCameraRear'.
"import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import StatusListContainer from '../../ui/containers/status_list_container';
import { expandPublicTimeline } from '../../../actions/timelines';
import Column from '../../../components/column';
import { defineMessages, injectIntl } from 'react-intl';
import { connectPublicStream } from '../../../actions/streaming';
import ColumnHeader from '../../../../pawoo/components/animated_timeline_column_header';

const messages = defineMessages({
  title: { id: 'standalone.public_title', defaultMessage: 'A look inside...' },
});

@connect()
@injectIntl
export default class PublicTimeline extends React.PureComponent {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    intl: PropTypes.object.isRequired,
  };

  handleHeaderClick = () => {
    this.column.scrollTop();
  }

  setRef = c => {
    this.column = c;
  }

  componentDidMount () {
    const { dispatch } = this.props;

    dispatch(expandPublicTimeline());
    this.disconnect = dispatch(connectPublicStream());
  }

  componentWillUnmount () {
    if (this.disconnect) {
      this.disconnect();
      this.disconnect = null;
    }
  }

  handleLoadMore = maxId => {
    this.props.dispatch(expandPublicTimeline({ maxId }));
  }

  render () {
    const { intl } = this.props;

    return (
      <Column ref={this.setRef}>
        <ColumnHeader
          icon='globe'
          title={intl.formatMessage(messages.title)}
          onClick={this.handleHeaderClick}
          timelineId='public'
        />

        <StatusListContainer
          timelineId='public'
          onLoadMore={this.handleLoadMore}
          scrollKey='standalone_public_timeline'
          trackScroll={false}
        />
      </Column>
    );
  }

}
","A React component that displays a live-updating timeline of public social media posts with a navigation header. When the header is clicked, the timeline scrolls to the top. When the user reaches the end of the timeline, the component loads more posts automatically."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ContentLowPriority = (props) => (
  <SvgIcon {...props}>
    <path d=""M14 5h8v2h-8zm0 5.5h8v2h-8zm0 5.5h8v2h-8zM2 11.5C2 15.08 4.92 18 8.5 18H9v2l3-3-3-3v2h-.5C6.02 16 4 13.98 4 11.5S6.02 7 8.5 7H12V5H8.5C4.92 5 2 7.92 2 11.5z""/>
  </SvgIcon>
);
ContentLowPriority = pure(ContentLowPriority);
ContentLowPriority.displayName = 'ContentLowPriority';
ContentLowPriority.muiName = 'SvgIcon';

export default ContentLowPriority;
",Generate React code for a Material Design icon representing a low priority using the Material UI library.
"// @flow

import React from 'react';

declare var any: any;

class Foo extends React.Component<{}, void> {yep1: boolean}
class Bar extends React.Component<{}, void> {yep2: boolean}

(any: React$ElementRef<Class<Foo>>).yep1; // OK
(any: React$ElementRef<Class<Foo>>).yep2; // Error
(any: React$ElementRef<Class<Foo>>).nope; // Error
(any: React$ElementRef<Class<Bar>>).yep1; // Error
(any: React$ElementRef<Class<Bar>>).yep2; // OK
(any: React$ElementRef<Class<Bar>>).nope; // Error
",Generate a Flow type definition for a React component property such that it only allows access to a subset of the component's properties.
"/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */

import React, { Component } from 'react'; // eslint-disable-line no-unused-vars
import EventEmitter from 'eventemitter3';
import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';

let EE;
let viewport = {width: 1366, height: 768}; // Default size for server-side rendering
const RESIZE_EVENT = 'resize';

function handleWindowResize() {
  if (viewport.width !== window.innerWidth || viewport.height !== window.innerHeight) {
    viewport = {width: window.innerWidth, height: window.innerHeight};
    EE.emit(RESIZE_EVENT, viewport);
  }
}

function withViewport(ComposedComponent) {
  return class WithViewport extends Component {

    constructor() {
      super();

      this.state = {
        viewport: canUseDOM ? {width: window.innerWidth, height: window.innerHeight} : viewport,
      };
    }

    componentDidMount() {
      if (!EE) {
        EE = new EventEmitter();
        window.addEventListener('resize', handleWindowResize);
        window.addEventListener('orientationchange', handleWindowResize);
      }

      EE.on(RESIZE_EVENT, this.handleResize, this);
    }

    componentWillUnmount() {
      EE.removeListener(RESIZE_EVENT, this.handleResize, this);
      if (!EE.listeners(RESIZE_EVENT, true)) {
        window.removeEventListener('resize', handleWindowResize);
        window.removeEventListener('orientationchange', handleWindowResize);
        EE = null;
      }
    }

    render() {
      return <ComposedComponent {...this.props} viewport={this.state.viewport}/>;
    }

    handleResize(value) {
      this.setState({viewport: value}); // eslint-disable-line react/no-set-state
    }

  };
}

export default withViewport;
","Describe a React component that wraps another component and provides it with the current viewport dimensions, including handling window resize events."
"import React from 'react'
import { Button } from 'semantic-ui-react'

const ButtonExampleLabeledBasic = () => (
  <div>
    <Button
      color='red'
      content='Like'
      icon='heart'
      label={{ basic: true, color: 'red', pointing: 'left', content: '2,048' }}
    />

    <Button
      basic
      color='blue'
      content='Fork'
      icon='fork'
      label={{ as: 'a', basic: true, color: 'blue', pointing: 'left', content: '1,048' }}
    />
  </div>
)

export default ButtonExampleLabeledBasic
","Generate a code snippet of a React component that renders a group of labeled buttons using the Semantic UI React library. The buttons should have different colors, icons, and labels."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from 'material-ui/SvgIcon';

let CardGiftcard = props =>
  <SvgIcon {...props}>
    <path d=""M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z"" />
  </SvgIcon>;

CardGiftcard = pure(CardGiftcard);
CardGiftcard.muiName = 'SvgIcon';

export default CardGiftcard;
","Design an SVG icon for a gift card that can be used in a React application, ensuring it is performant and reusable."
"require('!style!css!./styles/index.css');
require('!style!css!muicss/lib/css/mui.css');

import React from 'react';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import injectTapEventPlugin from 'react-tap-event-plugin';

import store from './store';

import Layout from './layout';

injectTapEventPlugin();

render(
	<MuiThemeProvider>
	  <Provider store={store}>
	    <Layout />
	  </Provider>
  </MuiThemeProvider>,
  document.getElementById('root')
);
","Generate the necessary React, Redux, and Material UI setup code for a React application to render a Layout component. The code should include the following:

- Importing the necessary modules
- Injecting the TapEventPlugin for Material UI
- Configuring the Redux store and connecting it to the app via a Provider
- Wrapping the Layout component with a MuiThemeProvider to provide Material UI styles"
"import { NavigationActions } from 'react-navigation';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import React from 'react';

import * as startupActions from '../actions/startup';

export class Loading extends React.Component {
  static propTypes = {
    getAppState: PropTypes.func.isRequired,
    navigation: PropTypes.shape({
      dispatch: PropTypes.func.isRequired,
    }).isRequired,
  };

  async componentWillMount() {
    const { payload } = await this.props.getAppState();
    const route = payload.serverUrl ? 'Groups' : 'ServerLink';

    // Navigate without adding a back button.
    const navigate = NavigationActions.reset({
      index: 0,
      actions: [NavigationActions.navigate({ routeName: route })],
    });

    this.props.navigation.dispatch(navigate);
  }

  render() {
    return null;
  }
}

const mapDispatchToProps = {
  getAppState: startupActions.getAppState,
};

export default connect(null, mapDispatchToProps)(Loading);
","Create a React component that navigates to either the 'Groups' or 'ServerLink' screen based on the redux state, without adding a back button to the navigation stack."
"import React from 'react';
import SubitemWrapper from './subcontent/SubitemWrapper';
import { connect } from 'react-redux';

const Pelastussuunnitelma = (props) =>
    <SubitemWrapper {...props} />;

const mapStateToProps = ({ pelastussuunnitelmatab }) => ({
    pelastussuunnitelmatab
});

export default connect(mapStateToProps, null)(Pelastussuunnitelma);","Create a React component to display a portion of a page, pass properties to it, connect it to Redux, map the state to props, and export it."
"/**
 *
 * App.react.js
 *
 * This component is the skeleton around the actual pages, and should only
 * contain code that should be seen on all pages. (e.g. navigation bar)
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */

import React from 'react';

export default class App extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function

  static propTypes = {
    children: React.PropTypes.node,
  };

  render() {
    return (
      <div>
        {React.Children.toArray(this.props.children)}
      </div>
    );
  }
}
",Create a React component called App that serves as a shell for all pages and includes a navigation bar for common links visible on all pages.
"import React from 'react'
import { Route, DefaultRoute, RouteHandler, run } from 'react-router'

import MenuBar from './components/MenuBar'
import MachineView from './components/MachineView'
import InstructionSetView from './components/InstructionSetView'

export default class App extends React.Component {
    render() {
        return (
            <div>
                <MenuBar/>

                <div className=""container"">
                    <RouteHandler />
                </div>
            </div>
        )
    }
}

const routes = (
    <Route handler={App}>
        <DefaultRoute handler={MachineView} name=""simulator""/>
        <Route handler={InstructionSetView} name=""instructionSet""/>
    </Route>
)

run(routes, (Handler) => React.render(<Handler/>, document.getElementById('app')))

",Design a React application with a menu bar (MenuBar) and two pages: a machine view (MachineView) and an instruction set view (InstructionSetView). The application should use React Router for navigation.
"import React from 'react';
import PropTypes from 'prop-types';
import _ from 'lodash';
import Loader from ""../../../../../../../components/loaders/diamond/loader"";

const DeckMechanics = ({deck, cards}) => {
  const {loading} = cards;
  let deckMechanics = [].concat.apply([], _.map(deck, (value)=>value.hasOwnProperty('mechanics') ? value.mechanics : null));
  let countMechanics = _.countBy(deckMechanics, 'name');

  const listMechanics = () =>{
    const {mechanics} = cards;

    return _.sortBy(mechanics).map(mechanic=>
        <tr className={`${countMechanics[mechanic] > 0 ? 'has-mechanic' : ''}`} key={mechanic}>
          <td>{_.startCase(mechanic)}</td>
          <td>{countMechanics[mechanic] || 0}</td>
        </tr>
    )
  };

  return (
      <div className=""list mechanics-list"">
        <div className=""table-scroll"">
          <table>
            <thead>
              <tr>
                <td>Mechanic</td>
                <td>Amount</td>
              </tr>
            </thead>
            <tbody>
            {loading ? <Loader theme=""light""/> : listMechanics()}
            </tbody>
          </table>
        </div>
      </div>
  );
};

export default DeckMechanics;

DeckMechanics.propTypes = {
  deck: PropTypes.array,
  cards: PropTypes.object
};","Generate a React component that displays a table of mechanics and their counts for a given deck. The component should take a deck of cards and the cards' data as props, sort the mechanics alphabetically, and display the mechanic name and its count in the deck. If the cards are still loading, it should display a loading indicator."
"/**
 *
 * BlockLink
 */

import React from 'react';
import { FormattedMessage } from 'react-intl';
import cn from 'classnames';
import PropTypes from 'prop-types';

import styles from './styles.scss';

function BlockLink({ content, isDocumentation, link, title }) {
  return (
    <a
      className={cn(
        styles.blockLink,
        isDocumentation ? styles.blockLinkDocumentation : styles.blockLinkCode,
      )}
      href={link}
      target=""_blank""
    >
      <FormattedMessage {...title} />
      <FormattedMessage {...content}>{message => <p>{message}</p>}</FormattedMessage>
    </a>
  );
}

BlockLink.propTypes = {
  content: PropTypes.object.isRequired,
  isDocumentation: PropTypes.bool.isRequired,
  link: PropTypes.string.isRequired,
  title: PropTypes.object.isRequired,
};

export default BlockLink;
","Generate the React code for a stateless functional component called `BlockLink` that takes the following props: `content`, `isDocumentation`, `link`, and `title`. The component should contain a link that opens in a new tab and displays the title and content passed in as props. The link should have appropriate styling depending on whether `isDocumentation` is true (documentation styling) or false (code styling). Use classnames for styling."
"import React from 'react';
import cx from 'classnames';

import Button from '../Button';
import Text from '../Text';

export default class LikeButton extends React.Component {

  static propTypes = {
    children: React.PropTypes.node,
    liked: React.PropTypes.bool,
    className: React.PropTypes.string,
  }

  getClasses() {
    const liked = this.props.liked;

    return cx(liked ? 'liked' : 'not-liked', this.props.className);
  }

  render() {
    const liked = this.props.liked;

    return (
      <Button {...this.props} className={ this.getClasses() } type=""flat"">
        <Text bold>{liked ? 'Liked' : 'Like'}</Text>
        { this.props.children }
      </Button>
    );
  }
}
","Generate the code for a React component that displays a button with the text ""Liked"" or ""Like"" depending on a boolean prop `liked`. The component should be styled with class names based on the `liked` prop."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageLooks3 = (props) => (
  <SvgIcon {...props}>
    <path d=""M19.01 3h-14c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 7.5c0 .83-.67 1.5-1.5 1.5.83 0 1.5.67 1.5 1.5V15c0 1.11-.9 2-2 2h-4v-2h4v-2h-2v-2h2V9h-4V7h4c1.1 0 2 .89 2 2v1.5z""/>
  </SvgIcon>
);
ImageLooks3 = pure(ImageLooks3);
ImageLooks3.displayName = 'ImageLooks3';

export default ImageLooks3;
","Generate a React component called ImageLooks3 that renders an SVG icon with the following shape: a rectangle with rounded corners, containing a smaller rectangle with rounded corners inside it. Style the component with the provided CSS properties."
"import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

class Option extends React.Component {
  static displayName = ""Chooser.Option"";

  static propTypes = {
    tag: PropTypes.string.isRequired,
    children: PropTypes.node.isRequired,
    className: PropTypes.string,
    unselectedClassName: PropTypes.string,
    selectedClassName: PropTypes.string,
    value: PropTypes.any.isRequired,
    data: PropTypes.any
  };

  static contextTypes = {
    chooser: PropTypes.object.isRequired
  };

  static defaultProps = {
    tag: 'div'
  };

  render() {
    const selectionClasses = this.context.chooser.isSelected(this.props.value) ? this.props.selectedClassName : this.props.unselectedClassName;
    const classes = classNames(this.props.className, selectionClasses);

    return React.createElement(this.props.tag, { className: classes, onClick: this.handleClick }, this.props.children);
  }

  handleClick = (evt) => {
    evt.preventDefault();

    this.context.chooser.handleChoiceClick(this.props.value, this.props.data);
  }
}

export default Option;
","Provide me with the React code snippet for the Option component of the Chooser component library. This component should allow users to create selectable options within the Chooser component. The Option component should accept props such as tag, children, className, unselectedClassName, selectedClassName, value, and data. It should also leverage context to determine if an option is selected and handle click events to update the Chooser component's state."
"import React from 'react';
import { MuiThemeProvider, createMuiTheme } from 'material-ui/styles';
import purple from 'material-ui/colors/purple';
import green from 'material-ui/colors/green';
import CssBaseline from 'material-ui/CssBaseline';

// A theme with custom primary and secondary color.
// It's optional.
const theme = createMuiTheme({
  palette: {
    primary: {
      light: purple[300],
      main: purple[500],
      dark: purple[700],
    },
    secondary: {
      light: green[300],
      main: green[500],
      dark: green[700],
    },
  },
});

function withRoot(Component) {
  function WithRoot(props) {
    // MuiThemeProvider makes the theme available down the React tree
    // thanks to React context.
    return (
      <MuiThemeProvider theme={theme}>
        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}
        <CssBaseline />
        <Component {...props} />
      </MuiThemeProvider>
    );
  }

  return WithRoot;
}

export default withRoot;
",Provide a code snippet that encloses a React component with Material UI providers to style it using a custom material UI theme. The theme should have a purple primary color and a green secondary color.
"import React from 'react';
import MenuButton from '../../components/MenuButton';
import ToggleMarkup from '../../helpers/Manipulation/ToggleMarkup';
import SelectedContent from '../../helpers/SelectedContent';

const ItalicButton = React.createClass({
  statics: {
    getName: () => ""italic"",
    isVisible: (content, selection) => {
      const selContent = new SelectedContent(selection, content);
      return !selContent.isHeader();
    }
  },

  propTypes: MenuButton.propTypes,

  getDefaultProps() {
    return {
      type: ""em"",
      text: ""Italic"",
      icon: ""fa-italic""
    };
  },

  handlePress() {
    const guids   = this.props.selection.guids();
    const offsets = this.props.selection.offsets();
    const position = this.props.selection.position();

    const result = this._toggleMarkup().execute(guids, offsets, { type: this.props.type });

    return { content: result.content, position: position };
  },

  _toggleMarkup() {
    return new ToggleMarkup(this.props.content);
  },

  render() {
    return (
      <MenuButton {...this.props} onPress={this.handlePress} />
    );
  }
});

export default ItalicButton;
","Craft a JavaScript React class component for an italic button in a text editor. Include the `getName` and `isVisible` static methods for menuItem registration, `getDefaultProps` to set default properties, `handlePress` to trigger the button action, `_toggleMarkup` to create an instance of a markup toggle helper, and the `render` method to render the button's markup."
"import React from 'react';
import { PureRenderMixin } from 'react/addons';

import AvatarItem from 'components/common/AvatarItem.react';

var ContactItem = React.createClass({
  displayName: 'ContactItem',

  propTypes: {
    contact: React.PropTypes.object,
    onSelect: React.PropTypes.func
  },

  mixins: [PureRenderMixin],

  _onSelect() {
    this.props.onSelect(this.props.contact);
  },

  render() {
    let contact = this.props.contact;

    return (
      <li className=""contacts__list__item row"">
        <AvatarItem image={contact.avatar}
                    placeholder={contact.placeholder}
                    size=""small""
                    title={contact.name}/>

        <div className=""col-xs"">
          <span className=""title"">
            {contact.name}
          </span>
        </div>

        <div className=""controls"">
          <a className=""material-icons"" onClick={this._onSelect}>add</a>
        </div>
      </li>
    );
  }
});

export default ContactItem;
","Create a React component representing an individual contact in a list. It should include an avatar, display name, and an ""add"" button to add the contact to a list."
"import React from 'react';
import { PureRenderMixin } from 'react/addons';

import AvatarItem from 'components/common/AvatarItem.react';

var ContactItem = React.createClass({
  displayName: 'ContactItem',

  propTypes: {
    contact: React.PropTypes.object,
    onSelect: React.PropTypes.func
  },

  mixins: [PureRenderMixin],

  _onSelect() {
    this.props.onSelect(this.props.contact);
  },

  render() {
    let contact = this.props.contact;

    return (
      <li className=""contacts__list__item row"">
        <AvatarItem image={contact.avatar}
                    placeholder={contact.placeholder}
                    size=""small""
                    title={contact.name}/>

        <div className=""col-xs"">
          <span className=""title"">
            {contact.name}
          </span>
        </div>

        <div className=""controls"">
          <a className=""material-icons"" onClick={this._onSelect}>add</a>
        </div>
      </li>
    );
  }
});

export default ContactItem;
","Generate a simple React component that renders a contact item with an avatar, name, and 'add' button. When the button is clicked, a callback function should be triggered, passing the contact data as an argument."
"/**
 * A mobile section
 */

import React from 'react';
import MobileListItem from './ListItem';
import { Link } from 'react-router';

const MobileSectionItem = React.createClass({
	displayName: 'MobileSectionItem',
	propTypes: {
		children: React.PropTypes.node.isRequired,
		className: React.PropTypes.string,
		currentListKey: React.PropTypes.string,
		href: React.PropTypes.string.isRequired,
		lists: React.PropTypes.array,
	},
	// Render the lists
	renderLists () {
		if (!this.props.lists || this.props.lists.length <= 1) return null;

		const navLists = this.props.lists.map((item) => {
			// Get the link and the classname
			const href = item.external ? item.path : `${Keystone.adminPath}/${item.path}`;
			const className = (this.props.currentListKey && this.props.currentListKey === item.path) ? 'MobileNavigation__list-item is-active' : 'MobileNavigation__list-item';

			return (
				<MobileListItem key={item.path} href={href} className={className} onClick={this.props.onClick}>
					{item.label}
				</MobileListItem>
			);
		});

		return (
			<div className=""MobileNavigation__lists"">
				{navLists}
			</div>
		);
	},
	render () {
		return (
			<div className={this.props.className}>
				<Link
					className=""MobileNavigation__section-item""
					to={this.props.href}
					tabIndex=""-1""
					onClick={this.props.onClick}
				>
					{this.props.children}
				</Link>
				{this.renderLists()}
			</div>
		);
	},
});

module.exports = MobileSectionItem;
",Create a React component which takes a list of items and renders a mobile-friendly navigation list that collapses sublists on click.
"// @flow

import React from 'react';

type Props = {

    /**
     * Click handler for the button.
     */
    onClick: Function,

    /**
     * Keypress handler for the button.
     */
    onKeyPress: Function,
};

/**
 * React {@code Component} representing an button used for testing output sound.
 *
 * @returns { ReactElement}
 */
export default function TestButton({ onClick, onKeyPress }: Props) {
    return (
        <div
            className = 'audio-preview-test-button'
            onClick = { onClick }
            onKeyPress = { onKeyPress }
            role = 'button'
            tabIndex = { 0 }>
            Test
        </div>
    );
}
",Generate a React component that represents a button with click and keypress handlers. The button should have a `Test` label and a class name of `audio-preview-test-button`. It should be tabbable with a tab index of 0.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvAirplay = (props) => (
  <SvgIcon {...props}>
    <path d=""M6 22h12l-6-6zM21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4v-2H3V5h18v12h-4v2h4c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z""/>
  </SvgIcon>
);
AvAirplay = pure(AvAirplay);
AvAirplay.displayName = 'AvAirplay';
AvAirplay.muiName = 'SvgIcon';

export default AvAirplay;
",Design an SVG icon representing the Airplay functionality of a device.
"import React from 'react';
import classNames from 'classnames';
import tbsUtils from './utils/bootstrapUtils';

class NavbarBrand extends React.Component {

  render() {
    const {className, children, ...props} = this.props;
    let { $bs_navbar_bsClass: bsClass = 'navbar' } = this.context;
    let brandClasses = tbsUtils.prefix({ bsClass }, 'brand');

    if (React.isValidElement(children)) {
      return React.cloneElement(children, {
        className: classNames(
          children.props.className, className, brandClasses
        )
      });
    }

    return (
      <span {...props} className={classNames(className, brandClasses)}>
        {children}
      </span>
    );
  }
}

NavbarBrand.contextTypes = {
  $bs_navbar_bsClass: React.PropTypes.string
};

export default NavbarBrand;
","Generate the template of a React functional component for a Navbar Brand using Reactstrap and Typescript, employing props and context, including imports and styling with classNames."
"import Link from 'found/Link';
import Redirect from 'found/Redirect';
import Route from 'found/Route';
import createBrowserRouter from 'found/createBrowserRouter';
import makeRouteConfig from 'found/makeRouteConfig';
import PropTypes from 'prop-types';
import React from 'react';
import ReactDOM from 'react-dom';

function LinkItem(props) {
  return (
    <li>
      <Link {...props} activeStyle={{ fontWeight: 'bold' }} />
    </li>
  );
}

const propTypes = {
  children: PropTypes.node,
};

function App({ children }) {
  return (
    <div>
      <ul>
        <LinkItem to=""/"">Main</LinkItem>
        <ul>
          <LinkItem to=""/foo"">Foo</LinkItem>
          <LinkItem to=""/bar"">Bar (async)</LinkItem>
          <LinkItem to=""/baz"">Baz (redirects to Foo)</LinkItem>
          <LinkItem to=""/qux"">Qux (missing)</LinkItem>
        </ul>
      </ul>

      {children}
    </div>
  );
}

App.propTypes = propTypes;

const BrowserRouter = createBrowserRouter({
  routeConfig: makeRouteConfig(
    <Route path=""/"" Component={App}>
      <Route Component={() => <div>Main</div>} />
      <Route path=""foo"" Component={() => <div>Foo</div>} />
      <Route
        path=""bar""
        getComponent={() => import('./Bar').then((m) => m.default)}
        getData={() =>
          new Promise((resolve) => {
            setTimeout(resolve, 1000, 'Bar');
          })
        }
        render={({ Component, props }) =>
          Component && props ? (
            <Component {...props} />
          ) : (
            <div>
              <small>Loading&hellip;</small>
            </div>
          )
        }
      />
      <Redirect from=""baz"" to=""/foo"" />
    </Route>,
  ),

  /* eslint-disable react/prop-types */
  renderError: ({ error }) => (
    <div>{error.status === 404 ? 'Not found' : 'Error'}</div>
  ),
  /* eslint-enable react/prop-types */
});

ReactDOM.render(<BrowserRouter />, document.getElementById('root'));
","Create a React application that uses the Found library for routing. The application should have a sidebar with links to the following pages: Main, Foo, Bar, Baz, and Qux. The Main page should display the text ""Main"", the Foo page should display the text ""Foo"", and the Bar page should display the text ""Bar"". The Baz page should redirect to the Foo page, and the Qux page should display a ""Not found"" message."
"/*
 * HomePage
 *
 * This is the first thing users see of our App, at the '/' route
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */

import React from 'react';
import { FormattedMessage } from 'react-intl';
import messages from './messages';

export default class HomePage extends React.Component { // eslint-disable-line react/prefer-stateless-function

  render() {
    return (
      <h1>
        <FormattedMessage {...messages.header} />
      </h1>
    );
  }
}
","Write a React component called HomePage that displays a message in an h1 tag. The message should be ""Hello, world!"", and it should be internationalized using the react-intl library."
"import React from 'react';
import {Image} from 'react-native';

var btnsDefault = [ { text: 'Button' } ];

var btnsTypes = [
  { text: 'Primary',    type: 'primary',   },
  { text: 'Secondary',  type: 'secondary', },
  { text: 'Delete',     type: 'delete',    }
];

var rows = [
  {
    text: ""Basic Example"",
    right: btnsDefault,
  }, {
    text: ""onPress Callback"",
    right: [
      {
        text: 'Press Me',
        onPress: function(){ alert('button pressed') },
        type: 'primary',
      }
    ],
  }, {
    text: ""Button Types"",
    right: btnsTypes,
  }, {
    text: ""Button with custom styling"",
    right: [
      {
        text: 'Button',
        backgroundColor: '#4fba8a',
        color: '#17807a',
        underlayColor: ""#006fff"",
      }
    ],
  },
  {
    text: ""Overswipe background color (drag me far)"",
    right: btnsDefault,
    backgroundColor: '#006fff',
  }, {
    text: ""Swipeout autoClose={true}"",
    right: btnsDefault,
    autoClose: true,
  }, {
    text: ""Five buttons (full-width) + autoClose={true}"",
    right: [
      { text: 'One'},
      { text: 'Two'},
      { text: 'Three' },
      { text: 'Four' },
      { text: 'Five' }
    ],
    autoClose: true,
  }, {
    text: ""Custom button component"",
    right: [
      {
        component: <Image style={{flex: 1}} source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}} />
      }
    ],
  }, {
    text: ""Swipe me right (buttons on left side)"",
    left: btnsDefault,
  }, {
    text: ""Buttons on both sides"",
    left: btnsTypes,
    right: btnsTypes,
  },
];

export default rows;
","Provide a list of React Native button examples, including basic buttons, buttons with custom styling, buttons with onPress callbacks, and buttons with multiple button types. Include examples of buttons with left-aligned and right-aligned buttons."
"/**
 * Copyright (c) 2017-present, NDLA.
 *
 * This source code is licensed under the GPLv3 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

// N.B! AUTOGENERATED FILE. DO NOT EDIT
import React from 'react';
import Icon from '../Icon';

const Time = props => (
  <Icon
    viewBox=""0 0 48 48""
    data-license=""Apache License 2.0""
    data-source=""Material Design""
    {...props}>
    <g>
      <path d=""M23.99 4C12.94 4 4 12.95 4 24s8.94 20 19.99 20C35.04 44 44 35.05 44 24S35.04 4 23.99 4zM24 40c-8.84 0-16-7.16-16-16S15.16 8 24 8s16 7.16 16 16-7.16 16-16 16zm1-26h-3v12l10.49 6.3L34 29.84l-9-5.34z"" />
    </g>
  </Icon>
);

export default Time;
",Design an `SVG` React component for displaying a clock icon. The icon should adhere to the Material Design guidelines and be licensed under the Apache License 2.0.
"import React from 'react';


const Bookmark = (props) => {
  let style = { color: '#ccc'};
  if(props.markBookmarkFlag){
    style.color = '#000';
  }

  const onClick = (evt) => {
    evt.stopPropagation();
    const element = evt.target;
    props.boundActions.toggleBookmark(element, props.feed);
  };

  return (
    <span
      onClick={onClick}
      style={style}
      className=""glyphicon glyphicon-bookmark""
      aria-hidden=""true""/>
  );
};

export default Bookmark;
","Generate a React component called 'Bookmark' that renders a bookmark icon. When the icon is clicked, it should call a function passed in as a prop to toggle whether the bookmark is marked. If the bookmark is marked, the icon color should be black, otherwise it should be light gray."
"import DraftActions from '../actions/DraftActions'
import DraftStore from '../stores/DraftStore'
import OrderSelect from './OrderSelect'
import Quote from './Quote'
import QuoteEditor from './QuoteEditor'
import QuotesActions from '../actions/QuotesActions'
import QuotesStore from '../stores/QuotesStore'
import React from 'react'

function getState() {
  return {
    ordering: QuotesStore.getOrdering(),
    quotes: QuotesStore.getQuotes(),
    draft: DraftStore.getDraft()
  }
}

export default class IndexPage extends React.Component {

  constructor() {
    this.state = getState()
    this._onChange = () => this.setState(getState())
  }

  componentDidMount() {
    DraftStore.listen(this._onChange)
    QuotesStore.listen(this._onChange)
  }

  componentDidUnmount() {
    DraftStore.unlisten(this._onChange)
    QuotesStore.unlisten(this._onChange)
  }

  onChangeDraft(newDraft) {
    DraftActions.change(newDraft)
  }

  onSubmit() {
    DraftActions.submit(DraftStore.getDraft())
  }

  onReorder(ordering) {
    QuotesActions.reorder({ ordering: ordering })
  }

  render() {
    return <div className=""page"">
      <h1>pudd.in</h1>
      <QuoteEditor {...this.state.draft} onChange={this.onChangeDraft.bind(this)} onSubmit={this.onSubmit} />
      <OrderSelect value={this.state.ordering} onChange={this.onReorder.bind(this)} />
      {this.state.quotes.map((q) => <Quote key={q.id} {...q} />)}
    </div>
  }

}
","Generate the React component that allows the user to create and edit quotes, as well as reorder the quotes. The component should include a form for editing the quote, a button to submit the quote, a dropdown to reorder the quotes, and a list of quotes."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvExplicit = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h4v2h-4v2h4v2H9V7h6v2z""/>
  </SvgIcon>
);
AvExplicit = pure(AvExplicit);
AvExplicit.displayName = 'AvExplicit';
AvExplicit.muiName = 'SvgIcon';

export default AvExplicit;
",Create a React component that renders an explicit icon for Material UI. The icon should be a white path inside a black square.
"/**
 * React Starter Kit (https://www.reactstarterkit.com/)
 *
 * Copyright © 2014-present Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

import React from 'react';
import ErrorPage from './ErrorPage';

function action() {
  return {
    title: 'Demo Error',
    component: <ErrorPage />,
  };
}

export default action;
","Create a React function that returns an object containing a title and a component. The title should be ""Demo Error"" and the component should be an ErrorPage component."
"import React, { Component } from 'react';
import I18n from 'react-native-i18n';
import { connect } from 'react-redux';
import { View, Text, TouchableOpacity, Image, ScrollView, Alert } from 'react-native';

import { Styles, Metrics, Images, Colors, Fonts } from '@theme/';
import styles from './styles';
import CommonWidgets from '@components/CommonWidgets';
import Utils from '@src/utils';

import { Avatar } from 'react-native-elements';

class AboutCell extends Component {
  render() {
    return (
      <View style={[styles.container, Styles.rowContainer]}>
        <View style={Styles.center}>
          {CommonWidgets.renderSizedAvatar(this.props.imgPath, null, Metrics.aboutAvatarSize)}
        </View>
        <View style={{ width: 20 }} />
        <View style={{ flex: 1, justifyContent: 'center' }}>
          <Text style={{ ...Fonts.style.h4, color: Colors.brandPrimary }}>{this.props.name}</Text>
          <Text style={{ ...Fonts.style.h4, color: Colors.textPrimary }}>{this.props.job}</Text>
          <Text style={{ ...Fonts.style.h4, color: Colors.textPrimary }}>{this.props.school}</Text>
        </View>
      </View>
    );
  }
}

AboutCell.propTypes = {
  imgPath: React.PropTypes.string.isRequired,
  name: React.PropTypes.string.isRequired,
  job: React.PropTypes.string.isRequired,
  school: React.PropTypes.string.isRequired,
};

AboutCell.defaultProps = {
  imgPath: 'https://facebook.github.io/react/img/logo_og.png',
  name: 'All American',
  job: ""Head-Coach: Women's Basketball"",
  school: 'Washington University',
};

function mapStateToProps(state) {
  const globals = state.get('globals');
  return { globals };
}

export default connect(mapStateToProps, null)(AboutCell);
","Generate the code to make an About Cell component using React Native that has a profile picture, followed by a name, job, and school."
"import React from 'react'
import {connect} from 'react-redux'

import Msg from '../i18n/Msg'


class SmallBreadcrumbs extends React.Component {
  render() {
    return (
      <ol className=""breadcrumb"">
        {
          this.props.items.map((it, idx)=> (
            <li key={it + idx}><Msg phrase={it}/></li>
          ))
        }
      </ol>
    )
  }
}


const mapStateToProps = (state, ownProps) => {
  const {navigation, routing}= state;
  const route = routing.locationBeforeTransitions.pathname;

  const titleReducer = (chain, it)=> {
    if (it.route == route) {
      chain.push(it.title)
    } else if (it.items) {
      it.items.reduce(titleReducer, chain);
    }
    return chain
  };

  const items = navigation.items.reduce(titleReducer, ['Home']);

  return {items}
};


export default connect(mapStateToProps)(SmallBreadcrumbs)",Generate a React component with a Breadcrumbs component that displays the current navigation hierarchy as a list of links. The component should use the Redux state to determine the current navigation path and display the corresponding items in the hierarchy as links.
"import React from 'react';

class App extends React.Component {
    render(){

        return (
                <div>
                    <h1>SpringBoot ReactJS Start!!</h1>
                    <h2>SpringBoot ReactJS Start!!</h2>
                    <h3>SpringBoot ReactJS Start!!</h3>
                </div>
        );
    }
}

export default App;","Create React code that displays three levels of heading text elements (""h1"", ""h2"", and ""h3"") with the text of ""SpringBoot ReactJS Start!!"" inside each element."
"import React from 'react'
import AppBar from 'material-ui/AppBar'
import Toolbar from 'material-ui/Toolbar'
import styled from 'styled-components'

const _AppBar = styled(AppBar)`
    margin-bottom: 2px;
`

export default (props) => {
    return (
        <_AppBar position=""static"" color=""white"" elevation={2} square>
            <Toolbar>
                {props.children}
            </Toolbar>
        </_AppBar>
    )
}","Generate a React component that utilizes styled-components to customize the look of the Material UI AppBar component. The new component should have a white background, an elevation of 2, and square corners. The component should accept children and pass them into the Toolbar element."
"import React from 'react';

const GithubIcon = () => (
    <svg viewBox=""0 0 284 277"">
      <g>
        <path fill=""#fff"" d=""M141.888675,0.0234927555 C63.5359948,0.0234927555 0,63.5477395 0,141.912168 C0,204.6023 40.6554239,257.788232 97.0321356,276.549924 C104.12328,277.86336 106.726656,273.471926 106.726656,269.724287 C106.726656,266.340838 106.595077,255.16371 106.533987,243.307542 C67.0604204,251.890693 58.7310279,226.56652 58.7310279,226.56652 C52.2766299,210.166193 42.9768456,205.805304 42.9768456,205.805304 C30.1032937,196.998939 43.9472374,197.17986 43.9472374,197.17986 C58.1953153,198.180797 65.6976425,211.801527 65.6976425,211.801527 C78.35268,233.493192 98.8906827,227.222064 106.987463,223.596605 C108.260955,214.426049 111.938106,208.166669 115.995895,204.623447 C84.4804813,201.035582 51.3508808,188.869264 51.3508808,134.501475 C51.3508808,119.01045 56.8936274,106.353063 65.9701981,96.4165325 C64.4969882,92.842765 59.6403297,78.411417 67.3447241,58.8673023 C67.3447241,58.8673023 79.2596322,55.0538738 106.374213,73.4114319 C117.692318,70.2676443 129.83044,68.6910512 141.888675,68.63701 C153.94691,68.6910512 166.09443,70.2676443 177.433682,73.4114319 C204.515368,55.0538738 216.413829,58.8673023 216.413829,58.8673023 C224.13702,78.411417 219.278012,92.842765 217.804802,96.4165325 C226.902519,106.353063 232.407672,119.01045 232.407672,134.501475 C232.407672,188.998493 199.214632,200.997988 167.619331,204.510665 C172.708602,208.913848 177.243363,217.54869 177.243363,230.786433 C177.243363,249.771339 177.078889,265.050898 177.078889,269.724287 C177.078889,273.500121 179.632923,277.92445 186.825101,276.531127 C243.171268,257.748288 283.775,204.581154 283.775,141.912168 C283.775,63.5477395 220.248404,0.0234927555 141.888675,0.0234927555"" />
      </g>
    </svg>
);

export default GithubIcon;
",Generate an SVG icon of the GitHub logo.
"import React from 'react'
import classNames from 'classnames'
import Meta from './Meta'
import Control from './Control'
import Clock from './Clock'

function Team(props) {
  const divClass = classNames({
    team: true,
    hide: props.hide,
  })
  return (
    <div className={divClass}>
      <Meta
        right={props.right}
        teamName={props.name}
        thought={props.thought}
        hide={props.hideAll}
      />
      <Clock timeout={props.timeout} />
      <Control controlFns={props.controlFns} running={props.running} end={props.end} />
    </div>
  )
}

export default Team
","Design a React component called `Team` that encapsulates all the different elements for each team, including a clock, control buttons, and a meta section displaying the team name and current thought. The component should have a dynamic style that hides the team when the `hide` prop is set to `true` and hides both the team and all the child components when `hideAll` is set to `true`."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionSettingsCell = (props) => (
  <SvgIcon {...props}>
    <path d=""M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z""/>
  </SvgIcon>
);
ActionSettingsCell = pure(ActionSettingsCell);
ActionSettingsCell.displayName = 'ActionSettingsCell';
ActionSettingsCell.muiName = 'SvgIcon';

export default ActionSettingsCell;
","Create a React component using the `recompose/pure` HOC, the `SvgIcon` component, and a path with specific coordinates to render an icon for a settings cell."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let EditorDragHandle = (props) => (
  <SvgIcon {...props}>
    <path d=""M20 9H4v2h16V9zM4 15h16v-2H4v2z""/>
  </SvgIcon>
);
EditorDragHandle = pure(EditorDragHandle);
EditorDragHandle.displayName = 'EditorDragHandle';
EditorDragHandle.muiName = 'SvgIcon';

export default EditorDragHandle;
","Describe the following code snippet, providing specific details about what it does and any relevant context. This description should not be technical and should be easy for a non-technical audience to understand."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NotificationPersonalVideo = (props) => (
  <SvgIcon {...props}>
    <path d=""M21 3H3c-1.11 0-2 .89-2 2v12c0 1.1.89 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.11-.9-2-2-2zm0 14H3V5h18v12z""/>
  </SvgIcon>
);
NotificationPersonalVideo = pure(NotificationPersonalVideo);
NotificationPersonalVideo.displayName = 'NotificationPersonalVideo';
NotificationPersonalVideo.muiName = 'SvgIcon';

export default NotificationPersonalVideo;
",Create a React component that renders a Material Design icon representing a person making a video call. The component should be pure and have an associated displayName and muiName.
"import React from 'react';
import {Tooltip} from 'wix-style-react';

import styles from './Example.scss';

export default () =>
  <div>
    <Tooltip active placement=""right"" alignment=""center"" content=""Dark Theme"" showTrigger=""custom"" hideTrigger=""custom"" theme=""dark"">
      <div className={styles.box}>Dark Theme</div>
    </Tooltip>
    <br/>
    <Tooltip active placement=""right"" alignment=""center"" content=""Error Theme"" showTrigger=""custom"" hideTrigger=""custom"" theme=""error"">
      <div className={styles.box}>Error Theme</div>
    </Tooltip>
  </div>;
","Create a code snippet in React that includes a tooltip component with custom show and hide triggers, alignment, and styling."
"import React from 'react'
import PropTypes from 'prop-types'
import createReactClass from 'create-react-class'

const DescriptionTeaser = createReactClass({
  displayName: 'Teaser Text',

  propTypes: {
    description: PropTypes.string,
  },

  style: function () {
    return {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
    }
  },

  render: function () {
    return (
      <div
        className='item-description'
        dangerouslySetInnerHTML={{ __html: this.props.description }}
        style={this.style()}
      />
    )
  },
})

export default DescriptionTeaser
",Create a React component to display a description from a CMS. The description should be truncated with an ellipsis (...) in case the description text is too long.
"import React from 'react';
import CopyToClipboard from 'react-copy-to-clipboard';
import { IconButton, FlatButton, FontIcon } from 'material-ui';
import Tooltip from '../Tooltip';
import Truncate from '../Truncate';

const Clipboard = ({ style, iconStyle, tooltip, text, copyText, onCopy, type, children, ...other }) => {
  const styles = {
    listItem: {
      display: 'flex',
      padding: '16px 16px 16px 72px'
    },
    tooltipInnerDiv: {
      display: 'flex'
    },
    fontIcon: {
      fontSize: '1.3em',
      paddingLeft: 10
    }
  };
  const renderIcon = () => (
    <IconButton
      iconClassName=""synicon-link-variant""
      style={style}
      iconStyle={iconStyle}
      tooltip={tooltip}
    />
  );
  const renderButton = () => (
    <FlatButton
      {...other}
      primary={true}
    />
  );
  const renderLink = () => (
    <div>
      <Tooltip label={tooltip}>
        <div style={styles.tooltipInnerDiv}>
          <Truncate text={text || copyText} />
          <FontIcon
            color=""#b8c0c9""
            style={styles.fontIcon}
            className=""synicon-link-variant""
          />
        </div>
      </Tooltip>
    </div>
  );
  const renderListItem = () => (
    <div style={styles.listItem}>
      <Truncate text={text || copyText} />
    </div>
  );
  const renderContent = () => {
    const actions = {
      icon: renderIcon(),
      button: renderButton(),
      link: renderLink(),
      list: renderListItem()
    };

    return actions[type] || <div>{children}</div>;
  };

  return (
    <CopyToClipboard
      text={copyText}
      onCopy={onCopy}
    >
      {renderContent()}
    </CopyToClipboard>
  );
};

export default Clipboard;
","Create a React component that takes the following props: style, iconStyle, tooltip, text, copyText, onCopy, type, and children. The component should render a CopyToClipboard component with the given props. If the type prop is ""icon"", the component should render an IconButton with the given style and iconStyle, and the tooltip prop as the tooltip. If the type prop is ""button"", the component should render a FlatButton with the given style and the tooltip prop as the tooltip. If the type prop is ""link"", the component should render a div with a Tooltip component with the given tooltip prop, and a Truncate component with the given text or copyText prop. If the type prop is ""list"", the component should render a div with a Truncate component with the given text or copyText prop. If the type prop is not provided, the component should render the children prop."
"import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import LoadingIndicator from '../../components/loading_indicator';
import { fetchFavourites } from '../../actions/interactions';
import { ScrollContainer } from 'react-router-scroll';
import AccountContainer from '../../containers/account_container';
import Column from '../ui/components/column';
import ColumnBackButton from '../../components/column_back_button';
import ImmutablePureComponent from 'react-immutable-pure-component';

const mapStateToProps = (state, props) => ({
  accountIds: state.getIn(['user_lists', 'favourited_by', Number(props.params.statusId)]),
});

class Favourites extends ImmutablePureComponent {

  static propTypes = {
    params: PropTypes.object.isRequired,
    dispatch: PropTypes.func.isRequired,
    accountIds: ImmutablePropTypes.list,
  };

  componentWillMount () {
    this.props.dispatch(fetchFavourites(Number(this.props.params.statusId)));
  }

  componentWillReceiveProps (nextProps) {
    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {
      this.props.dispatch(fetchFavourites(Number(nextProps.params.statusId)));
    }
  }

  render () {
    const { accountIds } = this.props;

    if (!accountIds) {
      return (
        <Column>
          <LoadingIndicator />
        </Column>
      );
    }

    return (
      <Column>
        <ColumnBackButton />

        <ScrollContainer scrollKey='favourites'>
          <div className='scrollable'>
            {accountIds.map(id => <AccountContainer key={id} id={id} withNote={false} />)}
          </div>
        </ScrollContainer>
      </Column>
    );
  }

}

export default connect(mapStateToProps)(Favourites);
","Generate a React app that when provided a statusId, will fetch and display a list of user accounts that have favourited that status."
"// @flow

import {map, flatten} from 'lodash'
import {Promise} from 'es6-promise'
import React from 'react'

type Route = {
  handler: {
    load:Function;
  }
}

export function loadAll(routes:Array<Route>, params:Object, query:Object, onData:(data:any)=>void) {
  var data = {loaded: false};

  routes
    .filter(route => route.handler.load)
    .forEach(function(route) {

      // ok, they're allowed to do more than one, right?
      var promises = route.handler.load(params, query)

      return map(promises, function(promise, name) {

        if (!promise.then) {
          // it isn't a promise, it's a value
          // resolve it
          promise = Promise.resolve(promise)
        }

        return promise.then(function(d) {
          data[name] = d
          data.loaded = true
          onData(data)
        }, throwError)
      })
    })
}

function throwError(err) {
  throw err
}

// store the last one :)
var lastHandler:any
var lastState:any
var lastData:any
var innerRender:any

function nothing() {}

export function run(ren:Function, onUrlChange:Function = nothing):Function {

  innerRender = ren

  return function(Handler, state) {
    lastHandler = Handler
    lastState = state
    lastData = {loaded: false}

    onUrlChange(Handler, state)

    // render once without any data
    render()

    // render again every time any of the promises resolve
    loadAll(state.routes, state.params, state.query, render)
  }
}

export function render(data:any = lastData) {
  lastData = data
  var Handler = lastHandler
  var state = lastState
  innerRender(Handler, state, data)
}

// global reload
export function reloadHandler() {
  loadAll(lastState.routes, lastState.params, lastState.query, render)
}
","Generate a JavaScript code snippet that uses a library to load and render data from an array of routes, allowing for multiple promises to be loaded from each route. The function should take in an array of routes, params, query, and an onData callback to update the data as it becomes available. It should also provide a run function that takes in a render function and an onUrlChange callback, and a render function that updates the data and calls the inner render function. Additionally, it should include a reloadHandler function to reload the data."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageMovieCreation = (props) => (
  <SvgIcon {...props}>
    <path d=""M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z""/>
  </SvgIcon>
);
ImageMovieCreation = pure(ImageMovieCreation);
ImageMovieCreation.displayName = 'ImageMovieCreation';

export default ImageMovieCreation;
",Create a React component that renders the Movie Icon from Material Design Icons.
"import React from 'react';
import { Router } from 'react-router';
import routes from '../../routes';
import { browserHistory } from 'react-router';
import './App.scss';

const store = window.store = {};
const createElement = (Component, props) => {
  return <Component {...props} store={store} />
};

const App = () => {
  return (
    <Router history={browserHistory} children={routes} createElement={createElement} />
  )
};

export default App;
","Create a React application with a store that can be passed as props to all child components. Also include a router with the following routes:
`=""/"">Welcome
""/about-us"">About Us
""/contact-us"">Contact Us`"
"import React from 'react';
import Footer from '../footer.js';
import { FormattedHTMLMessage } from 'react-intl';

var ThunderbirdFooter = React.createClass({
  contextTypes: {
    intl: React.PropTypes.object
  },
  render: function() {
    // We can customize the thunderbird message here if we want.
    return (
      <Footer {...this.props}>
        <FormattedHTMLMessage
          id='footer_updates'
        />
      </Footer>
    );
  }
});

module.exports = ThunderbirdFooter;
",Describe a React component that can be used in a footer that allows you to customize the message.
"
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FormField from '../../components/FormField';
// import ImageField from '../../components/ImageField';
import SelectSearch from '../../components/SelectSearch';
import TextHelp from '../../components/TextHelp';
import FormState from '../../utils/FormState';

export default class PageItemEdit extends Component {

  constructor(props) {
    super(props);
    const { onChange, item } = props;
    this.state = { formState: new FormState(item, onChange) };
  }

  componentWillReceiveProps(nextProps) {
    const { onChange, item } = nextProps;
    this.setState({ formState: new FormState(item, onChange) });
  }

  render() {
    // const { index } = this.props;
    const { formState } = this.state;
    const pageSummary = formState.object;

    return (
      <div>
        <FormField label=""Page"">
          <SelectSearch category=""pages""
            value={pageSummary.id ? pageSummary.id.name : ''}
            onChange={suggestion =>
              formState.change('id')({
                _id: suggestion._id, name: suggestion.name })} />
        </FormField>
        <FormField name=""summary"" label=""Summary"" help={<TextHelp />}>
          <textarea name=""summary""
            value={pageSummary.summary || ''}
            rows={4}
            onChange={formState.change('summary')} />
        </FormField>
        {/* }
        <ImageField key=""image"" label=""Image"" name={`image-${index}`}
          formState={formState} property=""image"" />
        { */}
      </div>
    );
  }

}

PageItemEdit.propTypes = {
  // index: PropTypes.number.isRequired,
  item: PropTypes.object.isRequired,
  onChange: PropTypes.func.isRequired,
};
","Generate the code for a React component that uses a SelectSearch component to select a page, a FormField component for a summary, and a TextHelp component for help. The component should use a FormState object to manage the form state, and should update the form state when the SelectSearch or FormField components change."
"import React from 'react';

import { TableRow, TableRowColumn } from '@material-ui/core/Table';
import TextField from '@material-ui/core/TextField';

const AnnualLeave = ({ handleChange }) => {
  return (
    <TableRow>
      <TableRowColumn>
        <h3>Your total number of annual leave days</h3>
      </TableRowColumn>
      <TableRowColumn>
        <TextField
          name=""annualLeave""
          type=""number""
          hintText=""Your total number of annual leave days""
          onChange={handleChange}
        />
      </TableRowColumn>
    </TableRow>
  );
};

export default AnnualLeave;
","Generate a React code snippet for an annual leave input field within a table row. Include a TextField component with a label, name, type, hint text, and an event handler for value changes."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let CommunicationMessage = (props) => (
  <SvgIcon {...props}>
    <path d=""M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z""/>
  </SvgIcon>
);
CommunicationMessage = pure(CommunicationMessage);
CommunicationMessage.displayName = 'CommunicationMessage';

export default CommunicationMessage;
","Create a React component with the following specifications:
- Name: CommunicationMessage
- Import React and the pure function from recompose
- Import the SvgIcon component from another file
- The component should be a pure component using the pure function from recompose
- The component should render an SVG icon with the following path:
  - d=""M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"""
"import _Object$values from 'babel-runtime/core-js/object/values';
import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import classNames from 'classnames';
import React from 'react';

import { bsClass, bsStyles, getClassSet, splitBsProps } from './utils/bootstrapUtils';
import { State, Style } from './utils/StyleConfig';

var Label = function (_React$Component) {
  _inherits(Label, _React$Component);

  function Label() {
    _classCallCheck(this, Label);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Label.prototype.hasContent = function hasContent(children) {
    var result = false;

    React.Children.forEach(children, function (child) {
      if (result) {
        return;
      }

      if (child || child === 0) {
        result = true;
      }
    });

    return result;
  };

  Label.prototype.render = function render() {
    var _props = this.props,
        className = _props.className,
        children = _props.children,
        props = _objectWithoutProperties(_props, ['className', 'children']);

    var _splitBsProps = splitBsProps(props),
        bsProps = _splitBsProps[0],
        elementProps = _splitBsProps[1];

    var classes = _extends({}, getClassSet(bsProps), {

      // Hack for collapsing on IE8.
      hidden: !this.hasContent(children)
    });

    return React.createElement(
      'span',
      _extends({}, elementProps, {
        className: classNames(className, classes)
      }),
      children
    );
  };

  return Label;
}(React.Component);

export default bsClass('label', bsStyles([].concat(_Object$values(State), [Style.DEFAULT, Style.PRIMARY]), Style.DEFAULT, Label));",Describe the Label component that optionally applies a bootstrap style to a text label. It hides itself if its content is empty.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvCallToAction = (props) => (
  <SvgIcon {...props}>
    <path d=""M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3v-3h18v3z""/>
  </SvgIcon>
);
AvCallToAction = pure(AvCallToAction);
AvCallToAction.displayName = 'AvCallToAction';
AvCallToAction.muiName = 'SvgIcon';

export default AvCallToAction;
",Generate a React component for Material UI's AvCallToAction SVG icon.
"import React from 'react'
import ButtonAnchor from 'react-ions/lib/components/Button/ButtonAnchor'

const ExampleButtonAnchor = () => (
  <div>
    <ButtonAnchor path='http://www.google.com' optClass='success'>External</ButtonAnchor>
    <ButtonAnchor path='http://www.google.com' target='_blank' collapse={true}>External (new window)</ButtonAnchor>
    <ButtonAnchor path='/components/progress-bar' internal={true} optClass='plain'>Internal</ButtonAnchor>
    <ButtonAnchor disabled path='/components/progress-bar' internal={true} optClass='secondary'>Disabled</ButtonAnchor>
  </div>
)

export default ExampleButtonAnchor
","Generate the code for a React component that implements a button that can link to both internal and external URLs.
The button should have different styles depending on its purpose (e.g., primary button, secondary button, success button).
The button should also be able to open links in new tabs or windows.
Finally, the button should be able to be disabled."
"import React from 'react';
import { Link } from 'react-router-dom';

import { Copyright } from '../';
import styles from './Footer.sass';


function footerLinks() {
  /* eslint-disable jsx-a11y/href-no-hash */
  return (
    <div className={styles.linksWrapper}>
      <Link to=""/"">Home</Link>
      <a
        href=""https://www.facebook.com/resistancecalendar""
        target=""_blank""
        rel=""noopener noreferrer""
      >
        Facebook
      </a>
      <a
        href=""https://twitter.com/ResistCalendar""
        target=""_blank""
        rel=""noopener noreferrer""
      >
        Twitter
      </a>
      <Link to=""/privacy-policy"">Privacy Policy</Link>
    </div>
  );
  /* eslint-enable jsx-a11y/href-no-hash */
}

const Footer = () => {
  const year = (new Date()).getFullYear();

  return (
    <footer className={styles.footer}>
      {footerLinks()}
      <Copyright year={year} />
    </footer>
  );
};

Footer.propTypes = {};

export default Footer;
","Provide a website footer with links to the home page, Facebook, Twitter, and a privacy policy. Include a copyright notice with the current year. Use inline styles for class names."
"import React from 'react';
import MediaByInterval from './media_by_interval';
import moment from 'moment';

export default class MediaByDay extends MediaByInterval {
  fetchParams(props) {
    return {
      year: props.params.year,
      month: props.params.month,
      day: props.params.day
    }
  }

  titleElements() {
    let titleDate = moment({
      month: this.props.params.month - 1,
      year:  this.props.params.year,
      day:   this.props.params.day
    })
    return <span>{titleDate.format('Do MMMM YYYY')}</span>
  }
}
","Generate a React component that renders media content within a specific day. It should accept a parameter 'params' that includes the year, month, and day. It should use this information to fetch data within that specific time range."
"import React from 'react';
import IconBase from './../components/IconBase/IconBase';

export default class Wifi extends React.Component {
	render() {
if(this.props.bare) {
			return <g>

<g>
	<path d=""M256.1,96L256.1,96c-79.9,0-155.7,29.9-213.9,84.1L32,189.6l9.9,9.8l32.3,32l9.3,9.2l9.6-8.8
		c44.5-40.9,102.3-63.5,162.8-63.5c60.5,0,118.4,22.6,162.8,63.5l9.6,8.8l9.3-9.2l32.3-32l9.9-9.8l-10.2-9.5
		C411.6,125.9,335.7,96,256.1,96z""></path>
	<path d=""M397.4,256.4c-38.8-35.1-88.9-54.4-141.1-54.4h-0.1h-0.3h-8.5l-0.1,0.2c-49.2,2-96,21.1-132.6,54.2l-10.5,9.5l10.1,10
		l32.7,32.4l9.1,9l9.6-8.4c25.3-22.2,57.4-34.5,90.3-34.5c33.1,0,65.2,12.3,90.5,34.5l9.6,8.4l9.1-9l32.7-32.4l10.1-10L397.4,256.4z
		""></path>
	<path d=""M256.2,416l9.6-9.5l52.8-52.2l10.6-10.5l-11.6-9.5c-15.4-11.4-32.4-20-61.5-20c-29,0-44.9,9.4-61.5,20l-11.5,9.5l10.6,10.5
		l52.8,52.2L256.2,416z""></path>
</g>

			</g>;
		}		return <IconBase>
<g>
	<path d=""M256.1,96L256.1,96c-79.9,0-155.7,29.9-213.9,84.1L32,189.6l9.9,9.8l32.3,32l9.3,9.2l9.6-8.8
		c44.5-40.9,102.3-63.5,162.8-63.5c60.5,0,118.4,22.6,162.8,63.5l9.6,8.8l9.3-9.2l32.3-32l9.9-9.8l-10.2-9.5
		C411.6,125.9,335.7,96,256.1,96z""></path>
	<path d=""M397.4,256.4c-38.8-35.1-88.9-54.4-141.1-54.4h-0.1h-0.3h-8.5l-0.1,0.2c-49.2,2-96,21.1-132.6,54.2l-10.5,9.5l10.1,10
		l32.7,32.4l9.1,9l9.6-8.4c25.3-22.2,57.4-34.5,90.3-34.5c33.1,0,65.2,12.3,90.5,34.5l9.6,8.4l9.1-9l32.7-32.4l10.1-10L397.4,256.4z
		""></path>
	<path d=""M256.2,416l9.6-9.5l52.8-52.2l10.6-10.5l-11.6-9.5c-15.4-11.4-32.4-20-61.5-20c-29,0-44.9,9.4-61.5,20l-11.5,9.5l10.6,10.5
		l52.8,52.2L256.2,416z""></path>
</g>
</IconBase>;
	}
};Wifi.defaultProps = {bare: false}","Provide a detailed description of the Wifi Icon component from the `react-icons` library. Include the name of the library and component, a general overview of the component's purpose, and specific details about its visual appearance and functionality."
"import _ from 'lodash';
import React from 'react';
import moment from 'moment';

import ProgressButton from '../progressButton';
import DateFormat from '../date';
import { connectRedux } from '../../helpers/decorators';


var Component = React.createClass({
  render: function() {
    let { diary } = this.props.data;
    let { diaryMgr } = diary;

    let lastBackupTime = moment(diaryMgr.backupLastTime);

    lastBackupTime = (lastBackupTime.valueOf()) ? (
      <DateFormat date={diaryMgr.backupLastTime} format=""MMMM DD, YYYY - HH:mm:ss"" />
    ) : (
      <span>Never</span>
    ) 

    let btnAttrs = {
      defaultProgressMsg: 'Making backup...',
      progressProps: {
        centered: false
      },
      checkVar: diary.makingBackup,
      onClick: this._makeBackup,
    };

    return (
      <div className=""backup-file"">
        <h2>Backup</h2>
        <p className=""last"">
          <label>Last backup:</label>
          {lastBackupTime}
        </p>
        <ProgressButton {...btnAttrs}>Create backup</ProgressButton>
      </div>
    );
  },

  _makeBackup: function() {
    this.props.actions.makeBackup();
  },

});


module.exports = connectRedux([
  'makeBackup',
])(Component);

","Generate a React component that displays information about a diary backup and creates a backup when a button is clicked. The component should include:

- A title (""Backup"")
- A paragraph with a label (""Last backup:"") and the last backup time (or ""Never"" if no backup exists)
- A button that initiates a backup and displays a progress bar while the backup is in progress
- The button should have the text ""Create backup"" and use the `ProgressButton` component from the same project"
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionSettingsCell = (props) => (
  <SvgIcon {...props}>
    <path d=""M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z""/>
  </SvgIcon>
);
ActionSettingsCell = pure(ActionSettingsCell);
ActionSettingsCell.displayName = 'ActionSettingsCell';
ActionSettingsCell.muiName = 'SvgIcon';

export default ActionSettingsCell;
","Generate a React component that renders an SVG icon with the following design: A grid of 9 squares, arranged in a 3x3 grid. Each square is outlined in black and filled with white."
"import React from 'react'
import reactCSS, { hover } from 'reactcss'
import _ from 'lodash'
import { colors, css, fonts } from '../helpers'

export const Media = (props) => {
  const styles = reactCSS({
    'default': {
      select: {
        background: 'transparent',
        border: 'none',
        height: 30,
        boxShadow: 'inset 0 0 0 1px #ccc',
        borderRadius: 2,
        textTransform: 'uppercase',
        color: '#aaa',
        cursor: 'pointer',
        outline: 'none',
        fontSize: fonts.sizes.medium,

        transition: 'box-shadow 200ms ease-out, color 200ms ease-out',
      },
    },
    'hover': {
      select: {
        boxShadow: 'inset 0 0 0 1px #888',
        color: '#777',
      },
    },
    'bare': {
      select: {
        boxShadow: 'none',
        padding: 0,
      },
    },
    ...css.build('media', 'color', colors),
  }, props)

  return (
    <select style={ styles.select } value={ props.value } onChange={ props.onChange }>
      { _.map(props.options, (option) => {
        return <option key={ option.value } value={ option.value }>{ option.label }</option>
      }) }
    </select>
  )
}

export default hover(Media)
",Generate React code for a custom select component that uses the react-css package for dynamic styling. The component should include hover styles and allow for various color options.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let SocialNotificationsPaused = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.93 6 11v5l-2 2v1h16v-1l-2-2zm-3.5-6.2l-2.8 3.4h2.8V15h-5v-1.8l2.8-3.4H9.5V8h5v1.8z""/>
  </SvgIcon>
);
SocialNotificationsPaused = pure(SocialNotificationsPaused);
SocialNotificationsPaused.displayName = 'SocialNotificationsPaused';
SocialNotificationsPaused.muiName = 'SvgIcon';

export default SocialNotificationsPaused;
","Create a React component named ""SocialNotificationsPaused"" using a third-party library called ""recompose"" to enhance the component for performance optimization and generate the SVG code for a specific icon named ""NotificationsPaused"" from the Material Design Icons library."
"import React from 'react';
import ReactDOM from 'react-dom';

import JqxTabs from '../../../jqwidgets-react/react_jqxtabs.js';

class App extends React.Component {
    render() {
        let initialize = () => {
            let mapCanvas = document.getElementById('map-canvas');
            let mapOptions = {
                center: new google.maps.LatLng(29.979234, 31.134202),
                zoom: 17,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
            let map = new google.maps.Map(mapCanvas, mapOptions)
        };
        let initTabContent = (tab) => {
            if (tab === 0) {
                google.maps.event.addDomListener(window, 'load', initialize);
            }
        }; 
        return (
            <div>

            <p style={{ fontFamily: 'Verdana' }}>
                Great Pyramid of Giza</p>
            <JqxTabs ref='myTabs'
                width={600} height={400}
                initTabContent={initTabContent}
            >
                <ul style={{ marginLeft: 20 }}>
                    <li>Map</li>
                    <li>Information</li>
                </ul>
                <div>
                        <div id=""map-canvas"" style={{ width: '100%', height: '100%' }}>
                    </div>
                </div>
                <div>
                    The Great Pyramid of Giza (also known as the Pyramid of Khufu or the Pyramid of
                    Cheops) is the oldest and largest of the three pyramids in the Giza Necropolis bordering
                    what is now El Giza, Egypt. It is the oldest of the Seven Wonders of the Ancient
                    World, and the only one to remain largely intact.
                </div>
            </JqxTabs>

        </div>
        )
    }
}

ReactDOM.render(<App />, document.getElementById('app'));
","Create a React application with a tabbed interface using JqxTabs. The tabs should be labeled ""Map"" and ""Information"". The ""Map"" tab should use the Google Maps API to display a map of the Great Pyramid of Giza. The ""Information"" tab should display a brief description of the pyramid."
"import React from 'react'
import logger from 'js/utils/logger'
import { getUrlParameters } from 'js/utils/utils'
import SearchResultErrorMessage from 'js/components/Search/SearchResultErrorMessage'

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError(error) {
    return { hasError: true }
  }

  componentDidCatch(error, info) {
    logger.error(error)
  }

  render() {
    if (this.state.hasError) {
      const query = getUrlParameters().q || null
      return <SearchResultErrorMessage query={query} />
    }

    return this.props.children
  }
}

ErrorBoundary.propTypes = {}
ErrorBoundary.defaultProps = {}

export default ErrorBoundary
","Create a React error boundary component that logs errors, and if on the search results page, displays a SearchResultErrorMessage component."
"// @flow

import React, { Component } from 'react'; 

import { Button } from '../../atoms/Button';

export type DialogAction = {
  label: string;
  onClick: Function;
};

export type DialogActionsProps = {
  actions: DialogAction[];
  onClose: Function;
}

export class DialogActions extends Component<*, DialogActionsProps, *> {
  render() {
    const { actions, onClose } = this.props;
    return (
      <div>
        {actions.map((a, i) => (
          <Button key={i} onClick={a.onClick}>{a.label}</Button>
        ))}
        <Button onClick={onClose}>Close</Button>
      </div>
    );
  }
}

Object.assign(DialogActions, {
  defaultProps: {
    actions: []
  },
});
","Create a React component named DialogActions that will render a group of buttons based on the given list of actions that will have a label and an onClick function.
The component should also have an onClose function that will be passed down to the buttons and a default set of empty actions."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NavigationChevronRight = (props) => (
  <SvgIcon {...props}>
    <path d=""M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z""/>
  </SvgIcon>
);
NavigationChevronRight = pure(NavigationChevronRight);
NavigationChevronRight.displayName = 'NavigationChevronRight';
NavigationChevronRight.muiName = 'SvgIcon';

export default NavigationChevronRight;
",React component for an SVG icon of a right chevron.
"import React from 'react'
import Link from 'gatsby-link'
import styled from 'styled-components'
import { rhythm } from '../utils/typography'
import { media } from '../utils/media'
import PropTypes from 'prop-types'

import StyledLink from './Link'

const Content = styled.section`width: 100%;`

const SideContainer = styled.ul`
  list-style: none;
  margin: 0;
  position: fixed;
  ${media.desktop`
    display: none;
  `};
  ${media.giant`
    display: block;
  `};
`

const SideItem = styled.li`margin: 0;`

const SideHeader = styled.span`
  font-size: ${rhythm(1 / 2)};
  text-transform: uppercase;
  color: rgba(0, 0, 0, 0.5);
`

const SideLink = StyledLink.withComponent(`a`)

const SideBar = ({ sections }) =>
  <SideContainer>
    <SideHeader>Contents</SideHeader>
    {sections &&
      sections.split(', ').map((section, array) =>
        <SideItem>
          <SideLink href={`#${section}`}>
            {section.replace(/-/g, ' ')}
          </SideLink>
        </SideItem>
      )}
  </SideContainer>

SideBar.propTypes = {
  sections: PropTypes.string,
}

export default SideBar
","Craft a JavaScript code snippet that renders a right-hand sidebar with a contents navigation for a blog or article. The sidebar should be hidden on mobile and display only on tablet and above screen sizes, featuring a list of anchor tags linking to sections within the page."
"import React from 'react'
import PropTypes from 'prop-types'
import CSSModules from 'react-css-modules'
import styles from './Gallery.less'
import { className } from './Gallery'

const GalleryImage = ({ imageUrl, onClick, display = true }) => (
	<div
		onClick={onClick}
	>
		<img styleName={display ? `${className}__image` : `${className}__image ${className}__image--hidden`} // eslint-disable-line max-len
			src={imageUrl}
			role='presentation'
		/>
	</div>
)

GalleryImage.propTypes = {
	display: PropTypes.bool,
	imageUrl: PropTypes.string,
	onClick: PropTypes.func
}

export default CSSModules(GalleryImage, styles, { allowMultiple: true })
",Generate a React component that renders an image with the provided URL and an optional onClick handler. The component should toggle a CSS class to hide or show the image based on the display prop.
"import React from 'react';

import { VideoCardGroupContainer, Title, ExtraLink } from './styles';
import VideoCard from './components/VideoCard';
import Slider, { SliderItem } from './components/Slider';

function VideoCardGroup({ ignoreFirstVideo, category }) {
  const categoryTitle = category.titulo;
  const categoryColor = category.cor;
  const categoryExtraLink = category.link_extra;
  const videos = category.videos;
  return (
    <VideoCardGroupContainer>
      {categoryTitle && (
        <>
          <Title style={{ backgroundColor: categoryColor || 'red' }}>
            {categoryTitle}
          </Title>
          {categoryExtraLink &&
            <ExtraLink href={categoryExtraLink.url} target=""_blank"">
              {categoryExtraLink.text}
            </ExtraLink>
          }
        </>
      )}
      <Slider>
        {videos.map((video, index) => {
          if (ignoreFirstVideo && index === 0) {
            return null;
          }

          return (
            <SliderItem key={video.titulo}>
              <VideoCard
                videoTitle={video.titulo}
                videoURL={video.url}
                categoryColor={categoryColor}
              />
            </SliderItem>
          );
        })}
      </Slider>
    </VideoCardGroupContainer>
  );
}

export default VideoCardGroup;
",Create a React component that displays a group of video cards with a title and extra link. The component should ignore the first video if specified and scroll through the remaining videos.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvReplay30 = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 5V1L7 6l5 5V7c3.3 0 6 2.7 6 6s-2.7 6-6 6-6-2.7-6-6H4c0 4.4 3.6 8 8 8s8-3.6 8-8-3.6-8-8-8zm-2.4 8.5h.4c.2 0 .4-.1.5-.2s.2-.2.2-.4v-.2s-.1-.1-.1-.2-.1-.1-.2-.1h-.5s-.1.1-.2.1-.1.1-.1.2v.2h-1c0-.2 0-.3.1-.5s.2-.3.3-.4.3-.2.4-.2.4-.1.5-.1c.2 0 .4 0 .6.1s.3.1.5.2.2.2.3.4.1.3.1.5v.3s-.1.2-.1.3-.1.2-.2.2-.2.1-.3.2c.2.1.4.2.5.4s.2.4.2.6c0 .2 0 .4-.1.5s-.2.3-.3.4-.3.2-.5.2-.4.1-.6.1c-.2 0-.4 0-.5-.1s-.3-.1-.5-.2-.2-.2-.3-.4-.1-.4-.1-.6h.8v.2s.1.1.1.2.1.1.2.1h.5s.1-.1.2-.1.1-.1.1-.2v-.5s-.1-.1-.1-.2-.1-.1-.2-.1h-.6v-.7zm5.7.7c0 .3 0 .6-.1.8l-.3.6s-.3.3-.5.3-.4.1-.6.1-.4 0-.6-.1-.3-.2-.5-.3-.2-.3-.3-.6-.1-.5-.1-.8v-.7c0-.3 0-.6.1-.8l.3-.6s.3-.3.5-.3.4-.1.6-.1.4 0 .6.1.3.2.5.3.2.3.3.6.1.5.1.8v.7zm-.8-.8v-.5c0-.1-.1-.2-.1-.3s-.1-.1-.2-.2-.2-.1-.3-.1-.2 0-.3.1l-.2.2s-.1.2-.1.3v2s.1.2.1.3.1.1.2.2.2.1.3.1.2 0 .3-.1l.2-.2s.1-.2.1-.3v-1.5z""/>
  </SvgIcon>
);
AvReplay30 = pure(AvReplay30);
AvReplay30.displayName = 'AvReplay30';

export default AvReplay30;
",Generate an SVG React component that represents the Material Design icon for replay 30 seconds.
"import React from 'react'
import { webcastPropType } from '../../utils/webcastUtils'

const EmbedDacast = (props) => {
  const channel = props.webcast.channel
  const file = props.webcast.file
  const iframeSrc = `https://iframe.dacast.com/b/${channel}/c/${file}`
  return (
    <iframe
      src={iframeSrc}
      width=""100%""
      height=""100%""
      frameBorder=""0""
      scrolling=""no""
      player=""vjs5""
      autoPlay=""true""
      allowFullScreen
      webkitallowfullscreen
      mozallowfullscreen
      oallowfullscreen
      msallowfullscreen
    />
  )
}

EmbedDacast.propTypes = {
  webcast: webcastPropType.isRequired,
}

export default EmbedDacast
","Create a React component that embeds a Dacast video using an iframe. The component should take a webcast object as a prop, which includes a channel and file property. The iframe source should be constructed using the channel and file properties."
"import { Meteor } from 'meteor/meteor';
import React from 'react';

import ProfileComponent from '../containers/profile/profile';

export class Profile extends React.Component {
  render() {
    return (
      <div id=""page-profile"" className=""page-container profile"" style={{ overflow: ""hidden"" }}>
        <div className=""container"">
          <div className=""flex-row nopad"" style={{ padding: ""0 0 5px"" }}>
            <div className=""col col-xs-12"">
              <ProfileComponent userId={ this.props.params.userId ? this.props.params.userId : Meteor.userId() } />
            </div>
          </div>
        </div>
      </div>
    );
  }
}
","Create a React component that displays a profile page for a specific user. The component should take a `userId` prop and render a `ProfileComponent` container with that `userId`. If no `userId` is provided, it should use the current user's ID."
"import React from 'react';

class Home extends React.Component {
  render() {
    return (
      <div className=""container"">
      <div className=""row"">
      <div className=""col s12"">
      <div className=""card hoverable"">
      <div className=""card-content red-text"">
        <span className=""card-title red-text"">Charles C Click</span><br />
        Email:&nbsp;<a href=""mailto:CharlesClick@vertinext.com"">CharlesClick@vertinext.com</a><br />
        Skillset:&nbsp;Web Development<br />
        This Website:&nbsp;<a href=""https://facebook.github.io/react/"">React</a> and <a href=""http://materializecss.com/"">Materialize</a><br />
        <blockquote>
          I am a coder and web developer in Knoxville, TN, who also hosts websites, games and other services through a personal server. There is a list of my Github repositories and currently hosted games and services available on other pages.
        </blockquote>
      </div>
      <div className=""card-action red-text"">
        <a href=""https://docs.google.com/document/d/1ykS2_34-GQd0SbrjpG9NbBvq40L62qWxGJc43KAjOD8/edit?usp=sharing"">View Resume</a>
      </div>
      </div>
      </div>
      </div>
      </div>
    );
  }
}

module.exports = Home;
","Create a React component that displays a profile card with the following information:
- Name: Charles C Click
- Email: CharlesClick@vertinext.com
- Skillset: Web Development
- Website: Built using React and Materialize
- Short bio: Coder and web developer in Knoxville, TN, who hosts websites, games and other services through a personal server.
- Link to resume: Google Doc link"
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AlertError = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z""/>
  </SvgIcon>
);
AlertError = pure(AlertError);
AlertError.displayName = 'AlertError';
AlertError.muiName = 'SvgIcon';

export default AlertError;
",Create a React component for an error alert icon. It should have a circular design with a cross symbol in the middle. Use Material-UI's SvgIcon as the base and provide a descriptive name and display name.
"import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { FormattedMessage } from 'react-intl';
import ImmutablePureComponent from 'react-immutable-pure-component';
import AvatarOverlay from '../../../components/avatar_overlay';
import DisplayName from '../../../components/display_name';
import Icon from 'mastodon/components/icon';

export default class MovedNote extends ImmutablePureComponent {

  static contextTypes = {
    router: PropTypes.object,
  };

  static propTypes = {
    from: ImmutablePropTypes.map.isRequired,
    to: ImmutablePropTypes.map.isRequired,
  };

  handleAccountClick = e => {
    if (e.button === 0) {
      e.preventDefault();
      this.context.router.history.push(`/accounts/${this.props.to.get('id')}`);
    }

    e.stopPropagation();
  }

  render () {
    const { from, to } = this.props;
    const displayNameHtml = { __html: from.get('display_name_html') };

    return (
      <div className='account__moved-note'>
        <div className='account__moved-note__message'>
          <div className='account__moved-note__icon-wrapper'><Icon id='suitcase' className='account__moved-note__icon' fixedWidth /></div>
          <FormattedMessage id='account.moved_to' defaultMessage='{name} has moved to:' values={{ name: <bdi><strong dangerouslySetInnerHTML={displayNameHtml} /></bdi> }} />
        </div>

        <a href={to.get('url')} onClick={this.handleAccountClick} className='detailed-status__display-name'>
          <div className='detailed-status__display-avatar'><AvatarOverlay account={to} friend={from} /></div>
          <DisplayName account={to} />
        </a>
      </div>
    );
  }

}
",Create a React component that notifies a user that an account has moved to another account. The message should include a link to the new account. The component should also include an avatar and display name for the new account.
"import React from 'react';
import { SpacedLayout } from 'layabout';
import styled from 'styled-components';
import { Button } from '../../common';

const HeaderText = styled.span`
  font-size: 1.1em;
  font-weight: bold;
`;

const FormHeaderWithSave = ({ children }) => (
  <SpacedLayout container=""header"">
    <HeaderText>{children}</HeaderText>
    <Button type=""submit"">Save</Button>
  </SpacedLayout>
);

export default FormHeaderWithSave;
",Design a React component called `FormHeaderWithSave` that displays a bold header text and a save button side by side. The header text should be slightly larger in size and bold. The save button should be positioned to the right of the header text.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageCameraAlt = (props) => (
  <SvgIcon {...props}>
    <circle cx=""12"" cy=""12"" r=""3.2""/><path d=""M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z""/>
  </SvgIcon>
);
ImageCameraAlt = pure(ImageCameraAlt);
ImageCameraAlt.displayName = 'ImageCameraAlt';
ImageCameraAlt.muiName = 'SvgIcon';

export default ImageCameraAlt;
","Generate the React code for an SVG icon representing a camera with an alternate design. The icon should have a circle in the center, a viewfinder shape, and be pure (meaning it doesn't rerender unless its props change)."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ToggleRadioButtonChecked = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z""/>
  </SvgIcon>
);
ToggleRadioButtonChecked = pure(ToggleRadioButtonChecked);
ToggleRadioButtonChecked.displayName = 'ToggleRadioButtonChecked';
ToggleRadioButtonChecked.muiName = 'SvgIcon';

export default ToggleRadioButtonChecked;
","Generate the React component code for an SVG toggle radio button that is checked. The icon should include a circular outline, a filled circle in the center, and a path for the radio button's outer and inner circle. Ensure the component is pure and has appropriate display name and muiName properties."
"import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { getAuthenticatedUser, getIsTrendingTopicsLoading, getTrendingTopics } from '../../reducers';

import Topics from '../../components/Sidebar/Topics';
import Sidenav from '../../components/Navigation/Sidenav';

const Navigation = ({ authenticatedUser, trendingTopicsLoading, trendingTopics }) => (
  <div>
    <Sidenav username={authenticatedUser.name} />
    <Topics loading={trendingTopicsLoading} topics={trendingTopics} />
  </div>
);

Navigation.propTypes = {
  authenticatedUser: PropTypes.shape().isRequired,
  trendingTopicsLoading: PropTypes.bool.isRequired,
  trendingTopics: PropTypes.arrayOf(PropTypes.string).isRequired,
};

export default connect(
  state => ({
    authenticatedUser: getAuthenticatedUser(state),
    trendingTopicsLoading: getIsTrendingTopicsLoading(state),
    trendingTopics: getTrendingTopics(state),
  }),
)(Navigation);
",Give me the code snippet for a React component called Navigation that displays a sidebar with a user's name and a list of trending topics.
"import React from 'react'
import { Grid, Image } from 'semantic-ui-react'

const GridExampleCelledInternally = () => (
  <Grid celled='internally'>
    <Grid.Row>
      <Grid.Column width={3}>
        <Image src='http://semantic-ui.com/images/wireframe/image.png' />
      </Grid.Column>
      <Grid.Column width={10}>
        <Image src='http://semantic-ui.com/images/wireframe/centered-paragraph.png' />
      </Grid.Column>
      <Grid.Column width={3}>
        <Image src='http://semantic-ui.com/images/wireframe/image.png' />
      </Grid.Column>
    </Grid.Row>

    <Grid.Row>
      <Grid.Column width={3}>
        <Image src='http://semantic-ui.com/images/wireframe/image.png' />
      </Grid.Column>
      <Grid.Column width={10}>
        <Image src='http://semantic-ui.com/images/wireframe/paragraph.png' />
      </Grid.Column>
      <Grid.Column width={3}>
        <Image src='http://semantic-ui.com/images/wireframe/image.png' />
      </Grid.Column>
    </Grid.Row>
  </Grid>
)

export default GridExampleCelledInternally
","Design a React component with three columns in each row and two rows. Each column should contain an image, with a centered image in the second column of the first row. Use the Semantic UI React library for styling."
"/* @flow */


import React, { Component } from 'react';
import { Text } from 'react-native';
import { connectStyle } from 'native-base-shoutem-theme';
import mapPropsToStyleNames from '../../Utils/mapPropsToStyleNames';

class Subtitle extends Component {
  render() {
    return (
      <Text ref={c => this._root = c} {...this.props} />
    );
  }
}

Subtitle.propTypes = {
  ...Text.propTypes,
  style: React.PropTypes.object,
};

const StyledSubtitle = connectStyle('NativeBase.Subtitle', {}, mapPropsToStyleNames)(Subtitle);
export {
  StyledSubtitle as Subtitle,
};
","Turn the following React Native component into a styled component:

```
import React, { Component } from 'react';
import { Text } from 'react-native';

class Subtitle extends Component {
  render() {
    return (
      <Text ref={c => this._root = c} {...this.props} />
    );
  }
}

Subtitle.propTypes = {
  ...Text.propTypes,
  style: React.PropTypes.object,
};

export default Subtitle;
```"
"import React, { Component } from 'react';
import ReactServer from 'react-dom/server';
import ReactDOM, { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';
import withStyles from 'isomorphic-style-loader/lib/withStyles';

// import s from './Preview.css';

const styles = {
  root: {
    width: '375px',
    height: '667px',
  },
};

// @withStyles(s)
export default class MyComponent extends Component {
  static propTypes = {
    children: PropTypes.node,
  };

  static defaultProps = {
    children: null,
  };

  componentDidMount() {
    // const { contentWindow: { document: iframeDocument } } = this.iframe;

    // console.log(iframeDocument);
  }

  iframeRef = (ref) => { this.iframe = ref; };

  renderContent = () => {
    const { children } = this.props;

    const html = ReactDOM.renderToString(
      <html lang=""zh-CN"">
        <meta charSet=""utf-8"" />
        <meta httpEquiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"" />
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"" />
        <title>预览手机展示</title>
        <body>
          {children}
        </body>
      </html>,
    );

    return html;
  };

  render() {
    const { children, ...props } = this.props;

    return (
      <div
        ref={this.iframeRef}
        style={styles.root}
        {...props}
      >
        {children}
      </div>
    );
  }
}
",Create an interactive React component that allows users to preview their content on a simulated mobile device. The preview should be rendered in an iframe with specific dimensions. Make the component customizable by accepting children as props. Include a lifecycle method to access the iframe's document and console log it. Ensure the component uses proper prop types and default props.
"import React from 'react';
import {connect} from 'react-redux';
import {getListByIdSelector, CUSTOM_LIST} from '../../../redux/list.reducer';
import {OPEN_MODAL} from '../../../redux/modal.reducer';
import Button from '../../base/Button';
import Icon from '../../base/Icon';
import T from '../../base/T';

import {withFollow} from '../../hoc/Follow';

const getListById = getListByIdSelector();

export const FollowButton = ({
  disabled = false,
  allowFollow,
  isLoggedIn,
  isFollowing,
  follow,
  unFollow,
  requireLogin,
  className,
  style
}) => {
  if (!allowFollow) {
    return null;
  }
  return (
    <Button
      className={className}
      disabled={disabled}
      type=""link2""
      style={{
        color: isFollowing ? 'var(--de-york)' : 'var(--petroleum)',
        textDecoration: 'none',
        ...style
      }}
      onClick={() => {
        if (!isLoggedIn) {
          return requireLogin();
        }
        if (isFollowing) {
          return unFollow();
        }
        return follow();
      }}
      data-cy=""follow-btn""
    >
      <span className=""align-middle"">
        <Icon name=""playlist_add"" className=""mr-1 align-middle"" />
        <T
          component=""list""
          name={isFollowing ? 'followingList' : 'followList'}
        />
      </span>
    </Button>
  );
};

const mapStateToProps = (state, ownProps) => {
  const list = getListById(state, {_id: ownProps._id});
  return {
    allowFollow: list.type === CUSTOM_LIST,
    isLoggedIn: state.userReducer.isLoggedIn
  };
};
export const mapDispatchToProps = dispatch => ({
  requireLogin: () => {
    dispatch({
      type: OPEN_MODAL,
      modal: 'login',
      context: {
        title: <T component=""list"" name={'followList'} />,
        reason: <T component=""list"" name={'loginFollowModalDescription'} />
      }
    });
  }
});
export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withFollow(FollowButton));
","Create a React component called FollowButton that handles following and unfollowing a list, with an optional `className` and `style` prop. The button should have the text ""Following"" if the user is following the list, otherwise it should have the text ""Follow."" The button should be disabled if the user is not logged in or if the list is not a custom list. If the user is not logged in, clicking the button should open a login modal."
"import React from 'react';
import SvgIcon from '../../SvgIcon';

const ActionSettingsPower = (props) => (
  <SvgIcon {...props}>
    <path d=""M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm2-22h-2v10h2V2zm3.56 2.44l-1.45 1.45C16.84 6.94 18 8.83 18 11c0 3.31-2.69 6-6 6s-6-2.69-6-6c0-2.17 1.16-4.06 2.88-5.12L7.44 4.44C5.36 5.88 4 8.28 4 11c0 4.42 3.58 8 8 8s8-3.58 8-8c0-2.72-1.36-5.12-3.44-6.56zM15 24h2v-2h-2v2z""/>
  </SvgIcon>
);
ActionSettingsPower.displayName = 'ActionSettingsPower';
ActionSettingsPower.muiName = 'SvgIcon';

export default ActionSettingsPower;
",Create a React component for an SVG icon that displays a power settings icon. The icon should be fully customizable with props and use the Material UI SvgIcon component as its base.
"import React from 'react'
import PropTypes from 'prop-types'
import createReactClass from 'create-react-class'
import { Paper } from '@material-ui/core'
import SitePathCard from '../Collection/SitePathCard'

const ShowcaseEndingCard = createReactClass({
  displayName: 'Showcase Ending',
  propTypes: {
    siteObject: PropTypes.object.isRequired,
  },

  style: function () {
    return {
      display: 'inline-block',
      verticalAlign: 'middle',
      position: 'relative',
      marginLeft: '150px',
      marginRight: '33vw',
      height: 'auto',
      cursor: 'pointer',
      width: '500px',
      overflow: 'hidden',
      marginTop: '12vh',
      backgroundColor: '#ffffff',
    }
  },

  render: function () {
    return (
      <Paper style={this.style()}>
        <SitePathCard siteObject={this.props.siteObject} addNextButton headerTitle='Continue to' fixedSize={false} />
      </Paper>
    )
  },

})

export default ShowcaseEndingCard
","Design a React component named ShowcaseEndingCard that renders a paper card containing a site path card with a ""Continue to"" header title. Style the card with a white background, position it inline-block with a vertical alignment, and set its dimensions and margins for optimal display on a webpage."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let PlacesChildFriendly = (props) => (
  <SvgIcon {...props}>
    <path d=""M13 2v8h8c0-4.42-3.58-8-8-8zm6.32 13.89C20.37 14.54 21 12.84 21 11H6.44l-.95-2H2v2h2.22s1.89 4.07 2.12 4.42c-1.1.59-1.84 1.75-1.84 3.08C4.5 20.43 6.07 22 8 22c1.76 0 3.22-1.3 3.46-3h2.08c.24 1.7 1.7 3 3.46 3 1.93 0 3.5-1.57 3.5-3.5 0-1.04-.46-1.97-1.18-2.61zM8 20c-.83 0-1.5-.67-1.5-1.5S7.17 17 8 17s1.5.67 1.5 1.5S8.83 20 8 20zm9 0c-.83 0-1.5-.67-1.5-1.5S16.17 17 17 17s1.5.67 1.5 1.5S17.83 20 17 20z""/>
  </SvgIcon>
);
PlacesChildFriendly = pure(PlacesChildFriendly);
PlacesChildFriendly.displayName = 'PlacesChildFriendly';
PlacesChildFriendly.muiName = 'SvgIcon';

export default PlacesChildFriendly;
","Design an SVG icon component for a child-friendly place, such as a park or playground. The icon should be filled with the specified color, and should be pure, meaning that it does not change state over time."
"import React from 'react';
import {
  TouchableOpacity,
  StyleSheet,
} from 'react-native';
import { Icon } from 'react-native-elements';
import { Actions } from 'react-native-router-flux';
import PropTypes from 'prop-types';
import { isIphoneX } from 'react-native-iphone-x-helper';
import { AppColors } from '../../theme/';

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    top: 20,
    left: 20,
    padding: 5,
    backgroundColor: AppColors.brand().nA_style,
    borderRadius: 40,
  },
});
const icon = AppColors.brand().nA_Icon;

export default class NavBackAbs extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      title: this.props.title,
    };
  }

  componentWillMount() {
    /* this.setState({
      title: Application.base.instance,
    }); */
  }

  componentDidMount() {

  }

  render() {
    return (
      <TouchableOpacity
        style={[styles.container, { top: isIphoneX() ? 40 : 20 }]}
        onPress={Actions.pop}
      >
        <Icon
          name=""arrow-back""
          size={30}
          color={icon}
          width={30}
        />
      </TouchableOpacity>
    );
  }
}

NavBackAbs.defaultProps = {
  title: '',
};

NavBackAbs.propTypes = {
  title: PropTypes.string,
};
","Create a React Native functional component that renders a back button with an arrow icon. The button should be positioned absolutely at the top left corner of the screen with a small offset and have a rounded background with a specific brand color. When pressed, the button should navigate back to the previous screen using the react-native-router-flux library. Ensure the button adapts to the iPhone X notch by adjusting its position accordingly."
"import React from 'react'
import PropTypes from 'prop-types'
import Button from '@material-ui/core/Button'
import DialogTitle from '@material-ui/core/DialogTitle'
import DialogActions from '@material-ui/core/DialogActions'
import Dialog from '@material-ui/core/Dialog'
import withTheme from '@material-ui/core/styles/withTheme'

function ReposConfirmDeleteAll ({ open, onClose, theme }) {
  return <Dialog
    maxWidth=""xs""
    aria-labelledby=""delete-all-confirmation-dialog-title""
    open={open}
    onClose={() => onClose(false)}
  >
    <DialogTitle id=""delete-all-confirmation-dialog-title"">Are you sure you want to remove all repos?</DialogTitle>
    <DialogActions>
      <Button onClick={() => onClose(false)}>
        No
      </Button>
      <Button onClick={() => onClose(true)} style={{ color: theme.palette.error.main }}>
        Yes, remove
      </Button>
    </DialogActions>
  </Dialog>
}

ReposConfirmDeleteAll.propTypes = {
  open: PropTypes.bool.isRequired,
  onClose: PropTypes.func.isRequired,
  theme: PropTypes.object.isRequired
}

export default withTheme(ReposConfirmDeleteAll)
","Create a React Dialog component that displays a confirmation message asking the user if they are sure they want to remove all repos. The Dialog should have two buttons, one labeled ""No"" and the other labeled ""Yes, remove"" which is styled with the error main color from the theme. The Dialog should close when either button is clicked."
"import 'babel-polyfill';
import React from 'react';
import { render } from 'react-dom';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import createLogger from 'redux-logger';
import thunkMiddleware from 'redux-thunk';
import reducers from './reducers';
import { RythusCardsApp } from './components/App';


const middleware = [ thunkMiddleware ];
if (process.env.NODE_ENV !== 'production') {
    middleware.push(createLogger());
}



var initialState = {
    displayedCard: {},
    selectedItem: ""Encounter"",
    menuItems: [
        { name: 'resourcez', active: false },
        { name: 'settlementz', active: false },
        { name: 'battallionz', active: false },
        { name: 'heroz', active: false },
        { name: 'merchantz', active: false },
        { name: 'dungeonz', active: false },
        { name: 'villainz', active: false },
        { name: 'monsterz', active: false },
        { name: 'encounterz', active: false },
        { name: 'rewardz', active: false }
    ],
    isFetching: false,
    cards: {},
    discards: {}
}


var store = createStore(reducers, initialState, applyMiddleware(...middleware));
render(
   <Provider store={store}>
      <RythusCardsApp />
    </Provider>,
    document.getElementById('appy')
);
",Describe the purpose of this JavaScript code snippet and its impact on a React application.
"import React from 'react';
import {useContext} from 'react';
import {Link} from 'react-router-dom';

import ThemeContext from './shared/ThemeContext';
import Clock from './shared/Clock';

export default function HomePage({counter, dispatch}) {
  const theme = useContext(ThemeContext);
  return (
    <>
      <h2>src/modern/HomePage.js</h2>
      <h3 style={{color: theme}}>
        This component is rendered by the outer React ({React.version}).
      </h3>
      <Clock />
      <b>
        <Link to=""/about"">Go to About</Link>
      </b>
    </>
  );
}
",Generate a React component named HomePage that displays a clock and a link to the About page. The theme of the component should be set via a context.
"import React from 'react';
import PropTypes from 'prop-types';
import { Typography, withStyles } from '@material-ui/core';
import Footer from '../components/app/Footer';

const style = theme => ({
  pageTemplate: {
    display: 'flex',
    flexDirection: 'column',
    flexGrow: 1,
    padding: `0 ${theme.spacing(4)}px`,
    margin: '0 auto',
    width: '100%',
    minWidth: '400px',
    maxWidth: '1000px',
  },
  contentArea: {
    flexGrow: 1,
  },
  title: {
    marginTop: theme.spacing(5),
    marginBottom: theme.spacing(5),
  },
});

function Page({ title, children, className, classes }) {
  return (
    <div className={getClassname(classes.pageTemplate, className)}>
      {title ? <Typography variant=""h4"" className={classes.title}>{title}</Typography> : null}
      <div className={classes.contentArea}>
        {children}
      </div>
      <Footer/>
    </div>
  );
}

const getClassname = (...classNames) => (classNames.filter(item => item).join(' '));

Page.propTypes = {
  title: PropTypes.string,
  classes: PropTypes.object.isRequired,
};

export default withStyles(style)(Page);
",Create a reusable React page template with a footer. The page should have a title and a content area. The title should be an H4 element. The page should be responsive and use Material UI styling.
"/* eslint no-console: 0 */
/* eslint no-console: 0 */
import React from 'react';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';


const products = [];

function addProducts(quantity) {
  const startId = products.length;
  for (let i = 0; i < quantity; i++) {
    const id = startId + i;
    products.push({
      id: id,
      name: 'Item name ' + id,
      price: 2100 + i
    });
  }
}

addProducts(5);

export default class MouseEventTable extends React.Component {
  render() {
    const options = {
      onMouseLeave: function() {
        console.log('mouse leave from table');
      },
      onMouseEnter: function() {
        console.log('mouse enter to table');
      },
      onRowMouseOut: function(row, e) {
        console.log(e);
        console.log('mouse leave from row ' + row.id);
      },
      onRowMouseOver: function(row, e) {
        console.log(e);
        console.log('mouse enter from row ' + row.id);
      }
    };

    return (
      <BootstrapTable data={ products } options={ options }>
          <TableHeaderColumn dataField='id' isKey={ true }>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
",Generate a React code snippet for a BootstrapTable that logs mouse events on the table and individual rows.
"import React from 'react';
import PropTypes from 'prop-types';


export class ReactInterval extends React.Component {
  static defaultProps = {
    enabled: false,
    timeout: 1000
  };

  static propTypes = {
    callback: PropTypes.func.isRequired,
    enabled: PropTypes.bool,
    timeout: PropTypes.number
  };

  componentDidMount() {
    const {enabled} = this.props;
    if (enabled) {
      this.start();
    }
  }

  shouldComponentUpdate({timeout, callback, enabled}) {
    const {timeout: timeout1, callback: callback1, enabled: enabled1} = this.props;
    return (
      timeout1 !== timeout
      || callback1 !== callback
      || enabled1 !== enabled
    );
  }

  componentDidUpdate({enabled, timeout}) {
    const {timeout: timeout1, enabled: enabled1} = this.props;
    if (enabled1 !== enabled || timeout1 !== timeout) {
      if (enabled1) {
        this.start();
      } else {
        this.stop();
      }
    }
  }

  componentWillUnmount() {
    this.stop();
  }

  callback = () => {
    if (this.timer) {
      const {callback} = this.props;
      callback();
      this.start();
    }
  };

  start = () => {
    this.stop();
    const {timeout} = this.props;
    this.timer = setTimeout(this.callback, timeout);
  };

  stop = () => {
    clearTimeout(this.timer);
    this.timer = null;
  };

  render = () => false;
}
","Create a React class component called ReactInterval that takes props for a callback function, an optional timeout (in milliseconds), and an enabled flag. The component should use the setInterval() method to call the callback function repeatedly at the specified timeout. The component should start the interval when enabled is true and stop it when enabled is false. If the timeout or callback props change, the component should adjust the interval accordingly. The component should unmount and clear the interval when it is unmounted from the DOM."
"import React from 'react';
import ReactDOM from 'react-dom';
import { injectGlobal } from 'styled-components';
import App from './App';

injectGlobal`
	body {
    font-family: sans-serif;
	  margin: 0; 
    padding: 0; 
    background-color: #d8d8d8;
    min-width: 700px;
    overflow-x: hidden;
	}

::-webkit-scrollbar {
  width: 3px;
  height: 3px;
}
::-webkit-scrollbar-button {
  width: 6px;
  height: 6px;
}
::-webkit-scrollbar-thumb {
  background: #127509;
  border: 0px none #ffffff;
  border-radius: 50px;
}
::-webkit-scrollbar-thumb:hover {
  background: #13830a;
}
::-webkit-scrollbar-thumb:active {
  background: #36ef27;
}
::-webkit-scrollbar-track {
  //background: #4a4a4a;
  background: transparent;
  border: 0px none #ffffff;
  border-radius: 50px;
}
::-webkit-scrollbar-track:hover {
  //background: #4a4a4a;
  background: transparent;
}
::-webkit-scrollbar-track:active {
  //background: #4a4a4a;
  background: transparent;
}
::-webkit-scrollbar-corner {
  background: transparent;
}
`;

ReactDOM.render(
  <App />,
  document.getElementById('root')
);
","Generate a React application with styled-components that includes a global style definition for the entire application with the following properties:

- Set the font to a sans-serif font.
- Set the background color to #d8d8d8.
- Set the minimum width to 700px.
- Hide the horizontal scrollbar.
- Set the scrollbar thumb to have a green color and a rounded shape.
- Set the scrollbar track to be transparent."
"import React from 'react';
import { connect } from 'react-redux';
import { getPlayers, getScoreTotals } from '../reducers';

const GraphRowLabel = ({label}) => (<div className={""graph label""}>{label}</div>);

const GraphLine = ({size}) => {
  const colors = [""#388e3c"", ""#ffd600"", ""#e65100"", ""#d50000"", ""#d50000""];
  const barStyle = { 
    flexBasis: Math.max(Math.min(size, 100), 0) + ""%"",
    backgroundColor: colors[Math.max(Math.floor(size / 25), 0)],
  };
  return (
      <div className={""graph row""}>
        <div className={""graph row bar""} style={barStyle}>{size}</div>
        <div className={""graph row blank""}></div>
      </div>
    );
};

const ScoreGraphPresentation = ({playerNames, scores}) => {
  const graphRowLabels = playerNames.map((playerName, i) => <GraphRowLabel key={i} label={playerName} />);
  const graphLines = scores.map((score, i) => <GraphLine key={i} size={score} />);
  return (
        <div className={""graph""}>
          <div className={""labels""}>
            {graphRowLabels}
          </div>
          <div className={""bars""}>
            {graphLines}
          </div>
        </div>
      )
}

const mapStateToProps = (state) => {
  const playerNames = getPlayers(state).map((player) => player.name);
  const scores = getScoreTotals(state);

  return {playerNames: playerNames, scores: scores};
}

export default connect(mapStateToProps)(ScoreGraphPresentation);
",Create a React component that displays a vertical bar graph representing the scores of players in a game. The graph should have a label for each player and a colored bar representing their score.
"import React from 'react';

class PaperManage extends React.Component {
    
    render() {
        //var item = this.props.item;
        
        return (
            <div className=""userDiv"">
            <div>
                <p>this is your paper</p>
            </div>
            <br/><br/>
            </div>
            
        )
    }
};

export default PaperManage;",Generate a React component called PaperManage that displays a message stating that it is the user's paper.
"import React from 'react';
import {State, History} from 'react-router';
import { Menu, Mixins, Styles, RaisedButton, TextField, SelectField } from 'material-ui';
import Content from '../../components/layout/Content';
import ContentHeader from '../../components/layout/ContentHeader';


class Profesor extends React.Component {
  render() {
    var profesori = [
      { payload: '1', text: 'Never' },
      { payload: '2', text: 'Every Night' },
      { payload: '3', text: 'Weeknights' },
      { payload: '4', text: 'Weekends' },
      { payload: '5', text: 'Weekly' },
    ];
    var menu = [{name:'Uredi', link:'profesori/edit'},{name:'Brisi', link:'profesori/remove'}];
    return (
    <Content>
      <ContentHeader title='Odredjen profesor' menu={menu}/>
      <form style={{margin: '0 auto', position: 'relative', width: 600}}>
      <TextField hintText=""Ime"" disabled={true} floatingLabelText=""Ime"" style={{display: 'block', width: 350, margin: '0 auto'}}/>
      <TextField hintText=""Prezime"" disabled={true} floatingLabelText=""Prezime"" style={{display: 'block', width: 350, margin: '0 auto'}} />
      <TextField hintText=""Email"" disabled={true} floatingLabelText=""Email"" style={{display: 'block', width: 350, margin: '0 auto'}} />
      <TextField hintText=""Sifra"" disabled={true} floatingLabelText=""Sifra"" style={{display: 'block', width: 350, margin: '0 auto'}} />
      <TextField hintText=""Skype"" disabled={true} floatingLabelText=""Skype"" style={{display: 'block', width: 350, margin: '0 auto'}} />
      <SelectField
        floatingLabelText=""Profesor""
        hintText=""Odaberite profesora""
        style={{display: 'block', width: 350, margin: '0 auto'}}
        menuItems={profesori} />

        <SelectField
          floatingLabelText=""Kurs""
          hintText=""Odaberite profesora""
          style={{display: 'block', width: 350, margin: '0 auto'}}
          menuItems={profesori} />
      </form>
    </Content>
    );
  }
}

export default Profesor;
","Generate code that creates a web page with a form that contains text fields and drop-down menus.
The purpose of the form is to edit the details of a professor, including their name, surname, email, password, Skype username, preferred days for tutoring, and the courses they teach.
The text fields should be disabled, and the drop-down menus should be populated with a list of options.
The layout of the form should be responsive and easy to use."
"import React from 'react';
import Note from './Note.jsx';

export default class Notes extends React.Component {
    render() {
        const notes = this.props.items;

        return <ul className=""notes"">{notes.map(this.renderNote)}</ul>;
    }

    renderNote = (note) => {
        return (
            <li className=""note"" key={note.id}>
                <Note
                    task={note.task}
                    onEdit={this.props.onEdit.bind(null, note.id)}
                    onDelete={this.props.onDelete.bind(null, note.id)}
                />
            </li>
        );
    }
}
","Create a React component named ""Notes"" that displays a list of notes passed as props. Each note should be rendered using a separate ""Note"" component and should include an edit and delete button."
"
import React, { Component } from 'react';
import { View, Image, Text, StyleSheet } from 'react-native';

import Touchable from 'px/components/Touchable';

import ListItemLike from 'px/assets/icons/list_item_like.png';
import ListItemCollection from 'px/assets/icons/list_item_collection.png';
import ListItemShare from 'px/assets/icons/list_item_share.png';

export default class ImageActionBar extends Component {

  static defaultProps = {
    src: { },
  }

  static propTypes = {
    src: React.PropTypes.object,
  }

  render() {
    const { src: { likes } } = this.props;
    return <View style={styles.base}>
      <Touchable style={styles.button}>
        <View style={styles.horizontal}>
          <Image style={styles.icon} source={ListItemLike} />
          <Text style={styles.text}>{ likes } likes</Text>
        </View>
      </Touchable>
      <Touchable style={styles.button}>
        <View style={styles.horizontal}>
          <Image style={styles.icon} source={ListItemCollection} />
          <Text style={styles.text}>Collection</Text>
        </View>
      </Touchable>
      <View style={styles.fill} />
      <Touchable style={styles.button}>
        <View style={styles.horizontal}>
          <Image style={styles.icon} source={ListItemShare} />
          <Text style={styles.text}>Share</Text>
        </View>
      </Touchable>
    </View>
  }

}

const styles = StyleSheet.create({
  base: {
    height: 38,
    flexDirection: 'row',
    backgroundColor: '#fff',
    alignItems: 'flex-end',
  },
  fill: {
    flex: 1,
  },
  horizontal: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  button: {
    paddingLeft: 10,
    paddingRight: 10,
    height: 38,
    justifyContent: 'center',
  },
  icon: {
    width: 12,
    height: 12,
    marginRight: 6,
  },
  text: {
    fontSize: 12,
    fontWeight: '500',
    color: '#9ca0a9',
  },
});
","Generate the code for a React Native component that displays an image action bar with three buttons: like, collect, and share. The like button should display the number of likes for the image."
"import React, { Component } from 'react';
import AddButton from './AddButton';
import Fieldskill from './Fieldskill';

var y = [[1],];

class DynamicFieldsSkills extends Component{
	constructor( context, props ){
		super( context, props );
		this.state = {
			count: 1, 
			fields: []
		} 
	}
	_getAction( event ){
		event.preventDefault();
		this.setState({ count: this.state.count += 1});
		y.push( this.state.count );
		this.setState({fields: y });
	}
	render(){

		var populate = y.map( y => <Fieldskill key = {y} unique = {y} getValue = {this.props.getValue}/> );
		return (
			<div>
				{populate}
				<br />
				<AddButton getAction = {this._getAction.bind(this)} />
			</div>
		);a
	}
};

export default DynamicFieldsSkills;","Provide a JavaScript code snippet that dynamically adds and removes input fields for users to enter skills. The fields should be rendered as a list, and there should be a button that allows users to add more fields. When a field is added, its index should be stored in an array and passed to the child component as a prop."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NavigationArrowUpward = (props) => (
  <SvgIcon {...props}>
    <path d=""M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z""/>
  </SvgIcon>
);
NavigationArrowUpward = pure(NavigationArrowUpward);
NavigationArrowUpward.displayName = 'NavigationArrowUpward';
NavigationArrowUpward.muiName = 'SvgIcon';

export default NavigationArrowUpward;
",Create a React component that renders an SVG icon of an upward arrow. The SVG icon should be reusable and have a default width and height of 24px.
"import React from 'react'
import { Link } from 'react-router/lib/Link'
import Navbar from './Common/Navbar'
import FooterSocialButtons from './Common/FooterSocialButtons'

export default React.createClass({
  render() {
    return (
      <div>
        <Navbar />
        {this.props.children}
        <footer className=""footer"">
          <div className=""container"">
            <div className=""col-sm-4 pull-left"">
              <p className=""text-muted"">&copy; <a href=""https://twitter.com/rosskukulinski"" target=""_blank"">Ross Kukulinski</a>, <a href=""https://github.com/geojaz"" target=""_blank"">Eric Hole</a> and <a href=""https://github.com/orgs/cloudytimemachine/people"" target=""_blank"">Contributors</a></p>
            </div> {/*
            <div className=""col-sm-4 pull-right"">
              <FooterSocialButtons className=""row content"" />
            </div> */}
            </div>
        </footer>
     </div>
    )
  }
})
","Create the code for a React component that will render a page layout with a header, content, and footer. The header should include a navigation bar, and the footer should include a copyright notice and social media buttons."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageCropSquare = (props) => (
  <SvgIcon {...props}>
    <path d=""M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H6V6h12v12z""/>
  </SvgIcon>
);
ImageCropSquare = pure(ImageCropSquare);
ImageCropSquare.displayName = 'ImageCropSquare';
ImageCropSquare.muiName = 'SvgIcon';

export default ImageCropSquare;
","Generate an SVG icon React component for the Material Design ""ImageCropSquare"" icon."
"import React, { Component } from 'react';

import { ToastContainer, ToastMessage } from '@allenfang/react-toastr';


const ToastrMessageFactory = React.createFactory(ToastMessage.animation);

class Notification extends Component {
  // allow type is success,info,warning,error
  notice(type, msg, title) {
    this.refs.toastr[type](
      msg, title, {
        mode: 'single',
        timeOut: 5000,
        extendedTimeOut: 1000,
        showAnimation: 'animated  bounceIn',
        hideAnimation: 'animated bounceOut'
      });
  }

  render() {
    return (
      <ToastContainer ref='toastr'
        toastMessageFactory={ ToastrMessageFactory }
        id='toast-container'
        className='toast-top-right'/>
    );
  }
}

export default Notification;
","Create a React component that displays notifications using the react-toastr library. The component should have a method that takes a type (success, info, warning, or error), a message, and a title, and displays a notification with those parameters. The notification should slide in and out of view using the 'animated bounceIn' and 'animated bounceOut' classes, respectively. It should disappear after 5 seconds, with an additional 1 second of padding to allow the animation to finish. The toast container should be positioned at the top right of the screen and should have an ID of 'toast-container'."
"/* eslint-disable react/prop-types */
import React from 'react';
import { MessageBoxFunctionalLayout } from 'wix-style-react';

export default () => (
  <MessageBoxFunctionalLayout
    title=""Interruption Message""
    confirmText=""Action""
    maxHeight=""200px""
    theme=""blue""
    dataHook=""alert-scrollable""
  >
    <div>
      This is a generic message. No harm done, but really needed to interrupt
      you.
    </div>
    <div>It has multiple lines and limited max height</div>
    <div>and some are rows hidden</div>
    <div>and some are rows hidden</div>
    <div>and some are rows hidden</div>
    <div>and some are rows hidden</div>
    <div>and some are rows hidden</div>
    <div>and some are rows hidden</div>
    <div>and some are rows hidden</div>
  </MessageBoxFunctionalLayout>
);
","Create a React functional component that displays a message box with the following properties:
- Title: ""Interruption Message""
- Confirmation button text: ""Action""
- Max height: 200px
- Theme: ""blue""
- Data hook: ""alert-scrollable""
- Scrollable content with multiple lines and limited max height"
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageCropFree = (props) => (
  <SvgIcon {...props}>
    <path d=""M3 5v4h2V5h4V3H5c-1.1 0-2 .9-2 2zm2 10H3v4c0 1.1.9 2 2 2h4v-2H5v-4zm14 4h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zm0-16h-4v2h4v4h2V5c0-1.1-.9-2-2-2z""/>
  </SvgIcon>
);
ImageCropFree = pure(ImageCropFree);
ImageCropFree.displayName = 'ImageCropFree';
ImageCropFree.muiName = 'SvgIcon';

export default ImageCropFree;
","Create a React component that renders an SVG icon for the ""crop free"" action. The icon should be pure and have a display name of ""ImageCropFree."""
"import React from 'react';
import { action } from '@storybook/addon-actions';

import Action from '../Action';

const myAction = {
	label: 'Click me',
	'data-feature': 'actionfile',
	icon: 'talend-upload',
	onChange: action('You changed me'),
	displayMode: 'file',
};

export default {
	title: 'Buttons/File',
	decorators: [story => <div className=""col-lg-offset-2 col-lg-8"">{story()}</div>],
};

export const Default = () => (
	<div>
		<p>By default :</p>
		<Action id=""default"" {...myAction} />
		<p>With hideLabel option</p>
		<Action id=""hidelabel"" {...myAction} hideLabel />
		<p>In progress</p>
		<Action id=""inprogress"" {...myAction} inProgress />
		<p>Disabled</p>
		<Action id=""disabled"" {...myAction} disabled />
		<p>Reverse display</p>
		<Action id=""reverseDisplay"" {...myAction} iconPosition=""right"" />
		<p>Transform icon</p>
		<Action id=""reverseDisplay"" {...myAction} iconTransform=""rotate-180"" />
		<p>Custom tooltip</p>
		<Action id=""default"" {...myAction} tooltipLabel=""Custom label here"" />
		<p>Bootstrap style</p>
		<Action id=""default"" {...myAction} bsStyle=""primary"" tooltipLabel=""Custom label here"" />
		<Action
			id=""default""
			{...myAction}
			className=""btn-default btn-inverse""
			tooltipLabel=""Custom label here""
		/>
	</div>
);
","Generate a React component story for the Action component's ""File"" display mode. Include examples of different states and options, such as default, hidden label, in progress, disabled, reverse display, transformed icon, custom tooltip, Bootstrap style, and custom class name."
"/* eslint react/prop-types: 0 */
import React from 'react';
import Link from 'gatsby-link';

import Card from '../components/Card';
import Sidebar from '../components/Sidebar';
import ShareBox from '../components/ShareBox';

import './index.scss';

const NavLinkText = ({ color, text }) => (
  <div
    className=""navlink""
    style={{
      color,
    }}
  >
    {text}
  </div>
);

const NavLink = ({ test, url, text }) => {
  if (!test) {
    return <NavLinkText color=""#7d7d7d"" text={text} />;
  }

  return (
    <Link to={`${url}`}>
      <NavLinkText color=""#66ccff"" text={text} />
    </Link>
  );
};

const Page = ({ pageContext, location }) => {
  const {
    group, index, first, last, pathPrefix,
  } = pageContext;

  const previousUrl = index - 1 === 1 ? '' : `/${pathPrefix}/${index - 1}`;
  const nextUrl = `/${pathPrefix}/${index + 1}`;

  return (
    <React.Fragment>
      <div
        className=""row homepage""
        style={{
          marginTop: 20,
        }}
      >
        <Sidebar />
        <div className=""col-xl-6 col-lg-7 col-md-12 col-xs-12 order-2"">
          {group.map(({ node }) => (
            <Card {...node.frontmatter} url={node.frontmatter.slug ? node.frontmatter.slug : node.fields.slug} key={node.fields.slug} />
          ))}

          <div
            className=""row""
            style={{
              justifyContent: 'space-around',
              marginBottom: '20px',
            }}
          >
            <div className=""previousLink"">
              <NavLink test={!first} url={previousUrl} text=""Previous"" />
            </div>
            <div className=""nextLink"">
              <NavLink test={!last} url={nextUrl} text=""Next"" />
            </div>
          </div>
        </div>
        <div className=""col-xl-2 col-lg-1 order-3"" />
      </div>
      <ShareBox url={location.href} hasCommentBox={false} />
    </React.Fragment>
  );
};

export default Page;
","Write the code for a React component that will display a list of blog posts on a page. The component should be divided into two columns: the left column should contain the blog posts, and the right column should contain a sidebar. The blog posts should be displayed in a grid, with each post being represented by a card. The card should include the post's title, author, date, and a link to the post. The sidebar should include a list of links to other pages on the site."
"import React from 'react';
import { Route, IndexRoute } from 'react-router';
import App from './components/App';
import HomePage from './components/home/HomePage';
import AboutPage from './components/about/AboutPage';
import CoursesPage from './components/course/CoursesPage';
// Linting warning is thrown here due to the fact that ManageCoursePage is exported as a default export (for app) and as a named export (for testing).
import ManageCoursePage from './components/course/ManageCoursePage'; //eslint-disable-line import/no-named-as-default

export default (
  /* Always load the App component and then pass the nested items as ""children"" to the App based on the routing. */
  <Route path=""/"" component={App}>
    {/* If someone goes to /, we will load the HomePage. */}
    <IndexRoute component={HomePage} />
    <Route path=""courses"" component={CoursesPage} />
    <Route path=""course"" component={ManageCoursePage} />
    <Route path=""course/:id"" component={ManageCoursePage} />
    <Route path=""about"" component={AboutPage} />
  </Route>
);
","Create a React application's route configuration that defines the routes to different components based on the URL. The main App component should be loaded for all routes, while specific components are rendered based on the route, such as the home page, about page, courses page, and course management page."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { asyncConnect } from 'redux-connect';

import { load as loadColl } from 'store/modules/collection';
import { getOrderedRecordings } from 'store/selectors';
import { AccessContext } from 'store/contexts';

import CollectionManagementUI from 'components/collection/CollectionManagementUI';


class CollectionManagement extends Component {
  static propTypes = {
    auth: PropTypes.object,
    match: PropTypes.object,
    history: PropTypes.object
  };

  render() {
    const { auth, match: { params: { user } } } = this.props;
    const canAdmin = auth.getIn(['user', 'username']) === user;
    return (
      <AccessContext.Provider value={{ canAdmin }}>
        <CollectionManagementUI {...this.props} />
      </AccessContext.Provider>
    );
  }
}


const initialData = [
  {
    promise: ({ match: { params: { coll, user } }, store: { dispatch } }) => {
      return dispatch(loadColl(user, coll));
    }
  }
];

const mapStateToProps = (outerState) => {
  const { app, reduxAsyncConnect } = outerState;
  const isLoaded = app.getIn(['collection', 'loaded']);

  return {
    auth: app.get('auth'),
    collection: app.get('collection'),
    recordingEdited: app.getIn(['recordings', 'edited']),
    recordings: isLoaded ? getOrderedRecordings(app, true) : null
  };
};


export default asyncConnect(
  initialData,
  mapStateToProps
)(CollectionManagement);
","Generate a React component that manages a user's collection. The component should display a UI for managing the collection, such as adding, editing, and deleting recordings. The component should also handle authentication and authorization, ensuring that only the user who owns the collection can manage it."
"/**
 * Renders a logo, defaulting to the Keystone logo if no brand is specified in
 * the configuration
 */

import React from 'react';

const Brand = function (props) {
	// Default to the KeystoneJS logo
	let logo = { src: `${Keystone.adminPath}/images/logo.png`, width: 205, height: 68 };
	if (props.logo) {
		// If the logo is set to a string, it's a direct link
		logo = typeof props.logo === 'string' ? { src: props.logo } : props.logo;
		// Optionally one can specify the logo as an array, also stating the
		// wanted width and height of the logo
		// TODO: Deprecate this
		if (Array.isArray(logo)) {
			logo = { src: logo[0], width: logo[1], height: logo[2] };
		}
	}
	return (
		<div className=""auth-box__col"">
			<div className=""auth-box__brand"">
				<a href=""/"" className=""auth-box__brand__logo"">
					<img
						src={logo.src}
						width={logo.width ? logo.width : null}
						height={logo.height ? logo.height : null}
						alt={props.brand}
					/>
				</a>
			</div>
		</div>
	);
};

module.exports = Brand;
","Generate a React component that renders a brand logo. If the logo is not specified, default to a Keystone logo. Allow the logo to be specified as a string or an array that includes the logo source, width, and height."
"/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React from 'react';
import { Chart, Tooltip, Geom } from 'bizcharts';
import autoHeight from '../autoHeight';
import styles from '../index.less';

@autoHeight()
export default class MiniBar extends React.Component {
  render() {
    const { height, forceFit = true, color = '#1890FF', data = [] } = this.props;

    const scale = {
      x: {
        type: 'cat',
      },
      y: {
        min: 0,
      },
    };

    const padding = [36, 5, 30, 5];

    const tooltip = [
      'x*y',
      (x, y) => ({
        name: x,
        value: y,
      }),
    ];

    // for tooltip not to be hide
    const chartHeight = height + 54;

    return (
      <div className={styles.miniChart} style={{ height }}>
        <div className={styles.chartContent}>
          <Chart
            scale={scale}
            height={chartHeight}
            forceFit={forceFit}
            data={data}
            padding={padding}
          >
            <Tooltip showTitle={false} crosshairs={false} />
            <Geom type=""interval"" position=""x*y"" color={color} tooltip={tooltip} />
          </Chart>
        </div>
      </div>
    );
  }
}
","Create a React component to display a mini bar chart using BizCharts (a charting library). The chart should have its height adjusted automatically, use a specific color, accept data as a prop, and display a tooltip when hovering over the bars."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvPlaylistPlay = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 9H2v2h17V9zm0-4H2v2h17V5zM2 15h13v-2H2v2zm15-2v6l5-3-5-3z""/>
  </SvgIcon>
);
AvPlaylistPlay = pure(AvPlaylistPlay);
AvPlaylistPlay.displayName = 'AvPlaylistPlay';
AvPlaylistPlay.muiName = 'SvgIcon';

export default AvPlaylistPlay;
",Design an SVG icon of the playlist play button.
"import React from 'react';
import StyleSheet from 'react-inline';

require('requirish')._(module);
var appUtil = require('src/appUtil');

//import appUtil from 'src/appUtil';
console.log('SuperButton');
const { oneOf, bool } = React.PropTypes;

class SuperButton extends React.Component {
  render() {
    return <div className={styles.default}></div>;
  }
}

SuperButton.propTypes = {
  size:   oneOf(['large', 'small']),
  block:  bool,
  busy:   bool
};

const rixContext = { size: 47 };
const { size } = rixContext;

export default SuperButton;
export { rixContext };

const styles = StyleSheet.create({
	default: {
		padding: '6px 12px',
		//fontSize: size,
		lineHeight: 1.5,
		cursor: 'pointer',
		border: '1px solid #2e6da4',
		borderRadius: 4,
		color: '#fff',
		backgroundColor: '#337ab7'
	}
});
","Create a React component named SuperButton, it should take props of size, block, and busy. The default size should be defined in a context and passed to the component, and the component should render a div with a className of `default` and style rules defined using the StyleSheet library."
"import React from 'react';
import { ThemeTest } from '../../components';
import Modules from '../../helpers/modules';
import { features, properties, examples } from '../common';

const THEME = 'theme-c137';

const items = examples(THEME);

const component = (
  <ThemeTest theme={THEME} />
);

const module = Modules.Modules[THEME];

const example = {
  title: 'Get your shit together.',
  description: 'AwesomeButton Generic Example',
  items,
  component,
  componentClass: Modules.Modules['theme-c137']['aws-btn'],
};

export default {
  features,
  example,
  module,
  properties,
};
","Create a React component and example for a theme named ""theme-c137"".
Include a title, description, list of items, the component itself, and the corresponding module.
Use the `Modules` helper to retrieve the module and `examples` helper to generate a list of example items.
Export an object containing the features, example, module, and properties."
"/* eslint-disable */
import React from 'react';
import classnames from 'classnames';

class Fold extends React.Component {
  static PropTypes = {
    icon: React.PropTypes.string,
    iconClassName: React.PropTypes.string,
    title: React.PropTypes.string.isRequired
  };

  state = {
    isOpen: false
  };

  constructor(props) {
    super(props);
  }

  render() {
    const { icon, iconClassName, title, iconElement } = this.props;
    const titleIconClassName = classnames('material-icons icon', iconClassName);
    const className = classnames({
      'fold': true,
      'fold--open': this.state.isOpen
    });

    let foldIcon;
    if (icon) {
      foldIcon = <i className={titleIconClassName}>{icon}</i>;
    }
    if (iconElement) {
      foldIcon = iconElement;
    }

    return (
      <div className={className}>
        <div className=""fold__title"" onClick={this.onClick}>
          {foldIcon}
          {title}
          <i className=""fold__indicator material-icons pull-right"">arrow_drop_down</i>
        </div>
        <div className=""fold__content"">
          {this.props.children}
        </div>
      </div>
    );
  }

  onClick = () => {
    this.setState({isOpen: !this.state.isOpen});
  };
}

export default Fold;
","A React component that creates a collapsible section with a toggle button, a title, and optional icon. The component can be used to show or hide content."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionGavel = (props) => (
  <SvgIcon {...props}>
    <path d=""M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z""/>
  </SvgIcon>
);
ActionGavel = pure(ActionGavel);
ActionGavel.displayName = 'ActionGavel';

export default ActionGavel;
",Create a React component that renders an SVG icon representing a gavel.
"import React from 'react';
import { stringify, validate } from 'rebem-classname';

let buildClassName = stringify;

// validation
// istanbul ignore next
if (process.env.NODE_ENV !== 'production') {
    buildClassName = props => stringify(validate(props));
}

function BEM(props, ...children) {
    const { tag, block, elem, mods, mix, className, ...restProps } = props;
    const finalClassName = buildClassName({ block, elem, mods, mix, className });
    const finalProps = finalClassName ? { ...restProps, className: finalClassName } : restProps;

    return React.createElement(tag || 'div', finalProps, ...children);
}

function blockFactory(block) {
    return function (props, ...children) {
        return BEM({ ...props, block }, ...children);
    };
}

export { BEM, blockFactory };
",Create a React component that generates BEM class names from props and allows for validation in development mode.
"import React from 'react';
import PropTypes from 'prop-types';

const propTypes = {
  query: PropTypes.string
};

function NoResults({ query }) {
  return (
    <div className='no-results-wrapper'>
      <p>
        We could not find anything relating to <em>{query}</em>
      </p>
    </div>
  );
}

NoResults.displayName = 'NoResults';
NoResults.propTypes = propTypes;

export default NoResults;
",Generate a React component called NoResults that displays a message indicating that no results were found for a given query. The component should accept a query prop and display the query within the message.
"import Container from 'react-container';
import React from 'react';
import { Link, UI } from 'touchstonejs';

module.exports = React.createClass({
	statics: {
		navigationBar: 'main',
		getNavigation () {
			return {
				title: 'Lists'
			}
		}
	},

	render: function () {
		return (
			<Container scrollable>
				<UI.Group>
					<UI.GroupHeader>Lists</UI.GroupHeader>
					<UI.GroupBody>
						<Link to=""tabs:list-simple"" transition=""show-from-right"">
							<UI.Item showDisclosureArrow>
								<UI.ItemInner>
									Simple List
								</UI.ItemInner>
							</UI.Item>
						</Link>
						<Link to=""tabs:list-complex"" transition=""show-from-right"">
							<UI.Item showDisclosureArrow>
								<UI.ItemInner>
									Complex List
								</UI.ItemInner>
							</UI.Item>
						</Link>
					</UI.GroupBody>
				</UI.Group>
				<UI.Group>
					<UI.GroupHeader>GroupHeader</UI.GroupHeader>
					<UI.GroupBody>
						<UI.GroupInner>
							<p>Use groups to contain content or lists. Where appropriate a Group should be accompanied by a GroupHeading and optionally a GroupFooter.</p>
							GroupBody will apply the background for content inside groups.
						</UI.GroupInner>
					</UI.GroupBody>
					<UI.GroupFooter>GroupFooter: useful for a detailed explaination to express the intentions of the Group. Try to be concise - remember that users are likely to read the text in your UI many times.</UI.GroupFooter>
				</UI.Group>
			</Container>
		);
	}
});
",Generate a code snippet for a React component that can be used to display a list of grouped items in a mobile application. Provide a navigation bar and use the Touchstone JS UI library for styling.
"import React from 'react';
import PropTypes from 'prop-types';
import SPELLS from './SPELLS';
import SpellLink from './SpellLink';
import Icon from './Icon';

const SpellIcon = ({ id, noLink, ...others }) => {
  if (process.env.NODE_ENV === 'development' && !SPELLS[id]) {
    throw new Error(`Unknown spell: ${id}`);
  }

  const spell = SPELLS[id] || {
    name: 'Spell not recognized',
    icon: 'inv_misc_questionmark',
  };

  const icon = (
    <Icon
      icon={spell.icon}
      alt={spell.name}
      {...others}
    />
  );

  if (noLink) {
    return icon;
  }

  return (
    <SpellLink id={id}>
      {icon}
    </SpellLink>
  );
};
SpellIcon.propTypes = {
  id: PropTypes.number.isRequired,
  noLink: PropTypes.bool,
};

export default SpellIcon;
","Create a React component that displays an icon representing a spell. The component should accept an ID as a prop and use it to look up the spell's icon in a dictionary. If the ID is not found, the component should display a placeholder icon. The component should also accept a boolean prop to specify whether or not to include a link to the spell's page."
"import React from 'react';
import settings from 'settings';
import ModalIntro from 'components/ModalIntro';
import openShareWindow from 'helpers/sharing/openShareWindow';
import ShareModalButtons from 'components/ShareModalButtons';

const ShareModal = ({ title, intro, buttons }) => (
  <div>
    <ModalIntro
      title={title}
      intro={intro}
    />
    <ShareModalButtons
      openPopup={(url, event) => openShareWindow(url, event, settings.shareButtons.popupTitle)}
      buttons={buttons}
    />
  </div>
);

export default ShareModal;
","Create a React component for a sharing modal that displays an introduction with a title and description, and a set of sharing buttons. The buttons should open a popup window allowing users to share the content."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';

class Announcer extends Component {
    constructor(props) {
      super(props);

      this.state = {
        text: ''
      }
    }

    static propTypes = {
      text: PropTypes.string,
      politeness: PropTypes.string
    }

    static defaultProps = {
      className: '',
      politeness: 'polite'
    }

    UNSAFE_componentWillReceiveProps(nextProps) {
      const currentAnnouncement = this.state.text;
      let nextAnnouncement = nextProps.text;

      if (nextAnnouncement === currentAnnouncement) {
        nextAnnouncement = nextAnnouncement + '\u00A0';
      }

      this.setState(prevState => ({
        text: nextAnnouncement
      }));
    }

    defaultStyles = {
        position: 'absolute',
        visibility: 'visible',
        overflow: 'hidden',
        display: 'block',
        width: '1px',
        height: '1px',
        margin: '-1px',
        border: '0',
        padding: '0',
        clip: 'rect(0px, 0px, 0px, 0px)',
        clipPath: 'polygon(0px 0px, 0px 0px, 0px 0px, 0px 0px)',
        whiteSpace: 'nowrap'
    }

    render() {
        const { className, text, politeness, ...props } = this.props;
        const styles = className ? {} : this.defaultStyles;
        return (
            <div
                aria-atomic
                aria-live={politeness}
                style={styles}
                className={className}
                {...props}
            >
                {
                    this.state.text.length ?
                    <p>{this.state.text}</p> :
                    null
                }
            </div>
        )
    }
}

export default Announcer;
",Draft an accessible React component that provides a screen reader only message to users.
"/*
 * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the ""License""); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import React from 'react';
import PropTypes from 'prop-types';

const SingleInput = (props) => (
	<div className=""form-group label-floating is-empty"">
		<label className=""control-label"">{props.title}</label>
		<input
			className=""form-control""
			name={props.name}
			type={props.inputType}
			value={props.content}
			onChange={props.controlFunc}
			placeholder={props.placeholder} />
		<p className=""help-block"">{props.helpText}</p>
	</div>
);

SingleInput.propTypes = {
	inputType: PropTypes.oneOf(['text', 'number']).isRequired,
	title: PropTypes.string.isRequired,
	name: PropTypes.string.isRequired,
	controlFunc: PropTypes.func.isRequired,
	content: PropTypes.oneOfType([
		PropTypes.string,
		PropTypes.number,
	]).isRequired,
	placeholder: PropTypes.string,
};

export default SingleInput;
","Generate the code for a React component called SingleInput, which represents a text input field with a label, a placeholder, and a help text. The component should accept the following input parameters: `inputType`, `title`, `name`, `controlFunc`, `content`, and `placeholder`."
"import React from 'react';
import ItemsTableCell from '../../../admin/client/components/ItemsTable/ItemsTableCell';
import ItemsTableValue from '../../../admin/client/components/ItemsTable/ItemsTableValue';

var IdColumn = React.createClass({
	displayName: 'IdColumn',
	propTypes: {
		col: React.PropTypes.object,
		data: React.PropTypes.object,
		list: React.PropTypes.object,
	},
	renderValue () {
		const value = this.props.data.id;
		if (!value) return null;

		return (
			<ItemsTableValue padded interior title={value} href={Keystone.adminPath + '/' + this.props.list.path + '/' + value} field={this.props.col.type}>
				{value}
			</ItemsTableValue>
		);
	},
	render () {
		return (
			<ItemsTableCell>
				{this.renderValue()}
			</ItemsTableCell>
		);
	},
});

module.exports = IdColumn;
","Generate a React component that displays the ID of an item in a table, with a link to the item's detail page. The component should include appropriate padding and styling, and should handle the case where the item has no ID."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionExplore = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z""/>
  </SvgIcon>
);
ActionExplore = pure(ActionExplore);
ActionExplore.displayName = 'ActionExplore';
ActionExplore.muiName = 'SvgIcon';

export default ActionExplore;
","Create a React component that renders an SVG icon for the Material Design ""Explore"" action. The icon should use the following SVG path:

""M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z"""
"import React from 'react';
import classNames from 'classnames';

class FormGroup extends React.Component {
  render() {
    let classes = {
      'form-group': !this.props.standalone,
      'form-group-lg': !this.props.standalone && this.props.bsSize === 'large',
      'form-group-sm': !this.props.standalone && this.props.bsSize === 'small',
      'has-feedback': this.props.hasFeedback,
      'has-success': this.props.bsStyle === 'success',
      'has-warning': this.props.bsStyle === 'warning',
      'has-error': this.props.bsStyle === 'error'
    };

    return (
      <div className={classNames(classes, this.props.groupClassName)}>
        {this.props.children}
      </div>
    );
  }
}

FormGroup.defaultProps = {
  hasFeedback: false,
  standalone: false
};

FormGroup.propTypes = {
  standalone: React.PropTypes.bool,
  hasFeedback: React.PropTypes.bool,
  bsSize (props) {
    if (props.standalone && props.bsSize !== undefined) {
      return new Error('bsSize will not be used when `standalone` is set.');
    }

    return React.PropTypes.oneOf(['small', 'medium', 'large'])
      .apply(null, arguments);
  },
  bsStyle: React.PropTypes.oneOf(['success', 'warning', 'error']),
  groupClassName: React.PropTypes.string
};

export default FormGroup;
","Create a React component that renders a Bootstrap form group. It should accept the following props:

* `standalone`: Whether the form group is standalone (meaning it doesn't have a label or help text).
* `hasFeedback`: Whether the form group has feedback icons.
* `bsSize`: The size of the form group (small, medium, or large).
* `bsStyle`: The style of the form group (success, warning, or error).
* `groupClassName`: An optional custom class name for the form group."
"/**
 * React Static Boilerplate
 * https://github.com/koistya/react-static-boilerplate
 * Copyright (c) Konstantin Tarkus (@koistya) | MIT license
 */

import React, { Component } from 'react';

export default class extends Component {

  render() {
    return (
      <div>
        <h1>Home Page</h1>
        <p>Coming soon.</p>
      </div>
    );
  }

}
",Generate the code for a minimal React component that displays a heading and a paragraph with some text.
"import styles from './Regular.less';
import React from 'react';
import PropTypes from 'prop-types';

import classnames from 'classnames';

export default function Regular({ children, className, ...restProps }) {
  return (
    <span {...restProps} className={classnames(styles.root, className)}>
      {children}
    </span>
  );
}

Regular.propTypes = {
  children: PropTypes.node.isRequired,
  className: PropTypes.string
};
",Create a React component called `Regular` that takes in children and className as props. The component should render a span element with a class name that combines `root` from a CSS module and any class names provided via the `className` prop.
"import React from 'react';

const VideoDetail = ({video}) => {

  if(!video){
    return <div>Loading...</div>;
  }

  const videoId = video.id.videoId;
  const url = `https://youtube.com/embed/${videoId}`

  return (
    <div className='video-detail col-md-8'>
      <div className='embed-responsive embed-responsive-16by9'>
        <iframe className='embed-responsive-item' src={url}></iframe>
      </div>
        <div>{video.snippet.title}</div>
        <div>{video.snippet.description}</div>
    </div>
  )
}

export default VideoDetail","Generate the code for a React component that displays the details of a YouTube video, including the embedded video, title, and description. If no video is provided, display a ""Loading..."" message."
"import Component from 'react-pure-render/component';
import React from 'react';
import { FormattedMessage, defineMessages } from 'react-intl';
import EditorFormatAlignLeft from 'material-ui/svg-icons/editor/format-align-left';
import { grey200 } from 'material-ui/styles/colors';


const _messages = defineMessages({
  emptyArticle: {
    defaultMessage: 'No data so far',
    id: 'ui.emptyArticle.empty'
  }
});

export default class EmptyList extends Component {

  render() {
    const emptyListContainerStyle = {
      width: '100%',
      height: '70vh',
      verticalAlign: 'middle',
      textAlign: 'center',
      color: grey200
    };
    const emptyListContentStyle = {
      position: 'relative',
      top: '50%',
      transform: 'translateY(-50%)'
    };
    const iconStyle = {
      width: 300,
      height: 300
    };

    return (
      <div style={emptyListContainerStyle}>
        <div style={emptyListContentStyle}>
          <EditorFormatAlignLeft color={grey200} style={iconStyle} />
          <p>
            <FormattedMessage {..._messages.emptyArticle} />
          </p>
        </div>
      </div>
    );
  }
}
",Provide a React component rendering a placeholder for empty screens using iconography and i18n text.
"import React from 'react';

class MyPropertiesExample extends React.Component {
  render() {
    return (
      <div>
        <h1>Properties</h1>
        My favourite dish is {this.props.dish}.
      </div>
    );
  }
}

MyPropertiesExample.defaultProps = {
  dish: 'shrimp with pasta'
};

MyPropertiesExample.propTypes = {
  dish: React.PropTypes.string.isRequired
};

class MyVodooComponent extends React.Component {
  render() {
    return (
      <MyPropertiesExample dish=""chicken""/>
    );
  }
}

export default MyPropertiesExample;
","Create a React class component called `MyPropertiesExample` with a render method that displays a div containing an h1 element with text ""Properties"" and another div containing the text ""My favorite dish is"" followed by a prop called ""dish"".
Add defaultProps to the class component that sets the default value of the ""dish"" prop to ""shrimp with pasta"" and propTypes to define the ""dish"" prop as required and of type string.
Nest the `MyPropertiesExample` component inside another React class component called `MyVodooComponent`, and pass in a ""dish"" prop of ""chicken"". Export the `MyPropertiesExample` component by default."
"import cx from 'clsx';
import React from 'react';
import PropTypes from 'prop-types';
import MuiButton from '@mui/material/Button';

function Button({ children, className, ...props }) {
  return (
    <MuiButton
      variant=""contained""
      color=""primary""
      className={cx('Button', className)}
      type=""submit""
      {...props}
    >
      {children}
    </MuiButton>
  );
}

Button.propTypes = {
  className: PropTypes.string,
  children: PropTypes.node,
};

export default Button;
","Design a reusable button component that leverages the functionality from Material UI. The button should have a contained style with a primary color scheme, and it should support the ability to pass in custom styles through a className prop."
"import React, { Component } from 'react';
import { View, FlatList, Text } from 'react-native';
import PropTypes from 'prop-types';

import { Game } from '../game';
import { styles } from './style';


class GameListing extends Component {
  constructor(props) {
    super(props);
    this.state = {
      refresh: this.props.refreshGameListing
    };
  }

  _keyExtractor = (item, index) => item.id;

  _renderItem = ({ item }) => {
    const homeTeam = item.outcome.home;
    const awayTeam = item.outcome.away;
    return (<Game
      id={item.id}
      homeTeam={homeTeam}
      awayTeam={awayTeam}
      popularity={item.outcome.popularity}
      selectResult={(id, result) => {
        this.props.selectResult(id, result);
        this.setState({ refresh: !this.state.refresh });
      }}
      selection={item.outcome.selection}
    />);
  };


  render() {
    return (
      <View style={styles.gameList}>
        <View style={styles.title}>
          <Text style={styles.titleText}>Home</Text><Text style={styles.titleText}>1 X 2</Text>
          <Text style={styles.titleText}>Away</Text>
        </View>
        { this.props.gamesList.length > 0 ?
          <FlatList
            data={this.props.gamesList[this.props.selectedGamesList].rows}
            renderItem={this._renderItem}
            keyExtractor={this._keyExtractor}
            extraData={this.state.refresh}
          /> : null }
      </View>
    );
  }
}

GameListing.propTypes = {
  gamesList: PropTypes.array.isRequired,
  selectResult: PropTypes.func.isRequired,
  selectedGamesList: PropTypes.number,
  refreshGameListing: PropTypes.bool
};


GameListing.defaultProps = {
  refreshGameListing: false
};


export {
  GameListing
};
","Create a React Native component that displays a list of games. The component should include a header with the labels 'Home', '1 X 2', and 'Away'. Each game should be represented by a row in the list. The row should include the home team, away team, and a button that allows the user to select the result of the game. When the user selects a result, the component should update its state and re-render the list."
"import React, { Component } from 'react';

export default class Notepad extends Component {

  constructor(props) {
    super(props);
    const notepad = this.getNotepad();
    const initialNote = 'Write your notes here - We\'ll save it for offline!';
    this.state = {
      note: notepad || initialNote,
    };
  }

  setNotepad = (val) => {
    localStorage.notepad = val;
  };

  getNotepad = () => localStorage.notepad;

  saveText = (e) => {
    e.preventDefault();
    this.setNotepad(this.state.note);
  }

  updateTextArea = (e) => {
    this.setState({
      note: e.target.value,
    });
  }

  render() {
    return (
      <div className=""border"">
        <h2 className=""header"">
          Notepad
        </h2>
        <br />
        <form onSubmit={this.saveText}>
          <label htmlFor=""notepad-textbox"">
            <input
              id=""notepad-textbox""
              type=""text""
              value={this.state.note}
              onChange={this.updateTextArea}
            />
          </label>
          <input type=""submit"" value=""Submit"" />
        </form>
      </div>
    );
  }
}
",Create a simple note-taking app that saves the notes in the browser's local storage.
"'use strict';

import React from 'react';

import checkGlobal from 'utils/checkGlobal';

export default (
  name,
  func,
  getData = callback => callback({}),
  defaultData = {}
) => Component => {
  const state = {};
  state[`${name}CanUse`] = false;

  return class CheckAPI extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        ...state,
        ...defaultData
      };
    }

    componentDidMount() {
      checkGlobal.add(
        name, func,
        () => getData(
          data => {
            state[`${name}CanUse`] = true;
            this.setState({
              ...state,
              ...data
            });
          }
        )
      );
    }

    render() {
      return (
        <Component {...this.state}
          {...this.props}
        />
      );
    }
  };
};
",Create a React Higher Order Component (HOC) that checks if a global variable exists and then fetches data from an API if it does. Pass the data as props to the wrapped component and render it.
"import React from 'react';
import PropTypes from 'prop-types';
import { StickyContainer, Sticky } from 'react-sticky';
import cn from 'classnames';
import { Section, Wrapper, Heading } from 'common/base';
import GradientMask from 'common/GradientMask';
import MarkdownParser from './MarkdownParser';
import styles from './Body.module.css';
import LeftBanner from '../ExperienceSearch/Banners/Banner1';

const Body = ({ title, seoText, description, content, permissionBlock }) => (
  <Section Tag=""main"" pageTop>
    <Wrapper size=""m"">
      <Heading size=""l"" bold marginBottom>
        {title}
      </Heading>
      <div className={cn('subheadingM', styles.description)}>{description}</div>
    </Wrapper>
    <Wrapper size=""l"">
      <div className={styles.contentWrapper}>
        <StickyContainer className={cn(styles.leftBanner)}>
          <Sticky disableCompensation>
            {({ style }) => (
              <div style={style}>
                <LeftBanner />
              </div>
            )}
          </Sticky>
        </StickyContainer>
        <div className={styles.content}>
          <GradientMask show={permissionBlock !== null}>
            <MarkdownParser content={content} />
          </GradientMask>
          {permissionBlock}
        </div>
      </div>
      {seoText && <div className={styles.seoText}>{seoText}</div>}
    </Wrapper>
  </Section>
);

Body.propTypes = {
  title: PropTypes.string,
  seoText: PropTypes.string,
  description: PropTypes.string.isRequired,
  content: PropTypes.string.isRequired,
  permissionBlock: PropTypes.element,
};
Body.defaultProps = {
  title: '',
  description: '',
  content: '',
  permissionBlock: null,
};

export default Body;
","Generate the React component code for the ""Body"" component, which is used to display the main content of a page. The component takes various props, including the title, SEO text, description, and content. It also includes a sticky left banner and a gradient mask to conceal permission blocks."
"import React, { Component } from 'react';
import {
	StyleSheet,
	View,
	Text,
	Dimensions,
	Switch,
	TextInput
} from 'react-native'

const {width, height} = Dimensions.get('window')

export class SwitchSetting extends Component {
	constructor() {
		super()
		this.state = {
			value: true
		}
	}
	render() {
		return(
			<View style={styles.card}>
				<Text style={styles.setting}>{this.props.setting.title}</Text>
				<Switch tintColor=""#094B81"" onTintColor=""#094B81"" value={this.state.value} onChange={(e)=>{this.setState({value: !this.state.value})}}/>
			</View>
		)
	}
}

export class TextSetting extends Component {
	constructor() {
		super()
		this.state = {
			value: ''
		}
	}
	render() {
		return(
			<View style={styles.card}>
				<Text style={styles.setting}>{this.props.setting.title}</Text>
				<TextInput style={styles.textInput} placeholder={this.props.setting.placeholder || """"} value={this.state.value} onChangeText={(t)=>{this.setState({value: t})}} />
			</View>
		)
	}
}

const styles = StyleSheet.create({
	card: {
		paddingLeft: 15,
		paddingRight: 15,
		paddingTop: 10,
		paddingBottom: 15,
		backgroundColor: '#01223E',
		justifyContent: 'space-between',
		alignItems: 'center',
		flexDirection: 'row',
		borderBottomWidth: 1,
		borderBottomColor: '#00111F',
		width: width-30,
		height: 65
	},
	textInput: {
		height: 40,
		borderColor: '#094B81',
		borderWidth: 1,
		width: width-150,
		backgroundColor: '#094B81'
	},
	setting: {
		fontSize: 20,
		color: '#094B81'
	},
	switch: {}
})",Create React Native components for switch and text settings that can be used in a settings screen. The switch setting should have a text label and a switch that can be toggled. The text setting should have a text label and a text input field. Style the components using a provided stylesheet.
"import React from 'react';
import {
    DataList,
    DataListItem,
    DataListItemRow,
    DataListItemCells,
    DataListCell,
    Title
} from '@patternfly/react-core';

export const ExtensionsDataList = (props) =>
(
    <DataList aria-label=""Community extensions"">
        {props.data.map(item => {
            const links = item.links.map((link, index) => {
                return (
                    <span key={index} className=""pf-c-extensions__link"">
                        <a href={link.href} target=""_blank"" rel=""noopener noreferrer"">{link.name}</a>
                    </span>
                );
            });
            return (
                <DataListItem aria-labelledby=""simple-item1"">
                    <DataListItemRow>
                        <DataListItemCells
                            dataListCells={[
                                <DataListCell key=""primary content"" width={2}>
                                    <Title headingLevel=""h3"">{item.component}</Title>
                                    <span className=""pf-c-extensions__component-description"">{item.description}</span>
                                </DataListCell>,
                                <DataListCell key=""secondary content"">{links}</DataListCell>
                            ]}
                        />
                    </DataListItemRow>
                </DataListItem>
            )
        })}
    </DataList>
);","Design a React component that renders a data list displaying extension data. The component should include a heading, description, and list of links for each extension."
"import React from 'react'
import Input from '../common/forms/Input'
const LoginForm = (props) => (
  <div className='container'>
    <form>
      <div className='error'>{props.error}</div>
      <Input
        type='email'
        name='email'
        value={props.user.email}
        placeholder='E-mail'
        onChange={props.onChange} />
      <br />
      <Input
        type='password'
        name='password'
        value={props.user.password}
        placeholder='Password'
        onChange={props.onChange} />
      <input className='btn btn-primary' type='submit' value='login' onClick={props.onSave} />
      <br />
    </form>
  </div>
)

export default LoginForm
","Generate a React component called LoginForm that has three input fields: email, password, and submit. The component will have an error message displayed if there is one."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let HardwareSecurity = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11v8.8z""/>
  </SvgIcon>
);
HardwareSecurity = pure(HardwareSecurity);
HardwareSecurity.displayName = 'HardwareSecurity';
HardwareSecurity.muiName = 'SvgIcon';

export default HardwareSecurity;
",Generate a React component that renders an SVG icon of a lock with a keyhole in the center. The icon should be pure and have a display name of 'HardwareSecurity'.
"/* @flow */
import React from 'react';
import Icon from 'mineral-ui/Icon';

import type { IconProps } from 'mineral-ui/Icon/types';

/* eslint-disable prettier/prettier */
export default function IconRemoveCircle(props: IconProps) {
  const iconProps = {
    rtl: false,
    ...props
  };

  return (
    <Icon {...iconProps}>
      <g>
        <path d=""M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z""/>
      </g>
    </Icon>
  );
}

IconRemoveCircle.displayName = 'IconRemoveCircle';
IconRemoveCircle.category = 'content';
","Generate a React component using Mineral UI's Icon component with ""RemoveCircle"" iconography and provide type checking with flow."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Link } from 'react-router';
import Formsy from 'formsy-react';
import autoBind from '../../lib/autoBind';
import { Input, Textarea } from 'formsy-react-components';

class UserForm extends Component {
  constructor(props, context) {
    super(props, context);

    this.state = {
      canSubmit: false
    };

    autoBind(this, {
      bindOnly: ['enableButton', 'disableButton',  'submit', 'resetForm']
    });
  }

  enableButton() {
    this.setState({
      canSubmit: true
    });
  }

  disableButton() {
    this.setState({
      canSubmit: false
    });
  }

  submit(model) {
    this.props.onSave(model);
  }

  resetForm() {
    this.refs.form.reset();
  }

  render() {
    return (
      <div>
        <Formsy.Form ref=""form"" className=""horizontal"" onValidSubmit={this.submit} onValid={this.enableButton} onInvalid={this.disableButton}>
          <Input formNoValidate required name=""name"" label=""Name"" placeholder=""Name"" value={this.props.user.name || ''} />
          <Input formNoValidate required name=""email"" label=""Email"" placeholder=""Email"" value={this.props.user.email || ''}
            validations=""isEmail""
            validationError=""This is not a valid email"" />
          <div>
            <button type=""button"" onClick={this.resetForm}>Reset</button>
            &nbsp;
            <input type=""submit"" disabled={!this.state.canSubmit} value={this.props.saving ? 'Saving... ' : 'Save'} />
            &nbsp;
            <Link to=""/app/users"">Cancel</Link>
          </div>
        </Formsy.Form>
      </div>
    );
  }
}

UserForm.propTypes = {
  onSave: PropTypes.func.isRequired,
  saving: PropTypes.bool.isRequired,
  user: PropTypes.object.isRequired
};

export default UserForm;
","Create a React component that displays a form with the following fields: name, email. Add validation to the email field using `formsy-react-components`. The form should contain two buttons: ""Reset"" and ""Save"". The ""Save"" button should be disabled if the form is invalid. When the form is submitted, the `onSave` callback should be invoked, passing in an object containing the form values."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let SocialNotifications = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z""/>
  </SvgIcon>
);
SocialNotifications = pure(SocialNotifications);
SocialNotifications.displayName = 'SocialNotifications';

export default SocialNotifications;
","Create a React component that renders a Material Design social notifications icon. The component should be pure and have a display name of ""SocialNotifications""."
"/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */

import React, { Component } from 'react'; // eslint-disable-line no-unused-vars
import EventEmitter from 'eventemitter3';
import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';

let EE;
let viewport = {width: 1366, height: 768}; // Default size for server-side rendering
const RESIZE_EVENT = 'resize';

function handleWindowResize() {
  if (viewport.width !== window.innerWidth || viewport.height !== window.innerHeight) {
    viewport = {width: window.innerWidth, height: window.innerHeight};
    EE.emit(RESIZE_EVENT, viewport);
  }
}

function withViewport(ComposedComponent) {
  return class WithViewport extends Component {

    constructor() {
      super();

      this.state = {
        viewport: canUseDOM ? {width: window.innerWidth, height: window.innerHeight} : viewport,
      };
    }

    componentDidMount() {
      if (!EE) {
        EE = new EventEmitter();
        window.addEventListener('resize', handleWindowResize);
        window.addEventListener('orientationchange', handleWindowResize);
      }

      EE.on(RESIZE_EVENT, this.handleResize, this);
    }

    componentWillUnmount() {
      EE.removeListener(RESIZE_EVENT, this.handleResize, this);
      if (!EE.listeners(RESIZE_EVENT, true)) {
        window.removeEventListener('resize', handleWindowResize);
        window.removeEventListener('orientationchange', handleWindowResize);
        EE = null;
      }
    }

    render() {
      return <ComposedComponent {...this.props} viewport={this.state.viewport}/>;
    }

    handleResize(value) {
      this.setState({viewport: value}); // eslint-disable-line react/no-set-state
    }

  };
}

export default withViewport;
","Create a React higher-order component that provides the current viewport dimensions, as an object with `width` and `height` properties, to the wrapped component as a prop named `viewport`. It should listen to the window `resize` and `orientationchange` events and update the viewport dimensions when they change. The component should also clean up event listeners when unmounted."
"import React, { Component } from 'react';
import { reduxForm } from 'redux-form';
import * as actions from '../../actions';

class Signin extends Component {
  handleFormSubmit({email, password}){
    console.log(email, password);
    // need to do something to log user in
    this.props.signinUser({ email, password });
  }

  renderAlert(){
    if(this.props.errorMessage){
      return (
        <div className=""alert alert-danger"">
          <strong>Oops!</strong> {this.props.errorMessage}
        </div>
      )
    }
  }

  render() {
    const { handleSubmit, fields: { email, password }} = this.props;

    return (
      <form onSubmit={handleSubmit(this.handleFormSubmit.bind(this))}>
        <fieldset className=""form-group"">
          <label>Email: </label>
          <input {...email} className=""form-control"" />
        </fieldset>
        <fieldset className=""form-group"">
          <label>Password: </label>
          <input {...password} type=""password"" className=""form-control"" />
        </fieldset>
        {this.renderAlert()}
        <button action=""submit"" className=""btn btn-primary"">Sign in</button>
      </form>
    )
  }
}

function mapStateToProps(state){
  return { errorMessage: state.auth.error };
}

export default reduxForm({
  form: 'signin',
  fields: ['email', 'password']
}, mapStateToProps, actions)(Signin);
","Create a React component called Signin that allows a user to sign in using a form with an email and password. The component should dispatch an action to log the user in when the form is submitted. If there is an error during sign in, the component should display an alert message."
"var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styles from '../../../build/styles';
import { getCallbacks } from './../../helper/helper';

export default class Media extends Component {

  createClassName() {
    return [styles.media, this.props.className].join(' ').trim();
  }

  render() {
    return React.createElement(
      'article',
      _extends({}, getCallbacks(this.props), {
        style: this.props.style,
        className: this.createClassName()
      }),
      this.props.children
    );
  }
}
Media.propTypes = {
  style: PropTypes.object,
  children: PropTypes.any,
  className: PropTypes.string
};
Media.defaultProps = {
  style: {},
  className: ''
};","Describe in detail a React component that creates an article element with a class name derived from props. Pass event callbacks and an optional style and className prop to the article element, ensuring that the component renders all child components."
"import React from 'react';

export function Newsletter() {
	return (
		<section className=""newsletter bg-black white pt3 pt5-m"">
			<div id=""mc_embed_signup"" className=""grid"">
				<div className=""grid-item w-10 push-1"">
					<h3 className=""f2"">Our newsletter</h3>
				</div>
				<form
					className=""grid-item w-10 push-1 validate justify-end""
					action=""//fathomlondon.us16.list-manage.com/subscribe/post?u=9e5fce7688712fa6bf674d034&amp;id=adf3cf97ef""
					method=""post""
					id=""mc-embedded-subscribe-form""
					name=""mc-embedded-subscribe-form""
					target=""_blank""
				>
					<div id=""mc_embed_signup_scroll"">
						<div className=""mc-field-group"">
							<label htmlFor=""mce-EMAIL"" className=""label light-grey"">
								Email Address
							</label>
							<input
								type=""email""
								required
								placeholder=""you@email.com""
								name=""EMAIL""
								className=""required email""
								id=""mce-EMAIL""
							/>
						</div>

						<div id=""mce-responses"" className=""clear"">
							<div
								className=""response""
								id=""mce-error-response""
								style={{ display: 'none' }}
							/>
							<div
								className=""response""
								id=""mce-success-response""
								style={{ display: 'none' }}
							/>
						</div>

						{/* real people should not fill this in and expect good things - do not remove this or risk form bot signups */}
						<div style={{ position: 'absolute', left: '-5000px' }} hidden>
							<input
								type=""text""
								name=""b_9e5fce7688712fa6bf674d034_adf3cf97ef""
								tabIndex=""-1""
							/>
						</div>

						<div className=""flex justify-end"">
							<input
								type=""submit""
								value=""Subscribe""
								name=""subscribe""
								title=""Subscribe""
								aria-label=""Subscribe""
								id=""mc-embedded-subscribe""
								className=""button mt1 hover-bg-white hover-black""
							/>
						</div>
					</div>
				</form>
			</div>
		</section>
	);
}
","Generate React component code for a newsletter signup form, with a grid layout and designed with accessibility in mind."
"import React from 'react';
import {connect} from 'react-redux';
import operations from '../operations';
import FileUploadComponent from './FileUploadComponent';
import DataDisplayComponent from './DataDisplayComponent';
import selectors from '../selectors';

export class DataContainer extends React.Component {

  constructor(props) {
    super(props);
  }

  render() {
    const {
      onFileUpload,
      loading,
      itemNames
    } = this.props;

    return (
      <div>
        <FileUploadComponent onFileUpload={onFileUpload} loading={loading}/>
        <DataDisplayComponent itemNames={itemNames}/>
      </div>
    );
  }

}

const mapStateToProps = state => {
  const dataLoader = selectors.dataLoaderRootSelector(state);
  return {
    itemNames: selectors.getItemNames(dataLoader),
    loading: selectors.isLoading(dataLoader),
    error: selectors.getError(dataLoader)
  };
};

const dispatchToProps = dispatch => {
  return {
    onFileUpload: file => {
      dispatch(operations.loadFile(file));
    }
  };
};

export default connect(mapStateToProps, dispatchToProps)(DataContainer);","Generate the React component code that handles file upload and data display. The component should use Redux for state management and have the following functionality:
- File upload functionality using FileUploadComponent
- Data display functionality using DataDisplayComponent
- The component should connect to the Redux store and use appropriate selectors and operations for data management"
"import React from 'react';
import Header from '../components/Header.js';

export default class Logout extends React.Component {
  static async getInitialProps({ req }) {
    const user = req ? req.user : null;
    return { user };
  }

  componentDidMount() {
    if (this.props.user) {
      try {
        window.localStorage.setItem('user', this.props.user);
      } catch (err) {}
    } else if (typeof this.props.user !== 'undefined') {
      window.localStorage.removeItem('user');
    }
  }

  render() {
    return (
      <div>
        <Header />
        <h1>Logged out!</h1>
      </div>
    );
  }
}
","Create a user authentication system with React.js that allows a user to log in and out of a page. Upon logging in, the user's details should be stored in the local storage. Upon logging out, the user's details should be removed from the local storage."
"import React from 'react';
import { Scatter } from 'react-chartjs-2';

const scatterChart = ({color = 'blue', values = [], keys = {}, title = ''}) => {
  const data = {
    datasets: [{
      label: `${keys.x} / ${keys.y}`,
      fill: false,
      pointBackgroundColor: 'rgba(0, 0, 0, 0)',
      pointBorderColor: 'rgba(0, 0, 0, 0)',
      borderColor: color,
      data: values.map(line => ({x: line[keys.x], y: line[keys.y]}))
    }]
  }
  const options = {

    title: {
      display: title ? true : false,
      text: title,
      fontSize: 24
    }
  }
  return <Scatter data={data} options={options} />
};

const charts = {
  scatter: props => scatterChart(props),
};

const Chart = ({type, ...props}) => charts[type](props);

export default Chart;
","Design a custom React component that renders a scatter plot chart using the `react-chartjs-2` library. Include options to customize the chart's color, data points, x and y axis labels, and title."
"import React, { Component } from 'react';
import { TabBar, Tab, Panel, Container } from '@extjs/ext-react';

export default class TabBarExample extends Component {

    state = {
        activeTab: ""download""
    }

    render() {
        const { activeTab } = this.state;

        return (
            <Container layout={{ type: 'vbox', align: 'center' }} padding=""10"">
                <Panel ui=""instructions"" margin=""0 0 20 0"" shadow >
                    <div>To acheive the look and feel of tabs without using a <code>TabPanel</code>, you can use <code>TabBar</code> and <code>Tab</code> as standalone components.</div>
                </Panel>

                <TabBar width=""400"" shadow onActiveTabChange={this.onTabChange} activeTab={activeTab}>
                    <Tab itemId=""info"" title=""Info"" iconCls=""x-fa fa-info-circle"" onActivate={this.onActivateTab}/>
                    <Tab itemId=""download"" title=""Download"" iconCls=""x-fa fa-download"" badgeText=""2"" onActivate={this.onActivateTab}/>
                    <Tab itemId=""favorites"" title=""Favorites"" iconCls=""x-fa fa-star"" onActivate={this.onActivateTab}/>
                    <Tab itemId=""bookmarks"" title=""Bookmarks"" iconCls=""x-fa fa-bookmark"" onActivate={this.onActivateTab}/>
                </TabBar>

                <Panel ui=""instructions"" margin=""20 0 0 0"" shadow >
                    <div>Active Tab: {activeTab}</div>
                </Panel>
            </Container>
        )
    }

    onTabChange = (bar, tab) => {
        this.setState({ activeTab: tab.getItemId() })
    }

} ",Illustrate an alternative approach to creating tabs without using a TabPanel component by utilizing TabBar and Tab components. Include instructions for changing the active tab and displaying the currently active tab's ID.
"import React from 'react';
import classSet from 'classnames';
import BootstrapMixin from './BootstrapMixin';
import SafeAnchor from './SafeAnchor';

const Thumbnail = React.createClass({
  mixins: [BootstrapMixin],

  propTypes: {
    alt: React.PropTypes.string,
    href: React.PropTypes.string,
    src: React.PropTypes.string
  },

  getDefaultProps() {
    return {
      bsClass: 'thumbnail'
    };
  },

  render() {
    let classes = this.getBsClassSet();

    if(this.props.href) {
      return (
        <SafeAnchor {...this.props} href={this.props.href} className={classSet(this.props.className, classes)}>
          <img src={this.props.src} alt={this.props.alt} />
        </SafeAnchor>
      );
    }
    else {
      if(this.props.children) {
        return (
          <div {...this.props} className={classSet(this.props.className, classes)}>
            <img src={this.props.src} alt={this.props.alt} />
            <div className=""caption"">
              {this.props.children}
            </div>
          </div>
        );
      }
      else {
        return (
          <div {...this.props} className={classSet(this.props.className, classes)}>
            <img src={this.props.src} alt={this.props.alt} />
          </div>
        );
      }
    }
  }
});

export default Thumbnail;
",Create a React component called `Thumbnail` that displays an image with an optional caption and can be clicked if a URL is provided.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let EditorShortText = (props) => (
  <SvgIcon {...props}>
    <path d=""M4 9h16v2H4zm0 4h10v2H4z""/>
  </SvgIcon>
);
EditorShortText = pure(EditorShortText);
EditorShortText.displayName = 'EditorShortText';
EditorShortText.muiName = 'SvgIcon';

export default EditorShortText;
",Create a React component that imports the SvgIcon element from a library and defines a new component called EditorShortText. This component should use the SvgIcon and define the path data for the icon.
"import React, { Component } from 'react';
import { Link, RouteHandler } from 'react-router';

import { Jumbotron, Nav, Row, Col } from 'react-bootstrap';

import { NavItemLink } from 'react-router-bootstrap';

import AuthStore from '../stores/auth';
import SignIn from '../pages/signin';

export default class MainLayout extends Component {
  static displayName = 'MainLayout';
  constructor() {
    super();
  }

  static willTransitionTo(transition) {
    if (!AuthStore.isLoggedIn()) {
      SignIn.attemptedTransition = transition;
      transition.redirect('sign-in');
    }
  }

  render() {
    return (
      <div>
      <div className=""container"">
        <Row>
          <Col md={2}>
            <h3>Links</h3>
            <Nav bsStyle=""pills"" stacked>
              <NavItemLink to=""index"">Index</NavItemLink>
              <NavItemLink to=""null-page"">Null</NavItemLink>
            </Nav>
          </Col>
          <Col md={10} className=""well"">
            <RouteHandler />
          </Col>
        </Row>
      </div>
      </div>
    );
  }
}
","Create a React component that utilizes React Router to implement protected routes, ensuring that unauthorized users are redirected to a login page before accessing certain routes."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';

export default class ErrorBoundary extends Component {

  static propTypes = {
    children: PropTypes.node,
  }

  state = {
    error: null,
    errorInfo: null,
  };

  componentDidCatch(error, errorInfo) {
    this.setState({
      error,
      errorInfo,
    });
  }

  render() {
    if (this.state.errorInfo) {
      return (
        <div>
          <h2>Error</h2>
          <p>{this.state.error && this.state.error.toString()}</p>
          <pre>{this.state.errorInfo.componentStack}</pre>
        </div>
      );
    }

    return this.props.children;
  }
}
","Create a React component called ErrorBoundary that implements error boundaries. The component should log errors and error information to the console, display a friendly error message to the user, and fall back to displaying the children if no error occurs."
"import React from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import PropTypes from 'prop-types';
import IconButton from '../../../components/icon_button';
import { defineMessages, injectIntl } from 'react-intl';
import UploadProgressContainer from '../containers/upload_progress_container';
import Motion from 'react-motion/lib/Motion';
import spring from 'react-motion/lib/spring';

const messages = defineMessages({
  undo: { id: 'upload_form.undo', defaultMessage: 'Undo' },
});

class UploadForm extends React.PureComponent {

  static propTypes = {
    media: ImmutablePropTypes.list.isRequired,
    onRemoveFile: PropTypes.func.isRequired,
    intl: PropTypes.object.isRequired,
  };

  onRemoveFile = (e) => {
    const id = Number(e.currentTarget.parentElement.getAttribute('data-id'));
    this.props.onRemoveFile(id);
  }

  render () {
    const { intl, media } = this.props;

    const uploads = media.map(attachment =>
      <div className='compose-form__upload' key={attachment.get('id')}>
        <Motion defaultStyle={{ scale: 0.8 }} style={{ scale: spring(1, { stiffness: 180, damping: 12 }) }}>
          {({ scale }) =>
            <div className='compose-form__upload-thumbnail' data-id={attachment.get('id')} style={{ transform: `translateZ(0) scale(${scale})`, backgroundImage: `url(${attachment.get('preview_url')})` }}>
              <IconButton icon='times' title={intl.formatMessage(messages.undo)} size={36} onClick={this.onRemoveFile} />
            </div>
          }
        </Motion>
      </div>
    );

    return (
      <div className='compose-form__upload-wrapper'>
        <UploadProgressContainer />
        <div className='compose-form__uploads-wrapper'>{uploads}</div>
      </div>
    );
  }

}

export default injectIntl(UploadForm);
",Create a React component that displays a list of uploaded media files with the ability to remove them. The component should have a smooth animation on the uploaded file as it appears on the screen and a thumbnail of the file using a provided preview URL. The component should be able to receive a list of media files as a prop.
"import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import classNames from 'classnames';
import React from 'react';
import elementType from 'prop-types-extra/lib/elementType';

import { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';

var propTypes = {
  componentClass: elementType
};

var defaultProps = {
  componentClass: 'div'
};

var MediaBody = function (_React$Component) {
  _inherits(MediaBody, _React$Component);

  function MediaBody() {
    _classCallCheck(this, MediaBody);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  MediaBody.prototype.render = function render() {
    var _props = this.props,
        Component = _props.componentClass,
        className = _props.className,
        props = _objectWithoutProperties(_props, ['componentClass', 'className']);

    var _splitBsProps = splitBsProps(props),
        bsProps = _splitBsProps[0],
        elementProps = _splitBsProps[1];

    var classes = getClassSet(bsProps);

    return React.createElement(Component, _extends({}, elementProps, {
      className: classNames(className, classes)
    }));
  };

  return MediaBody;
}(React.Component);

MediaBody.propTypes = propTypes;
MediaBody.defaultProps = defaultProps;

export default bsClass('media-body', MediaBody);","Generate the React code for the `MediaBody` component, which is a container for the body content of a media component. It should support custom `componentClass` prop and use `classNames` to combine the provided `className` prop and generated class set."
"/* eslint-disable import/no-extraneous-dependencies, import/no-unresolved, import/extensions */

import PropTypes from 'prop-types';
import React from 'react';

const buttonStyles = {
  border: '1px solid #eee',
  borderRadius: 3,
  backgroundColor: '#FFFFFF',
  cursor: 'pointer',
  fontSize: 15,
  padding: '3px 10px',
  margin: 10,
};

const Button = ({ children, onClick }) =>
  <button style={buttonStyles} onClick={onClick}>
    {children}
  </button>;

Button.propTypes = {
  children: PropTypes.string.isRequired,
  onClick: PropTypes.func,
};
Button.defaultProps = {
  onClick: () => {},
};

export default Button;
","Design a simple and customizable React button component with specified border, background color, and padding. Include propTypes and defaultProps for the component."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionPageview = (props) => (
  <SvgIcon {...props}>
    <path d=""M11.5 9C10.12 9 9 10.12 9 11.5s1.12 2.5 2.5 2.5 2.5-1.12 2.5-2.5S12.88 9 11.5 9zM20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-3.21 14.21l-2.91-2.91c-.69.44-1.51.7-2.39.7C9.01 16 7 13.99 7 11.5S9.01 7 11.5 7 16 9.01 16 11.5c0 .88-.26 1.69-.7 2.39l2.91 2.9-1.42 1.42z""/>
  </SvgIcon>
);
ActionPageview = pure(ActionPageview);
ActionPageview.displayName = 'ActionPageview';

export default ActionPageview;
","Generate the React component code for a Material Design icon representing a page view, using the 'recompose/pure' library for performance optimization. Name the component 'ActionPageview'."
"import _extends from 'babel-runtime/helpers/extends';
import _isNil from 'lodash/isNil';

import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';

import { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';

/**
 * A step can contain a title.
 */
function StepTitle(props) {
  var children = props.children,
      className = props.className,
      title = props.title;

  var classes = cx('title', className);
  var rest = getUnhandledProps(StepTitle, props);
  var ElementType = getElementType(StepTitle, props);

  return React.createElement(
    ElementType,
    _extends({}, rest, { className: classes }),
    _isNil(children) ? title : children
  );
}

StepTitle.handledProps = ['as', 'children', 'className', 'title'];
StepTitle._meta = {
  name: 'StepTitle',
  parent: 'Step',
  type: META.TYPES.ELEMENT
};

process.env.NODE_ENV !== ""production"" ? StepTitle.propTypes = {
  /** An element type to render as (string or function). */
  as: customPropTypes.as,

  /** Primary content. */
  children: PropTypes.node,

  /** Additional classes. */
  className: PropTypes.string,

  /** Shorthand for primary content. */
  title: customPropTypes.contentShorthand
} : void 0;

export default StepTitle;","Generate the code snippet for a React component called StepTitle, which can optionally contain a title and is used within a Step component."
"/*
 * Copyright (c) 2016-present, Parse, LLC
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */
import React from 'react';
import Field from 'components/Field/Field.react';
import Label from 'components/Label/Label.react';

export const component = Label;

export const demos = [
  {
    render: () => (
      <Field
        label={<Label text='This is my text.' description='This is my description.' />}
        input={null} />
    )
  }
];
","Design the code block for a component that displays a label with text and description, and demonstrate its usage in a field."
"import React from 'react'
import { action as MetaAction, AppLoader } from 'mk-meta-engine'
import config from './config'

class action {
    constructor(option) {
        this.metaAction = option.metaAction
        this.config = config.current
        this.webapi = this.config.webapi
    }

    onInit = ({ component, injections }) => {
        this.component = component
        this.injections = injections
        injections.reduce('init')

        this.load()
    }

    load = async () => {
        const response = await this.webapi.version.query()
        this.injections.reduce('load', response)
    }


}

export default function creator(option) {
    const metaAction = new MetaAction(option),
        o = new action({ ...option, metaAction }),
        ret = { ...metaAction, ...o }

    metaAction.config({ metaHandlers: ret })

    return ret
}","Create a class-based action that initializes an MK-Meta-Engine action with a given option, loads data from a web API, and provides a way to reduce injections for both initialization and data loading."
"import './login.styl';
import Component from '../components/component.react';
import React from 'react';
import exposeRouter from '../components/exposerouter.react';
import {focusInvalidField} from '../lib/validation';

@exposeRouter
export default class Login extends Component {

  static propTypes = {
    actions: React.PropTypes.object.isRequired,
    auth: React.PropTypes.object.isRequired,
    msg: React.PropTypes.object.isRequired,
    router: React.PropTypes.func
  }

  onFormSubmit(e) {
    e.preventDefault();
    const {actions: {auth}, auth: {form}} = this.props;
    auth.login(form.fields)
      .then(() => this.redirectAfterLogin())
      .catch(focusInvalidField(this));
  }

  redirectAfterLogin() {
    const {router} = this.props;
    const nextPath = router.getCurrentQuery().nextPath;
    router.replaceWith(nextPath || 'home');
  }

  render() {
    const {
      actions: {auth: actions},
      auth: {form},
      msg: {auth: {form: msg}}
    } = this.props;

    return (
      <div className=""login"">
        <form onSubmit={::this.onFormSubmit}>
          <fieldset disabled={form.disabled}>
            <legend>{msg.legend}</legend>
            <input
              autoFocus
              name=""email""
              onChange={actions.setFormField}
              placeholder={msg.placeholder.email}
              value={form.fields.email}
            />
            <br />
            <input
              name=""password""
              onChange={actions.setFormField}
              placeholder={msg.placeholder.password}
              type=""password""
              value={form.fields.password}
            />
            <br />
            <button
              children={msg.button.login}
              type=""submit""
            />
            {form.error &&
              <span className=""error-message"">{form.error.message}</span>
            }
            <div>{msg.hint}</div>
          </fieldset>
        </form>
      </div>
    );
  }

}
",Generate a React component class named Login that is used for user authentication. The component should handle form submission and redirect the user to a specified path after successful login. Include relevant propTypes and necessary functions for form handling and error handling.
"import _$ from 'jquery';
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import jsdom from 'jsdom';
import chai, { expect } from 'chai';
import chaiJquery from 'chai-jquery';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import reducers from '../src/reducers';

global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
global.window = global.document.defaultView;
global.navigator = global.window.navigator;
const $ = _$(window);

chaiJquery(chai, chai.util, $);

function renderComponent(ComponentClass, props = {}, state = {}) {
  const componentInstance =  TestUtils.renderIntoDocument(
    <Provider store={createStore(reducers, state)}>
      <ComponentClass {...props} />
    </Provider>
  );

  return $(ReactDOM.findDOMNode(componentInstance));
}

$.fn.simulate = function(eventName, value) {
  if (value) {
    this.val(value);
  }
  TestUtils.Simulate[eventName](this[0]);
};

export {renderComponent, expect};
","Provide a way to write automated tests for React components using Chai, jsdom, and React Test Utils. Include functions for rendering components and simulating events on their DOM elements."
"import React from 'react';
import {range} from 'd3-array';
import {hexbin as d3hexbin} from 'd3-hexbin';
import {randomNormal} from 'd3-random';
import {scaleLinear} from 'd3-scale';
import {interpolateLab} from 'd3-interpolate';

const width = 960;
const height = 500;
let i = -1;
let theta = 0;
const deltaTheta = 0.3;
const n = 2000;
const k = 20;

let randomX = randomNormal(width / 2, 80);
let randomY = randomNormal(height / 2, 80);
let points = range(n).map(function() { return [randomX(), randomY()]; });

const color = scaleLinear()
  .domain([0, 20])
  .range([""rgba(0, 0, 0, 0)"", ""steelblue""])
  .interpolate(interpolateLab);

const hexbin = d3hexbin().radius(20);

export default class DynamicHexbin extends React.Component {
  constructor(props) {
    super(props);
    this.state = {points};
  }

  componentDidMount() {
    this.handle = window.setInterval(() => { this._update(); }, 20);
  }

  componentWillUnmount() {
    window.clearInterval(this.handle);
  }

  _update() {
    theta += deltaTheta;
    randomX = randomNormal(width / 2 + 80 * Math.cos(theta), 80),
    randomY = randomNormal(height / 2 + 80 * Math.sin(theta), 80);

    for (let j = 0; j < k; ++j) {
      i = (i + 1) % n;
      points[i][0] = randomX();
      points[i][1] = randomY();
    }

    this.setState({ points });
  }

  render() {
    const hexagons = hexbin(this.state.points).map(point => (
      <path
        d={hexbin.hexagon(19.5)}
        transform={`translate(${point.x}, ${point.y})`}
        fill={color(point.length)}
      />
    ));

    return (
      <svg width={width} height={height}>
        <g className=""hexagons"">
          {hexagons}
        </g>
      </svg>
    );
  }
}
",Generate a React component that displays a dynamic hexbin chart. The chart should have 2000 data points that are randomly distributed. The data points should move smoothly around the chart in a circular pattern. The hexagons should be colored according to the number of data points within them.
"import React from 'react'<% if (addStyle) { %>
import { makeStyles } from '@material-ui/core/styles'<% } %>
// import use<%= startCaseName %> from './use<%= startCaseName %>'<% if (addStyle) { %>
import styles from './<%= name %>.styles'

const useStyles = makeStyles(styles)<% } %>

function <%= name %>() {
  <% if (addStyle) { %>const classes = useStyles()<% } %>
  // const {} = use<%= startCaseName %>()

  return (
    <% if (addStyle) { %><div className={classes.root}><% } else { %><div><% } %>
      <span><%= name %> Component</span>
    </div>
  )
}

export default <%= name %>
",Create a React component that displays a message. Add styles if necessary.
"import React from 'react';
import ReactDOM from 'react-dom';

import { fetchAdminPendingNumRest } from ""./api"";

export const run = () => {
  // This is lazy
  fetchAdminPendingNumRest()
    .then(response => response.json())
    .then(response => {
      ReactDOM.render((
        `${response.num}`
        ), document.getElementById('admin-pending-num')
      );
    })
};
",Display real-time number of pending requests for a specified administrator.
"// Copyright © 2016, Ugo Pozo
//             2016, Câmara Municipal de São Paulo

// footer.js - footer component of the search interface.

// This file is part of Anubis.

// Anubis is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Anubis is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.


import React from 'react';
import {connect} from 'react-redux';
import {Toolbar, ToolbarGroup, ToolbarTitle} from 'material-ui';
import {PropTypes as RPropTypes} from 'react';

const getStateProps = state => ({
    footer: state.getIn(['applicationData', 'footer']),
});

@connect(getStateProps)
export default class Header extends React.Component {
    static propTypes = {
        footer: RPropTypes.string,
    }

    static contextTypes = {
        muiTheme: React.PropTypes.object,
    }

    render() {
        const color = this.context.muiTheme.flatButton.textColor;

        return (
            <Toolbar
                style={{
                    boxShadow: ""0 -10px 15px 0 rgba(0,0,0,0.4)"",
                    position: ""fixed"",
                    bottom: 0,
                    width: ""100%"",
                    fontFamily: ""'Roboto', sans-serif"",
                    zIndex: 1500,
                }}
            >
                <ToolbarGroup>
                    <ToolbarTitle
                        style={{color}}
                        text={this.props.footer}
                    />
                </ToolbarGroup>
            </Toolbar>
        );
    }
}


",Generate a React component using the Material-UI styling library that can be used as a footer for a web application. The component should accept a string as a prop and display that string as text in the footer. The footer should be fixed to the bottom of the screen and have a drop shadow.
"import { cache } from 'jsxstyle';
import App from './App';
import React from 'react';
import { StaticRouter } from 'react-router-dom';
import express from 'express';
import { renderToString } from 'react-dom/server';

const assets = require(process.env.RAZZLE_ASSETS_MANIFEST);

const server = express();

server
  .disable('x-powered-by')
  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))
  .get('/*', (req, res) => {
    cache.reset();
    let styles = '';
    cache.injectOptions({
      onInsertRule(css) {
        styles += css;
      },
    });
    const context = {};

    const markup = renderToString(
      <StaticRouter context={context} location={req.url}>
        <App />
      </StaticRouter>
    );

    if (context.url) {
      res.redirect(context.url);
    } else {
      res.send(
        `<!doctype html>
    <html lang="""">
    <head>
        <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />
        <meta charSet='utf-8' />
        <title>Welcome to Razzle</title>
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
        ${
          assets.client.css
            ? `<link rel=""stylesheet"" href=""${assets.client.css}"">`
            : ''
        }
        ${styles ? `<style type=""text/css"">${styles}</style>` : ''}
        ${
          process.env.NODE_ENV === 'production'
            ? `<script src=""${assets.client.js}"" defer></script>`
            : `<script src=""${assets.client.js}"" defer crossorigin></script>`
        }
    </head>
    <body>
        <div id=""root"">${markup}</div>
    </body>
</html>`
      );
    }
  });

export default server;
","Create code that sets up a server using the Razzle framework, including the necessary imports and express configuration. Use cache.reset() and cache.injectOptions() to manage CSS styles. Handle client and server-side rendering with StaticRouter. Return the server as an export."
"import React from 'react';
import PropTypes from 'prop-types';
import { Card, CardActions, CardTitle, CardText } from 'material-ui/Card';
import DeleteButton from './DeleteButton';
import EditButton from './EditButton';

const buttonStyle = {
  margin: '0.5em',
};
const cardStyle = {
  marginTop: '1em',
  marginBottom: '1em',
};
/* eslint-disable react/prefer-stateless-function */
/* eslint-disable react/jsx-boolean-value */
class CategoryCard extends React.Component {
  constructor() {
    super();
    this.state = { edit: false, shadow: 1 };
    this.onMouseOut = this.onMouseOut.bind(this);
    this.onMouseOut = this.onMouseOut.bind(this);
  }
  onMouseOver = () => { this.setState({ shadow: 3 }); }
  onMouseOut = () => { this.setState({ shadow: 1 }); }
  render() {
    const { item } = this.props;
    return (
      <Card
        style={cardStyle}
        zDepth={this.state.shadow}
        onMouseOver={this.onMouseOver}
        onFocus={this.onMouseOver}
        onMouseOut={this.onMouseOut}
        onBlur={this.onMouseOut}
      >
        <CardTitle
          title={item.name}
          actAsExpander={true}
          showExpandableButton={true}
        />
        <CardText expandable={true}>
          {item.description}
        </CardText>
        <CardActions expandable={true}>
          <EditButton style={buttonStyle} edit={this.props.edit} post={item}>
            Edit
          </EditButton>
          <DeleteButton
            style={buttonStyle}
            delete={this.props.delete}
            post={item}
          />
        </CardActions>
      </Card>
    );
  }
}

CategoryCard.propTypes = {
  delete: PropTypes.func.isRequired,
  edit: PropTypes.func.isRequired,
  item: PropTypes.object.isRequired,
};
export default CategoryCard;
","Design a React.js component that displays a card with a title and description. The card should have edit and delete buttons that trigger functions passed as props when clicked. When the mouse hovers over the card, the z-depth should increase, and when the mouse leaves, it should return to its default z-depth."
"'use strict';

import React from 'react';


export const ParameterDetailBody = React.memo(function ParameterDetailBody({ node, minHeight }){
    return (
        <div style={typeof minHeight === 'number' ? { minHeight } : null}>
            <div className=""information"">
                <div className=""row"">

                    <div className=""col col-sm-4 box"">
                        <span className=""text-600"">Parameter Name</span>
                        <h3 className=""text-300 text-truncate"">{ node.name || node.meta.name }</h3>
                    </div>

                    <div className=""col-sm-8 box"">
                        <span className=""text-600"">Value Used</span>
                        <h4 className=""text-300 text-truncate"">
                            <code>{ node.meta.run_data.value }</code>
                        </h4>
                    </div>

                </div>
            </div>
            <hr/>
        </div>
    );
});

","Create a React function called ParameterDetailBody that accepts three props: node, minHeight (optional), and returns a JSX element. Inside the function, use a ternary operator to conditionally apply a minHeight style to a div element. Within this div, include two more divs with classes ""information"" and ""row"". In the ""row"" div, create two child divs with classes ""col"" and ""col-sm-4 box"" for the first child, and ""col-sm-8 box"" for the second child. Fill these divs with specific text and data derived from the ""node"" prop, including the parameter name, value used, and other details."
"import React from 'react';
import { Route, IndexRoute } from 'react-router';

import App from './App';
import LoginPage from '../../pages/login/page';
import ViewPage from '../../pages/view/page';
import SpikePage from '../../pages/spike/page';


export default (
  <Route path=""/"" component={App}>
    <IndexRoute component={LoginPage} />
    <Route path=""spike/:id"" component={SpikePage} />
    <Route path=""view/:id"" component={ViewPage} />
  </Route>
);
","Generate the React Router code for a web application with an App component and three pages: LoginPage, SpikePage, and ViewPage. The LoginPage should be the default page, and the SpikePage and ViewPage should be accessible through the /spike/:id and /view/:id routes respectively."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let DeviceSignalWifi3Bar = (props) => (
  <SvgIcon {...props}>
    <path fillOpacity="".3"" d=""M12.01 21.49L23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l11.63 14.49.01.01.01-.01z""/><path d=""M3.53 10.95l8.46 10.54.01.01.01-.01 8.46-10.54C20.04 10.62 16.81 8 12 8c-4.81 0-8.04 2.62-8.47 2.95z""/>
  </SvgIcon>
);
DeviceSignalWifi3Bar = pure(DeviceSignalWifi3Bar);
DeviceSignalWifi3Bar.displayName = 'DeviceSignalWifi3Bar';
DeviceSignalWifi3Bar.muiName = 'SvgIcon';

export default DeviceSignalWifi3Bar;
","Generate a React component for rendering a Material Design wifi signal icon with three bars, where the strength of the signal is 3 out of 4."
"import React from 'react';

import requireAuth from 'utils/require-auth';

import VisibilityActionCreators from 'actions/VisibilityActionCreators';

import ActivitySection from 'components/ActivitySection.react';
import SidebarSection from 'components/SidebarSection.react';
import ToolbarSection from 'components/ToolbarSection.react';
import DialogSection from 'components/DialogSection.react';

const visibilitychange = 'visibilitychange';
var onVisibilityChange = () => {
  if (!document.hidden) {
    VisibilityActionCreators.createAppVisible();
  } else {
    VisibilityActionCreators.createAppHidden();
  }
};

class Main extends React.Component {
  componentWillMount() {
    document.addEventListener(visibilitychange, onVisibilityChange);

    if (!document.hidden) {
      VisibilityActionCreators.createAppVisible();
    }
  }

  constructor() {
    super();
  }


  render() {
    return (
      <div className=""app row"">

        <SidebarSection/>

        <section className=""main col-xs"">
          <ToolbarSection/>
          <DialogSection/>
        </section>

        <ActivitySection/>
      </div>
    );
  }
}

export default requireAuth(Main);
","Create React application that registers event listener to detect visibility change, and sends a message using actions to update the store when the visibility changes."
"import React from 'react';

const Panel = (props) => {

  let panelClass = ['rh-panel'],
      header, footer;

  if (props.title || props.icon || props.utilityButtons) {
    header = <PanelHeader {...props}/>;
  }

  if (props.footerNote || props.actionButtons) {
    footer = <PanelFooter {...props}/>;
  }

  return (<section className={panelClass.join(' ')}>
    {header}
    <div className=""rh-panel-content"">
      {props.children}
    </div>
    {footer}
  </section>);
};

export default Panel;

export const PanelHeader = ({title, icon, utilityButtons}) => {
  let headerIcon = icon ?
    <div className=""rh-panel-header-icon""><i className={'fa fa-' + icon}/>
    </div> : null;

    // TODO apply key to utility buttons
  return (<div className=""rh-panel-header"">
    {headerIcon}
    <div className=""rh-panel-header-label"">
      <h1>{title}</h1>
    </div>
    <div className=""rh-panel-header-buttons"">
      {utilityButtons ? utilityButtons.map(b => b) : null}
    </div>
  </div>);
};

export const PanelFooter = ({footerNote, actionButtons}) => {
  // TODO apply key to action buttons
  return (<div className=""rh-panel-footer"">
    <h1>{footerNote}</h1>
    <div className=""rh-panel-footer-buttons"">
      {actionButtons ? actionButtons.map(b => b) : null}
    </div>
  </div>);
};","Create a reusable React panel component with a header that includes a title, icon, and utility buttons, and a footer that includes a footer note and action buttons."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ContentAddBox = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z""/>
  </SvgIcon>
);
ContentAddBox = pure(ContentAddBox);
ContentAddBox.displayName = 'ContentAddBox';
ContentAddBox.muiName = 'SvgIcon';

export default ContentAddBox;
",Create a React component using the Material UI library that renders an SVG icon of a square with a plus sign inside it. The icon should be resizable and able to receive different colors.
"import React from 'react';
import PropTypes from 'prop-types';
import { QueryRenderer, graphql } from 'react-relay';
import relayEnvironment from 'app/config/relay';
import PageError from 'app/components/Common/PageError';
import PageLoader from 'app/components/Common/PageLoader';
import StoreLayout from 'app/components/Store/Main/StoreLayout';
import CategoriesGrid from 'app/components/Store/Category/CategoriesGrid';
import Paper from 'app/components/Store/Main/Paper';

const CategoriesRoute = ({
  categories,
  history,
  notifier,
  viewer,
}) => (
  <StoreLayout
    notifier={notifier}
    viewer={viewer}
  >
    <Paper paddings={['top', 'bottom', 'left', 'right']}>
      <h1>Shop By Categories</h1>
      <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters.</p>
    </Paper>
    <Paper paddings={['bottom', 'left', 'right']}>
      <CategoriesGrid
        categories={categories}
        onCategoryClick={(id) => history.push(`category/${id}`)}
      />
    </Paper>
  </StoreLayout>
);

CategoriesRoute.propTypes = {
  viewer: PropTypes.object.isRequired,
  notifier: PropTypes.object.isRequired,
  history: PropTypes.object.isRequired,
  categories: PropTypes.object.isRequired,
};

export default (props) => (
  <QueryRenderer
    environment={relayEnvironment}
    query={graphql`
      query CategoriesRouteQuery {
        categories {
          ...CategoriesGrid_categories
        }

        notifier {
          ...StoreLayout_notifier
        }

        viewer {
          ...StoreLayout_viewer
        }
      }
    `}
    render={({ error, props: relayProps }) => {
      if (error) {
        return <PageError error={error} />;
      }

      if (relayProps) {
        return <CategoriesRoute {...relayProps} {...props} />;
      }

      return <PageLoader />;
    }}
  />
);
","Generate a React component that lists categories from a Relay query and allows the user to navigate to a category page. The component should include a header, description, and grid of categories."
"import React from 'react';
import './Tabs.css';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { setSelection } from '../../../actions/Selection';
import PropTypes from 'prop-types';

class Tabs extends React.Component {

  static propTypes = {
    selection: PropTypes.object,
    children: PropTypes.node,
    setSelection: PropTypes.func,
  }

  constructor(props) {
    super(props);
    this.state = {
      selected: 0,
    };

    this.renderTitles = this.renderTitles.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.selection.objType === 'streams') {
      this.setState({
        selected: 1,
      });
    } else {
      this.setState({
        selected: 0,
      });
    }
  }

  onClick(idx, event) {
    event.preventDefault();
    this.setState({
      selected: idx,
    });
    this.props.setSelection(this.props.children[idx].props.label.toLowerCase());
  }

  renderTitles() {
    return this.props.children.map((child, idx) => {
      let selectedClass = idx === this.state.selected ? 'tabs-selected' : null;
      return (
        <a href=""#"" onClick={this.onClick.bind(this, idx)} key={idx}>
          <div className={selectedClass}>
            {child.props.label}
          </div>
        </a>
      );
    });
  }

  render() {
    return (
      <div className=""tabs-container"">
        <div className=""tabs-labels"">
          {this.renderTitles()}
        </div>
        <div className=""tabs-content"">
          {this.props.children[this.state.selected]}
        </div>
      </div>
    );
  }
}

const mapStateToProps = (state) => {
  return {
    selection: state.selection,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    setSelection: bindActionCreators(setSelection, dispatch),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(Tabs);
","Generate a javascript React component to display a set of tabbed panels.
The component should receive children components that will be used as the content of the tabs.
The component should have a state variable to keep track of the currently selected tab index.
The component should render a set of tab titles, one for each child component. When a tab title is clicked, the component should update the selected tab index and set the state accordingly.
The component should render the content of the currently selected tab.
The component should use the react-redux library to connect to the redux store and retrieve the current selection. If the selection is a stream, the component should set the selected tab index to 1, otherwise it should set the selected tab index to 0.
The component should have propTypes to validate the props that are passed to it."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from 'material-ui/SvgIcon';

let Texture = props =>
  <SvgIcon {...props}>
    <path d=""M19.51 3.08L3.08 19.51c.09.34.27.65.51.9.25.24.56.42.9.51L20.93 4.49c-.19-.69-.73-1.23-1.42-1.41zM11.88 3L3 11.88v2.83L14.71 3h-2.83zM5 3c-1.1 0-2 .9-2 2v2l4-4H5zm14 18c.55 0 1.05-.22 1.41-.59.37-.36.59-.86.59-1.41v-2l-4 4h2zm-9.71 0h2.83L21 12.12V9.29L9.29 21z"" />
  </SvgIcon>;

Texture = pure(Texture);
Texture.muiName = 'SvgIcon';

export default Texture;
",Design an SVG icon for a texture effect featuring a rectangular frame and a diagonal line with rounded edges.
"import React, { Component } from 'react';
import { connect } from 'react-redux';
import * as actions from '../../../actions/admin';

class CategoryList extends Component {
    render() {
        return (
            <div>
                <h2 className=""text-center"">Category List</h2>
            </div>
        );
    }
};

function mapStateToProps({ auth }) {
        return { auth };
}

export default connect(mapStateToProps, actions)(CategoryList);","Create a React component that displays a static message ""Category List"" in an h2 element with a text-center class for the text alignment."
"import React from 'react';
import RaisedButton from 'material-ui/RaisedButton';
import {fullWhite} from 'material-ui/styles/colors';
import ActionAndroid from 'material-ui/svg-icons/action/android';
import FontIcon from 'material-ui/FontIcon';

const style = {
  margin: 12,
};

const RaisedButtonExampleIcon = () => (
  <div>
    <RaisedButton
      icon={<ActionAndroid />}
      style={style}
    />
    <RaisedButton
      backgroundColor=""#a4c639""
      icon={<ActionAndroid color={fullWhite} />}
      style={style}
    />
    <RaisedButton
      linkButton={true}
      href=""https://github.com/callemall/material-ui""
      secondary={true}
      icon={<FontIcon className=""muidocs-icon-custom-github"" />}
      style={style}
    />
  </div>
);

export default RaisedButtonExampleIcon;
","Generate the code to create three React Material UI Raised Buttons, the first should have the default icon, the second should have a green background and a white icon, and the third should be a link button with a custom icon and a secondary style."
"""use strict"";
import React from 'react';
import ReactDOM from 'react-dom';
import JSONstat from ""jsonstat"";
import SortTable from ""./sortTable.js"";
import getJSONStatFromUrl from ""./remotedata.js"";
import dataset1128 from ""./staticdata.js""

const rootId = ""dataTable"";


function getParameterByName(name, url) {
    if (!url) {
      url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, ""\\$&"");
    var regex = new RegExp(""[?&]"" + name + ""(=([^&#]*)|&|#|$)""),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, "" ""));
}

function createTable() {
  // If 'source' query parameter is present, we try to retrieve and display the response in a table.
  let sourceUrl = getParameterByName('source');
  console.log(sourceUrl);
  if(sourceUrl){
    
    getJSONStatFromUrl(sourceUrl, 
      (failureString)=> {
        createErrorMessage(failureString)
      },
      (remoteJsonStatData)=> {
        ReactDOM.render(<SortTable rows={remoteJsonStatData.rows} 
                                   cols={remoteJsonStatData.cols} />,
                        document.getElementById(rootId))
      });
  }
  // If no source is present, then we use a predefined static data source. 
  else {
    let staticJsonStatData = JSONstat(dataset1128).Dataset(0).toTable({type: ""object""});
    ReactDOM.render(
      <SortTable rows={staticJsonStatData.rows} 
                 cols={staticJsonStatData.cols} />,
      document.getElementById(rootId)
    );  
  }  
}

function createErrorMessage(errorString){
  ReactDOM.render(
      <div> {errorString} </div>,
      document.getElementById(rootId)
    );
}

createTable();","Generate a React app that allows users to input a URL to a JSONstat data file or use predefined static data to display a sortable data table. If the URL is invalid, display an error message."
"/**
 * Created by mr470 on 02.04.2016.
 */

""use strict"";

import React, { Component } from 'react';


class LeftPanel extends Component{
    render() {
        const { children } = this.props;
        return (
            <div className=""column column-25"">
                {children}
            </div>
        );
    }
}
class RightPanel extends Component{
    render() {
        const { children } = this.props;
        return (
            <div className=""column column-75"">
                {children}
            </div>
        );
    }
}

export {
    RightPanel, LeftPanel
}



","Design two React component classes, LeftPanel and RightPanel, which render div elements with specific class names to define their width in a two-column layout."
"import React, { Component } from 'react';

/**
 * General component description.
 */
export default class MyComponent extends Component {
  render() {
    // ...
  }
}

MyComponent.defaultProps = {
    showPagination: true,
    paginationColor: '#09c',
    paginationSpace: 20
}

MyComponent.propTypes = {
  /** Description of prop ""children"". */
  children: React.PropTypes.node.isRequired,
  showPagination: React.PropTypes.bool,
  paginationColor: React.PropTypes.string,
  paginationSpace: React.PropTypes.number,
}
","Create a reusable React component called MyComponent that can be used for any purpose and has the following features:

- It has a required prop called ""children"" to render the content inside the component.
- It has an optional prop called ""showPagination"" which defaults to `true`.
- It has an optional prop called ""paginationColor"" which defaults to `#09c`.
- It has an optional prop called ""paginationSpace"" which defaults to `20`."
"import React from 'react';
import { FormPanel, URLField } from '@extjs/ext-react';

Ext.require('Ext.data.validator.Url');

export default function UrlFieldExample() {
    return (
        <FormPanel shadow>
            <URLField 
                placeholder=""http://www.domain.com"" 
                label=""URL"" 
                width=""200""
                validators=""url""
            />
        </FormPanel>
    )
} ","Create a React form with an Ext JS URL field that includes a placeholder, label, and width, and adds URL validation."
"import React from 'react';
import {withInfo} from '@storybook/addon-info';
import {action} from '@storybook/addon-actions';

import Confirm from 'app/components/confirm';
import Button from 'app/components/button';

export default {
  title: 'Core/Buttons/Confirm',
};

export const _Confirm = withInfo({
  text:
    'Component whose child is rendered as the ""action"" component that when clicked opens the ""Confirm Modal""',
  propTablesExclude: [Button],
})(() => (
  <div>
    <Confirm onConfirm={action('confirmed')} message=""Are you sure you want to do this?"">
      <Button priority=""primary"">Confirm on Button click</Button>
    </Confirm>
  </div>
));
","Generate a React Storybook component for a Confirm component that has a Confirm Modal that opens when clicking a child ""action"" component. Provide a detailed description of the props and exclude the Button component from the prop tables."
"// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import CSSClassnames from '../../../utils/CSSClassnames';
import Intl from '../../../utils/Intl';
import Props from '../../../utils/Props';

const CLASS_ROOT = CSSClassnames.CONTROL_ICON;
const COLOR_INDEX = CSSClassnames.COLOR_INDEX;

export default class Icon extends Component {
  render () {
    const { className, colorIndex } = this.props;
    let { a11yTitle, size, responsive } = this.props;
    let { intl } = this.context;

    const classes = classnames(
      CLASS_ROOT,
      `${CLASS_ROOT}-integration`,
      className,
      {
        [`${CLASS_ROOT}--${size}`]: size,
        [`${CLASS_ROOT}--responsive`]: responsive,
        [`${COLOR_INDEX}-${colorIndex}`]: colorIndex
      }
    );

    a11yTitle = a11yTitle || Intl.getMessage(intl, 'integration');

    const restProps = Props.omit(this.props, Object.keys(Icon.propTypes));
    return <svg {...restProps} version=""1.1"" viewBox=""0 0 24 24"" width=""24px"" height=""24px"" role=""img"" className={classes} aria-label={a11yTitle}><path fill=""none"" stroke=""#231F1F"" strokeWidth=""2"" d=""M5,21 L23,21 L23,9 L5,9 M19,15 L1,15 L1,3 L19,3""/></svg>;
  }
};

Icon.contextTypes = {
  intl: PropTypes.object
};

Icon.defaultProps = {
  responsive: true
};

Icon.displayName = 'Integration';

Icon.icon = true;

Icon.propTypes = {
  a11yTitle: PropTypes.string,
  colorIndex: PropTypes.string,
  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'huge']),
  responsive: PropTypes.bool
};

","Generate the React component for an integration icon. The icon should be an SVG and have a default size of `medium`. 
It should be responsive by default and have an `a11yTitle` prop for accessibility. 
The icon should use the `CSSClassnames` utility to generate the necessary CSS class names."
"import React from 'react';
import PropTypes from 'prop-types';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
import styles from './styles';


class ResponseTime extends React.Component {
  static propTypes = {
    average: PropTypes.number.isRequired,
    data: PropTypes.array.isRequired,
    max: PropTypes.number.isRequired,
  }

  render() {
    let latestResponse = 0;
    for (let i = this.props.data.length - 1; i >= 0; --i) {
      const response = this.props.data[i].time;
      if (response !== 0) {
        latestResponse = response;
        break;
      }
    }
    return (
      <div style={styles.content}>
        <h4>Response Time</h4>
        Last Response Time: {latestResponse} ms<br />
        Max Response Time: {this.props.max} ms<br />
        Average Response Time: {this.props.average} ms<br />
        <LineChart
          width={500}
          height={300}
          data={this.props.data}
          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
        >
          <XAxis dataKey=""name"" />
          <YAxis />
          <CartesianGrid strokeDasharray=""3 3"" />
          <Tooltip />
          <Legend />
          <Line type=""monotone"" dataKey=""time"" stroke=""#8884d8"" activeDot={{ r: 8 }} />
        </LineChart>
      </div>
    );
  }
}


export default ResponseTime;
","Create a React component that displays a line chart of response time data. The component should include the following features:
- A title of ""Response Time""
- A display of the latest response time
- A display of the maximum response time
- A display of the average response time
- A line chart of the response time data over time, with the x-axis labeled as ""Time"" and the y-axis labeled as ""Response Time (ms)""
- The ability to pass in the data, average response time, and maximum response time as props"
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionOpenInBrowser = (props) => (
  <SvgIcon {...props}>
    <path d=""M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6l-4 4h3v6h2v-6h3l-4-4z""/>
  </SvgIcon>
);
ActionOpenInBrowser = pure(ActionOpenInBrowser);
ActionOpenInBrowser.displayName = 'ActionOpenInBrowser';

export default ActionOpenInBrowser;
",Craft a component in React to delineate an icon representing the functionality of launching a URL in a web browser. Utilize Material Design as a guideline for the visual aesthetics.
"
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { actions } from 'react-native-navigation-redux-helpers';
import { Container, Header, Title, Content, Button, Icon, List, ListItem, Text } from 'native-base';

import styles from './styles';

const {
  replaceAt,
} = actions;

class NHBasicList extends Component {

  static propTypes = {
    replaceAt: React.PropTypes.func,
    navigation: React.PropTypes.shape({
      key: React.PropTypes.string,
    }),
  }

  replaceAt(route) {
    this.props.replaceAt('basicList', { key: route }, this.props.navigation.key);
  }

  render() {
    return (
      <Container style={styles.container}>
        <Header>
          <Button transparent onPress={() => this.replaceAt('list')}>
            <Icon name=""ios-arrow-back"" />
          </Button>

          <Title>Basic List</Title>
        </Header>

        <Content>
          <List>
            <ListItem >
              <Text>Simon Mignolet</Text>
            </ListItem>
            <ListItem>
              <Text>Nathaniel Clyne</Text>
            </ListItem>
            <ListItem>
              <Text>Dejan Lovren</Text>
            </ListItem>
            <ListItem>
              <Text>Mama Sakho</Text>
            </ListItem>
            <ListItem>
              <Text>Alberto Moreno</Text>
            </ListItem>
            <ListItem>
              <Text>Emre Can</Text>
            </ListItem>
            <ListItem>
              <Text>Joe Allen</Text>
            </ListItem>
            <ListItem>
              <Text>Phil Coutinho</Text>
            </ListItem>
          </List>
        </Content>
      </Container>
    );
  }
}

function bindAction(dispatch) {
  return {
    replaceAt: (routeKey, route, key) => dispatch(replaceAt(routeKey, route, key)),
  };
}

const mapStateToProps = state => ({
  navigation: state.cardNavigation,
});

export default connect(mapStateToProps, bindAction)(NHBasicList);
",Generate React Native code for a screen that displays a list of elements. The first button should take the user to a previous screen.
"/**
 * React Starter Kit (https://www.reactstarterkit.com/)
 *
 * Copyright © 2014-2016 Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

import React, { Component } from 'react';
import s from './Footer.scss';
import withStyles from '../../decorators/withStyles';
import Link from '../Link';

@withStyles(s)
class Footer extends Component {

  render() {
    return (
      <div className={s.root}>
        <div className={s.container}>
          <span className={s.text}>© Your Company</span>
          <span className={s.spacer}>·</span>
          <a className={s.link} href=""/"" onClick={Link.handleClick}>Home</a>
          <span className={s.spacer}>·</span>
          <a className={s.link} href=""/privacy"" onClick={Link.handleClick}>Privacy</a>
          <span className={s.spacer}>·</span>
          <a className={s.link} href=""/not-found"" onClick={Link.handleClick}>Not Found</a>
        </div>
      </div>
    );
  }

}

export default Footer;
","Create a React component that displays a website footer with the following elements:
- A copyright notice with the text ""© Your Company.""
- A separator (""·"")
- A navigation link with the text ""Home"" that links to the root URL (""/"")
- Another separator (""·"")
- Another navigation link with the text ""Privacy"" that links to the ""/privacy"" URL
- Another separator (""·"")
- Another navigation link with the text ""Not Found"" that links to the ""/not-found"" URL
- Style the footer using SCSS with the following class names:
  - `.root` for the main footer container
  - `.container` for the inner container that holds the footer content
  - `.text` for the copyright notice
  - `.spacer` for the separators
  - `.link` for the navigation links"
"import path from 'path';
import React from 'react';
import Router from 'react-router';
import Hapi from 'hapi';
import _merge from 'lodash.merge';
import routes from './routes.jsx';
import component from './components/Html.jsx';

const server = new Hapi.Server();

server.connection({port: 8000});

server.route({
  method: 'GET',
  path: '/hello',
  handler: function (request, reply) {
    reply('don\'t worry, be hapi!');
  }
});

server.route({
  method: 'GET',
  path: '/js/{param*}',
  handler: {
    directory: {
      path: './public/js',
      listing: true,
      index: true
    }
  }
});

server.route({
  method: 'GET',
  path: '/images/{param*}',
  handler: {
    directory: {
      path: './public/images',
      listing: true,
      index: true
    }
  }
});

server.ext('onPostHandler', (request, replay) => {
  Router.run(routes, request.url.path, (Handler, state) => {
    if (!state.routes.length) {
      return replay.continue();
    }

    let html = React.renderToStaticMarkup(component({
      title: 'test',
      markup: React.renderToString(React.createFactory(Handler)())
    }));

    return replay('<!DOCTYPE html>' + html);
  });
});

server.start(() => {
  console.log('Server running at: ' + server.info.uri);
});","Generate a javascript file that uses hapi.js and react-router to create a server that serves static js and image files, routes a '/hello' request, and renders react components on the server."
"import React from 'react';
import Icon from '../Icon';

export default class BorderClearIcon extends Icon {
  getSVG(){return <svg xmlns=""http://www.w3.org/2000/svg"" width=""48"" height=""48"" viewBox=""0 0 48 48""><path d=""M14 10h4V6h-4v4zm0 16h4v-4h-4v4zm0 16h4v-4h-4v4zm8-8h4v-4h-4v4zm0 8h4v-4h-4v4zM6 42h4v-4H6v4zm0-8h4v-4H6v4zm0-8h4v-4H6v4zm0-8h4v-4H6v4zm0-8h4V6H6v4zm16 16h4v-4h-4v4zm16 8h4v-4h-4v4zm0-8h4v-4h-4v4zm0 16h4v-4h-4v4zm0-24h4v-4h-4v4zm-16 0h4v-4h-4v4zM38 6v4h4V6h-4zm-16 4h4V6h-4v4zm8 32h4v-4h-4v4zm0-16h4v-4h-4v4zm0-16h4V6h-4v4z""/></svg>;}
};",Create a React component that renders a border clear SVG icon. The SVG should have a width and height of 48 pixels.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageDehaze = (props) => (
  <SvgIcon {...props}>
    <path d=""M2 15.5v2h20v-2H2zm0-5v2h20v-2H2zm0-5v2h20v-2H2z""/>
  </SvgIcon>
);
ImageDehaze = pure(ImageDehaze);
ImageDehaze.displayName = 'ImageDehaze';
ImageDehaze.muiName = 'SvgIcon';

export default ImageDehaze;
","Create a React component named `ImageDehaze` that renders an SVG icon with three horizontal lines, similar to the Material Design ""dehaze"" icon. The icon should be responsive to its container."
"import React from 'react';
import MarkdownDocs from 'docs/src/modules/components/MarkdownDocs';
import { prepareMarkdown } from 'docs/src/modules/utils/parseMarkdown';

const pageFilename = 'api/table-pagination';
const requireRaw = require.context('!raw-loader!./', false, /\/table-pagination\.md$/);

export default function Page({ docs }) {
  return <MarkdownDocs docs={docs} />;
}

Page.getInitialProps = () => {
  const { demos, docs } = prepareMarkdown({ pageFilename, requireRaw });
  return { demos, docs };
};
",Extract the description from the given code snippet.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionSwapVerticalCircle = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM6.5 9L10 5.5 13.5 9H11v4H9V9H6.5zm11 6L14 18.5 10.5 15H13v-4h2v4h2.5z""/>
  </SvgIcon>
);
ActionSwapVerticalCircle = pure(ActionSwapVerticalCircle);
ActionSwapVerticalCircle.displayName = 'ActionSwapVerticalCircle';
ActionSwapVerticalCircle.muiName = 'SvgIcon';

export default ActionSwapVerticalCircle;
","Create a React component with a pure higher order component that wraps an SVG icon with a specific path and name, ensuring it can be imported and used in a React application."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ContentUndo = (props) => (
  <SvgIcon {...props}>
    <path d=""M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z""/>
  </SvgIcon>
);
ContentUndo = pure(ContentUndo);
ContentUndo.displayName = 'ContentUndo';
ContentUndo.muiName = 'SvgIcon';

export default ContentUndo;
",Create a React icon component that renders the Material Design Undo icon.
"import 'babel-polyfill'
import React from 'react'
import { render } from 'react-dom'
import { Provider } from 'react-redux'
import App from './containers/App'
require('./styles/app.css')
import configureStore from './store/configureStore'

const store = configureStore()

render(
  <Provider store={store}>
    <div className='app'>
      <App />
    </div>
  </Provider>,
  document.getElementById('root')
)
","Provide the code snippet to wire up a React application with Redux using the Provider, store, and application container."
"import React from 'react'
import ReactHighcharts from 'react-highcharts'
import HighchartsExporting from 'highcharts-exporting'
import HighchartsMore from 'highcharts-more'

HighchartsMore(ReactHighcharts.Highcharts)
HighchartsExporting(ReactHighcharts.Highcharts)

const config = {
  chart: {
    polar: true,
  },
  xAxis: {
    categories: [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ],
  },
  series: [
    {
      data: [
        29.9,
        71.5,
        106.4,
        129.2,
        144.0,
        176.0,
        135.6,
        148.5,
        216.4,
        194.1,
        95.6,
        54.4,
      ],
    },
  ],
}

const HighMoreComponent = () => {
  return <ReactHighcharts config={config} />
}

export default HighMoreComponent
",Generate a React component for React Highcharts that displays a polar chart with monthly temperature data and allows users to export the chart as an image.
"import React, { Component } from 'react';
import { Link } from 'react-router-dom';

import { groupURI } from '../config/urls';
import apiFetch from '../apiFetch';

import LoginLink from './LoginLink';
import LogoutBtn from './LogoutBtn';

class Header extends Component {
  state = {
    group: null,
  };
  componentWillMount() {
    this.fetchData();
  }
  async fetchData() {
    const group = await this.getGroup();
    this.setState({
      group,
    });
  }
  async getGroup() {
    return await apiFetch(groupURI());
  }
  render() {
    const { group } = this.state;
    const { me, onLoginClick, onLogoutClick, pathname } = this.props;
    return (
      <header className=""header"">
        <div className=""container"">
          <div className=""row"">
            {group != null &&
              <Link to=""/"" className=""logo"">
                <div>

                  <img
                    src=""/mancreact512.png""
                    alt={group.name}
                    width=""100""
                  />

                </div>
                <div className=""logo-title"">{group.name}</div>
              </Link>}
            {group != null &&
              <div className=""members"">
                <strong>{group.members}</strong> members
              </div>}
            <div className=""signin"">
              {!me
                ? <LoginLink onClick={onLoginClick} pathname={pathname} />
                : <div>
                    <img
                      className=""avatar""
                      src={me.photo.thumb_link}
                      alt={me.name}
                    />
                    <span className=""account-name"">
                      Hello, {me.name}!
                    </span>
                    <LogoutBtn onClick={onLogoutClick} />
                  </div>}
            </div>
          </div>
        </div>
      </header>
    );
  }
}

export default Header;
","Generate the React component's code for a header that displays a user's profile picture, name, and logout button when logged in, and a login link when logged out. The header should also display the group logo and name, as well as the number of members in the group."
"import React, { Component } from 'react';
import Badge from 'material-ui/Badge';

export default class RunVariable extends Component {

  render() {
    const { statisticsAlbum } = this.props;
    return (
      <span>
        <Badge
          badgeContent={statisticsAlbum.learned}
          primary={true}
          secondary={false}
          badgeStyle={{top: 5, right: 1}}
          title=""Learned words""
        />

        <Badge
          badgeContent={statisticsAlbum.length}
          secondary={true}
          badgeStyle={{top: 5, right: 1}}
          title=""Size album""
        />
      </span>

    );
  }

}
","Create a React component that displays two badges. The first badge should show the number of learned words in an album, and the second badge should show the total number of words in the album. The badges should be positioned at the top right corner of the component."
"import React from 'react';
import PropTypes from 'prop-types';

import Abilities from 'parser/core/modules/Abilities';

import './Cooldowns.scss';
import Lane from './Lane';

class Cooldowns extends React.PureComponent {
  static propTypes = {
    start: PropTypes.number.isRequired,
    end: PropTypes.number.isRequired,
    secondWidth: PropTypes.number.isRequired,
    eventsBySpellId: PropTypes.instanceOf(Map).isRequired,
    abilities: PropTypes.instanceOf(Abilities).isRequired,
  };

  getSortIndex([spellId, events]) {
    const ability = this.props.abilities.getAbility(spellId);
    if (!ability || ability.timelineSortIndex === undefined) {
      return 1000 - events.length;
    } else {
      return ability.timelineSortIndex;
    }
  }

  renderLanes(eventsBySpellId, growUp) {
    return Array.from(eventsBySpellId)
      .sort((a, b) => this.getSortIndex(growUp ? b : a) - this.getSortIndex(growUp ? a : b))
      .map(item => this.renderLane(item));
  }
  renderLane([spellId, events]) {
    return (
      <Lane
        key={spellId}
        spellId={spellId}
        fightStartTimestamp={this.props.start}
        fightEndTimestamp={this.props.end}
        secondWidth={this.props.secondWidth}
      >
        {events}
      </Lane>
    );
  }
  render() {
    const { eventsBySpellId } = this.props;
    return (
      <div className=""cooldowns"">
        {this.renderLanes(eventsBySpellId, false)}
      </div>
    );
  }
}

export default Cooldowns;
","Generate a React component that renders a timeline of ability cooldowns. The component should accept the following props:
- start: The start time of the fight in milliseconds.
- end: The end time of the fight in milliseconds.
- secondWidth: The width of each second in the timeline in pixels.
- eventsBySpellId: A map of spell IDs to an array of ability events.
- abilities: An Abilities instance."
"import _$ from 'jquery';
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import jsdom from 'jsdom';
import chai, { expect } from 'chai';
import chaiJquery from 'chai-jquery';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import reducers from '../src/reducers';

global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
global.window = global.document.defaultView;
global.navigator = global.window.navigator;
const $ = _$(window);

chaiJquery(chai, chai.util, $);

function renderComponent(ComponentClass, props = {}, state = {}) {
  const componentInstance =  TestUtils.renderIntoDocument(
    <Provider store={createStore(reducers, state)}>
      <ComponentClass {...props} />
    </Provider>
  );

  return $(ReactDOM.findDOMNode(componentInstance));
}

$.fn.simulate = function(eventName, value) {
  if (value) {
    this.val(value);
  }
  TestUtils.Simulate[eventName](this[0]);
};

export {renderComponent, expect};
",Create a helper function that renders a React component within a Redux store for integration testing. Include methods for simulating events on the component and assertions using Chai Jquery.
"import React from 'react';

import LoginStore from 'stores/LoginStore';

export default (Component) => {
  return class Authenticated extends React.Component {
    static willTransitionTo(transition) {
      if (!LoginStore.isLoggedIn()) {
        transition.redirect('/auth', {}, {'nextPath': transition.path});
      }
    }

    render() {
      return <Component {...this.props}/>;
    }
  };
};
","Create a React component that wraps any other component and requires the user to be logged in to access it. If the user is not logged in, they should be redirected to a login page."
"import React from 'react';
import PropTypes from 'prop-types';
import { Field, reduxForm } from 'redux-form';

import {validate} from '../../utils';
import '../../assets/styles/common/form.scss';

const renderField = (field) => {
  let {input, label, type, meta: { touched, error }, input: { name }} = field;

  let renderErrors = () => (
    <div className=""input-error"">
      <span className=""error"">{error}</span>
    </div>
  );

  return (
    <div className=""form-group"">
      <label htmlFor={name}>{label}</label>
      <input type={type} {...input} className={(touched && error) ? 'form-control invalid': 'form-control'} />
      {touched && error ? renderErrors(): null}
    </div>
  );
};

let CreateUserForm = ({handleSubmit}) => {
  let submit = () => {

  };

  return (
    <form noValidate autoComplete=""off"" onSubmit={handleSubmit(submit)}>
      <Field label=""Name""  name=""name"" component={renderField} />
      <Field  label=""Email address"" name=""email"" component={renderField} />
      <button type=""submit"" className=""btn btn-primary"">Submit</button>
    </form>
  );
};

CreateUserForm.propTypes = {
  handleSubmit: PropTypes.func,
  pristine: PropTypes.bool,
  submitting: PropTypes.bool,
  reset: PropTypes.func
};

CreateUserForm = reduxForm({
  form: 'addNewUserForm',
  validate
})(CreateUserForm);

export default CreateUserForm;
","Description: Generate a React component to validate and submit user input data.
The component should render a form with input fields and a submit button.
When the form is submitted, the form data should be validated using the provided validate function,
and the submit function should be called with the validated data.
The form should display appropriate error messages if validation fails."
"/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

import React from 'react';
import tiniestCat from './assets/tiniest-cat.jpg';

export default () =>
  <img id=""feature-image-inclusion"" src={tiniestCat} alt=""tiniest cat"" />;
","Create a React component that imports an image called ""tiniest-cat.jpg"" from the ""assets"" folder, sets the image's source attribute to that image, and adds the alt text ""tiniest cat"" to the image."
"// Dependencies.
import React from 'react'
import PropTypes from 'prop-types'

// Define class.
class GridOffset extends React.Component {
  // Render method.
  render () {
    // Expose UI.
    return (
      <div className='grid-offset'>
        {this.props.children}
      </div>
    )
  }
}

// Validation.
GridOffset.propTypes = {
  children: PropTypes.node
}

// Export.
export default GridOffset
",Create a React component that renders a div with a class name of 'grid-offset' and serves as a container for child components.
"// @flow

import React from 'react';

class MyComponent extends React.Component<*, Props> {
  static defaultProps = {};

  defaultProps: T;
  static props: T;
  static state: T;
  a: T;
  b = 5;
  c: T = 5;
  method() {}
}

const expression = () =>
  class extends React.Component<*, Props> {
    static defaultProps = {};

    defaultProps: T;
    static props: T;
    static state: T;
    a: T;
    b = 5;
    c: T = 5;
    method() {}
  }
","Describe the Python-esque syntax and flow type definitions, also providing an example expression."
"import React from 'react';
import {
  StyleSheet,
  Image,
  View,
  Dimensions,
} from 'react-native';

const { width } = Dimensions.get('window');

const styles = StyleSheet.create({
  container: {
    paddingBottom: 30,
  },
  backgroundImg: {
    resizeMode: 'cover',
    height: 150,
  },
  profileImg: {
    borderWidth: 2,
    borderColor: '#fff',
    borderRadius: 4,
    width: 100,
    height: 100,
    position: 'absolute',
    alignSelf: 'center',
    top: 75,
    left: (width / 2) - 50,
  },
  shadow: {
    position: 'absolute',
    alignSelf: 'center',
    top: 75,
    left: (width / 2) - 50,
    borderRadius: 4,
    width: 100,
    height: 100,
    shadowColor: '#D8D8D8',
    shadowRadius: 2,
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.8,
  },
  title: {
    flex: 1,
    textAlign: 'center',
    fontSize: 30,
    marginTop: 35,
    marginBottom: 10,
    fontWeight: '300',
  },
  summary: {
    paddingHorizontal: 10,
  },
});

const ProfileHeader = ({ profileImg, backgroundImg, circle, blurRadius }) => (
  <View style={styles.container}>
    <Image
      blurRadius={blurRadius}
      source={{ uri: backgroundImg }}
      style={styles.backgroundImg}
    />
    <View style={[styles.shadow, { borderRadius: circle ? 50 : 0 }]} />
    <Image
      source={{ uri: profileImg }}
      style={[styles.profileImg, { borderRadius: circle ? 50 : 0 }]}
    />
  </View>
);

ProfileHeader.defaultProps = {
  circle: false,
  blurRadius: 0,
};

ProfileHeader.propTypes = {
  title: React.PropTypes.string,
  summary: React.PropTypes.string,
  profileImg: React.PropTypes.string,
  backgroundImg: React.PropTypes.string,
  circle: React.PropTypes.bool,
  blurRadius: React.PropTypes.number,
};

export default ProfileHeader;
","Design a React Native component that displays a profile header with a background image, a profile image, and a title and summary text. The profile image should be circular if specified, and the background image should be blurred with a specified radius."
"import classNames from 'classnames';
import React from 'react';
import elementType from 'react-prop-types/lib/elementType';

import { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';

const propTypes = {
  componentClass: elementType,
};

const defaultProps = {
  componentClass: 'div',
};

class CarouselCaption extends React.Component {
  render() {
    const { componentClass: Component, className, ...props } = this.props;
    const [bsProps, elementProps] = splitBsProps(props);

    const classes = getClassSet(bsProps);

    return (
      <Component
        {...elementProps}
        className={classNames(className, classes)}
      />
    );
  }
}

CarouselCaption.propTypes = propTypes;
CarouselCaption.defaultProps = defaultProps;

export default bsClass('carousel-caption', CarouselCaption);
","Provide code to create a React component that can render a carousel caption, complete with a customized appearance using CSS classes."
"import './css/index.css';

import React from 'react';
import { render } from 'react-dom';
import { AppContainer } from 'react-hot-loader';
import { Provider } from 'react-redux';
import configureStore from './store';
import { BrowserRouter } from 'react-router-dom';
import createRoutes from './routes';

const rootEl = document.getElementById('root');

const App = ({ store }) => {
  if (!store) {
    let state = null;
    try {
      state = JSON.parse(window.__INITIAL_STATE__);
    } catch (err) {
      // TODO send to Sentry
    }
    store = configureStore(state);
  }

  const routes = createRoutes(store);

  return (
    <Provider store={store}>
      <BrowserRouter>
        {routes}
      </BrowserRouter>
    </Provider>
  );
};

render(
  <App />,
  rootEl
);

if (module.hot) {
  module.hot.accept('./App', () => {
    const NextApp = <App />;
    render(
      <AppContainer>
         <NextApp />
      </AppContainer>,
      rootEl
    );
  });
}
","Generate the front-end portion of a React application that uses React Router for navigation, Redux for state management, and Webpack for module bundling."
"import React from 'react';
import { Route, Switch } from 'react-router-dom';
import Login from './components/login';
import MainScreen from './components/main-screen';
import PrivateRoute from './components/private-route';

const App = () => (
  <Switch>
    <PrivateRoute path=""/"" exact component={MainScreen} />
    <Route path=""/login"" exact component={Login} />
  </Switch>
);

export default App;
","Create a React application with a login form and a main interface screen. The main interface should only be accessible after logging in, while the login form should be displayed when the user is not logged in. Use React Router for navigation and a PrivateRoute component to protect the main interface."
"import React from 'react';
import IconBase from 'react-icon-base';

export default class FaExclamation extends React.Component {
    render() {
        return (
            <IconBase viewBox=""0 0 40 40"" {...this.props}>
                <g><path d=""m24.4 27.9v5q0 0.5-0.4 1t-1 0.4h-5.7q-0.6 0-1-0.4t-0.4-1v-5q0-0.6 0.4-1t1-0.5h5.7q0.6 0 1 0.5t0.4 1z m0.7-23.6l-0.6 17.1q0 0.6-0.5 1t-1 0.5h-5.7q-0.6 0-1-0.5t-0.5-1l-0.6-17.1q0-0.6 0.4-1t1-0.4h7.1q0.6 0 1 0.4t0.4 1z""/></g>
            </IconBase>
        );
    }
}
",Generate the React component code for the Font Awesome Exclamation icon. The icon should have a viewBox of 40x40 and use the specified path data.
"import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import styled from 'styled-components';
import Container from '../../../components/Container';
import Oscillator from './Oscillator';
import RoundButton from '../../../components/Button/RoundButton';
import * as actions from '../../actions';
import { getOscillators } from '../../selectors';

const Bank = styled.div`
  display: flex;
  flex-direction: row;
  align-items: flex-start;

  & > div:not(:first-of-type) {
    margin-left: 5px;
  }
`;

const OscillatorBank = ({
  addOscillator,
  oscillators,
  setOscillatorSetting,
  removeOscillator
}) => {
  const addButton = <RoundButton active click={addOscillator} text=""+"" />;
  return (
    <Container full title=""Oscillators"" titleControl={addButton}>
      <Bank>
        {oscillators.map((o, i) => {
          return (
            <Oscillator
              key={i}
              oscillator={o}
              remove={removeOscillator}
              setValue={setOscillatorSetting}
            />
          );
        })}
      </Bank>
    </Container>
  );
};

OscillatorBank.propTypes = {
  addOscillator: PropTypes.func.isRequired,
  oscillators: PropTypes.array.isRequired,
  setOscillatorSetting: PropTypes.func.isRequired,
  removeOscillator: PropTypes.func.isRequired
};

const mapStateToProps = state => {
  return {
    oscillators: getOscillators(state)
  };
};

export default connect(mapStateToProps, actions)(OscillatorBank);
","Generate the React code for the OscillatorBank component, which should display a bank of Oscillator components. Each oscillator should be able to be removed, and there should be a button to add a new oscillator. The component should be connected to the Redux store to get the list of oscillators and to dispatch actions to add and remove oscillators."
"import React from 'react'
import ReactDom from 'react-dom'
import { wrap } from '@cicada/react-lego'
import Case from '../Case'
import Card  from './Card'

const Root = Card.Root.extend`
  border: 1px dashed black;
`

const Text = ({children}) => {

  return <div>{children.map(child => {
    if (/^name:/.test(child) ) return '姓名: '
    if (/^age:/.test(child)) return '年龄: '
    return child
  })}</div>
}

ReactDom.render((
  <div>
    <Case title=""普通 Card"">
        <Card name=""jim"" age={11} />
    </Case>
    <Case title=""传入了 Root， 简单演示替换样式"">
      <Card name=""jim"" age={11} Root={Root}/>
    </Case>
    <Case title=""传入了 Text， 简单演示替换文案"">
      <Card name=""jim"" age={11} Text={Text}/>
    </Case>
  </div>
), document.getElementById('root'))
",Generate the React code snippet for multiple Card components with different props. Demonstrate the use of the wrap method to modify component props and styles.
"import React from 'react';

import { Box, InfiniteScroll, Text } from 'grommet';

const allItems = Array(240)
  .fill()
  .map((_, i) => `item ${i + 1}`);

const Example = (props) => (
  // Uncomment <Grommet> lines when using outside of storybook
  // <Grommet theme={...}>
  <InfiniteScroll items={allItems} {...props}>
    {(item) => (
      <Box key={item} pad=""medium"" border={{ side: 'bottom' }} align=""center"">
        <Text>{item}</Text>
      </Box>
    )}
  </InfiniteScroll>
  // </Grommet>
);

export const ShowBefore = () => <Example replace show={27} />;

ShowBefore.storyName = 'Replace, show before step';

ShowBefore.parameters = {
  chromatic: { disable: true },
};

export default {
  title: 'Utilities/InfiniteScroll/Replace, show before step',
};
","Create a React component named ""Example"" that uses the InfiniteScroll component from the grommet library. The InfiniteScroll component should be populated with an array of 240 items, each of which is a string like ""item 1"", ""item 2"", etc. The component should render a Box for each item with a Text element inside. The InfiniteScroll component should be configured to replace its content when the scroll position reaches the ""27""th item, and to show the new content before the current content."
"import React from 'react';
import { Text, TouchableOpacity } from 'react-native';
import { actionCreators as navigationActions } from 'react-native-renavigate';

import PostDetailContainer from './PostDetailContainer';
import PostListContainer from './PostListContainer';
import EmptyView from './EmptyView';

const navButtonStyle = { padding: 5, color: 'blue' };
const titleStyle = { fontWeight: 'bold' };

export default {
  DETAIL: (params) => ({
    component: PostDetailContainer,
    params,
    leftButton: (dispatch) => {
      const goBack = () => {
        dispatch(navigationActions.pop());
      };
      return (
        <TouchableOpacity onPress={goBack}>
          <Text style={navButtonStyle}>Back</Text>
        </TouchableOpacity>
      );
    },
    rightButton: () => {
      return <Text style={navButtonStyle}>FAV</Text>;
    },
    title: () => {
      return <Text style={[navButtonStyle, titleStyle]}>{ params.title }</Text>;
    }
  }),
  LIST: (params) => ({
    component: PostListContainer,
    params,
    title: () => {
      return <Text style={[titleStyle, navButtonStyle]}>YOUR POSTS</Text>;
    }
  }),
  EMPTY_VIEW: (params) => ({
    component: EmptyView,
    params,
    title: () => {
      return <Text style={[titleStyle, navButtonStyle]}>EMPTY VIEW</Text>;
    }
  })
};
","Create an object representing navigation options for a React Native application. Include options for a detail view, a list view, and an empty view. For each view, specify the component to render, any parameters to pass to the component, and the navigation bar options, including buttons and title."
"import React, { Component } from 'react';
import { connect } from 'react-redux';
import log from 'logger';
import { queryItems, toggleItem } from '../../actions/items';
import { AddItemComponent, ItemListComponent } from '../Items';
import './Items.scss';

class ItemListContainer extends Component {

  componentDidMount() {
    log.info('Fetching Items');
    this.props.queryItems();
  }

  render() {
    if (this.props.items != undefined) {
      return (
        <div className=""itemPage"">
          <AddItemComponent />
          <ItemListComponent
            records={this.props.items}
            status={this.props.status}
            toggleItem={this.props.toggleItem}/>
        </div>
      );
    }
    else {
      return null;
    }
  }
}

const mapStateToProps = (state) => ({
  items: state.app.items.data,
  status: {
    isFetching: state.app.items.isFetching,
    ...state.app.appErrors,
  },
});

export default connect(
  mapStateToProps,
  { queryItems, toggleItem }
)(ItemListContainer);


","Generate the code for a React component that renders a list of items. The component should include a form for adding new items, a list of existing items, and a button to toggle the status of each item. The component should also connect to a Redux store to retrieve items and toggle their status."
"import 'babel/polyfill';
import React from 'react';
import TinyMCE from 'react-tinymce';
import Mention from '../../Mention';
import simpleDataSource from './simple';

const plugins = [
  'autolink',
  'autoresize',
  'code',
  'image',
  'link',
  'media',
  'mention',
  'tabfocus'
];

export default function initializeEditor() {
  var domNode = createContainer();

  React.render(
    <div>
      <TinyMCE
        content={''}
        config={{
          extended_valid_elements: 'blockquote[dir|style|cite|class|dir<ltr?rtl],iframe[src|frameborder|style|scrolling|class|width|height|name|align],pre',
          menubar: false,
          plugins: plugins.join(','),
          skin: 'kindling',
          statusbar: false,
          theme: 'kindling',
          toolbar: 'bold italic underline strikethrough | bullist numlist blockquote | link unlink | image media | removeformat code'
        }}
      />
      <Mention
        dataSource={simpleDataSource}
        delimiter={'@'}
      />
    </div>
  , domNode);

  return window.tinymce;
}

function createContainer() {
  const root = document.createElement('div');
  const id = 'root';
  root.setAttribute('id', id);
  document.body.appendChild(root);
  return document.getElementById(id);
}
",Create a React component that initializes a WYSIWYG editor with the TinyMCE library and includes a mention feature allowing users to tag other users in the text.
"import React, { Component } from 'react';
import Modal from 'react-modal';
import MdDelete from 'react-icons/lib/md/delete';
const cookie = require('react-cookie')
const axios = require('axios');

class TrashLookThree extends React.Component {
    constructor(props) {
        super(props);


        this.trashLook = this.trashLook.bind(this);
    }
    trashLook() {
        const user = cookie.load('user');
        const emailQuery = user.email;
        const lookId = user.looks[2]._id;
        console.log(lookId)
        axios.put('https://seemedate.herokuapp.com/api/see/delete-look', {
            emailQuery: emailQuery,
            lookId: lookId
        },
            { headers: { Authorization: cookie.load('token') } })
            .then((response) => {
                cookie.save('token', response.data.token, { path: '/' });
                cookie.save('user', response.data.user, { path: '/' });
                this.props.remove();
                // window.location.reload()
            })
            .catch((error) => {
                console.log(error);
            });
    }
    render() {
        return (
            <div>
                <button className=""trash-look"" onClick={this.trashLook}><MdDelete /></button>
            </div>
        );
    }
}

export default TrashLookThree;","Create a React component that allows a user to trash a specific look by sending a request to a backend API. The component should use the react-modal, react-icons/lib/md/delete, react-cookie, and axios libraries. The component should be able to remove the look from the UI after it has been trashed."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let NotificationSync = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z""/>
  </SvgIcon>
);
NotificationSync = pure(NotificationSync);
NotificationSync.displayName = 'NotificationSync';

export default NotificationSync;
","Generate a React component that renders an SVG icon with the following design: A bell with a sync icon inside it. The bell should be outlined and the sync icon should be filled. The component should be pure and have a display name of ""NotificationSync""."
"import {Entity} from 'aframe-react';
import React from 'react';
import Back from './buttons/Back';
import BookSeat from './buttons/BookSeat';
import ChangeSeat from './buttons/ChangeSeat';

export default class Navigation extends React.Component {

  opacity = { x: 0 };

  constructor(props) {
    super(props);

    this.state = {
      opacity: { x: 0 },
      navBackTextOpacity: { x: 0 },
      navBackTextVisible: false
    };

    this.fadeIn = this.fadeIn.bind(this);
    this.fadeOut = this.fadeOut.bind(this);
    this.tweenUpdate = this.tweenUpdate.bind(this);
  }

  fadeIn() {
    let newOpacity = { x: 1 };
    let tween = new TWEEN.Tween(this.opacity).to(newOpacity, 300);
    tween.start();

    tween.onUpdate(this.tweenUpdate);
  }

  fadeOut() {
    let newOpacity = { x: 0 };
    let tween = new TWEEN.Tween(this.opacity).to(newOpacity, 300);
    tween.start();

    tween.onUpdate(this.tweenUpdate);
  }

  tweenUpdate() {
    this.setState({ opacity: this.opacity });
  }

  render() {
    return (
        <Entity>
          <Back Opacity={ this.state.opacity.back }
                fadeIn={ this.fadeIn }
                fadeOut={ this.fadeOut } />
          <BookSeat Opacity={ this.state.opacity.bookseat }
                    fadeIn={ this.fadeIn }
                    fadeOut={ this.fadeOut }
                    handleBookSeatClick={ this.props.handleBookSeatClick }/>
          <ChangeSeat
              handleChangeSeatClick={ this.props.handleChangeSeatClick }
              Opacity={ this.state.opacity.x }
              fadeIn={ this.fadeIn }
              fadeOut={ this.fadeOut }/>
        </Entity>
    );
  }
}
","Provide me with the prototype code for defining a React component using the aframe-react library, including various button components and implementing the TWEEN.js library for animation."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionDelete = (props) => (
  <SvgIcon {...props}>
    <path d=""M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z""/>
  </SvgIcon>
);
ActionDelete = pure(ActionDelete);
ActionDelete.displayName = 'ActionDelete';
ActionDelete.muiName = 'SvgIcon';

export default ActionDelete;
","Create a React component called ""ActionDelete"" that renders an SVG icon representing the ""Delete"" action. The SVG icon should have a height and width of 24px, and should include a path with the coordinates for the icon's shape. The component should be pure and should have a display name of ""ActionDelete""."
"import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import * as serviceWorker from './serviceWorker';

ReactDOM.hydrate(<App />, document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: http://bit.ly/CRA-PWA
serviceWorker.unregister();
",Create a React application that renders an App component into a root element. Make sure to import necessary dependencies and hydrate the app to the root element.
"import React from 'react';
import SPELLS from 'common/SPELLS';
import SpellLink from 'common/SpellLink';
import { formatPercentage } from 'common/format';
import AbilityTracker from 'parser/shared/modules/AbilityTracker';
import Analyzer from 'parser/core/Analyzer';

const debug = false;

class RuleOfThrees extends Analyzer {
	static dependencies = {
		abilityTracker: AbilityTracker,
  };

	barrageWithRuleOfThrees = 0;

	constructor(...args) {
    super(...args);
	   this.active = this.selectedCombatant.hasTalent(SPELLS.RULE_OF_THREES_TALENT.id);
  	}

	on_byPlayer_cast(event) {
		const spellId = event.ability.guid;
		if (spellId !== SPELLS.ARCANE_BARRAGE.id) {
			return;
		}
		if (this.selectedCombatant.hasBuff(SPELLS.RULE_OF_THREES_BUFF.id,event.timestamp + 1)) {
			debug && this.log(""Arcane Barrage with Rule of Threes Buff"");
			this.barrageWithRuleOfThrees += 1;
		}
	}

	get utilization() {
		return 1 - (this.barrageWithRuleOfThrees / this.abilityTracker.getAbility(SPELLS.ARCANE_BARRAGE.id).casts);
	}

	get suggestionThresholds() {
    return {
      actual: this.utilization,
      isLessThan: {
        minor: 0.95,
        average: 0.90,
        major: 0.80,
      },
      style: 'percentage',
    };
  }

	suggestions(when) {
		when(this.suggestionThresholds)
			.addSuggestion((suggest, actual, recommended) => {
				return suggest(<>You cast <SpellLink id={SPELLS.ARCANE_BARRAGE.id} /> {this.barrageWithRuleOfThrees} times while you had the <SpellLink id={SPELLS.RULE_OF_THREES_BUFF.id} /> buff. This buff makes your next <SpellLink id={SPELLS.ARCANE_BLAST.id} /> or <SpellLink id={SPELLS.ARCANE_MISSILES.id} /> free after you gain your third Arcane Charge, so you should ensure that you use the buff before clearing your charges.</>)
					.icon(SPELLS.RULE_OF_THREES_TALENT.icon)
					.actual(`${formatPercentage(this.utilization)}% Utilization`)
					.recommended(`${formatPercentage(recommended)}% is recommended`);
			});
	}
}

export default RuleOfThrees;
","Generate a React component that analyzes the player's use of the 'Rule of Threes' talent, which enhances the 'Arcane Barrage' spell when the player has the 'Rule of Threes' buff. The component should track the number of 'Arcane Barrages' cast with the buff active and calculate the utilization percentage. Additionally, it should provide suggestions if the utilization percentage is below a certain threshold, advising the player to optimize their use of the buff."
"import React from 'react';
import PropTypes from 'prop-types';

export default class DomComponent extends React.PureComponent {
  componentDidMount() {
    this.refs.dom.appendChild(this.props.childDom);
  }

  componentWillUnmount() {
    $(this.refs.dom).empty();
  }

  render() {
    const {
      childDom,
      ...rest
    } = this.props;
    return (
      <div {...rest} ref=""dom""></div>
    );
  }
}

DomComponent.propTypes = {
  childDom: PropTypes.instanceOf(HTMLElement).isRequired,
};
","Create a React component that dynamically inserts a given HTML element into the DOM. When the component is mounted, it should append the provided HTML element to a div. When the component is unmounted, it should remove the HTML element from the DOM."
"import React from 'react';
import Reflux from 'reflux';
import PersonStore from '../../stores/PersonStore';
import {PersonActions} from '../../actions';
import Glyph           from '../Glyph';

export default React.createClass({
  displayName: 'Person',

  mixins: [Reflux.connect(PersonStore, 'person')],

  contextTypes: {
    router: React.PropTypes.func
  },

  componentWillMount() {
    let router = this.context.router;
    let id = router.getCurrentParams().id;
    if (id !== undefined) {
      PersonActions.loadPersonWithId(id);
    }
  },

  changePersonProps() {
    PersonActions.setProps({
      fname: this.refs.fn.getDOMNode().value,
      lname: this.refs.ln.getDOMNode().value
    });
  },

  save() {
    if (this.state.person.isValid()) {
      PersonActions.savePerson();
      this.context.router.transitionTo('people');
    }
  },

  render() {
    return (
      <form className='row'>
      <div className='col-xs-5'>
        <h1>Person</h1>
          <div className='form-group'>
            <label>First Name</label>
            <input
              type='text'
              ref='fn'
              className='form-control'
              placeholder='First Name'
              onChange={this.changePersonProps}
              defaultValue={this.state.person.fname} />
          </div>
          <div className='form-group'>
            <label>Last Name</label>
            <input
              type='text'
              ref='ln'
              className='form-control'
              placeholder='Last Name'
              onChange={this.changePersonProps}
              defaultValue={this.state.person.lname} />
          </div>
          <button className='btn btn-primary' onClick={this.save}><Glyph icon='floppy-disk'/> Save</button>
        </div>
      </form>
    );
  }
});
","Create a React component that allows users to edit a person's first and last name and save the changes to a store. The component should include a form with input fields for the first and last name, a button to save the changes, and a button to cancel the changes. The component should also display a message if the form is invalid."
"import React from 'react';
import Helmet from 'react-helmet';
import { Grid } from '@freecodecamp/react-bootstrap';

import { Spacer, FullWidthRow } from '../components/helpers';
import YearEndDonationForm from '../components/YearEndGift/YearEndDonationForm';

function YearEndGiftPage() {
  return (
    <>
      <Helmet title='Support our nonprofit | freeCodeCamp.org' />
      <Grid>
        <main>
          <Spacer />
          <FullWidthRow>
            <YearEndDonationForm defaultTheme='light' />
          </FullWidthRow>
          <Spacer />
          <Spacer />
        </main>
      </Grid>
    </>
  );
}

YearEndGiftPage.displayName = 'YearEndGiftPage';

export default YearEndGiftPage;
","Create a React component for a non-profit donation page with a title, form, and padding."
"import React, { Component } from 'react';
import ReactDOM from 'react-dom';

class App extends Component {
    constructor() {
        super();
        this.state = { increasing: false };
    }
    update(e) {
        ReactDOM.render(<App val={this.props.val + 1} />, document.getElementById(""root""))
    }
    componentWillReceiveProps(nextProps) {
        this.setState({ increasing: nextProps.val > this.props.val })
    }
    shouldComponentUpdate(nextProps, nextState) {
        return nextProps.val % 3 === 0;
    }
    render() {
        console.log(this.state.increasing);
        return (
            <button onClick={this.update.bind(this) }>
                {this.props.val}
            </button>
        )
    }
    componentDidUpdate(prevProps, prevState){
        console.log(`prevProps: ${prevProps.val}`)
    }
}

App.defaultProps = { val: 0 }

export default App;
","Create a React class component to maintain an incrementing counter using props. Increment the counter on button click, and log whether the counter is incrementing. Only allow the component to update when the counter is divisible by 3. Log the previous counter value on every update."
"import Field from '../Field';
import React from 'react';
import Select from 'react-select';
import { FormInput } from '../../../admin/client/App/elemental';

/**
 * TODO:
 * - Custom path support
 */

module.exports = Field.create({

	displayName: 'SelectField',
	statics: {
		type: 'Select',
	},

	valueChanged (newValue) {
		// TODO: This should be natively handled by the Select component
		if (this.props.numeric && typeof newValue === 'string') {
			newValue = newValue ? Number(newValue) : undefined;
		}
		this.props.onChange({
			path: this.props.path,
			value: newValue,
		});
	},

	renderValue () {
		const { ops, value } = this.props;
		const selected = ops.find(opt => opt.value === value);

		return (
			<FormInput noedit>
				{selected ? selected.label : null}
			</FormInput>
		);
	},

	renderField () {
		const { numeric, ops, path, value: val } = this.props;

		// TODO: This should be natively handled by the Select component
		const options = (numeric)
			? ops.map(function (i) {
				return { label: i.label, value: String(i.value) };
			})
			: ops;
		const value = (typeof val === 'number')
			? String(val)
			: val;

		return (
			<div>
				{/* This input element fools Safari's autocorrect in certain situations that completely break react-select */}
				<input type=""text"" style={{ position: 'absolute', width: 1, height: 1, zIndex: -1, opacity: 0 }} tabIndex=""-1""/>
				<Select
					simpleValue
					name={this.getInputName(path)}
					value={value}
					options={options}
					onChange={this.valueChanged}
				/>
			</div>
		);
	},

});
",Create a React component that allows users to select from a list of options. This component should be able to render the selected option's label as a non-editable input field and provide a drop-down menu to change the selection. Ensure that the component handles numeric values and provides a workaround for Safari's autocorrect issue.
"import React from 'react';
import Icon from '../Icon';

export default class FiberNewIcon extends Icon {
  getSVG(){return <svg xmlns=""http://www.w3.org/2000/svg"" width=""48"" height=""48"" viewBox=""0 0 48 48""><path d=""M40 8H8c-2.21 0-3.98 1.79-3.98 4L4 36c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM17 30h-2.4l-5.1-7v7H7V18h2.5l5 7v-7H17v12zm10-9.49h-5v2.24h5v2.51h-5v2.23h5V30h-8V18h8v2.51zM41 28c0 1.1-.9 2-2 2h-8c-1.1 0-2-.9-2-2V18h2.5v9.01h2.25v-7.02h2.5v7.02h2.25V18H41v10z""/></svg>;}
};","Design a small, material-style icon for a new fiber."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let DeviceBluetoothSearching = (props) => (
  <SvgIcon {...props}>
    <path d=""M14.24 12.01l2.32 2.32c.28-.72.44-1.51.44-2.33 0-.82-.16-1.59-.43-2.31l-2.33 2.32zm5.29-5.3l-1.26 1.26c.63 1.21.98 2.57.98 4.02s-.36 2.82-.98 4.02l1.2 1.2c.97-1.54 1.54-3.36 1.54-5.31-.01-1.89-.55-3.67-1.48-5.19zm-3.82 1L10 2H9v7.59L4.41 5 3 6.41 8.59 12 3 17.59 4.41 19 9 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM11 5.83l1.88 1.88L11 9.59V5.83zm1.88 10.46L11 18.17v-3.76l1.88 1.88z""/>
  </SvgIcon>
);
DeviceBluetoothSearching = pure(DeviceBluetoothSearching);
DeviceBluetoothSearching.displayName = 'DeviceBluetoothSearching';
DeviceBluetoothSearching.muiName = 'SvgIcon';

export default DeviceBluetoothSearching;
",Design an SVG icon representing a Bluetooth signal searching for nearby devices.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from 'material-ui/SvgIcon';

let CastConnected = props =>
  <SvgIcon {...props}>
    <path d=""M1 18v3h3c0-1.66-1.34-3-3-3zm0-4v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm18-7H5v1.63c3.96 1.28 7.09 4.41 8.37 8.37H19V7zM1 10v2c4.97 0 9 4.03 9 9h2c0-6.08-4.93-11-11-11zm20-7H3c-1.1 0-2 .9-2 2v3h2V5h18v14h-7v2h7c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"" />
  </SvgIcon>;

CastConnected = pure(CastConnected);
CastConnected.muiName = 'SvgIcon';

export default CastConnected;
","Generate the React code for a Material Design icon, CastConnected. The icon should be pure and have a Material UI name of 'SvgIcon'."
"import React, { Component } from 'react';
import { Menu, Container, Image } from 'semantic-ui-react'
import { Link, withRouter } from 'react-router-dom';
import image from '../img/lotus.svg';
import { isEmpty } from 'lodash';
import './navbar.css'

import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import { signOut } from '../redux/actions';


class TopNavBar extends Component {
	render() {
		const { signOut, currentUser } = this.props

		if (!isEmpty(currentUser) && localStorage.getItem(""auth"")) {
			return (
				<Menu fixed='top' className='navbar'>
					<Container>
						<Menu.Item header as={Link} to='/' className='nav-main-item'>
							<Image size='mini' src={image} id='nav-logo'></Image>
							Bloom
						</Menu.Item>
						<Menu.Menu position='right'>
							<Menu.Item name='about' as={Link} to='/about'>
								About
							</Menu.Item>
							<Menu.Item name='account' as={Link} to='/account'>
								Account
							</Menu.Item>
							<Menu.Item name='signout' as='a' onClick={signOut}>
								Sign out
							</Menu.Item>
						</Menu.Menu>
					</Container>
				</Menu>
			)
		} else {
			return (
				<Menu fixed='top' className='navbar'>
					<Container>
						<Menu.Item header as={Link} to='/' className='nav-main-item'>
							<Image size='mini' src={image} id='nav-logo'></Image>
							Bloom
						</Menu.Item>
						<Menu.Menu position='right'>
							<Menu.Item name='about' as={Link} to='/about'>
								About
							</Menu.Item>
							<Menu.Item name='login' as={Link} to='/login'>
								Sign in
							</Menu.Item>
						</Menu.Menu>
					</Container>
				</Menu>
			)
		}
	}
}

const mapStateToProps = (state) => {
    return {
        currentUser: state.currentUser,
    }
}

const mapDispatchToProps = (dispatch) => {
    return bindActionCreators({
        signOut,
    }, dispatch)
}

export default connect(mapStateToProps, mapDispatchToProps)(TopNavBar);
","Generate the React code for a top navigation bar for a website. The navigation bar should have a logo on the left, and a list of links on the right. The links should include ""About,"" ""Account,"" and ""Sign out."" If the user is not signed in, the ""Account"" and ""Sign out"" links should be replaced with a ""Sign in"" link."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { translate } from 'react-i18next';
import { get } from '../../../api';
import { promisifyData, cancelPromises } from '../../../utils';
import RomsList from './List';

class RomsListContainer extends Component {
  static propTypes = {
    t: PropTypes.func.isRequired,
  };

  constructor(props) {
    super(props);
    this.state = {
      loaded: false,
      directoryListing: [],
      esSystems: [],
    };
  }

  async componentWillMount() {
    const state = await promisifyData(
      get('directoryListing'),
      get('esSystems')
    );

    state.loaded = true;

    this.setState(state);
  }

  componentWillUnmount() {
    cancelPromises();
  }

  render() {
    return (
      <RomsList {...this.state} />
    );
  }
}

export default translate()(RomsListContainer);
","Get all the necessary data to display a list of ROMs in a React component, and load it when the component mounts, and cancel any pending requests when the component unmounts."
"import React from 'react';
import Grid from 'material-ui/Grid';
import EventsListDashboard from '../containers/events/EventsListDashboard';
import Debts from '../containers/debts/Debts';

const Index = () =>
  <Grid container direction=""row"">
    <Grid item xs={12} lg={9}>
      <EventsListDashboard />
    </Grid>
    <Grid item xs={12} lg={3}>
      <Debts />
    </Grid>
  </Grid>;

export default Index;
",Create a React page layout with two vertical columns using Material UI's Grid component. The left column should occupy 90% of the screen width and contain an EventsListDashboard component. The right column should occupy the remaining 10% of the screen width and contain a Debts component.
"import React, { Component } from 'react';
import { AppRegistry, Text, View, Image, Button } from 'react-native';
import { styles } from './styles';

export class MapMarkerCalloutView extends Component {

  render() {
    return (
        <View style={styles.calloutContainer}>
            <Text style={styles.calloutText}>You are here (callout view)</Text>
        </View>
    );
  }
}","Design a React Native component that displays a map marker callout. The callout should contain the text ""You are here (callout view)."""
"import React from 'react';
import withStyles from 'isomorphic-style-loader/lib/withStyles';
import s from './Logout.css';

class Logout extends React.Component {
  componentDidMount() {
    setTimeout(() => {
      window.location.reload();
    }, 1250);
  }

  render() {
    return <div className={s.text}>Logging out...</div>;
  }
}

export default withStyles(s)(Logout);
","Create a React component that displays ""Logging out..."" for a short duration before reloading the page. Ensure that the component is properly styled using CSS modules."
"import faker from 'faker'
import React from 'react'
import { Dropdown, Image } from 'shengnian-ui-react'

const trigger = (
  <span>
    <Image avatar src={faker.internet.avatar()} /> {faker.name.findName()}
  </span>
)

const options = [
  { key: 'user', text: 'Account', icon: 'user' },
  { key: 'settings', text: 'Settings', icon: 'settings' },
  { key: 'sign-out', text: 'Sign Out', icon: 'sign out' },
]

const DropdownImageTriggerExample = () => (
  <Dropdown trigger={trigger} options={options} pointing='top left' icon={null} />
)

export default DropdownImageTriggerExample
","Design a user dropdown component with an image trigger that shows the user's avatar and name. The dropdown should have options for ""Account,"" ""Settings,"" and ""Sign Out."" Use the 'faker' library for generating the avatar and name. Ensure the component uses 'shengnian-ui-react' for styling."
"import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import promise from 'redux-promise';
import { Router } from 'react-router';
import createHistory from 'history/lib/createHashHistory';

import reducers from './reducers';
import routes from './routes';

const history = createHistory({
  queryKey: false
});

const createStoreWithMiddleware = applyMiddleware(promise)(createStore);

ReactDOM.render(
	<Provider store={createStoreWithMiddleware(reducers)}>
		<Router history={history} routes={routes} />
	</Provider>
  , document.getElementById('root')
);
",Provide a React app with redux integration and support for routing within the app.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvRadio = (props) => (
  <SvgIcon {...props}>
    <path d=""M3.24 6.15C2.51 6.43 2 7.17 2 8v12c0 1.1.89 2 2 2h16c1.11 0 2-.9 2-2V8c0-1.11-.89-2-2-2H8.3l8.26-3.34L15.88 1 3.24 6.15zM7 20c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm13-8h-2v-2h-2v2H4V8h16v4z""/>
  </SvgIcon>
);
AvRadio = pure(AvRadio);
AvRadio.displayName = 'AvRadio';
AvRadio.muiName = 'SvgIcon';

export default AvRadio;
",Generate an SVG icon component named AvRadio that visualizes a radio button in React using the Material UI library's SvgIcon component. The icon should have a circular shape with a small circle inside it to indicate an active state. Implement the component using pure from recompose for performance optimization.
"import React from 'react'
import { Dropdown } from 'semantic-ui-react'

const DropdownExampleMenuDirection = () => (
  <Dropdown text='Menu' floating labeled button className='icon'>
    {/* <i class=""dropdown icon""></i> */}
    <Dropdown.Menu>
      <Dropdown.Item>
        <i className='left dropdown icon'></i>
        <span className='text'>Left</span>
        <div className='left menu'>
          <Dropdown.Item>1</Dropdown.Item>
          <Dropdown.Item>2</Dropdown.Item>
          <Dropdown.Item>3</Dropdown.Item>
        </div>
      </Dropdown.Item>
      <Dropdown.Item>
        <i className='dropdown icon'></i>
        <span className='text'>Right</span>
        <div className='right menu'>
          <Dropdown.Item>1</Dropdown.Item>
          <Dropdown.Item>2</Dropdown.Item>
          <Dropdown.Item>3</Dropdown.Item>
        </div>
      </Dropdown.Item>
    </Dropdown.Menu>
  </Dropdown>
)

export default DropdownExampleMenuDirection
","Create a React component that renders a dropdown menu with two items: ""Left"" and ""Right"". When the ""Left"" item is clicked, a sub-menu should appear to the left of the item, and when the ""Right"" item is clicked, a sub-menu should appear to the right of the item. Style the dropdown using Semantic UI React."
"/**
 * Created by dom on 9/15/16.
 */

import React from 'react';
import { Link } from 'react-router';

const NavigationTree = React.createClass({
  propTypes: {
    items: React.PropTypes.array.isRequired
  },
  render() {
    const flatten = (item) => {
      return (
        <li key={item.name}>
          <Link to={item.url} activeClassName=""selected"">{item.name}</Link>
        </li>
      );
    };
    return (
      <ul className=""nav nav-pills"">
        {this.props.items.map(flatten)}
      </ul>
    );
  }
});

export default NavigationTree;
","Prompt: Create a React component that will render an unordered list of links based on the array of items passed in as props. The links should be styled as pills and the currently active link should be highlighted with the class ""selected""."
"import React from 'react';

export const defaultTheme = {
  base: undefined,
  questionMark: undefined,
  visibleContent: undefined,
  hiddenContent: undefined,
};

const Hint = ({ children, isOpen = false, theme = defaultTheme }) => { // eslint-disable-line no-shadow
  return (
    <div className={theme.base}>
      <div className={theme.questionMark}>?</div>
      <div className={isOpen ? theme.visibleContent : theme.hiddenContent}>
        {children}
      </div>
    </div>
  );
};

export default Hint;
",Design a React component that displays a hint to the user. The hint should be hidden by default and only visible when the user hovers over a question mark icon. The component should support customization via a theme object.
"import React from 'react';
import { FormattedMessage } from 'react-intl';
import PropTypes from 'prop-types';

class ColumnBackButton extends React.PureComponent {

  static contextTypes = {
    router: PropTypes.object,
  };

  handleClick = () => {
    if (window.history && window.history.length === 1) this.context.router.push(""/"");
    else this.context.router.goBack();
  }

  render () {
    return (
      <div role='button' tabIndex='0' onClick={this.handleClick} className='column-back-button'>
        <i className='fa fa-fw fa-chevron-left column-back-button__icon'/>
        <FormattedMessage id='column_back_button.label' defaultMessage='Back' />
      </div>
    );
  }

}

export default ColumnBackButton;
","Generate a React component that contains a button that on click navigates to the previous page. The button should have a chevron-left icon and the text ""Back."", and it should be aria-labelled ""Back button""."
"import React from 'react';

export default class extends React.Component {
  constructor(props) {
    super(props);
    this.state = {uiState: 'INIT'};
    this.onSubmit = this.onSubmit.bind(this);
  }

  onSubmit(e) {
    e.preventDefault();
    this.setState({uiState: 'SENDING'});
    this.props.enrollWithEmail(this._input.value, (err) => {
      if (err) {
        console.log(err);
        this.setState({uiState: 'FAIL'});
      } else {
        this.setState({uiState: 'SUCCESS'});
      }
    });
  }

  render() {
    if (this.state.uiState === 'SENDING') return <div>正在发送邮件...</div>;
    if (this.state.uiState === 'SUCCESS') return <div>邮件已发送，请查看您的邮箱</div>;

    return (
      <div className=""row"">
        <div className=""col-sm-12"">
          {this.state.uiState === 'FAIL' && <p>邮件发送失败，请重试</p>}
          <p>请填写登录用的邮箱地址，我们将发送一个链接到你邮箱，通过该链接设置登录密码</p>
          <form onSubmit={this.onSubmit}>
            <div className=""input-group"">
              <input className=""form-control"" type=""text"" ref={(c) => this._input = c}/>
              <span className=""input-group-btn"">
                <button className=""btn btn-default"" type=""submit"">提交</button>
              </span>
            </div>
          </form>
        </div>
      </div>
    );
  }
}
","Generate a React code component that includes state management to provide a user interface for email enrollment. The component should display a form with an input field for the email address and a submit button. Upon form submission, the component should toggle between different UI states to provide feedback to the user, such as displaying a loading message while sending the email, a success message if the email was sent successfully, or an error message if there was an issue. The component should also handle state updates to reflect the different UI states."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let MapsLocalPizza = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 2C8.43 2 5.23 3.54 3.01 6L12 22l8.99-16C18.78 3.55 15.57 2 12 2zM7 7c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm5 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z""/>
  </SvgIcon>
);
MapsLocalPizza = pure(MapsLocalPizza);
MapsLocalPizza.displayName = 'MapsLocalPizza';
MapsLocalPizza.muiName = 'SvgIcon';

export default MapsLocalPizza;
",Create a React component that renders a Material UI SVG icon representing a pizza for a given set of properties. The component should be pure and have a display name of 'MapsLocalPizza'.
"import React from 'react';
import {ComponentRouter} from 'component-router';
import styles from './Quickstart.css';

import Filter from './Filter';
import Content from './Content';


const FilterWrapper = React.createClass({
  propTypes: {
    componentRouter: React.PropTypes.object
  },


  shouldComponentUpdate({componentRouter: {value}}) {
    return value !== this.props.componentRouter.value;
  },


  render() {
    const {value} = this.props.componentRouter;

    return <Filter isOpened={value === 'opened'} />;
  }
});


const ContentWrapper = React.createClass({
  propTypes: {
    componentRouter: React.PropTypes.object
  },


  shouldComponentUpdate({componentRouter: {value}}) {
    return value !== this.props.componentRouter.value;
  },


  render() {
    const {value = 'chart'} = this.props.componentRouter;

    return <Content expanded={value} />;
  }
});


const Quickstart = React.createClass({
  shouldComponentUpdate() {
    return false;
  },


  render() {
    return (
      <div className={styles.quickstart}>

        <ComponentRouter config={FilterWrapper} namespace=""filter"" />

        <div className={styles.content}>

          <ComponentRouter config={ContentWrapper} namespace=""expanded"" />

        </div>
      </div>
    );
  }
});


export default Quickstart;
",Create a React component that uses `component-router` to display a filter and content. The filter should open and close based on the `value` of the route and the content should expand or not based on the `value` of the route.
"import React from 'react'
import { View } from 'react-native'

class Spacer extends React.Component {
    render() {
        return (
            <View
                style={{
                    height: 2,
                    backgroundColor: '#EFEFEF',
                    marginHorizontal: 30,
                    marginVertical: 20
                }}
            />
        )
    }
}

export default Spacer
","Generate a React Native component named `Spacer` that creates a horizontal line with styling that includes a height of 2px, a background color of `#EFEFEF`, margins of 30px on the horizontal axis and 20px on the vertical axis."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageFilter7 = (props) => (
  <SvgIcon {...props}>
    <path d=""M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-8-2l4-8V5h-6v2h4l-4 8h2z""/>
  </SvgIcon>
);
ImageFilter7 = pure(ImageFilter7);
ImageFilter7.displayName = 'ImageFilter7';
ImageFilter7.muiName = 'SvgIcon';

export default ImageFilter7;
",Design a React component to represent Material Design's Image Filter 7 icon. Include the necessary imports and finalize the component with styling and proper naming conventions.
"import React from 'react';

const Anchor = React.createClass({
  propTypes: {
    id: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.number
    ])
  },
  render() {
    return (
      <a id={this.props.id} href={'#' + this.props.id} className=""anchor"">
        <span className=""anchor-icon"">#</span>
        {this.props.children}
      </a>
    );
  }
});

export default Anchor;
",Describe a React component that creates an anchor link with an id and a hash symbol in front to allow for smooth scrolling to that section on the page when clicked.
"import React from 'react';
import MZBenchRouter from '../utils/MZBenchRouter';
import MZBenchActions from '../actions/MZBenchActions';
import BenchStore from '../stores/BenchStore';

class TimelineFilter extends React.Component {
    constructor(props) {
        super(props);
        this.autoSearchHandler = null;
        this.state = {filter: this.props.filter};
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.filter != nextProps.filter) {
            this.setState({filter: nextProps.filter});
        }
    }

    render() {
        return (
            <form>
                <div className=""form-group"">
                    <div className=""input-group"">
                        <div className=""input-group-addon"">Filter</div>
                        <input type=""text"" ref=""filterInput"" className=""form-control"" placeholder=""Search Benchmarks"" onKeyDown={this._onKeyDown.bind(this)} value={this.state.filter} onChange={this._onChange.bind(this)} />
                    </div>
                </div>
            </form>
        );
    }

    _runSearch() {
        MZBenchRouter.navigate(""/timeline"", {q: this.state.filter});
    }

    _onKeyDown(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            this._runSearch();
        }
    }

    _onChange(event) {
        this.setState({filter: event.target.value});

        if (this.autoSearchHandler) {
            clearTimeout(this.autoSearchHandler);
        }
        this.autoSearchHandler = setTimeout(() => this._runSearch(), this.props.autoSearchInterval);
    }
};

TimelineFilter.propTypes = {
    filter: React.PropTypes.string,
    autoSearchInterval: React.PropTypes.number
};

TimelineFilter.defaultProps = {
    autoSearchInterval: 500
};

export default TimelineFilter;
","Create a React component named `TimelineFilter`. This component should have a form with one `input` field that is used for filtering a timeline. The `input` field should have a placeholder that says ""Search Benchmarks"" and should update the state with its value when changed. The form should be submitted when the user presses the Enter key. The component should also have a function called `_runSearch` that is called when the form is submitted. This function should navigate to the ""/timeline"" route and pass the value of the `filter` state as a query parameter. The component should also have a function called `_onKeyDown` that is called when a key is pressed on the `input` field. This function should call the `_runSearch` function if the Enter key is pressed. Finally, the component should have a function called `_onChange` that is called when the value of the `input` field changes. This function should update the state with the new value of the `input` field and should call the `_runSearch` function after a delay. The default delay should be 500 milliseconds."
"import React from 'react'
import { Grid, Image } from 'semantic-ui-react'

const GridExampleRelaxedVery = () => (
  <Grid relaxed='very' columns={4}>
    <Grid.Column>
      <Image src='/assets/images/wireframe/image.png' />
    </Grid.Column>
    <Grid.Column>
      <Image src='/assets/images/wireframe/image.png' />
    </Grid.Column>
    <Grid.Column>
      <Image src='/assets/images/wireframe/image.png' />
    </Grid.Column>
    <Grid.Column>
      <Image src='/assets/images/wireframe/image.png' />
    </Grid.Column>
  </Grid>
)

export default GridExampleRelaxedVery
",Create a React application that uses the `semantic-ui-react` library to generate a grid of four images with relaxed spacing.
"import PropTypes from 'prop-types';
import React from 'react';
import StatefulEntry from './Entry';

const EntryList = (props) => {
  const entryNodes = props.data.map(entry => {
    return (
      <StatefulEntry
        key={entry.id}
        onSubmit={props.onSubmit}
        onChange={props.onChange}
        {...entry}
      />
    );
  }).reverse();
  return (
    <div className=""entryList"">
      {entryNodes}
    </div>
  );
};
export default EntryList;

EntryList.propTypes = {
  data: PropTypes.array.isRequired,
  onChange: PropTypes.func,
  onSubmit: PropTypes.func,
};
EntryList.defaultProps = {
  data: [],
};","Generate the JavaScript code for a React component that can render a list of entries. Each entry should be a StatefulEntry component, and the list should be sorted in reverse order."
"import React from 'react'

import { createStore, combineReducers, compose, applyMiddleware } from 'redux'
import { createDevTools } from 'redux-devtools'
import LogMonitor from 'redux-devtools-log-monitor'
import DockMonitor from 'redux-devtools-dock-monitor'

import { routerReducer, routerMiddleware } from 'react-router-redux'

export const DevTools = createDevTools(
  <DockMonitor toggleVisibilityKey=""ctrl-h"" changePositionKey=""ctrl-q"">
    <LogMonitor theme=""tomorrow"" preserveScrollTop={false} />
  </DockMonitor>
)

export function configureStore(history, initialState) {
  const reducer = combineReducers({
    routing: routerReducer
  })

  let devTools = []
  if (typeof document !== 'undefined') {
    devTools = [ DevTools.instrument() ]
  }

  const store = createStore(
    reducer,
    initialState,
    compose(
      applyMiddleware(
        routerMiddleware(history)
      ),
      ...devTools
    )
  )

  return store
}
",Generate the code to create a Redux store with React Router integration. The store should be enhanced with the Redux DevTools extension for debugging.
"import React from 'react'
import Helmet from 'react-helmet'
import { config } from 'config'

module.exports = React.createClass({
  propTypes () {
    return {
      router: React.PropTypes.object,
    }
  },
  render () {
    const page = this.props.route.page.data
    return (
      <div>
        <Helmet
          title={`${config.siteTitle} | ${page.title}`} 
        />
        <div dangerouslySetInnerHTML={{ __html: page.body }} />
      </div>
    )
  },
})
",Generate a React component that renders a static page based on the data in a route's page prop. Ensure the page's title is set in the Helmet component using the site title from the config file and include the page's body as dangerouslySetInnerHTML.
"import React from 'react';

const propTypes = {
  /**
   * The css class name of the root element.
   */
  className: React.PropTypes.string,

  /**
   * If true, the `Divider` will be indented `72px`.
   */
  inset: React.PropTypes.bool,

  /**
   * Override the inline-styles of the root element.
   */
  style: React.PropTypes.object,
};

const defaultProps = {
  inset: false,
};

const contextTypes = {
  muiTheme: React.PropTypes.object.isRequired,
};

const Divider = (props, context) => {
  const {
    inset,
    style,
    ...other,
  } = props;

  const {muiTheme} = context;
  const {prepareStyles} = muiTheme;

  const styles = {
    root: {
      margin: 0,
      marginTop: -1,
      marginLeft: inset ? 72 : 0,
      height: 1,
      border: 'none',
      backgroundColor: muiTheme.baseTheme.palette.borderColor,
    },
  };

  return (
    <hr {...other} style={prepareStyles(Object.assign({}, styles.root, style))} />
  );
};

Divider.muiName = 'Divider';
Divider.propTypes = propTypes;
Divider.defaultProps = defaultProps;
Divider.contextTypes = contextTypes;

export default Divider;
","Create a React component that renders a horizontal divider. It should have the following features:

- The component should be able to be indented to a specific margin from the left side of its container.
- It should have its appearance customized with inline styles.
- It should use the Material UI's theme to style its appearance by default."
"import React from 'react';

const GettingStarted = () => (
    <div>
        <h1>Getting Started</h1>
        <p>More to come...</p>
        <p>To install run: yarn add react-material-design</p>
        <p>Once installed import the react-material-design components you'll be usings like so: import {'{'} FAB {'}'} from 'react-material-design';</p>
    </div>
);

export default GettingStarted;
",Provide me with a React snippet that shows users how to get started with using the react-material-design package.
"import React from 'react';
import HashTagPic from './HashTagPicComponent';


const HashTagPicsContainer = (props) => {
  return (
    <div>
      <p>
        <i className=""icon small instagram""></i>Tag your grams for this Spread with {props.hashtag} <i className=""icon small arrow circle down""></i>
      </p>
      {props.hashTagPics.map((pic, index) =>
        <HashTagPic
          key={index}
          id={index}
          pic = {pic}
        />
      )}
    </div>
  );
};

export default HashTagPicsContainer;
","Create a React component called HashTagPicsContainer that displays a list of hashtag images. Include a heading with the hashtag and a down arrow icon, and use the map function to iterate through the hashtag images and display them as HashTagPic components."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionDeleteForever = (props) => (
  <SvgIcon {...props}>
    <path d=""M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z""/>
  </SvgIcon>
);
ActionDeleteForever = pure(ActionDeleteForever);
ActionDeleteForever.displayName = 'ActionDeleteForever';
ActionDeleteForever.muiName = 'SvgIcon';

export default ActionDeleteForever;
","Design an SVG icon for the 'delete forever' action, which is a trash can with an 'X' across it. The icon should have various properties such as width, height, fill, and stroke."
"import _extends from 'babel-runtime/helpers/extends';
import _isNil from 'lodash/isNil';
import cx from 'classnames';

import PropTypes from 'prop-types';
import React from 'react';

import { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';
import Icon from '../../elements/Icon';

/**
 * A feed can contain a like element.
 */
function FeedLike(props) {
  var children = props.children,
      className = props.className,
      content = props.content,
      icon = props.icon;


  var classes = cx('like', className);
  var rest = getUnhandledProps(FeedLike, props);
  var ElementType = getElementType(FeedLike, props);

  if (!_isNil(children)) {
    return React.createElement(
      ElementType,
      _extends({}, rest, { className: classes }),
      children
    );
  }

  return React.createElement(
    ElementType,
    _extends({}, rest, { className: classes }),
    Icon.create(icon),
    content
  );
}

FeedLike.handledProps = ['as', 'children', 'className', 'content', 'icon'];
FeedLike._meta = {
  name: 'FeedLike',
  parent: 'Feed',
  type: META.TYPES.VIEW
};

FeedLike.defaultProps = {
  as: 'a'
};

process.env.NODE_ENV !== ""production"" ? FeedLike.propTypes = {
  /** An element type to render as (string or function). */
  as: customPropTypes.as,

  /** Primary content. */
  children: PropTypes.node,

  /** Additional classes. */
  className: PropTypes.string,

  /** Shorthand for primary content. */
  content: customPropTypes.contentShorthand,

  /** Shorthand for icon. Mutually exclusive with children. */
  icon: customPropTypes.itemShorthand
} : void 0;

export default FeedLike;","Create a React component that represents a like element for a feed, with options to specify primary content, additional classes, an icon, and mutually exclusive primary content. Include prop types and default props."
"/**
 * Function to get the shallow output for a given component
 * As we are using phantom.js, we also need to include the fn.proto.bind shim!
 *
 * @see http://simonsmith.io/unit-testing-react-components-without-a-dom/
 * @author somonsmith
 */
import React from 'react';
import TestUtils from 'react-addons-test-utils';

/**
 * Get the shallow rendered component
 *
 * @param  {Object} component The component to return the output for
 * @param  {Object} props [optional] The components properties
 * @param  {Mixed} ...children [optional] List of children
 * @return {Object} Shallow rendered output
 */
export default function createComponent(component, props = {}, ...children) {
  const shallowRenderer = TestUtils.createRenderer();
  shallowRenderer.render(React.createElement(component, props, children.length > 1 ? children : children[0]));
  return shallowRenderer.getRenderOutput();
}
","Compose a JavaScript function, `createComponent`, which facilitates the shallow rendering of React components for testing purposes. This function should leverage React's `TestUtils` and adhere to the convention established in the provided reference: http://simonsmith.io/unit-testing-react-components-without-a-dom/."
"import React from 'react';
import { Link } from 'react-router-dom';

import IMAGES from '../../images/images';
import Thumbnail from '../Thumbnail/Thumbnail';

class Gallery extends React.Component {
    render() {
        return (
            <div>
                <h2>Gallery</h2>
                {
                    IMAGES.map((img) => (
                        <Link
                            key={img.id}
                            to={{
                                pathname: `/img/${img.id}`,
                                state: { modal: true }
                            }}
                        >
                            <Thumbnail color={img.color}/>
                            <p style={{ marginTop: 0 }}>{img.title}</p>
                        </Link>
                    ))
                }
            </div>
        );
    }
}

export default Gallery;
","Create a React component that renders a gallery of images. Each image should be a link to its own page, and should have a thumbnail and a title."
"import React from 'react';
import SubPage from '../reusable/SubPage.js';
import SubPageContent from '../reusable/SubPageContent.js';
import KeyboardKey from '../reusable/KeyboardKey';

export default class Guide extends SubPage{
  render (){
    return (
      <SubPageContent {...this.props}>
        <h1>Guide</h1>
        <h2>Objective</h2>
        <ul>
          <li>avoid obstacles</li>
          <li>avoid center</li>
          <li>collect stars</li>
          <li>as fast as you can</li>
        </ul>
        <h2>Controls on a touch device:</h2>
        <p>Tap ☟ anywhere to jump</p>
        <p>Swipe ↔ anywhere to move</p>
        <h2>Controls on a keyboard:</h2>
        <p><KeyboardKey>↑</KeyboardKey>/<KeyboardKey>W</KeyboardKey>/<KeyboardKey>space</KeyboardKey> to jump</p>
        <p><KeyboardKey>←</KeyboardKey><KeyboardKey>→</KeyboardKey>/<KeyboardKey>A</KeyboardKey><KeyboardKey>D</KeyboardKey> to move</p>
        <p><KeyboardKey>Esc</KeyboardKey>/<KeyboardKey>pause break</KeyboardKey>/<KeyboardKey>Backspace</KeyboardKey> to pause</p>
        <h2>Navigation</h2>
        <p>In addition to clicking and tapping, you can navigate all menus using <KeyboardKey>↑</KeyboardKey><KeyboardKey>←</KeyboardKey><KeyboardKey>↓</KeyboardKey><KeyboardKey>→</KeyboardKey> and <KeyboardKey>W</KeyboardKey><KeyboardKey>A</KeyboardKey><KeyboardKey>S</KeyboardKey><KeyboardKey>D</KeyboardKey></p>
      </SubPageContent>
    );
  }
}
","Generate the code to create a guide page with instructions for navigating a game on both touch devices and keyboards. Include specific instructions for jumping, moving, and pausing the game."
"import React, { Component } from 'react';
import { View, ListView, RefreshControl, ScrollView } from 'react-native';
import { Container, Content, Card, CardItem, Text, Button, Icon } from 'native-base';
import { connect } from 'react-redux';
import { fetch_catalogo } from '../../actions';
import CatalogoItem from './CatalogoItem';
import { Actions } from 'react-native-router-flux';

class CatalogoLista extends Component {

  componentWillMount() {
    this.props.fetch_catalogo();
    this.createDataSource(this.props)
    // const { carrinhoLista } = this.props;
    // console.log(this.props);

    Actions.refresh({rightTitle: 'Carrinho', onRight: () => Actions.carrinho({type:'reset', listCarrinho: this.props.carrinhoLista}), rightButtonTextStyle: { color:'white'} });
  }

  componentWillReceiveProps(nextProps){
    this.createDataSource(nextProps)
  }

  createDataSource({listCatalogo}) {
    const ds = new ListView.DataSource({
      rowHasChanged: (r1, r2) => r1 !== r2
    });
    this.dataSource = ds.cloneWithRows(listCatalogo);
  }

  renderRow(listCatalogo) {
    return <CatalogoItem catalogoLista={listCatalogo} />
  }

  _onRefresh(){
    setTimeout(() => {
      this.props.fetch_catalogo();
      }, 1000);
  }


  render(){
    return(
      <ListView
        enableEmptySections
        dataSource={this.dataSource}
        renderRow={this.renderRow}
        style={{marginTop: 70}}
        />
    );
  }
}

const mapStateToProps = state => {


  const listCatalogo = _.map(state.catalogo.catalogoLista, (key, value) => {
    return { ...key, value };
  });
  const { refreshing } = state.catalogo;
  const { carrinhoLista } = state.carrinho;
  return { listCatalogo, refreshing, carrinhoLista };

}

export default connect(mapStateToProps, {fetch_catalogo})(CatalogoLista);
","Generate the code for a React Native component that displays a catalog of items in a list using the ListView component, and connects to Redux to fetch the catalog data and manage the loading state. The component should also have a button that navigates to a ""carrinho"" or shopping cart page."
"

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';
import { Home } from './component/home';
import { Login } from './component/login';
import 'antd/dist/antd.less';
import './share/style/global.less';
import './share/mr/mr.css';

let loggedIn = window.localStorage.getItem('loggedIn');

class App extends Component{
    constructor(props) {
        super(props);
        this.state = {
            loggedIn: true
        }
    }

    login = () => {
        this.setState({
            loggedIn: true
        })
    }

    logout = () => {
        this.setState({
            loggedIn: false
        })
    }

    render() {
        return (
            <Router>
            <div className='home'>
            <Route exact path='/' component={Home}></Route>
            {/* <Route exact path=""/"" render={() => (
                this.state.loggedIn ? (
                    <Redirect to=""/home""/>
                ) : (
                    <Login login={this.login}/>
                )
            )}/> */}
            </div>
        </Router>
        )
    }
}



ReactDOM.render(
    <App />,
    document.getElementById('root')
)

","Create a React application with routing. The application should have two routes: '/' and '/home'. The '/' route should redirect logged-in users to '/home' and display a login form for non-logged-in users. The '/home' route should be accessible only to logged-in users and display a home page. If a user is not logged in and tries to access '/home', they should be redirected to '/'. The login form should have a login button that sets the 'loggedIn' state to true, and a logout button that sets the 'loggedIn' state to false."
"import React from 'react';
import { Link } from 'react-router';

import styles from '../styles/User.scss';
import Sidebar from '../components/Sidebar';

/* eslint react/prop-types: 0 */
export function UserBasePage(props) {
  return (
    <div className={styles.bg}>
      <Sidebar />
      { props.children }
    </div>
  );
}
export default UserBasePage;
","Create a React component called `UserBasePage` that will be used as the base for all user-related pages within the application. This component should include a wrapper div with a class of `bg`, a `Sidebar` component, and a placeholder for child components."
"import React from 'react';

import PanelGroup, { Container, StandardPanelTitle } from 'components/Layout';
import TaskConfig from 'components/TaskConfig';
import UpdateDiff from 'components/UpdateDiff';

import { isNully } from 'utils/Common';

export default function UpdateConfig({ update }) {
  if (isNully(update.update.instructions.desiredState)) {
    return null;
  } else if (update.update.instructions.initialState.length > 0) {
    return <UpdateDiff update={update} />;
  }

  return (<Container>
    <PanelGroup noPadding title={<StandardPanelTitle title='Update Config' />}>
      <TaskConfig config={update.update.instructions.desiredState.task} />
    </PanelGroup>
  </Container>);
}
","Generate a React component named `UpdateConfig` that conditionally renders three different components: `null`, `UpdateDiff`, or a `TaskConfig`."
"import React from 'react'
import {View, TouchableNativeFeedback, Text, StyleSheet} from 'react-native'

export const Button = ({children, onPress, style}) => (
  <TouchableNativeFeedback
    onPress={onPress}
    background={TouchableNativeFeedback.SelectableBackground()}>
    <View style={[styles.button, style]}>
      <Text style={styles.label}>{children}</Text>
    </View>
  </TouchableNativeFeedback>
)

const styles = StyleSheet.create({
  button: {
    padding: 14,
    paddingRight: 20,
    paddingLeft: 20,
    flex: 1,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'silver',
  },
  label: {
    fontSize: 18,
  },
})
","Create a React functional component that represents a button. The component should accept the following props:
- children: The text or content to display inside the button.
- onPress: A function to be called when the button is pressed.
- style: An optional style object to override the default button styles.

The button should have a default padding of 14px, padding on the left and right sides of 20px, and a border width of 1px with a silver border color. The text inside the button should have a font size of 18px."
"import React from 'react';

export default class Hello extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      message: 'Loading...'
    };

    this.fetchMessage();
  }

  fetchMessage() {
    fetch('/message.json')
      .then((response) => response.json())
      .then((data) => this.setState({ message: data.message }));
  }

  render() {
    return (
      <div className=""hello"">
        <h1 className=""hello__message"">{this.state.message}</h1>
      </div>
    );
  }
}
","Generate a React component that fetches a message from a JSON file and displays it on the screen. The component should have a state variable to store the message and a method to fetch the message. The component should render a div with a class of ""hello"" and a h1 with a class of ""hello__message"" that displays the message."
"import React from 'react';
import createSvgIcon from './utils/createSvgIcon';

export default createSvgIcon(
  <React.Fragment><path fillOpacity="".3"" d=""M6 22h16V5.97L6 22z"" /><path d=""M18 9.98L6 22h12V9.98zM3.93 5.93l1.29 1.29c3.19-3.19 8.38-3.19 11.57 0l1.29-1.29c-3.91-3.91-10.25-3.91-14.15 0zm5.14 5.14L11 13l1.93-1.93c-1.07-1.06-2.79-1.06-3.86 0zM6.5 8.5l1.29 1.29c1.77-1.77 4.65-1.77 6.43 0L15.5 8.5c-2.48-2.48-6.52-2.48-9 0z"" /></React.Fragment>
, 'CellWifiSharp');
","Design an SVG icon for a cell phone with full Wi-Fi signal, in a sharp and modern style."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let EditorFormatAlignRight = (props) => (
  <SvgIcon {...props}>
    <path d=""M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z""/>
  </SvgIcon>
);
EditorFormatAlignRight = pure(EditorFormatAlignRight);
EditorFormatAlignRight.displayName = 'EditorFormatAlignRight';
EditorFormatAlignRight.muiName = 'SvgIcon';

export default EditorFormatAlignRight;
","Create a React component named EditorFormatAlignRight that inherits from the SvgIcon component. The component should render an SVG icon with the following path: ""M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z"". The component should have a pure export and a display name of 'EditorFormatAlignRight'."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ImageBrightness7 = (props) => (
  <SvgIcon {...props}>
    <path d=""M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z""/>
  </SvgIcon>
);
ImageBrightness7 = pure(ImageBrightness7);
ImageBrightness7.displayName = 'ImageBrightness7';

export default ImageBrightness7;
","Create a React component called ImageBrightness7 that displays an SVG icon of a sun with half of it shaded, representing low brightness."
"'use strict'

import React from 'react'
import {connect} from 'react-redux'

import {Header, Footer}  from '../components/index'

export const Shell = React.createClass({
  render () {
    const handleToggle = this.handleToggle
    const {children, isLoggedIn} = this.props

    return (
      <div className=""shell"">
        <Header showMenu={isLoggedIn}/>
        <div className={'page-wrapper'}>{children}</div>
        <Footer />
      </div>
    )
  }
})

export default connect((state) => {
  return {
    isLoggedIn: state.auth.isLoggedIn
  }
})(Shell)
","Generate a React component that serves as a shell for the application. It should include the following:

- The component should be named `Shell`.
- The component should import necessary components from the `index` directory.
- The component should have a `render` method that returns a layout with:
    - A Header component that displays a menu if the user is logged in.
    - A main content area where child components can be rendered.
    - A Footer component.
- The component should be connected to the Redux store and retrieve the `isLoggedIn` property from the `auth` reducer."
"import React from 'react';
import PropTypes from 'prop-types';

import Column from 'flavours/glitch/components/column';
import ColumnHeader from 'flavours/glitch/components/column_header';
import ImmutablePureComponent from 'react-immutable-pure-component';

export default class ColumnLoading extends ImmutablePureComponent {

  static propTypes = {
    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
    icon: PropTypes.string,
  };

  static defaultProps = {
    title: '',
    icon: '',
  };

  render() {
    let { title, icon } = this.props;
    return (
      <Column>
        <ColumnHeader icon={icon} title={title} multiColumn={false} focusable={false} placeholder />
        <div className='scrollable' />
      </Column>
    );
  }

}
",Describe a React component that displays a column in a table with a loading placeholder. The column should have a title and an optional icon.
"import React from 'react';
import IconBase from '@suitejs/icon-base';

function MdDirections(props) {
  return (
    <IconBase viewBox=""0 0 48 48"" {...props}>
      <path d=""M43.405 22.585c.79.78.79 2.04.01 2.83l-18 18c-.78.78-2.05.78-2.83 0v-.01l-18-17.99c-.78-.78-.78-2.05 0-2.83l18-18c.77-.78 2.04-.78 2.82 0l18 18zm-15.41 6.41l7-7-7-7v5h-10c-1.11 0-2 .89-2 2v8h4v-6h8v5z"" />
    </IconBase>
  );
}

export default MdDirections;
","Generate the React component code for an icon representing a map with directions. The icon should have a transparent background with a width and height of 48px, and the icon should display the symbol for directions in blue."
"// 解决 IE 11 兼容性问题
import 'babel-polyfill';

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Markdown } from 'react-markdown-reader';
import CodeView from 'react-code-view';
import { PageContainer } from 'rsuite-docs';
import './less/index.less';
import Tag, { TagGroup } from '../src';
import randomText from './util/randomText';

const tags = (() => {
  const common = Array.from(new Array(5)).map(() => `标签${randomText()}`);
  const custom = [
    {
      text: `标签${randomText()}`,
      color: Tag.Color.PRIMARY,
    },
    {
      text: `标签${randomText()}`,
      color: Tag.Color.SUCCESS,
      closable: true
    }
  ];
  return [...custom, ...new Set(common)];
})();

class App extends Component {
  render() {
    return (
      <PageContainer
        activeKey=""Autocomplete""
        githubURL=""https://github.com/rsuite/rsuite-autocomplete""
      >
        <Markdown>{require('../README.md')}</Markdown>
        <CodeView
          dependencies={{
            React,
            Tag,
            randomText
          }}
        >
          {require('./md/basic.md')}
        </CodeView>

        <CodeView
          dependencies={{
            React,
            Tag,
            TagGroup,
            randomText,
            tags
          }}
        >
          {require('./md/tagGroup.md')}
        </CodeView>

        <CodeView
          dependencies={{
            React,
            Tag,
            TagGroup,
            randomText,
            tags
          }}
          babelTransformOptions={{
            presets: [
              'es2015',
              'react',
              'stage-1'
            ]
          }}
        >
          {require('./md/tagGroupCustomized.md')}
        </CodeView>
        <Markdown>{require('./md/tagProps.md')}</Markdown>
        <Markdown>{require('./md/tagGroupProps.md')}</Markdown>
      </PageContainer>
    );
  }
}

ReactDOM.render(<App />,
  document.getElementById('app')
);
","Provide a React application showcasing the features of an auto-complete component and tag component. The application should include multiple examples, one showcasing the basic usage of the auto-complete component, another demonstrating how to use the tag component, and a final example illustrating how to group tags using the tag group component."
"import React from 'react'
import dc from 'dc'
import BaseChart from './base-chart'
import baseMixin from '../mixins/base-mixin'
import marginMixin from '../mixins/margin-mixin'
import capMixin from '../mixins/cap-mixin'
import colorMixin from '../mixins/color-mixin'
import rowMixin from '../mixins/row-mixin'

const {any, bool, number, oneOfType} = React.PropTypes

@rowMixin
@colorMixin
@capMixin
@marginMixin
@baseMixin
export default class RowChart extends BaseChart{
  static displayName = 'RowChart'

  componentDidMount(){
    this.chart = dc.rowChart(this.chart)
    this.configure()
    this.chart.render()
  }
}
",Generate a React class component that extends BaseChart which imports the 'dc' library and various mixins for a row chart. The component should have propTypes and a componentDidMount lifecycle method where the chart is instantiated and configured.
"import React from 'react';
import { Route, IndexRoute } from 'react-router';
import App from './modules/app/components/App';
import RecipeListPage from './modules/recipe/pages/RecipeListPage'

// require.ensure polyfill for node
if (typeof require.ensure !== 'function') {
  require.ensure = function requireModule(deps, callback) {
    callback(require);
  };
}

/* Workaround for async react routes to work with react-hot-reloader till
  https://github.com/reactjs/react-router/issues/2182 and
  https://github.com/gaearon/react-hot-loader/issues/288 is fixed.
 */
if (process.env.NODE_ENV !== 'production') {
  // Require async routes only in development for react-hot-reloader to work.
  // require('./modules/recipe/pages/RecipeCreatePage');
  require('./modules/recipe/pages/RecipeListPage');
}

// react-router setup with code-splitting
// More info: http://blog.mxstbr.com/2016/01/react-apps-with-pages/
export default (
  <Route path=""/"" component={App}>
    <IndexRoute component={RecipeListPage} />
    <Route path=""/recipes"" component={RecipeListPage}/>
  </Route>
);
","Design a React app routing schema with code-splitting for a recipe app that includes an App component as the root, a RecipeListPage as the default route, and another RecipeListPage for the ""/recipes"" path."
"import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import classNames from 'classnames';
import React from 'react';

import { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';

var InputGroupButton = function (_React$Component) {
  _inherits(InputGroupButton, _React$Component);

  function InputGroupButton() {
    _classCallCheck(this, InputGroupButton);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  InputGroupButton.prototype.render = function render() {
    var _props = this.props,
        className = _props.className,
        props = _objectWithoutProperties(_props, ['className']);

    var _splitBsProps = splitBsProps(props),
        bsProps = _splitBsProps[0],
        elementProps = _splitBsProps[1];

    var classes = getClassSet(bsProps);

    return React.createElement('span', _extends({}, elementProps, {
      className: classNames(className, classes)
    }));
  };

  return InputGroupButton;
}(React.Component);

export default bsClass('input-group-btn', InputGroupButton);","Create a React component named InputGroupButton that extends the React.Component class using the extends keyword.
This component should take a className prop and pass all other props to the `elementProps` variable.
Use the splitBsProps helper to split the props into bsProps and elementProps, then use the getClassSet helper to create a classes variable that combines the bsProps with the className prop.
Finally, render a span element with the className from classes and spread the elementProps into it, ensuring that all props are correctly passed through to the element except for the className"
"import React from 'react';
import {storiesOf, action} from '@storybook/react';
import {withKnobs, text, boolean} from '@storybook/addon-knobs';
import {StoryWrapper} from './../_lib/storyUtils';
import Dialog from '.';
import Button from './../Button';

storiesOf('Dialog', module)
    .addDecorator(withKnobs)
    .addWithInfo(
        'default',
        'Dialog',
        () => (
            <StoryWrapper>
                <Dialog
                    isOpen={boolean('Is opened?', true)}
                    title={text('Title', 'Hello title!')}
                    onRequestClose={action('onRequestClose')}
                    actions={[
                        <Button key=""foo"">An action button</Button>
                    ]}
                    style=""wide""
                    >
                    {text('Inner content', 'Hello world!')}
                </Dialog>
            </StoryWrapper>
        ),
        {inline: true, source: false}
    )
    .addWithInfo(
        'narrow',
        'Dialog',
        () => (
            <StoryWrapper>
                <Dialog
                    isOpen={boolean('Is opened?', true)}
                    title={text('Title', 'Hello title!')}
                    onRequestClose={action('onRequestClose')}
                    actions={[
                        <Button key=""foo"">An action button</Button>
                    ]}
                    style=""narrow""
                    >
                    {text('Inner content', 'Hello world!')}
                </Dialog>
            </StoryWrapper>
        ),
        {inline: true, source: false}
    );
",Generate a React Storybook configuration for a Dialog component with different styles and configurations that can be controlled through knobs.
"// Copyright 2015, 2016 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

import React from 'react';
import ReactDOM from 'react-dom';
import injectTapEventPlugin from 'react-tap-event-plugin';

injectTapEventPlugin();

import Application from './dappreg/Application';

import '../../assets/fonts/Roboto/font.css';
import '../../assets/fonts/RobotoMono/font.css';
import './style.css';

ReactDOM.render(
  <Application />,
  document.querySelector('#container')
);
","Generate the code snippet that renders the React application to the DOM, using the `ReactDOM` library. The application should be in the file `./dappreg/Application`, and the container should be in the DOM with the id ""container."" Also, include CSS files for custom fonts and a style file in the correct order."
"// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import CSSClassnames from '../../../utils/CSSClassnames';
import Intl from '../../../utils/Intl';
import Props from '../../../utils/Props';

const CLASS_ROOT = CSSClassnames.CONTROL_ICON;
const COLOR_INDEX = CSSClassnames.COLOR_INDEX;

export default class Icon extends Component {
  render () {
    const { className, colorIndex } = this.props;
    let { a11yTitle, size, responsive } = this.props;
    let { intl } = this.context;

    const classes = classnames(
      CLASS_ROOT,
      `${CLASS_ROOT}-document-video`,
      className,
      {
        [`${CLASS_ROOT}--${size}`]: size,
        [`${CLASS_ROOT}--responsive`]: responsive,
        [`${COLOR_INDEX}-${colorIndex}`]: colorIndex
      }
    );

    a11yTitle = a11yTitle || Intl.getMessage(intl, 'document-video');

    const restProps = Props.omit(this.props, Object.keys(Icon.propTypes));
    return <svg {...restProps} version=""1.1"" viewBox=""0 0 24 24"" width=""24px"" height=""24px"" role=""img"" className={classes} aria-label={a11yTitle}><path fill=""none"" stroke=""#000"" strokeWidth=""2"" d=""M4.99787498,6.99999999 L4.99787498,0.999999992 L19.4999998,0.999999992 L22.9999998,4.50000005 L22.9999998,23 L4,23 M18,1 L18,6 L23,6 M3,10 L12,10 L12,19 L3,19 L3,10 Z M12,13 L17,10.5 L17,18.5 L12,16 L12,13 Z""/></svg>;
  }
};

Icon.contextTypes = {
  intl: PropTypes.object
};

Icon.defaultProps = {
  responsive: true
};

Icon.displayName = 'DocumentVideo';

Icon.icon = true;

Icon.propTypes = {
  a11yTitle: PropTypes.string,
  colorIndex: PropTypes.string,
  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'huge']),
  responsive: PropTypes.bool
};

","Generate a React component for an icon of a document with a video, following the existing pattern in the codebase. The icon should be named ""DocumentVideo""."
"
import React, { Component } from 'react';
import { Container,List, Header, Title, Content, Button, Icon, IconNB, Card, CardItem, Text, Left, Right, Body, ListItem } from 'native-base';
import { View } from 'react-native'

import styles from '../../styles/socialBox';

import contacts from '../../../../mock/contacts'

import realm from '../../db_ini'

const _getContact = (contactId) => {

  const contacts = realm.objects('User')
  const searchResult = contacts.filtered(`userId = ""${contactId}""`)
  const recent_contact = searchResult[0]
  return recent_contact

}

const _getMatchingData = (arr1,arr2) => {
  arr1.prototype.diff = function(arr2) {
      var ret = [];
      for(var i in this) {
          if(arr2.indexOf( this[i] ) > -1){
              ret.push( this[i] );
          }
      }
      return ret;
  };
}

const renderData = (contactId) => {
  const datas = contacts
  const contact = _getContact(contactId)
  return (
      <View>
      <List
          dataArray={contact.publicSharedData[0].hashTagData} renderRow={data =>
            <ListItem style={{backgroundColor:'white'}}>
              <Text>{data.tagDescription}</Text>
              <Right>
                <Text>{data.tagText}</Text>
              </Right>
            </ListItem>
        }
        />
      </View>
      )
}

const ConnectDetailTagBox = (props) => {
  const datas = contacts
  const {children} = props
    return (
      <View>
        {renderData(children)}
      </View>
    )
}

export default ConnectDetailTagBox
",Provide an example of a React Native function named `ConnectDetailTagBox` that dynamically displays a list of tags based on the contact's ID. Each tag should be formatted as a list item with a description on the left and text on the right. The data for the tags should come from a list of predefined contacts and the user's personal data.
"import React from 'react';
import classNames from 'classnames';
import elementType from 'react-prop-types/lib/elementType';

const Jumbotron = React.createClass({
  propTypes: {
    /**
     * You can use a custom element for this component
     */
    componentClass: elementType
  },

  getDefaultProps() {
    return { componentClass: 'div' };
  },

  render() {
    const ComponentClass = this.props.componentClass;

    return (
      <ComponentClass {...this.props} className={classNames(this.props.className, 'jumbotron')}>
        {this.props.children}
      </ComponentClass>
    );
  }
});

export default Jumbotron;
",Provide a JavaScript function component that takes children and a custom component class as props and returns the JSX for a block-level component with the `jumbotron` class name wrapped around the children.
"import React from 'react';
import Icon from '../Icon';

export default class CheckBoxIcon extends Icon {
  getSVG(){return <svg xmlns=""http://www.w3.org/2000/svg"" width=""48"" height=""48"" viewBox=""0 0 48 48""><path d=""M38 6H10c-2.21 0-4 1.79-4 4v28c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4zM20 34L10 24l2.83-2.83L20 28.34l15.17-15.17L38 16 20 34z""/></svg>;}
};","Create a React component for a check box icon using SVG with a size of 48x48 pixels, with a path that draws the outline and checkmark."
"import React from 'react';

export default ({headings, rows, totals, className, style})=> (
	<table className={className} style={style}>
		<thead>
			<tr>
				{headings.map((d,i)=><th key={i}>{d}</th>)}
			</tr>
		</thead>
		<tbody>
			{rows.map((row,index)=>(
					<tr key={index}>
						{row.map((d,i)=><td key={i}>{d.toLocaleString()}</td>)}
					</tr>)
				)
			}
		</tbody>
		<tfoot>
			<tr>
				{totals.map((d,i)=><td key={i}>{d.toLocaleString()}</td>)}
			</tr>
		</tfoot>
	</table>
);
","Generate a table component in React that accepts headings, rows, and totals as props and renders a table with headings, rows, and totals. The component should support the addition of custom classes and styles."
"import React from 'react';
import { Field, reduxForm } from 'redux-form';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
import { createPost } from '../actions';

class PostsNew extends React.Component {
  renderField(field) {
    const className = `form-group ${field.meta.touched && field.meta.error ? 'has-danger' : ''}`

    return (
      <div className={className}>
        <label>{field.label}</label>
        <input
          className='form-control'
          type='text'
          {...field.input}
        />
        <div className='text-help'>
          {field.meta.touched ? field.meta.error : ''}
        </div>
      </div>
    );
  }

  onSubmit(values) {
    this.props.createPost(values, () => {
      this.props.history.push('/');
    });
  }

  render() {
    const { handleSubmit } = this.props;

    return (
      <form onSubmit={handleSubmit(this.onSubmit.bind(this))} className='posts-new'>
        <Field
          label='Title'
          name='title'
          component={this.renderField}
        />
        <Field
          label='Categories'
          name='categories'
          component={this.renderField}
        />
        <Field
          label='Post Content'
          name='content'
          component={this.renderField}
        />
        <button type='submit' className='btn btn-primary'>Submit</button>
        <Link to='/' className='btn btn-danger'>Cancel</Link>
      </form>
    );
  }
}

function validate(values) {
  const errors = {};

  if (!values.title) {
    errors.title = ""Enter a title"";
  }

  if (!values.categories) {
    errors.categories = ""Enter categories"";
  }

  if (!values.content) {
    errors.content = ""Enter content"";
  }

  return errors;
}

export default reduxForm({
  validate: validate,
  form: 'PostsNewForm'
})(
  connect(null, { createPost })(PostsNew)
);
","Create a React component for creating a new post including title, categories, and content, with form validation for each field."
"/**
 * Created by Anthony Lord on 2017-05-02.
 */
import React, { Component } from 'react';
import Header from ""./header"";
class About extends Component{
    render(){
        return (
        <div>
        <Header league={""""} onLeagueChange={null}/>
            <div className=""container main"">
                <h3><p>This website is a small project inspired by github.com/ccbrown who made a simple indexer that listens to the PoE item river. The main issue was that any user using the app has to download the whole river (over 1mb/s of data)</p><br />
                <p>Instead, I made a backend api that listens to the river. The clients can thus subscribe to the API with a search request and only recieve the items that they searched for.</p><br />
                <p>Since there's no indexing, items should show up on here faster than other sites that process and index items before making them available.</p><br />
                <p>All of the code is open source so I recommend those interested to contribute. I used this project to learn new techs and I recommend other enthusiasts to do the same.</p><br />
                <p>I plan to add support to search for mods but not much else.</p>
                </h3>
                <h2>contact : antholord@hotmail.com</h2>
                <h2>Source code : <a href=""https://github.com/antholord/poe-livesearch"">Front end</a> | <a href=""https://github.com/antholord/poe-livesearch-api"">Back end</a></h2>

            </div>
        </div>
        );

    }
}

export default About;","Generate the text content of an About page for a React web application that provides live search functionality for Path of Exile items. Include information about the inspiration behind the project, its features, potential future improvements, and contact details for the developer."
"import React from 'react'
import { Link } from 'react-router-dom'
import Auth from '../users/Auth'
const ListCommentPage = (props) => (
  <div className='comments'>
    <div className='comment-box'>
      <span className='comment-count'>#{props.index}</span>
      <span>{props.author} says:</span>
      <p>{props.date}</p>
      <p>Content: {props.content}</p>
      {(Auth.isUserAuthenticated() && Auth.isUserAdmin()) ? (
        <div className='list-comments'>
          <Link to={`/gadgets/details/delete/comment/${props.commentId}`} className='btn btn-sm btn-danger btn-block' >Delete</Link>
          <Link to={`/gadgets/details/edit/comment/${props.commentId}`} className='btn btn-sm btn-info btn-block'>Edit</Link>
        </div>
      ) : '' }
    </div>
  </div>
)

export default ListCommentPage
","Create a React functional component that displays a comment with its index, author, date, content, and delete and edit buttons if the user is authenticated and an admin."
"import Field from '../Field';
import React from 'react';
import { FormInput } from 'elemental';

/*
	TODO:
	- gravatar
	- validate email address
 */

module.exports = Field.create({
	displayName: 'EmailField',
	renderField () {
		return (
			<FormInput
				name={this.props.path}
				ref=""focusTarget""
				value={this.props.value}
				onChange={this.valueChanged}
				autoComplete=""off""
				type=""email""
			/>
		);
	},
	renderValue () {
		return this.props.value ? (
			<FormInput noedit href={'mailto:' + this.props.value}>{this.props.value}</FormInput>
		) : (
			<FormInput noedit>(not set)</FormInput>
		);
	},
});
","Generate the code for an email input field component that uses Elemental's `FormInput` component and has both a renderField and renderValue method. The renderField method should have an input type of email and the renderValue method should return either an email address if one is provided or the text ""(not set)""."
"import React from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import ImmutablePureComponent from 'react-immutable-pure-component';
import Permalink from '../../../components/permalink';

export default class MediaItem extends ImmutablePureComponent {

  static propTypes = {
    media: ImmutablePropTypes.map.isRequired,
  };

  render () {
    const { media } = this.props;
    const status = media.get('status');

    let content, style;

    if (media.get('type') === 'gifv') {
      content = <span className='media-gallery__gifv__label'>GIF</span>;
    }

    if (!status.get('sensitive')) {
      style = { backgroundImage: `url(${media.get('preview_url')})` };
    }

    return (
      <div className='account-gallery__item'>
        <Permalink
          to={`/statuses/${status.get('id')}`}
          href={status.get('url')}
          style={style}
        >
          {content}
        </Permalink>
      </div>
    );
  }

}
","Generate a React component which takes in a media prop of type Immutable Map and displays a preview of the media. The preview should be a background image of the media's preview URL. If the media is a GIF, display a ""GIF"" label. If the media is sensitive, do not display the preview. The component should also include a Permalink to the status that the media belongs to."
"// Import dependencies and components.
import React from 'react';
import {TagCloud} from 'react-tagcloud';

// Create and export component class.
// I created this custom component because the default TagCloud refreshed anytime the page state changed.
export default class CustomTagCloud extends TagCloud {
    constructor(props) {
        super(props);
        this.state = {};
    }

    // This method was the main purpose/fix. It checks whether the tags themselves have actually updated.
    shouldComponentUpdate(nextProps) {
        return this.props.tags !== nextProps.tags;
    }

    render() {
        return (
            <TagCloud
                tags={this.props.tags}
                maxSize={this.props.maxSize}
                minSize={this.props.minSize}
                colorOptions={this.props.colorOptions}
                onClick={this.props.onClick}
            />
        )
    }

}",Create a custom React component that wraps the TagCloud component to fix a bug where the default TagCloud component refreshes anytime the page state changes. The custom component should only update when the tags themselves have actually updated.
"import React from 'react';
import SvgIcon from '../../SvgIcon';

const ActionSpeakerNotes = (props) => (
  <SvgIcon {...props}>
    <path d=""M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 14H6v-2h2v2zm0-3H6V9h2v2zm0-3H6V6h2v2zm7 6h-5v-2h5v2zm3-3h-8V9h8v2zm0-3h-8V6h8v2z""/>
  </SvgIcon>
);
ActionSpeakerNotes.displayName = 'ActionSpeakerNotes';
ActionSpeakerNotes.muiName = 'SvgIcon';

export default ActionSpeakerNotes;
",Design a React component that renders an SVG icon representing a speaker notes outline.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let MapsLocalPizza = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 2C8.43 2 5.23 3.54 3.01 6L12 22l8.99-16C18.78 3.55 15.57 2 12 2zM7 7c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm5 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z""/>
  </SvgIcon>
);
MapsLocalPizza = pure(MapsLocalPizza);
MapsLocalPizza.displayName = 'MapsLocalPizza';
MapsLocalPizza.muiName = 'SvgIcon';

export default MapsLocalPizza;
",Design a React component for an SVG icon of a pizza takeout box.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let EditorVerticalAlignTop = (props) => (
  <SvgIcon {...props}>
    <path d=""M8 11h3v10h2V11h3l-4-4-4 4zM4 3v2h16V3H4z""/>
  </SvgIcon>
);
EditorVerticalAlignTop = pure(EditorVerticalAlignTop);
EditorVerticalAlignTop.displayName = 'EditorVerticalAlignTop';
EditorVerticalAlignTop.muiName = 'SvgIcon';

export default EditorVerticalAlignTop;
",Generate a React component that renders a Material Design icon for vertical top text alignment. The icon should be pure and have a display name of 'EditorVerticalAlignTop'.
"import React from 'react'

import { Label } from 'reactstrap'

import Form from './components/Form'
import Input from './components/Input'
import Group from './components/Group'

class MyForm extends React.Component {
  handleSubmit = () => {
    // eslint-disable-next-line
    console.log('Programmatic submission')
  }

  render() {
    return (
      <div>
        <p>Form to submit</p>
        <Form onSubmit={this.handleSubmit} ref={(ref) => { this.form = ref }}>
          <Group>
            <Label htmlFor=""name"">
              Your name <sup>&lowast;</sup>
            </Label>
            <Input
              name=""name""
              required
            />
          </Group>
        </Form>
        <div>
          <p>External button</p>
          <button onClick={() => this.form.submit()}>Programmatic submission</button>
        </div>
      </div>

    )
  }
}

export default MyForm
",Design a form with a label and input field. Add a submit button that uses a function to submit the form programmatically.
"import 'whatwg-fetch';
import React from 'react';
import ReactDOM from 'react-dom';
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import logger from 'redux-logger';
import { Provider } from 'react-redux';
import { AppContainer } from 'react-hot-loader';
import App from './components/App';
import rootReducer from './store/root/reducers';

const storeParams = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();

let middleware;

if (process.env.NODE_ENV !== 'production') {
  middleware = applyMiddleware(thunk, logger);
} else {
  middleware = applyMiddleware(thunk);
}

const store = createStore(
  rootReducer,
  storeParams,
  middleware,
);

const appProvider = (
  <AppContainer>
    <Provider store={store}>
      <App />
    </Provider>
  </AppContainer>
);

ReactDOM.render(appProvider, document.querySelector('.react-app'));

if (module.hot) {
  module.hot.accept('./components/App', () => {
    ReactDOM.render(
      <AppContainer>
        <Provider store={store}>
          <App />
        </Provider>
      </AppContainer>, document.querySelector('.app'),
    );
  });
}
","Create a React application setup with Redux, Thunk, Logger, and Hot Module Replacement, targeting a specific HTML element with the class name ""react-app""."
"import React from 'react'
import classnames from 'classnames'
import connect from '../hoc/connect'
import Link from './Link'

const withLocation = connect(({ state }) => {
  return {
    location: state.location
  }
})

export default withLocation(NavLink)

function NavLink({
  isActive: getIsActive,
  location,
  className,
  activeClassName,
  style,
  activeStyle,
  to,
  ...rest
}) {
  let isActive = checkActive(getIsActive, to, location)
  let finalClassName = classnames(className, isActive && activeClassName)
  let finalStyle = isActive ? { ...style, ...activeStyle } : style
  return <Link to={to} className={finalClassName} style={finalStyle} {...rest} />
}

function checkActive(getIsActive, path, location) {
  return getIsActive
    ? !!getIsActive(path, location)
    : path === location.raw
}
","Generate a React component called NavLink that extends the Link component and adds features such as active and inactive states, custom class names, styles for both active and inactive states, and a custom function to determine if the link is active."
"import _$ from 'jquery';
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import jsdom from 'jsdom';
import chai, { expect } from 'chai';
import chaiJquery from 'chai-jquery';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import reducers from '../src/reducers';

global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
global.window = global.document.defaultView;
global.navigator = global.window.navigator;
const $ = _$(window);

chaiJquery(chai, chai.util, $);

function renderComponent(ComponentClass, props = {}, state = {}) {
  const componentInstance =  TestUtils.renderIntoDocument(
    <Provider store={createStore(reducers, state)}>
      <ComponentClass {...props} />
    </Provider>
  );

  return $(ReactDOM.findDOMNode(componentInstance));
}

$.fn.simulate = function(eventName, value) {
  if (value) {
    this.val(value);
  }
  TestUtils.Simulate[eventName](this[0]);
};

export {renderComponent, expect};
","Create a set of helper functions for testing React components, including a function to render a component with Redux state, a function to simulate DOM events on a jQuery element, and functions to import and mock dependencies."
"import _ from 'lodash';
import React from 'react';
import { connect } from 'react-redux';
import postcardsActions from 'redux/modules/postcards/actions';
import PostcardBox from 'components/PostcardBox/PostcardBox';

const mapStateToProps = (state) => ({
    postcards: state.postcards
});

export class HomeView extends React.Component {
    constructor (props) {
        super(props);
    }

    componentDidMount () {
        const { dispatch } = this.props;
        dispatch(postcardsActions.fetch());
    }

    render () {
        let { postcards } = this.props;

        return (
            <div className='container text-center'>
                <div className='row'>
                    <div className='col-xs-2 col-xs-offset-5'>
                        { _.map(postcards.items, postcard => <PostcardBox key={postcard.id} postcard={postcard} />) }
                    </div>
                </div>
            </div>
        );
    }
}

HomeView.propTypes = {
    dispatch: React.PropTypes.func.isRequired,
    postcards: React.PropTypes.object.isRequired
};

export default connect(mapStateToProps)(HomeView);
","Create a React component that fetches an async collection of postcards and displays them in a grid using a child component, PostcardBox."
"import React from 'react'
import ImgUploader from './img-uploader'
import GoogleMap from './google-map'

import {photo} from '../services/moonridge'
import backend from '../services/moonridge'

export default class AddPoo extends React.Component {
  constructor(...props) {
    super(...props)
    this.state = {}
  }

  addImage = (imageData) => {
    this.setState({error: null, image: imageData})
  }
  submit = () => {
    console.log('submit', this)
    this.setState({inProgress: true})
    var imgBase64 = this.state.image
    var image = imgBase64.substr(imgBase64.indexOf(',') + 1)
    backend.rpc('savePhoto')(image).then(photoId => {
      const GPS = this.state.loc
      var toCreate = {
        loc: [GPS.lat, GPS.lng],
        photoIds: [photoId],
        type: 'poo'
      }
      return photo.create(toCreate).then(created => {
        location.hash = `/poo/${created._id}`
      })
    }, err => {
      this.setState({error: err})
      console.log('err', err)
    })
  }
  addLoc = (GPS) => {
    this.setState({loc: GPS})
  }
  render() {

    var submitBtn
    var state = this.state
    if (state.loc && state.image && !state.inProgress) {
      submitBtn = <div className='post button ok clickable' onClick={this.submit}>
        <span className='glyphicon glyphicon-ok'/>
      </div>
    }
    var alert
    if (state.error) {
      alert = <div className='alert'>
        {state.error}
      </div>
    }
    var map
    if (state.loc) {
      map = <GoogleMap center={state.loc} zoom={17} containerClass='small-map'></GoogleMap>
    }
    return <div className='container add-form'>
      <div className='post item'>
        {map}
      </div>
      <ImgUploader onGPSRead={this.addLoc} onImageRead={this.addImage}
                   icon={'img/poo-plain.svg'}/>
      {submitBtn}
      {alert}
    </div>
  }
}

AddPoo.defaultProps = {
  zoom: 9
}
","Develop a React component named AddPoo that allows users to report poo sightings. The component should feature:
* A Google Map for location selection
* An image uploader for capturing a photo of the sighting
* A submit button to save the sighting"
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let EditorBorderOuter = (props) => (
  <SvgIcon {...props}>
    <path d=""M13 7h-2v2h2V7zm0 4h-2v2h2v-2zm4 0h-2v2h2v-2zM3 3v18h18V3H3zm16 16H5V5h14v14zm-6-4h-2v2h2v-2zm-4-4H7v2h2v-2z""/>
  </SvgIcon>
);
EditorBorderOuter = pure(EditorBorderOuter);
EditorBorderOuter.displayName = 'EditorBorderOuter';
EditorBorderOuter.muiName = 'SvgIcon';

export default EditorBorderOuter;
","Generate the code for a React component that renders an ""Editor Border Outer"" icon for Material Design. The icon should be a square with a border around it, with two small squares inside."
"// @flow

import React from 'react';
import { connect } from 'react-redux';
import type { Dispatch } from 'redux';

import { updateModalType } from '../redux/actions';

import type { Action } from '../redux/actions';
import type { Position } from '../types/domain';
import type { PlayerPageState } from '../types/state';

type Props = {
  selectedPlayerName: string,
  selectedPosition: Position,
  openPositionSelector: () => void,
};

const PlayerBar = ({ selectedPlayerName, selectedPosition, openPositionSelector }: Props) => (
  <div className=""row fixed-top p-2 pl-3 pr-3 mb-2 playerbar"">
    <div className=""col-12 d-flex ml-auto mr-auto col-lg-10"">
      <div className=""mb-0 mt-1 h3 align-bottom playerbar-name"">
        {selectedPlayerName}
      </div>
      <div className=""ml-auto"">
        <button
          type=""button""
          className=""btn""
          onClick={() => openPositionSelector()}
          style={{
            backgroundColor: selectedPosition.color,
            color: '#fff',
          }}
        >
          {selectedPosition.abbreviation}
        </button>
      </div>
    </div>
  </div>
);

export default connect(
  (state: PlayerPageState) => ({
    selectedPlayerName: state.players[state.selectedPlayerId].name,
    selectedPosition: state.positions[state.selectedPositionId],
  }),
  (dispatch: Dispatch<Action>) => ({
    openPositionSelector: () => dispatch(updateModalType('PositionSelector')),
  }),
)(PlayerBar);
",Create a React function component that displays a player bar with the player's name and current position. The position should be clickable and open a modal to select a new position.
"import React from 'react'

import './layout.less'

class HorizontalLayout extends React.Component {
  static get defaultProps() {return{
    equalWidths: false,
    className: ''
  }}

  constructor(props) {
    super(props)
  }

  render() {
    let className = ""horizontal-layout "" + this.props.className
    if (this.props.equalWidths) {
      className = className + "" equal"" + this.props.children.length
    }
    return (
      <div className={className}>
        {this.props.children}
      </div>
    )
  }
}

class Column extends React.Component {
  static get defaultProps() {return{
    className: ''
  }}

  constructor(props) {
    super(props)
  }

  render() {
    let className = ""layout-column "" + this.props.className
    return (
      <div className={className}>
        {this.props.children}
      </div>
    )
  }
}

class VerticalLayout extends React.Component {
  static get defaultProps() {return{
    equalWidths: false,
    className: ''
  }}

  constructor(props) {
    super(props)
  }

  render() {
    let className = ""vertical-layout "" + this.props.className
    if (this.props.equalWidths) {
      className = className + "" equal"" + this.props.children.length
    }
    return (
      <div className={className}>
        {this.props.children}
      </div>
    )
  }
}

class Row extends React.Component {
  static get defaultProps() {return{
    className: '',
    size: 'expand',
    gutter: ''
  }}

  constructor(props) {
    super(props)
  }

  render() {
    let style = {}
    if (this.props.gutter) {
      style = {marginBottom: this.props.gutter}
    }
    let className = [""layout-row"", this.props.className, this.props.size].join("" "")
    return (
      <div style={style} className={className}>
        {this.props.children}
      </div>
    )
  }
}

export {HorizontalLayout, VerticalLayout, Column, Row}","Design a layout system in React using CSS Modules that includes HorizontalLayout, VerticalLayout, Row, and Column components. The HorizontalLayout and VerticalLayout should take a `equalWidths` prop that, when true, will make all of the children have equal widths. The Row component should take a `gutter` prop that will add space between the children. The Column and Row components should take a `className` prop for adding custom classes."
"import React from 'react';
import {Btn} from '../../components/Controls/Button/Button';
import History from '../../routes/History';
class Login extends React.Component {

    // this method is only to trigger route guards , remove and use your own logic
    handleLogin = () => {
        localStorage.setItem('token','token');
        History.push('/')
    }

    render(){
        return(
            <div className=""container my-5"">
                <h1>Login Page</h1>
                <Btn text='Login' handleClick={this.handleLogin}/>
            </div>
        )
    }
}


export default Login;","Create a React component representing a login page. The page should have a login button which, when clicked, sets a token in local storage and redirects the user to the home page."
"// @flow
import React, { Component } from 'react';
import { Link } from 'react-router';
import s from './ItemThumbnail.css';



export default class ItemThumbnail extends Component {
  static contextTypes = {
    router: React.PropTypes.object.isRequired
  }

  componentWillMount() {
    const { FITS } = window.astro
    const { item } = this.props

    new FITS(item.path, response => {
      console.log(response)
      const { hdus } = response

      const FIST_DATA = hdus[0]

      const bitpix = FIST_DATA.header.get('BITPIX')
      const bzero = FIST_DATA.header.get('BZERO')
      const bscale = FIST_DATA.header.get('BSCALE')
      const { buffer } = FIST_DATA.data

      console.log(
        FIST_DATA,
        FIST_DATA.header.get('BITPIX'),
        FIST_DATA.header.get('BZERO'),
        FIST_DATA.header.get('BSCALE'),
        FIST_DATA.data._getFrame(buffer, bitpix, bzero, bscale)
      )

    })
  }

  render() {
    return (
      <div>
        <div className={s.container}>
          <h2>Solar Data Application</h2>
        </div>
      </div>
    );
  }
}
",Create a React.js application that can read NASA FITS images through an API and display them on a page.
"import React from 'react'
import { Dropdown, Menu } from 'semantic-ui-react'

const DropdownExamplePointingTwo = () => (
  <Menu vertical>
    <Menu.Item>
      Home
    </Menu.Item>
    <Dropdown text='Messages' pointing='left' className='link item'>
      <Dropdown.Menu>
        <Dropdown.Item>Inbox</Dropdown.Item>
        <Dropdown.Item>Starred</Dropdown.Item>
        <Dropdown.Item>Sent Mail</Dropdown.Item>
        <Dropdown.Item>Drafts (143)</Dropdown.Item>
        <Dropdown.Divider />
        <Dropdown.Item>Spam (1009)</Dropdown.Item>
        <Dropdown.Item>Trash</Dropdown.Item>
      </Dropdown.Menu>
    </Dropdown>
    <Menu.Item>
      Browse
    </Menu.Item>
    <Menu.Item>
      Help
    </Menu.Item>
  </Menu>
)

export default DropdownExamplePointingTwo
","Create a React component that displays a vertical menu, with the first and third menu items being simple text labels and the second menu item being a dropdown with five options and a divider plus two additional options."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionPlayForWork = (props) => (
  <SvgIcon {...props}>
    <path d=""M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z""/>
  </SvgIcon>
);
ActionPlayForWork = pure(ActionPlayForWork);
ActionPlayForWork.displayName = 'ActionPlayForWork';
ActionPlayForWork.muiName = 'SvgIcon';

export default ActionPlayForWork;
","Create a React component that displays the Play For Work icon from the Material Design icon set. The component should be pure and have the display name ""ActionPlayForWork""."
"import React from 'react';
import classNames from 'classnames';
import { Field } from 'redux-form/immutable';
import { Link } from 'react-router';
import FaUser from 'react-icons/lib/fa/user';
import FaLock from 'react-icons/lib/fa/lock';
import Button from '../Common/Button';
import ErrorMessages from '../Common/ErrorMessages';
import { injectProps } from '../../helpers/decorators';

import style from './LogIn.css';

function Form({ hasErrors, handleSubmit }) {
  return (
    <form onSubmit={handleSubmit}>

      <div className={style.fieldArea}>
        <label className={style.label}>
          <FaUser className=""icon""/>
          <Field
            className=""input""
            name=""username""
            component=""input""
            placeholder=""Username""/>
        </label>

        <label className={style.label}>
          <FaLock className=""icon""/>
          <Field
            className=""input""
            name=""password""
            component=""input""
            type=""password""
            placeholder=""Password""/>
        </label>
      </div>

      <Button
        className={classNames({ error: hasErrors })}
        type=""submit"">
        Sign In
      </Button>
    </form>
  );
}

export default class LogIn extends React.Component {

  @injectProps
  render({ errors, handleSubmit }) {
    const hasErrors = !!(errors && errors.size);
    let errorMessages = hasErrors ?
      <ErrorMessages errors={errors}/> :
      null;

    return (
      <div className={style.main}>
        {errorMessages}
        <Form
          hasErrors={hasErrors}
          handleSubmit={handleSubmit}/>
        <div className={style.links}>
          <Link className=""link"" to=""/signup"">Sign up</Link>
        </div>
      </div>
    );
  }

}
","Create a React log in form that takes a username and password, with message notifications for error conditions.
The form should use the provided 'redux-form' package and the CSS modules provided in the 'style' variable.
The form should use Font Awesome icons for the username and password fields, and contain a submit button labelled 'sign in'.
Additionally, the form should include a link to a sign up page if there are any errors."
"/*
 * Copyright (C) Pootle contributors.
 *
 * This file is a part of the Pootle project. It is distributed under the GPL3
 * or later license. See the LICENSE file for a copy of the license and the
 * AUTHORS file for copyright and authorship information.
 */

'use strict';

import React from 'react';
import { PureRenderMixin } from 'react/addons';

import AuthContent from './AuthContent';


let SocialAuthError = React.createClass({
  mixins: [PureRenderMixin],

  propTypes: {
    socialError: React.PropTypes.object,
  },


  /* Layout */

  render() {
    let errorMsg;
    if (this.props.socialError) {
      errorMsg = interpolate(
        gettext('An error occurred while attempting to sign in via %s.'),
        [this.props.socialError.provider]
      );
    } else {
      errorMsg = gettext('An error occurred while attempting to sign in via your social account.');
    }

    let errorFace = {
      fontSize: '400%',
      marginBottom: '0.5em',
    };
    return (
      <AuthContent>
        <h2 style={errorFace}>{`{õ_õ}`}</h2>
        <p>{errorMsg}</p>
      {this.props.socialError &&
        <p>{`${this.props.socialError.exception.name}: ${this.props.socialError.exception.msg} `}</p>
      }
      {this.props.socialError &&
        <a href={this.props.socialError.retry_url}>
          {gettext('Try again')}
        </a>
      }
      </AuthContent>
    );
  }

});


export default SocialAuthError;
",Describe the layout for a React component that displays an error message when a user fails to sign in using a social account.
"import React from 'react';
import ReactDOM from 'react-dom';
import { createBrowserHistory } from 'history';

import {
    HashRouter,
    Route,
    Switch
} from 'react-router-dom';

import App from './containers/App/App.jsx';

import './assets/css/bootstrap.min.css';
import './assets/css/animate.min.css';
import './assets/sass/light-bootstrap-dashboard.css';
import './assets/css/demo.css';
import './assets/css/pe-icon-7-stroke.css';



const history = createBrowserHistory();

ReactDOM.render((
    <HashRouter history={history}>
        <Switch>
            <Route path=""/"" name=""Home"" component={App}/>
        </Switch>
    </HashRouter>
),document.getElementById('root'));
",Create a React application with routing using the HashRouter and render an App component as the root component.
"import PropTypes from 'prop-types';
import React from 'react';
import { BannerNavigation, BannerNavigationItem } from './BannerNavigation';
import Search from '../Search';
import Link from '../Link';

const linkList = [
  { name: 'WFPgo', link: 'https://go.wfp.org/' },
  { name: 'Communities', link: 'https://communities.wfp.org/' },
  { name: 'Manuals', link: 'https://manuals.wfp.org/' },
  { name: 'GoDocs', link: 'https://godocs.wfp.org/' },
  { name: 'WeLearn', link: 'https://welearn.wfp.org/' },
  { name: 'Dashboard', link: 'https://dashboard.wfp.org/' },
  { name: 'OPweb', link: 'https://opweb.wfp.org/' },
  { name: 'Self-Service', link: 'https://selfservice.go.wfp.org/' },
  { name: 'UN Booking Hub', link: 'https://humanitarianbooking.wfp.org/' },
  { name: 'WFP.org', link: 'https://wfp.org/' },
];

const BannerNavigationWithContent = ({ searchOnChange, search, ...other }) => (
  <BannerNavigation {...other}>
    {linkList.map((e) => (
      <BannerNavigationItem>
        <Link href={e.link} target=""_blank"">
          {e.name}
        </Link>
      </BannerNavigationItem>
    ))}
  </BannerNavigation>
);

BannerNavigationWithContent.propTypes = {
  /**
   * The CSS class name to be placed on the wrapping element.
   */
  className: PropTypes.string,
  /**
   * Specify the max-width on desktop devices (same as \`Wrapper\` component)
   */
  pageWidth: PropTypes.oneOf(['sm', 'md', 'lg', 'full']),
  /**
   * Allows to disable the search input
   */
  search: PropTypes.bool,
  /**
   * A onChange Function for the search
   */
  searchOnChange: PropTypes.func,
};

BannerNavigationWithContent.defaultProps = {
  search: false,
  searchOnChange: () => {},
};

export { BannerNavigationWithContent };
","Create a React component called BannerNavigationWithContent that renders a banner navigation bar with a list of links. The component should have the following props:

- className: The CSS class name to be placed on the wrapping element.
- pageWidth: Specify the max-width on desktop devices.
- search: Allows to disable the search input.
- searchOnChange: A onChange Function for the search."
"/**
*
* LocaleToggle
*
*/

import React from 'react';

import Select from './Select';
import ToggleOption from '../ToggleOption';

function Toggle(props) {
  let content = (<option>--</option>);

  // If we have items, render them
  if (props.values) {
    content = props.values.map((value) => (
      <ToggleOption key={value} value={value} message={props.messages[value]} />
    ));
  }

  return (
    <Select value={props.value} onChange={props.onToggle}>
      {content}
    </Select>
  );
}

Toggle.propTypes = {
  onToggle: React.PropTypes.func,
  values: React.PropTypes.array,
  value: React.PropTypes.string,
  messages: React.PropTypes.object,
};

export default Toggle;
","Create a React component called Toggle that takes in three props: values, value, and messages. 
The values prop should be an array of strings representing the options for the toggle, the value prop should be the currently selected value, and the messages prop should be an object containing the messages to display for each option.

The Toggle component should render a select element with the options specified by the values prop. The selected option should be the one specified by the value prop. When the user selects a new option, the onToggle prop should be called with the new value."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let ActionZoomIn = (props) => (
  <SvgIcon {...props}>
    <path d=""M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zm2.5-4h-2v2H9v-2H7V9h2V7h1v2h2v1z""/>
  </SvgIcon>
);
ActionZoomIn = pure(ActionZoomIn);
ActionZoomIn.displayName = 'ActionZoomIn';
ActionZoomIn.muiName = 'SvgIcon';

export default ActionZoomIn;
",Generate a React component called ActionZoomIn that renders an SVG icon representing the zoom in action. The icon should be a magnifying glass with a plus sign inside. The component should be pure and have a display name of 'ActionZoomIn'.
"import 'babel-polyfill'; // for redux-saga
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Router,
  Route,
  hashHistory
} from 'react-router';

import {
  createStore,
  applyMiddleware,
  compose
} from 'redux';

import reducer from './reducer';
import { Provider } from 'react-redux';
import createSagaMiddleware from 'redux-saga';
import rootSaga from './sagas';
// our components
import Layout from './components/layout';
import { HomeContainer } from './components/home';
import { DetailContainer } from './components/detail';
import { AddContainer } from './components/add';
// app css
import '../dist/css/style.css';

// Filestack API requires to set a key
filepicker.setKey(""YOUR_API_KEY"");

const sagaMiddleware = createSagaMiddleware();
const store = createStore(
  reducer,
  compose(
    applyMiddleware(sagaMiddleware),
    window.devToolsExtension ? window.devToolsExtension() : f => f // connect to redux devtools
  )
);
sagaMiddleware.run(rootSaga);

// the 3 paths of the app
const routes = <Route component={Layout}>
  <Route path=""/"" component={HomeContainer} />
  <Route path=""/detail/:id"" component={DetailContainer} />
  <Route path=""/add"" component={AddContainer} />
</Route>;

// add provider as first component and connect the store to it
ReactDOM.render(
	<Provider store={store}>
		<Router history={hashHistory}>{routes}</Router>
	</Provider>,
	document.getElementById('app')
);
","Create a React app with basic routing, redux store with Saga middleware, and a layout component for managing sub-routes. Include the initial entry point and necessary imports."
"import React from 'react';
import classNames from 'classnames';
import { ActivityTypes } from 'constants/ActorAppConstants';

//import ActivityActionCreators from 'actions/ActivityActionCreators';

import ActivityStore from 'stores/ActivityStore';

import UserProfile from 'components/activity/UserProfile.react';
import GroupProfile from 'components/activity/GroupProfile.react';

const getStateFromStores = () => {
  return {
    activity: ActivityStore.getActivity(),
    isOpen: ActivityStore.isOpen()
  };
};

class ActivitySection extends React.Component {
  constructor(props) {
    super(props);

    this.state = getStateFromStores();

    ActivityStore.addChangeListener(this.onChange);
  }

  componentWillUnmount() {
    ActivityStore.removeChangeListener(this.onChange);
  }

  render() {
    const activity = this.state.activity;

    if (activity !== null) {
      const activityClassName = classNames('activity', {
        'activity--shown': this.state.isOpen
      });
      let activityBody;

      switch (activity.type) {
        case ActivityTypes.USER_PROFILE:
          activityBody = <UserProfile user={activity.user}/>;
          break;
        case ActivityTypes.GROUP_PROFILE:
          activityBody = <GroupProfile group={activity.group}/>;
          break;
        default:
      }

      return (
        <section className={activityClassName}>
          {activityBody}
        </section>
      );
    } else {
      return null;
    }
  }

  onChange = () => {
    this.setState(getStateFromStores());
  };
}

export default ActivitySection;
",Create a React component that displays a section with activity updates. The section should be hidden initially and only become visible when an activity event is triggered. The activity section should be able to display user profiles or group profiles based on the type of activity.
"/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  AppRegistry,
  StyleSheet,
  Text,
  View
} from 'react-native';

export default class ScrollableTabView extends Component {
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>
          Welcome to React Native!
        </Text>
        <Text style={styles.instructions}>
          To get started, edit index.android.js
        </Text>
        <Text style={styles.instructions}>
          Double tap R on your keyboard to reload,{'\n'}
          Shake or press menu button for dev menu
        </Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

AppRegistry.registerComponent('ScrollableTabView', () => ScrollableTabView);
","Generate the code snippet for a React Native component that displays a welcome message and instructions on how to get started. The component should have a container with styles for flex, justification, alignment, and background color. It should also include text elements for the welcome message and instructions. The component should be registered with AppRegistry."
"import React from 'react';

export default class NodeInputListItem extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      hover: false
    };
  }

  onMouseUp(e) {
    e.stopPropagation();
    e.preventDefault();

    this.props.onMouseUp(this.props.index);
  }

  onMouseOver() {
    this.setState({ hover: true });
  }

  onMouseOut() {
    this.setState({ hover: false });
  }

  noop(e) {
    e.stopPropagation();
    e.preventDefault();
  }

  render() {
    const { name } = this.props.item;
    const { hover } = this.state;

    return (
      <li>
        <a
          onClick={e => this.noop(e)}
          onMouseUp={e => this.onMouseUp(e)}
          href=""#""
        >
          <i
            className={hover ? 'fa fa-circle-o hover' : 'fa fa-circle-o'}
            onMouseOver={() => {
              this.onMouseOver();
            }}
            onMouseOut={() => {
              this.onMouseOut();
            }}
          />
          {name}
        </a>
      </li>
    );
  }
}
","Create a React class component with these properties and methods:
- name: NodeInputListItem
- a constructor that sets the initial state to `{ hover: false }`
- method `onMouseUp` that calls `this.props.onMouseUp(this.props.index)`
- method `onMouseOver` that sets the state `hover` to `true`
- method `onMouseOut` that sets the state `hover` to `false`
- method `noop` that stops event propagation and prevents the default behavior
- a render method that returns an `li` element with an `a` tag inside, containing an `<i>` element with the class name `'fa fa-circle-o'` or `'fa fa-circle-o hover'` based on the state of `hover`"
"import PropTypes from 'prop-types';
import React from 'react';

import SectionHeader from 'components/common/typography/SectionHeader';

import BookGrid from './BookGrid';

/**
 * Render a single bookshelf containing a collection of books
 * @param  {Array}    options.booksList     The list of books
 * @param  {Function} options.onShelfChange The callback for shelf change event
 * @param  {string}   options.title         The title of the bookshelf
 * @param  {Object}   options               The props for the BookShelf component
 * @return {JSX}
 */
const BookShelf = ({ booksList, onShelfChange, title, }) => (
  <div className=""bookshelf"">
    {
      title &&
      <SectionHeader
        className=""bookshelf-title""
        title={title}
      />
    }
    <div className=""bookshelf-books"">
      {
        booksList &&
        <BookGrid
          booksList={booksList}
          onShelfChange={onShelfChange}
          viewDetailsLink
        />
      }
    </div>
  </div>
);

BookShelf.propTypes = {
  booksList: PropTypes.array.isRequired,
  onShelfChange: PropTypes.func,
  title: PropTypes.string.isRequired,
};

BookShelf.defaultProps = {
  onShelfChange: () => {},
};

export default BookShelf;
","Generate the React component code snippet for a bookshelf that displays a collection of books, with an optional title. Include styling and event handling for when the shelf is clicked."
"import React from 'react';
import PropTypes from 'prop-types';
import Motion from '../../ui/util/optional_motion';
import spring from 'react-motion/lib/spring';
import { FormattedMessage } from 'react-intl';

export default class UploadArea extends React.PureComponent {

  static propTypes = {
    active: PropTypes.bool,
    onClose: PropTypes.func,
  };

  handleKeyUp = (e) => {
    const keyCode = e.keyCode;
    if (this.props.active) {
      switch(keyCode) {
      case 27:
        e.preventDefault();
        e.stopPropagation();
        this.props.onClose();
        break;
      }
    }
  }

  componentDidMount () {
    window.addEventListener('keyup', this.handleKeyUp, false);
  }

  componentWillUnmount () {
    window.removeEventListener('keyup', this.handleKeyUp);
  }

  render () {
    const { active } = this.props;

    return (
      <Motion defaultStyle={{ backgroundOpacity: 0, backgroundScale: 0.95 }} style={{ backgroundOpacity: spring(active ? 1 : 0, { stiffness: 150, damping: 15 }), backgroundScale: spring(active ? 1 : 0.95, { stiffness: 200, damping: 3 }) }}>
        {({ backgroundOpacity, backgroundScale }) => (
          <div className='upload-area' style={{ visibility: active ? 'visible' : 'hidden', opacity: backgroundOpacity }}>
            <div className='upload-area__drop'>
              <div className='upload-area__background' style={{ transform: `scale(${backgroundScale})` }} />
              <div className='upload-area__content'><FormattedMessage id='upload_area.title' defaultMessage='Drag & drop to upload' /></div>
            </div>
          </div>
        )}
      </Motion>
    );
  }

}
","Create a component that handles drag and drop file upload. When the component is active, it should display a drop zone with a title. The drop zone should have a background that scales up when the component is active and fades in and out. When the escape key is pressed while the component is active, it should close."
"import React from 'react';
import DatePicker from 'material-ui/DatePicker';

/**
 * Inline Date Pickers are displayed below the input, rather than as a modal dialog.
 */
const DatePickerExampleInline = () => (
  <div>
    <DatePicker hintText=""Portrait Inline Dialog"" container=""inline"" />
    <DatePicker hintText=""Landscape Inline Dialog"" container=""inline"" mode=""landscape"" />
  </div>
);

export default DatePickerExampleInline;
","Create a DatePicker component that displays an inline date picker, rather than as a modal dialog. There should be one date picker with a portrait orientation and one with a landscape orientation."
"/**
 * React Starter Kit (https://www.reactstarterkit.com/)
 *
 * Copyright © 2014-present Kriasoft, LLC. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

import React from 'react';
import PropTypes from 'prop-types';
import history from '../../history';

function isLeftClickEvent(event) {
  return event.button === 0;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

class Link extends React.Component {
  static propTypes = {
    to: PropTypes.string.isRequired,
    children: PropTypes.node.isRequired,
    onClick: PropTypes.func,
  };

  static defaultProps = {
    onClick: null,
  };

  handleClick = event => {
    if (this.props.onClick) {
      this.props.onClick(event);
    }

    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
      return;
    }

    if (event.defaultPrevented === true) {
      return;
    }

    event.preventDefault();
    history.push(this.props.to);
  };

  render() {
    const { to, children, ...props } = this.props;
    return (
      <a href={to} {...props} onClick={this.handleClick}>
        {children}
      </a>
    );
  }
}

export default Link;
","Generate a React component that renders an anchor tag with a specified 'to' prop and an 'onClick' event handler. Ensure the 'onClick' handler prevents the default action and pushes the 'to' prop value to the history stack. Allow for custom onClick behavior and gracefully handle modified events (metaKey, altKey, ctrlKey, shiftKey) and non-left-click events."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let DeviceBatteryCharging60 = (props) => (
  <SvgIcon {...props}>
    <path fillOpacity="".3"" d=""M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V11h3.87L13 7v4h4V5.33C17 4.6 16.4 4 15.67 4z""/><path d=""M13 12.5h2L11 20v-5.5H9l1.87-3.5H7v9.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V11h-4v1.5z""/>
  </SvgIcon>
);
DeviceBatteryCharging60 = pure(DeviceBatteryCharging60);
DeviceBatteryCharging60.displayName = 'DeviceBatteryCharging60';
DeviceBatteryCharging60.muiName = 'SvgIcon';

export default DeviceBatteryCharging60;
",Create a React component using Material UI's SvgIcon component that renders an SVG icon of a battery charging at 60%.
"import PropTypes from 'prop-types'
import React from 'react'

export default function FindSongs (props) {
  return (
    <div className=""text-center"">
      <h1>Your library is empty!</h1>
      <button className=""btn-default"" onClick={props.showSettings}>
        Start looking for songs
      </button>
    </div>
  )
}

FindSongs.propTypes = {
  showSettings: PropTypes.func.isRequired
}
","Create a simple React component that displays a message stating that the music library is empty and includes a button that, when clicked, triggers a function to search for songs."
"import React from 'react';

export default ({ ...props }) => {
    return (
        <svg {...props} width=""16"" height=""16"" viewBox=""0 0 16 16"">
            <g>
                <path
                    d=""M14.39,2.31H1.61c-0.83,0-1.5,0.68-1.5,1.5v8.41c0,0.83,0.67,1.5,1.5,1.5h12.78c0.49,0,0.93-0.23,1.19-0.6
                    c0.08-0.09,0.14-0.19,0.18-0.3c0.09-0.18,0.13-0.39,0.13-0.6V3.81C15.89,2.99,15.22,2.31,14.39,2.31z M1.11,3.81
                    c0-0.27,0.22-0.5,0.5-0.5h12.78c0.28,0,0.5,0.23,0.5,0.5v7.96l-4.01-4.02c-0.14-0.14-0.36-0.15-0.51-0.02L7.96,9.77L5.25,7.08
                    C5.12,6.95,4.91,6.93,4.76,7.04L1.11,9.8V3.81z M1.61,12.72c-0.28,0-0.5-0.23-0.5-0.5v-1.47l3.84-2.91l2.7,2.68l2.21,2.2H1.61z
                    M14.39,12.72h-3.46L8.49,10.3l2.1-1.78l4.09,4.1C14.6,12.68,14.5,12.72,14.39,12.72z""
                />
            </g>
            <g>
                <path d=""M15.76,12.82c0,0.09-0.03,0.18-0.1,0.25c-0.02,0.02-0.05,0.04-0.08,0.05C15.66,13.03,15.72,12.93,15.76,12.82z"" />
            </g>
            <g>
                <path
                    d=""M12.718,7.153c-0.872,0-1.582-0.71-1.582-1.583c0-0.873,0.71-1.583,1.582-1.583c0.873,0,1.583,0.71,1.583,1.583
                    C14.301,6.443,13.591,7.153,12.718,7.153z M12.718,4.738c-0.459,0-0.832,0.374-0.832,0.833c0,0.459,0.373,0.833,0.832,0.833
                    s0.833-0.374,0.833-0.833C13.551,5.111,13.177,4.738,12.718,4.738z""
                />
            </g>
        </svg>
    );
};
",Create an SVG icon that uses the Material Design icon set. The icon should represent a person with a plus sign on their chest. The icon should be 16x16 pixels in size and have a black fill.
"import React, { Component } from 'react';
import { postsData } from '../sample-data.js';

class PostHeader extends Component {

  state = {
    posts: postsData
  }

  render() {

    return (
      <header className=""intro-header post"">
          <div className=""container"">
              <div className=""row"">
                  <div className=""col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1"">
                      <div className=""post-heading"">
                          <h1>{this.state.posts[0].title}</h1>
                          <h2 className=""subheading"">{this.state.posts[0].subtitle}</h2>
                          <span className=""meta"">Posted by <a href=""#"">{this.state.posts[0].username}</a> on {this.state.posts[0].datetime}</span>
                      </div>
                  </div>
              </div>
          </div>
      </header>
    );
  }
}

export default PostHeader;
","Create a React component that renders a header for a post. The header should include the post's title, subtitle, a link to the author's profile, and the date and time the post was published."
"require('isomorphic-fetch');
require('es6-promise').polyfill();

import React from 'react';
import { render } from 'react-dom';
import { Router } from 'react-router';
import { createHistory } from 'history';
import routes from '../routes';

const history = createHistory();

render(
  <Router children={routes} history={history} />,
  document.getElementById('app')
);
","Create a React application using isomorphic-fetch, es6-promise, react, react-dom, react-router, and history."
"/* eslint-disable import/no-extraneous-dependencies */
import React from 'react';
import { storiesOf } from '@storybook/react';
import FlexCenter from './FlexCenter';
import { specs, urls } from './LiveView.stories';
import { ignoredRegions } from './IgnoredRegions.stories';

export { specs, urls, ignoredRegions };

storiesOf('FlexCenter', module).add('2:1', () => (
  <FlexCenter width={200} height={100} style={{ background: 'papayawhip' }}>
    <div style={{ padding: 30, background: 'hotpink' }}>2:1</div>
  </FlexCenter>
));
","Create a Storybook story for a React component named FlexCenter that renders a pink box with text inside and a background color of ""papayawhip."" The box should be 200 pixels wide and 100 pixels tall. The text inside the box should read ""2:1."""
"import React from 'react';
import Select from 'react-select';

var DisabledUpsellOptions = React.createClass({
	displayName: 'DisabledUpsellOptions',
	propTypes: {
		label: React.PropTypes.string,
	},
	getInitialState () {
		return {};
	},
	setValue (value) {
		this.setState({ value });
		console.log('Support level selected:', value.label);
	},
	renderLink: function() {
		return <a style={{ marginLeft: 5 }} href=""/upgrade"" target=""_blank"">Upgrade here!</a>;
	},
	renderOption: function(option) {
		return <span style={{ color: option.color }}>{option.label} {option.link}</span>;
	},
	renderValue: function(option) {
		return <strong style={{ color: option.color }}>{option.label}</strong>;
	},
	render: function() {
		var options = [
			{ label: 'Basic customer support', value: 'basic', color: '#E31864' },
			{ label: 'Premium customer support', value: 'premium', color: '#6216A3' },
			{ label: 'Pro customer support', value: 'pro', disabled: true, link: this.renderLink() },
		];
		return (
			<div className=""section"">
				<h3 className=""section-heading"">{this.props.label}</h3>
				<Select
					placeholder=""Select your support level""
					options={options}
					optionRenderer={this.renderOption}
					onChange={this.setValue}
					value={this.state.value}
					valueRenderer={this.renderValue}
					/>
				<div className=""hint"">This demonstates custom render methods and links in disabled options</div>
			</div>
		);
	}
});
module.exports = DisabledUpsellOptions;
","Create a React component that uses the Select component to display a list of customer support options. The options should include Basic, Premium, and Pro. Pro should be disabled and should have a link to an upgrade page. The component should also include custom render methods for the options and value."
"import React, { Component } from 'react';

class MenuAside extends Component {
  constructor(props) {
    super(props);
  }

  isActiveButton(index) {
    if (index === this.props.menuAside.buttonActiveIndex) {
      return 'item-active';
    }
    return '';
  }

  render() {
    const lists = [
      {
        index: 0,
        name: 'all',
        icon: 'glyphicon-th-list',
        'chinese': '全部',
      },
      {
        index: 1,
        name: 'image',
        icon: 'glyphicon-picture',
        'chinese': '图片',
      },
      {
        index: 2,
        name: 'doc',
        icon: 'glyphicon-file',
        'chinese': '文档',
      },
      {
        index: 3,
        name: 'video',
        icon: 'glyphicon-facetime-video',
        'chinese': '视频',
      },
      {
        index: 4,
        name: 'music',
        icon: 'glyphicon-music',
        'chinese': '音乐',
      },
      {
        index: 5,
        name: 'trash',
        icon: 'glyphicon-trash',
        'chinese': '回收站',
      }
    ];

    const menuLists = lists.map((obj) =>
      <button
        key={obj.name}
        name={obj.name}
        type=""button""
        className={'list-group-item list-item ' + this.isActiveButton(obj.index)}
        onClick={this.props.onMenuAsideButtonClick}>
          <span className={'glyphicon ' + obj.icon} aria-hidden=""true""></span>
          {obj.chinese}
        </button>
    );

    return (
      <div className=""menu-aside-wrapper"">
        <div className=""list-group menu-list"" data-active-index={this.props.menuAside.buttonActiveIndex}>
          {menuLists}
        </div>
      </div>
    )
  }
}

export default MenuAside;
","Generate React code for a component called MenuAside that renders a menu with multiple buttons. Each button should have a unique index, name, icon (e.g., glyphicon-th-list), and Chinese label. The component should also have a prop called ""menuAside"" that contains a ""buttonActiveIndex"" property to indicate the currently active button."
"import React, { Component } from 'react';
import { Text } from 'react-native';
import { connect } from 'react-redux';
import { emailChanged, passwordChanged, loginUser } from '../actions';
import { Card, CardSection, Button, Input, Spinner } from './common';

class LoginForm extends Component {
  onEmailChange(text) {
    this.props.emailChanged(text);
  }

  onPasswordChange(text) {
    this.props.passwordChanged(text);
  }

  onButtonPress() {
    const { email, password } = this.props;

    this.props.loginUser({ email, password });
  }

  renderButton() {
    if (this.props.loading) {
      return <Spinner size=""large"" />;
    }
    return (
      <Button onPress={this.onButtonPress.bind(this)}>
      Login
      </Button>
    );
  }

  render() {
    return (
      <Card>
        <CardSection>
          <Input
            label=""Email""
            placeholder=""email@gmail.com""
            onChangeText={this.onEmailChange.bind(this)}
            value={this.props.email}
          />
        </CardSection>
        <CardSection>
          <Input
            secureTextEntry
            label=""Password""
            placeholder=""password""
            onChangeText={this.onPasswordChange.bind(this)}
            value={this.props.password}
          />
        </CardSection>

        <Text style={styles.errorTextStyle}>
        {this.props.error}
        </Text>

        <CardSection>
          {this.renderButton()}
        </CardSection>
      </Card>
    );
  }
}

const mapStateToProps = state => {
  return {
    email: state.auth.email,
    password: state.auth.password,
    error: state.auth.error,
    loading: state.auth.loading
  };
};

const styles = {
  errorTextStyle: {
    fontSize: 20,
    alignSelf: 'center',
    color: 'red'
  }
};

export default connect(mapStateToProps, {
  emailChanged,
  passwordChanged,
  loginUser
})(LoginForm);
","Create a React Native component called LoginForm that uses Redux to manage its state and connect to the store. It should have fields for email and password, as well as a button to log the user in. When the user types in the email or password fields, the state should be updated. When the button is pressed, the form should be submitted and the login action should be dispatched. If the login is successful, the user should be redirected to the home screen. If the login is unsuccessful, an error message should be displayed."
"import React from 'react';
import { Link } from 'react-router';

class Sidebar extends React.Component {

  render () {
    var assignments = COURSES[this.props.params.courseId].assignments

    return (
      <div>
        <h3>Sidebar Assignments</h3>
        <ul>
          {assignments.map(assignment => (
            <li key={assignment.id}>
              <Link to={`/course/${this.props.params.courseId}/assignments/${assignment.id}`}>
                {assignment.title}
              </Link>
            </li>
          ))}
        </ul>
      </div>
    );
  }

}

export default Sidebar;

","Generate the code to render the sidebar for a course which displays a title, all the assignments under the course, and allows for each assignment to be clicked and redirect to the assignment specific page."
"import React from 'react';
import Field from '../Field';
import Checkbox from '../../components/Checkbox';
import { FormField } from '../../../admin/client/App/elemental';

const NOOP = () => {};

module.exports = Field.create({
	displayName: 'BooleanField',
	statics: {
		type: 'Boolean',
	},
	propTypes: {
		indent: React.PropTypes.bool,
		label: React.PropTypes.string,
		onChange: React.PropTypes.func.isRequired,
		path: React.PropTypes.string.isRequired,
		value: React.PropTypes.bool,
	},

	valueChanged (value) {
		this.props.onChange({
			path: this.props.path,
			value: value,
		});
	},
	renderFormInput () {
		if (!this.shouldRenderField()) return;

		return (
			<input
				name={this.getInputName(this.props.path)}
				type=""hidden""
				value={!!this.props.value}
			/>
		);
	},
	renderUI () {
		const { indent, value, label, path } = this.props;

		return (
			<div data-field-name={path} data-field-type=""boolean"">
				<FormField offsetAbsentLabel={indent}>
					<label style={{ height: '2.3em' }}>
						{this.renderFormInput()}
						<Checkbox
							checked={value}
							onChange={(this.shouldRenderField() && this.valueChanged) || NOOP}
							readonly={!this.shouldRenderField()}
						/>
						<span style={{ marginLeft: '.75em' }}>
							{label}
						</span>
					</label>
					{this.renderNote()}
				</FormField>
			</div>
		);
	},
});
",Generate a React component for a Boolean field. The field should include a checkbox for user interaction and a hidden input element for submitting the field value in a form. The checkbox should be disabled if the field is not editable.
"import React from 'react';
import {
  Step,
  Stepper,
  StepLabel,
} from 'material-ui/Stepper';
import WarningIcon from 'material-ui/svg-icons/alert/warning';
import {red500} from 'material-ui/styles/colors';

/**
 * Custom icons can be used to create different visual states.
 */
class CustomIcon extends React.Component {

  state = {
    stepIndex: 0,
  };

  handleNext = () => {
    const {stepIndex} = this.state;
    if (stepIndex < 2) {
      this.setState({stepIndex: stepIndex + 1});
    }
  };

  handlePrev = () => {
    const {stepIndex} = this.state;
    if (stepIndex > 0) {
      this.setState({stepIndex: stepIndex - 1});
    }
  };

  getStepContent(stepIndex) {
    switch (stepIndex) {
      case 0:
        return 'Select campaign settings...';
      case 1:
        return 'What is an ad group anyways?';
      case 2:
        return 'This is the bit I really care about!';
      default:
        return 'You\'re a long way from home sonny jim!';
    }
  }

  render() {
    return (
      <div style={{width: '100%', maxWidth: 700, margin: 'auto'}}>
        <Stepper linear={false}>
          <Step completed={false}>
            <StepLabel>
              Select campaign settings
            </StepLabel>
          </Step>
          <Step completed={false}>
            <StepLabel
              icon={<WarningIcon color={red500} />}
              style={{color: red500}}
            >
              Create an ad group
            </StepLabel>
          </Step>
          <Step completed={false}>
            <StepLabel>
              Create an ad
            </StepLabel>
          </Step>
        </Stepper>
      </div>
    );
  }
}

export default CustomIcon;
",Generate a React code snippet that uses `material-ui` to create a 3-step stepper with custom warning icons.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let DeviceSignalCellularNull = (props) => (
  <SvgIcon {...props}>
    <path d=""M20 6.83V20H6.83L20 6.83M22 2L2 22h20V2z""/>
  </SvgIcon>
);
DeviceSignalCellularNull = pure(DeviceSignalCellularNull);
DeviceSignalCellularNull.displayName = 'DeviceSignalCellularNull';

export default DeviceSignalCellularNull;
","Generate React code for an SVG icon that visually represents no signal, consisting of an empty square inside a square frame."
"import React from 'react';
import { Text, View, Button, StyleSheet, ScrollView } from 'react-native';
import Components from './../../components';

const styles = StyleSheet.create({
  base: {
    padding: 24,
    flex: 1
  },
  name: {
    fontSize: 24
  },
  header: {
    flexWrap: 'wrap',
    flexDirection: 'row'
  }
});

class ListBeaconsScreen extends Components.PyxisComponent {
  static navigationOptions = {
    title: 'Beacons'
  };

  constructor(props) {
    super(props);

    this.state = {
      beacons: []
    };
  }

  createBeacon() {
    this.navigate('NewBeacon');
  }

  goToBeacon(beacon) {
    this.navigate('Beacon', {
      beacon
    });
  }

  async componentWillMount() {
    const beacons = await this.services.beaconsRepository.all();

    this.setState({ beacons })
  }

  render() {
    return (
      <View style={styles.base}>
        <View>
          <Text style={styles.name}>Beacons</Text>
          <View style={styles.header}>
            {
              //<Components.PButton title=""Excluir"" onPress={() => this.remove()}></Components.PButton>
            }
          </View>
        </View>
        <ScrollView>
          {
            this.isMaintainer() && <Components.PButton title=""Novo beacon"" onPress={() => this.createBeacon()}></Components.PButton>
          }
          {
            this.state.beacons.map((beacon, idx) => {
              return <Components.PButton key={`${idx}_${beacon.name}`} title={beacon.name} onPress={() => this.goToBeacon(beacon)}></Components.PButton>
            })
          }
        </ScrollView>
        <Components.BackButton onPress={() => this.goBack()}></Components.BackButton>
      </View>
    );
  }
}

export default ListBeaconsScreen;
","Create React Native code that displays a list screen with the title ""Beacons."" Include a button to create a new beacon and buttons for each beacon in the list that navigate to a ""Beacon"" screen when pressed."
"import React from 'react';

export default class WonPlayer extends React.Component {

    render() {

        var player = this.props.rosterEntry.player;
        var cost = this.props.rosterEntry.cost;

        var positions = player.positions
            .map(function(pos) { return pos.name; })
            .join(', ');

        return (
            <tr>
                <td>{player.name} - <span className=""text-muted small"">{positions}</span></td>
                <td>${cost}</td>
            </tr>
        );
    }
}","Generate the React code for displaying won players in a table with player names, multiple positions, and cost."
"/**
 * NotFoundPage
 *
 * This is the page we show when the user visits a url that doesn't have a route
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a neccessity for you then you can refactor it and remove
 * the linting exception.
 */

import React from 'react';

/* eslint-disable react/prefer-stateless-function */
export default class NotFound extends React.Component {

  render() {
    return (
      <h1>Page Not Found</h1>
    );
  }
}
",Generate a React component that displays a 'Page Not Found' error message when the user attempts to visit a URL without a corresponding route. Note that the component should be a class-based component due to its usage of hot reloading.
"import React, { Component } from 'react';
import PropTypes from 'prop-types';

export default class ClickCounter extends Component {
  
  constructor() {
    super();
    this.state = { count: 0 };
    this.onClick = this.onClick.bind(this);
  }
  
  onClick() {
    this.setState({
      count: this.state.count + 1
    });
  }
  
  render() {
    return (
        <button className={'foo bar' + (this.props.className || '')} onClick={this.onClick}>Clicked {this.state.count} times</button>
    );
  }
}

ClickCounter.propTypes = {
  className: PropTypes.string
};
","Generate a class based React component with the following specifications:
- Name: ClickCounter
- Component should maintain an internal state variable called count, initialized to 0.
- Component should define an onClick handler that increments the count by 1 when the button is clicked.
- Component should render a button with the following attributes:
  - className: 'foo bar'
  - User-provided className as an optional prop
  - Display text: 'Clicked {count} times'"
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import sample from 'lodash/sample';

import './RandomButton.css';

/**
 * Button that changes label on every click.
 */
export default class RandomButton extends Component {
	static propTypes = {
		/**
		 * List of possible labels.
		 */
		variants: PropTypes.array.isRequired,
	};

	constructor(props) {
		super();
		this.state = {
			label: sample(props.variants),
		};
	}

	handleClick = () => {
		this.setState({
			label: sample(this.props.variants),
		});
	};

	render() {
		return (
			<button className=""random-button"" onClick={this.handleClick}>
				{this.state.label}
			</button>
		);
	}
}
",Design a React component that renders a button with a rotating label. The button should cycle through a list of possible labels with each click. Include CSS styling for the button.
"/* @flow */
import React from 'react';
import Icon from 'mineral-ui/Icon';

import type { IconProps } from 'mineral-ui/Icon/types';

/* eslint-disable prettier/prettier */
export default function IconHealing(props: IconProps) {
  const iconProps = {
    rtl: false,
    ...props
  };

  return (
    <Icon {...iconProps}>
      <g>
        <path d=""M17.73 12.02l3.98-3.98a.996.996 0 0 0 0-1.41l-4.34-4.34a.996.996 0 0 0-1.41 0l-3.98 3.98L8 2.29a1.001 1.001 0 0 0-1.41 0L2.25 6.63a.996.996 0 0 0 0 1.41l3.98 3.98L2.25 16a.996.996 0 0 0 0 1.41l4.34 4.34c.39.39 1.02.39 1.41 0l3.98-3.98 3.98 3.98c.2.2.45.29.71.29.26 0 .51-.1.71-.29l4.34-4.34a.996.996 0 0 0 0-1.41l-3.99-3.98zM12 9c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-4.71 1.96L3.66 7.34l3.63-3.63 3.62 3.62-3.62 3.63zM10 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2 2c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2-4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2.66 9.34l-3.63-3.62 3.63-3.63 3.62 3.62-3.62 3.63z""/>
      </g>
    </Icon>
  );
}

IconHealing.displayName = 'IconHealing';
IconHealing.category = 'image';
",Create an SVG icon of a healing stick.
"import React from 'react'
import { Button } from 'semantic-ui-react'

const ButtonExampleLabeled = () => (
  <div>
    <Button
      content='Like'
      icon='heart'
      label={{ as: 'a', basic: true, content: '2,048' }}
      labelPosition='right'
    />

    <Button
      content='Like'
      icon='heart'
      label={{ as: 'a', basic: true, pointing: 'right', content: '2,048' }}
      labelPosition='left'
    />

    <Button
      icon='fork'
      label={{ as: 'a', basic: true, content: '2,048' }}
      labelPosition='left'
    />
  </div>
)

export default ButtonExampleLabeled
","Create a React component that displays three labeled buttons. The first button should have the label on the right, the second button should have the label on the left, and the third button should have the label on the left and include an icon."
"import PureComponent from '../../../lib/purecomponent';
import React from 'react';
import classnames from 'classnames';
import immutable from 'immutable';
import {deleteTodo} from '../../todos/actions';

export default class TodoItem extends PureComponent {

  render() {
    const todo = this.props.todo;

    return (
      <li className={classnames({editing: false})}>
        <label>{todo.get('title')}</label>
        <button onClick={() => deleteTodo(todo)}>x</button>
      </li>
    );
  }

}

TodoItem.propTypes = {
  todo: React.PropTypes.instanceOf(immutable.Map)
};
",Create a React component for rendering a todo item that includes a label with the todo title and a button for deleting the todo.
"import React from 'react';
import Layout from 'focus-components/components/layout';

import MenuLeft from '../views/menu/menu-left';
import Footer from '../views/footer';
import DevTools from './dev-tools';

const CustomLayout = (props) => (
    <div>
        <Layout
            Footer={Footer}
            MenuLeft={MenuLeft}
        >
            {props.children}
        </Layout>
        {__DEV__ && <DevTools />}
    </div >
);
CustomLayout.displayName = 'CustomAppLayout';

export default CustomLayout;",Create a React component named CustomLayout that wraps the child components within a Layout component using the MenuLeft and Footer components as props. Include a conditional rendering of the DevTools component if the environment is development.
"
import React, { Component } from 'react';

import Question from '../Question';

class Radio extends Component {

    render() {
        const { data, onClick } = this.props;
        return (
            <div
                className=""question""
                onClick={onClick}
            >
                <Question
                    id={data.order}
                    text={data.label}
                    required={data.required}
                />
                <div className=""radioGrp"">
                    {this._renderRadioItem()}
                </div>
            </div>
        );
    }

    _renderRadioItem() {
        const { data } = this.props;
        const items = data.data.map((itm, idx) => {
            const label = itm.label;
            const input = itm.input;
            return (
                <div
                    className=""radioItem ut-radio""
                    key={idx}
                >
                    <input type=""radio"" />
                    <label>
                        {label}
                    </label>
                    {
                        itm.hasOwnProperty('input') ?
                            <input
                                type=""text""
                                className=""input input--medium ut-input""
                                placeholder={input}
                            /> :
                            ''
                    }
                    <div className=""subdescription"">{itm.example || ''}</div>
                </div>
            );
        });
        return items;
    }
}

export default Radio;
",Create a React component to render a radio button question with multiple options and optional text input for each option.
"import React from 'react'
import Header from '../../components/Header'
import classes from './CoreLayout.scss'
import '../../styles/core.scss'

export const CoreLayout = ({ children }) => (
  <div className='container text-center'>
    <Header />
    <div className={classes.mainContainer}>
      {children}
    </div>
  </div>
)

CoreLayout.propTypes = {
  children: React.PropTypes.element.isRequired
}

export default CoreLayout
",Generate a React functional component called CoreLayout that wraps its children in a container with a centrally aligned text and a header and main container.
"import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import classNames from 'classnames';
import React from 'react';
import elementType from 'react-prop-types/lib/elementType';

import { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';

var propTypes = {
  componentClass: elementType
};

var defaultProps = {
  componentClass: 'div'
};

var ModalBody = function (_React$Component) {
  _inherits(ModalBody, _React$Component);

  function ModalBody() {
    _classCallCheck(this, ModalBody);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  ModalBody.prototype.render = function render() {
    var _props = this.props,
        Component = _props.componentClass,
        className = _props.className,
        props = _objectWithoutProperties(_props, ['componentClass', 'className']);

    var _splitBsProps = splitBsProps(props),
        bsProps = _splitBsProps[0],
        elementProps = _splitBsProps[1];

    var classes = getClassSet(bsProps);

    return React.createElement(Component, _extends({}, elementProps, {
      className: classNames(className, classes)
    }));
  };

  return ModalBody;
}(React.Component);

ModalBody.propTypes = propTypes;
ModalBody.defaultProps = defaultProps;

export default bsClass('modal-body', ModalBody);",Create the ModalBody React component. It should accept a `componentClass` prop that defaults to 'div' and be used to render the body of a modal.
"import React from 'react';

export default class RemoveSectionButton extends React.Component {


  constructor(props) {
    super(props);

    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(e) {
    e.preventDefault()
    this.props.removeSection(this.props.id);
  }

  render() {
    return (
      <div style={{
        display: 'inline-block'
      }}>
        <button className={'remove-section-button'}onClick={this.handleClick} >
          <p style={{
            position: 'absolute',
            top: '20%',
            left: '52%',
            width: '100%',
            transform: 'translate(-50%, -50%)'
          }}>REMOVE SECTION</p>
        </button>
      </div>
    );
  }
}
","Create a React component that renders a button that, when clicked, calls a prop function with the `id` prop as an argument. The button should have a `REMOVE SECTION` label and be styled using inline CSS."
"import List from './list';
import React from 'react';
import viewEventPublisher from '../singletons/view-event-publisher'

export default class ChannelSwitcher extends React.Component {
  getHomeChannelClassName() {
    return `account-channel ${this.getHomeChannelSelected() ? ' account-channel-selected' : ''}`;
  }

  getHomeChannelSelected() {
    return this.props.channelId === 'HOME_TIMELINE_CHANNEL';
  }

  getSearchChannelClassName() {
    return `account-channel ${this.getSearchChannelSelected() ? ' account-channel-selected' : ''}`;
  }

  getSearchChannelSelected() {
    return this.props.channelId === 'SEARCH_CHANNEL';
  }

  onHomeChannelClicked(event) {
    viewEventPublisher.emit('channel-clicked', 'HOME_TIMELINE_CHANNEL');
  }

  onSearchChannelClicked(event) {
    viewEventPublisher.emit('channel-clicked', 'SEARCH_CHANNEL');
  }

  render() {
    return(
      <div className=""channel-switcher"">
        <div className=""account-screen-name"">
          @{this.props.account.screen_name}
        </div>
        <div className=""account-section"">
          <h3 className=""account-section-heading"">
            TIMELINES
          </h3>
          <ul>
            <li className={this.getHomeChannelClassName()} onClick={this.onHomeChannelClicked.bind(this)}>
              Home
            </li>
            <li className={this.getSearchChannelClassName()} onClick={this.onSearchChannelClicked.bind(this)}>
              Search
            </li>
          </ul>
        </div>
        <div className=""account-section"">
          <h3 className=""account-section-heading"">
            LISTS
          </h3>
          <ul>
            {this.renderLists()}
          </ul>
        </div>
      </div>
    );
  }

  renderLists() {
    return this.props.lists.map((list) => {
      return <List channelId={this.props.channelId} key={list.id_str} list={list} />;
    });
  }
}
","Display a Channel Switcher component with navigation for ""Home"" and ""Search"" channels."
"import React from 'react';

class ProgramLogo extends React.Component {
    constructor(props) {
        super(props);
        this.displayName = 'ProgramLogo';
    }
    render() {
        return (
        	<div className=""col-lg-4 col-md-4 col-sm-4 mb"">
              <div className=""darkblue-panel pn"">
                <div id=""profile-program"">
                  <div className=""user"">
                    <img className=""img-circle"" width=""200"" src=""../public/assets/img/gt-logo.png"" />
                  </div>
                </div>
              </div>
            </div>
        );
    }
}

export default ProgramLogo;
",Design a React component that displays a circular image inside a dark blue panel with the CSS class `pn` and an `id` of `profile-program`.
"import PropTypes from 'prop-types';
import React from 'react';
import Modal from 'Components/Modal/Modal';
import AddIndexerModalContentConnector from './AddIndexerModalContentConnector';

function AddIndexerModal({ isOpen, onModalClose, ...otherProps }) {
  return (
    <Modal
      isOpen={isOpen}
      onModalClose={onModalClose}
    >
      <AddIndexerModalContentConnector
        {...otherProps}
        onModalClose={onModalClose}
      />
    </Modal>
  );
}

AddIndexerModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  onModalClose: PropTypes.func.isRequired
};

export default AddIndexerModal;
","Create a function component wrapped around a modal that takes in a prop for whether it's open or not, and another function prop to close the modal. It should contain another component that is passed the same props as the parent."
"import React from 'react';
import classNames from 'classnames';
import BootstrapMixin from './BootstrapMixin';
import SafeAnchor from './SafeAnchor';

const NavItem = React.createClass({
  mixins: [BootstrapMixin],

  propTypes: {
    linkId: React.PropTypes.string,
    onSelect: React.PropTypes.func,
    active: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    href: React.PropTypes.string,
    role: React.PropTypes.string,
    title: React.PropTypes.node,
    eventKey: React.PropTypes.any,
    target: React.PropTypes.string,
    'aria-controls': React.PropTypes.string
  },

  render() {
    let {
        role,
        linkId,
        disabled,
        active,
        href,
        title,
        target,
        children,
        'aria-controls': ariaControls,
        ...props } = this.props;
    let classes = {
          active,
          disabled
        };
    let linkProps = {
          role,
          href,
          title,
          target,
          id: linkId,
          onClick: this.handleClick
        };

    if (!role && href === '#') {
      linkProps.role = 'button';
    }

    return (
      <li {...props} role='presentation' className={classNames(props.className, classes)}>
        <SafeAnchor {...linkProps} aria-selected={active} aria-controls={ariaControls}>
          { children }
        </SafeAnchor>
      </li>
    );
  },

  handleClick(e) {
    if (this.props.onSelect) {
      e.preventDefault();

      if (!this.props.disabled) {
        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
      }
    }
  }
});

export default NavItem;
","Create the React.js code for a `NavItem` component utilizing Bootstrap styles and an anchor tag. Emphasize customizing the `className` and `linkProps` based on various provided props, namely: `role`, `linkId`, `disabled`, `active`, `href`, `title`, `target`, `children`, and `aria-controls`."
"import React from 'react';
import PropTypes from 'prop-types';

const Navigation = ({components}) => {
  return (
    <ul className=""navigation"">
      {
        components.map( name => {
          return (
            <li key={name}>
              <a href={`#${name}`}>{name}</a>
            </li>
          )
        })
      }
    </ul>
  )
}

Navigation.propTypes = {
  components: PropTypes.array.isRequired
};

export default Navigation;","Create a concise React component called ""Navigation"" that generates an unordered list of links based on an array of component names passed as a prop. Each link should have a unique key derived from the component name and direct to an element with the corresponding ID."
"import React from 'react';

function Resume() {
  return (
    <svg
      xmlns=""http://www.w3.org/2000/svg""
      xmlnsXlink=""http://www.w3.org/1999/xlink""
      width=""48""
      height=""48""
      className=""font-sans""
    >
      <defs>
        <path id=""a"" d=""M0 0H48V48H0z"" opacity=""1""></path>
        <mask id=""c"" maskContentUnits=""userSpaceOnUse"" maskUnits=""userSpaceOnUse"">
          <path d=""M0 0H48V48H0z""></path>
          <use fill=""#fff"" xlinkHref=""#a""></use>
        </mask>
        <mask id=""d"" maskContentUnits=""userSpaceOnUse"" maskUnits=""userSpaceOnUse"">
          <path d=""M0 0H48V48H0z""></path>
          <use fill=""#fff"" xlinkHref=""#b""></use>
        </mask>
      </defs>
      <g mask=""url(#c)"">
        <path fill=""#E06D70"" fillRule=""evenodd"" d=""M44 27H4l-3-4 4-4h38l4 4-3 4z""></path>
        <path
          fill=""#E6E6E6""
          fillRule=""evenodd""
          d=""M41 47H7a2 2 0 01-2-2V3a2 2 0 012-2h24l12 12v32a2 2 0 01-2 2z""
        ></path>
        <path fill=""#B3B3B3"" fillRule=""evenodd"" d=""M31 1v10a2 2 0 002 2h10L31 1z""></path>
        <path
          fill=""#E06D70""
          fillRule=""evenodd""
          d=""M45 41H3a2 2 0 01-2-2V23h46v16a2 2 0 01-2 2z""
        ></path>
      </g>
      <text fontSize=""0"" transform=""translate(7 28)"">
        <tspan
          x=""0""
          y=""8""
          fill=""#FFF""
          fontSize=""8""
          fontWeight=""700""
          style={{
            whiteSpace: 'pre',
            WebkitTextTransform: 'none',
            textTransform: 'none'
          }}
        >
          RESUME
        </tspan>
      </text>
      <g mask=""url(#d)"">
        <path
          fill=""#72C472""
          fillRule=""evenodd""
          d=""M28.125 12.625H24.75V4.75a.375.375 0 00-.375-.375h-.75a.375.375 0 00-.375.375v7.875h-3.375a.375.375 0 00-.295.607l4.125 5.25a.375.375 0 00.59 0l4.125-5.25a.375.375 0 00-.295-.607z""
        ></path>
      </g>
    </svg>
  );
}

export default Resume;
",Create a resume icon using React SVG that has a modern feel. The icon should be colored red (#E06D70) and green (#72C472).
"// React
import React from 'react';

// Components
import NavBar from './navBar.component.js';
import Footer from './footer.component.js';
import Toasts from '../toasts/toasts.component.js';
import Modal from '../modal/modal.component.js';

// JS dependancies
import 'jquery';
import form from 'semantic/dist/semantic.js';
$.form = form;

// Style
import 'semantic/dist/semantic.css';
import './common.scss';
import './flex.scss';

// App Component
class App extends React.Component {
  render() {
    return (
      <div className='layout vertical start-justified fill'>
        <NavBar />
        <div className='flex main layout vertical'>
          {this.props.children}
        </div>
         <Toasts />
        <Modal />
      </div>
    );
  }
}
App.propTypes = { children: React.PropTypes.object };

export default App;
","Generate the React code for the main application template. Include navigation, a main content area, toasts, modals, and styles. Use Semantic UI for styling."
"import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

const Wrapper = styled.div`
  background-color: #ffffff;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: ${props => props.direction};
  justify-content: center;
  align-items: center;
`;

const Card = ({ children, direction }) => {
  return (
    <Wrapper direction={direction}>
      {children}
    </Wrapper>
  );
};

Card.propTypes = {
  children: PropTypes.node,
  direction: PropTypes.oneOf(['column', 'row']),
};

Card.defaultProps = {
  direction: 'column',
};

export default Card;
",Design a React component that renders a flexible card container with customizable layout and styling. The component should support both vertical and horizontal orientations and allow for the inclusion of arbitrary content. Ensure that the component utilizes CSS styling for visual presentation.
"import React from 'react';
import Router from 'react-router';
import BrowserHistory from 'react-router/lib/BrowserHistory';
import routes from './views/routes';
import createRedux from './redux/create';
import { Provider } from 'redux/react';
import ApiClient from './ApiClient';
const history = new BrowserHistory();
const client = new ApiClient();

const dest = document.getElementById('content');
const redux = createRedux(client, window.__data);
const element = (<Provider redux={redux}>
  {() => <Router history={history} children={routes}/> }
</Provider>);
React.render(element, dest);

if (process.env.NODE_ENV !== 'production') {
  window.React = React; // enable debugger
  const reactRoot = window.document.getElementById('content');

  if (!reactRoot || !reactRoot.firstChild || !reactRoot.firstChild.attributes || !reactRoot.firstChild.attributes['data-react-checksum']) {
    console.error('Server-side React render was discarded. Make sure that your initial render does not contain any client-side code.');
  }
}
","Set up a React application with React Router and its BrowserHistory type. Build a Redux store using the provided createRedux function and pass it and the API client to the Provider component. Then, render the App component, which uses React Router for routing, and optionally enable React debugger if in development mode."
"import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import ImmutablePureComponent from 'react-immutable-pure-component';
import { fetchLists } from 'mastodon/actions/lists';
import { connect } from 'react-redux';
import { createSelector } from 'reselect';
import { NavLink, withRouter } from 'react-router-dom';
import Icon from 'mastodon/components/icon';

const getOrderedLists = createSelector([state => state.get('lists')], lists => {
  if (!lists) {
    return lists;
  }

  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title'))).take(4);
});

const mapStateToProps = state => ({
  lists: getOrderedLists(state),
});

export default @withRouter
@connect(mapStateToProps)
class ListPanel extends ImmutablePureComponent {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    lists: ImmutablePropTypes.list,
  };

  componentDidMount () {
    const { dispatch } = this.props;
    dispatch(fetchLists());
  }

  render () {
    const { lists } = this.props;

    if (!lists || lists.isEmpty()) {
      return null;
    }

    return (
      <div>
        <hr />

        {lists.map(list => (
          <NavLink key={list.get('id')} className='column-link column-link--transparent' strict to={`/timelines/list/${list.get('id')}`}><Icon className='column-link__icon' id='list-ul' fixedWidth />{list.get('title')}</NavLink>
        ))}
      </div>
    );
  }

}
","Generate the React code for a List Panel component that displays a list of up to 4 lists in the user's account, sorted alphabetically by title. The component should fetch the list of lists on mount and render a link to each list using the NavLink component. If there are no lists, the component should not render anything."
"import * as registerPushNotifications from './actions/push_notifications';
import { setupBrowserNotifications } from './actions/notifications';
import { default as Mastodon, store } from './containers/mastodon';
import React from 'react';
import ReactDOM from 'react-dom';
import ready from './ready';

const perf = require('./performance');

function main() {
  perf.start('main()');

  if (window.history && history.replaceState) {
    const { pathname, search, hash } = window.location;
    const path = pathname + search + hash;
    if (!(/^\/web($|\/)/).test(path)) {
      history.replaceState(null, document.title, `/web${path}`);
    }
  }

  ready(() => {
    const mountNode = document.getElementById('mastodon');
    const props = JSON.parse(mountNode.getAttribute('data-props'));

    ReactDOM.render(<Mastodon {...props} />, mountNode);
    store.dispatch(setupBrowserNotifications());
    if (process.env.NODE_ENV === 'production') {
      // avoid offline in dev mode because it's harder to debug
      require('offline-plugin/runtime').install();
      store.dispatch(registerPushNotifications.register());
    }
    perf.stop('main()');
  });
}

export default main;
","Create a main function for a React application that renders the Mastodon component, sets up browser notifications, and conditionally registers push notifications if the environment is in production mode."
"import React, { Component } from 'react';
import PropTypes from 'prop-types';
import './Title.css';
import logoSrc from './img/swipe.gif';
import {Interactions} from './shared/data.js';
import Swipeable from './components/Swipeable.js';
import Delay from './components/Delay.js';
import SwipeCue from './components/SwipeCue.js';

class Title extends Component {
  constructor(props) {
    super(props);
    this.onSwipeRight = this.onSwipeRight.bind(this);
  }

  // prefetch image before animation starts
  componentDidMount() {
    const image = new Image();
    image.src = logoSrc;
  }

  onSwipeRight() {
    const {onInteraction, onDone} = this.props;
    onInteraction(Interactions.play());
    onDone();
  }

  render() {
    const swipeHeight = 128;
    return (
      <div className=""Title"">
        <p className=""Title-intro"">
          Swipe Right for CS!    
        </p>
        <Delay wait={250}>
          <Swipeable
            style={{width: '100%'}}
            height={swipeHeight}
            onSwipeRight={this.onSwipeRight}>
            <div className=""Title-swipe"">
              <SwipeCue style={{position: 'absolute', top: (swipeHeight/2)}} />
              <img
                className=""Title-logo""
                alt=""Logo""
                src={logoSrc}
                height={128}
                width={128} />
              <div>Swipe right to play!</div>
            </div>
          </Swipeable>
        </Delay>
      </div>
    );
  }
} 

Title.propTypes = {
  onInteraction: PropTypes.func.isRequired,
  onDone: PropTypes.func.isRequired
};

export default Title;","Prompt a React component to render a swipe-able card that, when swiped right, triggers a callback and makes the card disappear. The card should contain an image and text."
"import React from 'react'
import styled from 'styled-components'
import { palette } from 'styled-theme'

import { Block, Paragraph, IconLink, IconButton, LogoImage, Tooltip } from 'components'

const Wrapper = styled(Block)`
  display: flex;
  flex-direction: column;
  align-items: center;
  height: calc(100vh - 3.75rem);
  max-height: 700px;
  padding: 2rem 6rem;
  box-sizing: border-box;
  text-align: center;
  @media screen and (max-width: 640px) {
    padding: 1rem;
  }
`

const Text = styled(Paragraph)`
  color: ${palette('grayscale', 3)}
  margin: 3rem auto;
  max-width: 800px;
  font-weight: 300;
  font-size: 1.35rem;
  line-height: 1.35em;
  letter-spacing: 0.07em;
  @media screen and (max-width: 640px) {
    font-size: 1rem;
  }
`

const Logo = styled(LogoImage)`
  flex: 1;
  width: 100%;
  min-height: 1px;
`

const StyledIconButton = styled(IconButton)`
  flex: none;
`

const Hero = (props) => {
  return (
    <Wrapper opaque reverse {...props}>
      <Logo />
      <Text>
        <strong>ARc</strong> is a <IconLink reverse icon=""react"" href=""https://facebook.github.io/react/"">React</IconLink> starter kit based on the <IconLink reverse icon=""atomic-design"" href=""http://bradfrost.com/blog/post/atomic-web-design/"">Atomic Design</IconLink> methodology. It&apos;s <strong>progressive</strong>, which means that you can start with the basic boilerplate and try the other features when you are comfortable.
      </Text>
      <Tooltip data-title=""Just a fancy tooltip 😊"" reverse>
        <StyledIconButton
          icon=""github""
          href=""https://github.com/diegohaz/arc""
          height={50}
          transparent
          reverse
        >
          View on GitHub
        </StyledIconButton>
      </Tooltip>
    </Wrapper>
  )
}

export default Hero
","Draft a React component that renders a page layout with text, an image, and an icon button."
"// @flow weak

import React from 'react';
import PropTypes from 'prop-types';
import compose from 'recompose/compose';
import { withStyles } from 'material-ui/styles';
import Paper from 'material-ui/Paper';
import Grid from 'material-ui/Grid';
import withWidth from 'material-ui/utils/withWidth';
import Typography from 'material-ui/Typography';

const styles = theme => ({
  root: {
    flexGrow: 1,
    paddingTop: 42,
    position: 'relative',
  },
  paper: {
    padding: 16,
    textAlign: 'center',
    color: theme.palette.text.secondary,
    minHeight: 54,
  },
  typography: {
    position: 'absolute',
    left: 0,
    top: 0,
    padding: 5,
  },
});

function GridIntegration(props) {
  const classes = props.classes;

  return (
    <div className={classes.root}>
      <Typography type=""subheading"" className={classes.typography}>
        Current width: {props.width}
      </Typography>
      <Grid container spacing={24}>
        <Grid item xs hidden={{ xsUp: true }}>
          <Paper className={classes.paper}>xsUp</Paper>
        </Grid>
        <Grid item xs hidden={{ smUp: true }}>
          <Paper className={classes.paper}>smUp</Paper>
        </Grid>
        <Grid item xs hidden={{ mdUp: true }}>
          <Paper className={classes.paper}>mdUp</Paper>
        </Grid>
        <Grid item xs hidden={{ lgUp: true }}>
          <Paper className={classes.paper}>lgUp</Paper>
        </Grid>
        <Grid item xs hidden={{ xlUp: true }}>
          <Paper className={classes.paper}>xlUp</Paper>
        </Grid>
      </Grid>
    </div>
  );
}

GridIntegration.propTypes = {
  classes: PropTypes.object.isRequired,
  width: PropTypes.string,
};

export default compose(withStyles(styles), withWidth())(GridIntegration);
",Create a React component that displays a grid of paper elements with text indicating which breakpoints they are currently hidden for.
"import React from 'react';
import PageWrapper from '../../../lib/page/PageWrapper';
import PageHeader from '../../../lib/page/PageHeader';
import Breadcrumb from '../../../lib/page/Breadcrumb';
import PageContent from '../../../lib/page/PageContent';

export default function BlankPage() {
  return (
    <PageWrapper>
      <PageHeader
        title=""Blank page""
        description=""it all starts here""
      >
        <Breadcrumb
          items={[
            { key: 1, icon: 'fa fa-dashboard', title: 'Home', url: '/' },
            { key: 2, title: 'Examples' },
            { key: 3, title: 'Blank page' },
          ]}
        />
      </PageHeader>
      <PageContent>
        <div className=""box"">
          <div className=""box-header with-border"">
            <h3 className=""box-title"">Title</h3>
            <div className=""box-tools pull-right"">
              <button type=""button"" className=""btn btn-box-tool"">
                <i className=""fa fa-minus""></i>
              </button>
              <button type=""button"" className=""btn btn-box-tool"">
                <i className=""fa fa-times""></i>
              </button>
            </div>
          </div>
          <div className=""box-body"">
            Start creating your amazing application!
          </div>
          <div className=""box-footer"">
            Footer
          </div>
        </div>
      </PageContent>
    </PageWrapper>
  );
}
","Create a React component that displays a blank page with a header containing a title and a breadcrumb trail. The page should also have a content section with a box containing a title, body, and footer."
"import React from 'react';
 
class HomePage extends React.Component {
  render() {
    return (
      <div>
        <h1>Welcome to this react router example!</h1>
        <p>You can read about it <a href='https://medium.com/@arpith/using-react-router-1f96209fe557#.92v3xhq7l'>here</a></p>
        <p>The code is <a href='https://github.com/arpith/react-router-example'>on Github</a></p>
      </div>
    );
  }
}
export default HomePage;
",Generate a simple React component called HomePage that renders a welcome message and links to documentation and the GitHub repository for the code.
"import 'babel-polyfill';
import 'whatwg-fetch';

import React from 'react';
import ReactDOM from 'react-dom';
import FastClick from 'fastclick';
import { Provider } from 'react-redux';

import store from './core/store';
import router from './core/router';
import history from './core/history';

let routes = require('./routes.json'); // Loaded with utils/routes-loader.js
const container = document.getElementById('container');

function renderComponent(component) {
  ReactDOM.render(<Provider store={store}>{component}</Provider>, container);
}

// Find and render a web page matching the current URL path,
// if such page is not found then render an error page (see routes.json, core/router.js)
function render(location) {
  router.resolve(routes, location)
    .then(renderComponent)
    .catch(error => router.resolve(routes, { ...location, error }).then(renderComponent));
}

// Handle client-side navigation by using HTML5 History API
// For more information visit https://github.com/ReactJSTraining/history/tree/master/docs#readme
history.listen(render);
render(history.getCurrentLocation());

// Eliminates the 300ms delay between a physical tap
// and the firing of a click event on mobile browsers
// https://github.com/ftlabs/fastclick
FastClick.attach(document.body);

// Enable Hot Module Replacement (HMR)
if (module.hot) {
  module.hot.accept('./routes.json', () => {
    routes = require('./routes.json'); // eslint-disable-line global-require
    render(history.getCurrentLocation());
  });
}
","Create a React application that uses a JSON file to define routes and a router to render matching components, handles client-side navigation using the HTML5 History API, includes FastClick to improve mobile touch performance, and enables Hot Module Replacement (HMR) for development."
"import React from 'react';
import createSvgIcon from './utils/createSvgIcon';

export default createSvgIcon(
  <g><path d=""M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"" /></g>
, 'People');
","Create a React component with a people icon. The icon should consist of two stick figures representing people, with one figure on the left and the other figure on the right."
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let EditorBorderOuter = (props) => (
  <SvgIcon {...props}>
    <path d=""M13 7h-2v2h2V7zm0 4h-2v2h2v-2zm4 0h-2v2h2v-2zM3 3v18h18V3H3zm16 16H5V5h14v14zm-6-4h-2v2h2v-2zm-4-4H7v2h2v-2z""/>
  </SvgIcon>
);
EditorBorderOuter = pure(EditorBorderOuter);
EditorBorderOuter.displayName = 'EditorBorderOuter';
EditorBorderOuter.muiName = 'SvgIcon';

export default EditorBorderOuter;
",Generate the React component code for an SVG icon with the following design: a square with three smaller squares inside arranged in a vertical line.
"'use strict';

import React from 'react';
import classnames from 'classnames';

var getDotCount = function (spec) {
  var dots;
  dots = Math.ceil(spec.slideCount / spec.slidesToScroll);
  return dots;
};


export var Dots = React.createClass({

  clickHandler: function (options, e) {
    // In Autoplay the focus stays on clicked button even after transition
    // to next slide. That only goes away by click somewhere outside
    e.preventDefault();
    this.props.clickHandler(options);
  },
  render: function () {

    var dotCount = getDotCount({
      slideCount: this.props.slideCount,
      slidesToScroll: this.props.slidesToScroll
    });

    // Apply join & split to Array to pre-fill it for IE8
    //
    // Credit: http://stackoverflow.com/a/13735425/1849458
    var dots = Array.apply(null, Array(dotCount + 1).join('0').split('')).map((x, i) => {

      var leftBound = (i * this.props.slidesToScroll);
      var rightBound = (i * this.props.slidesToScroll) + (this.props.slidesToScroll - 1);
      var className = classnames({
        'slick-active': (this.props.currentSlide >= leftBound) && (this.props.currentSlide <= rightBound)
      });

      var dotOptions = {
        message: 'dots',
        index: i,
        slidesToScroll: this.props.slidesToScroll,
        currentSlide: this.props.currentSlide
      };

      var onClick = this.clickHandler.bind(this, dotOptions);

      return (
        <li key={i} className={className}>
          {React.cloneElement(this.props.customPaging(i), {onClick})}
        </li>
      );
    });

    return (
      <ul className={this.props.dotsClass} style={{display: 'block'}}>
        {dots}
      </ul>
    );

  }
});
","Generate code for a React component that displays pagination dots for a carousel, with the following specifications:

* The component should take props for the total number of slides, the number of slides to scroll per click, the current slide index, and a custom paging function to customize the appearance of each dot.
* The component should calculate the number of dots based on the total number of slides and the number of slides to scroll per click.
* Each dot should be rendered as a `<li>` element with a `className` that includes the `slick-active` class if the current slide index is within the range of slides represented by that dot.
* When a dot is clicked, the component should call the `clickHandler` prop function with the dot's index, the number of slides to scroll per click, and the current slide index."
"import React from 'react';

const VideoDetail = ({video}) => {
    if (!video) {
        return <div>Loading...</div>;    
    }

    const videoId = video.id.videoId;
    const url = `https://www.youtube.com/embed/${videoId}`;

    return (
        <div className=""video-detail col-md-8"">
            <div className=""embed-responsive embed-responsive-16by9"">
                <iframe className=""embed-responsive-item"" src={url}></iframe>
            </div>
            <div className=""details"">
                <div>{video.snippet.title}</div>
                <div>{video.snippet.description}</div>
            </div>
        </div>
    );
};

export default VideoDetail;","Create a React component that displays a YouTube video based on a provided video prop. Handle the case where the video prop is not available and display a ""Loading..."" message. Extract the video ID from the video prop and construct the YouTube embed URL. Use a responsive embed container and provide a title and description for the video below the embed."
"const {Component} = wp.element;

import apiFetch from '@wordpress/api-fetch';
import React from 'react';
import Select from 'react-select';

export default class DownloadInput extends Component {

	constructor( props ) {
		super( props );
		this.state = { downloads: [] };
	}

	componentDidMount() {
		apiFetch( { url: dlmBlocks.ajax_getDownloads } ).then( results => {
			this.setState({downloads: results });
		} );
	}

	render() {
		const valueFromId = (opts, id) => opts.find(o => o.value === id);

		return (
			<div>
				<Select
					value={valueFromId( this.state.downloads, this.props.selectedDownloadId )}
					onChange={(selectedOption) =>  this.props.onChange(selectedOption.value)}
					options={this.state.downloads}
					isSearchable=""true""
				 />
			</div>
		);
	}

}
",An input where the user can select a downloadable file from a list of downloadable files. The list is populated by fetching the available downloads from WordPress.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let DeviceBattery50 = (props) => (
  <SvgIcon {...props}>
    <path fillOpacity="".3"" d=""M17 5.33C17 4.6 16.4 4 15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V13h10V5.33z""/><path d=""M7 13v7.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V13H7z""/>
  </SvgIcon>
);
DeviceBattery50 = pure(DeviceBattery50);
DeviceBattery50.displayName = 'DeviceBattery50';
DeviceBattery50.muiName = 'SvgIcon';

export default DeviceBattery50;
",Create a React component using the `SvgIcon` component that renders an SVG icon of a battery with 50% charge. The SVG should use a fill opacity of 0.3 for the lighter part of the battery and a fill of black for the darker part. The component should be pure and have a display name of `DeviceBattery50`. It should also have a `muiName` property set to `SvgIcon`.
"//! Creates a ckeditor instance.  Contains options for taking callbacks involved with saving changes.
/* global CKEDITOR */

import React from 'react';
import { connect } from 'dva';

/**
 * After the CKEditor plugin has loaded, initialize the editor
 */
function awaitCk(rand) {
  setTimeout(() => {
    let ckeditorLoaded = true;
    try{ CKEDITOR; }
    catch(e) {
      if(e.name == 'ReferenceError') {
        ckeditorLoaded = false;
      }
    }

    if(ckeditorLoaded) {
      CKEDITOR.replace( `ckeditor-${rand}` );
    } else {
      awaitCk(rand);
    }
  }, 50);
}

class CKEditor extends React.Component {
  componentDidMount() {
    // add a script tag onto the document that loads the CKEditor script
    let ckeditor_src = document.createElement('script');
    ckeditor_src.type = 'text/javascript';
    ckeditor_src.async = true;
    ckeditor_src.src='/ckeditor/ckeditor.js';
    document.getElementById('ckeditor-' + this.props.rand).appendChild(ckeditor_src);

    // wait for the CKEditor script to load and then initialize the editor
    awaitCk(this.props.rand);

    // register our id as the active editor instance
    this.props.dispatch({type: 'documents/setEditorId', id: this.props.rand});
  }

  shouldComponentUpdate(...args) {
    return false;
  }

  render() {
    return (
      <textarea id={'ckeditor-' + this.props.rand} />
    );
  }
}

CKEditor.propTypes = {
  rand: React.PropTypes.number.isRequired,
};

export default connect()(CKEditor);
",Generate the React code for a component that can be used to create an instance of the CKEditor WYSIWYG text editor with optional callbacks for being notified when changes to the editor are made.
"/**
 * NotFoundPage
 *
 * This is the page we show when the user visits a url that doesn't have a route
 *
 * NOTE: while this component should technically be a stateless functional
 * component (SFC), hot reloading does not currently support SFCs. If hot
 * reloading is not a necessity for you then you can refactor it and remove
 * the linting exception.
 */

import React from 'react';
import { FormattedMessage } from 'react-intl';

import messages from './messages';

export default class NotFound extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function
  render() {
    return (
      <h1>
        <FormattedMessage {...messages.header} />
      </h1>
    );
  }
}
","Create a React component called NotFoundPage that displays a <h1> with the text ""Page Not Found""."
"import React from 'react';

const GreetingMaster = (props) => {
    const {greetings, onAdd} = props;
    const body = greetings.map(greeting => <tr key={greeting.id}><td>{greeting.name}</td><td>{greeting.greeting}</td></tr>);
    return (
        <div>
            <table>
                <thead>
                <tr><th>Name</th><th>Greeting</th></tr>
                </thead>
                <tbody>
                {body}
                </tbody>
            </table>
            <button
                onClick={onAdd}>
                Add
            </button>
        </div>
    );
};

export default GreetingMaster;",Provide a React component that displays a table of greetings and includes a button for adding new greetings.
"import React from 'react';
import pure from 'recompose/pure';
import SvgIcon from '../../SvgIcon';

let AvAlbum = (props) => (
  <SvgIcon {...props}>
    <path d=""M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 14.5c-2.49 0-4.5-2.01-4.5-4.5S9.51 7.5 12 7.5s4.5 2.01 4.5 4.5-2.01 4.5-4.5 4.5zm0-5.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z""/>
  </SvgIcon>
);
AvAlbum = pure(AvAlbum);
AvAlbum.displayName = 'AvAlbum';
AvAlbum.muiName = 'SvgIcon';

export default AvAlbum;
",Create a React component called `AvAlbum` that represents the Material Design album icon.
"import PropTypes from 'prop-types';
import React from 'react';
import { Helmet } from 'react-helmet';
import Loading from '../loading';
import Id from '../id';

const Page = ({
  id,
  title,
  isFetching,
  children,
  className,

  meta_url,
  meta_title,
  meta_description,
  meta_preview,
  meta_audio,
}) => {
  let child;

  if (isFetching) {
    child = (
      <div>
        <Loading />
        <Id index={id} />
      </div>
    );
  } else {
    child = (
      <div className={className}>
        {title != null && <h1 className=""title-text box shadow"">{title}</h1>}
        {children}
        <Id index={id} />
      </div>
    );
  }

  let description = meta_description;
  if (meta_description.length > 140)
    description = `${description.substring(0, 140)} ...`;

  let meta = [
    { property: 'og:title', content: meta_title },
    { name: 'twitter:title', content: meta_title },

    { property: 'og:url', content: meta_url },
    { name: 'twitter:url', content: meta_url },

    { property: 'og:image', content: meta_preview },
    { name: 'twitter:image', content: meta_preview },

    { name: 'description', content: description },
    { property: 'og:description', content: description },
    { name: 'twitter:description', content: description },
  ];

  if (meta_audio) meta.push({ property: 'og:audio', content: meta_audio });

  return (
    <div>
      <Helmet title={meta_title} meta={meta} />
      {child}
    </div>
  );
};

Page.propTypes = {
  id: PropTypes.string.isRequired,
  title: PropTypes.string,
  isFetching: PropTypes.bool.isRequired,
  children: PropTypes.node.isRequired,
  className: PropTypes.string,

  meta_description: PropTypes.string.isRequired,
  meta_url: PropTypes.string.isRequired,
  meta_title: PropTypes.string.isRequired,
  meta_preview: PropTypes.string.isRequired,
  meta_audio: PropTypes.string,
};

export default Page;
","Create a React functional component that renders a page layout. The component should accept props for:
- `id`: A unique identifier for the page.
- `title`: The page title.
- `isFetching`: A flag indicating whether the page is currently fetching data.
- `children`: The page content.
- `className`: A CSS class name to apply to the page container.
- `meta_description`: The page meta description.
- `meta_url`: The page meta URL.
- `meta_title`: The page meta title.
- `meta_preview`: The page meta preview image URL.
- `meta_audio`: The page meta audio URL.

The component should render a loading indicator if `isFetching` is true, and the page content otherwise. The page content should include the page title, if present, and an ID component with the `id` prop.

The component should also render a `<Helmet>` component with the following meta tags:
- `og:title` with the value of `meta_title`.
- `twitter:title` with the value of `meta_title`.
- `og:url` with the value of `meta_url`.
- `twitter:url` with the value of `meta_url`.
- `og:image` with the value of `meta_preview`.
- `twitter:image` with the value of `meta_preview`.
- `description` with the value of `meta_description`.
- `og:description` with the value of `meta_description`.
- `twitter:description` with the value of `meta_description`.
- `og:audio` with the value of `meta_audio`, if present."
"/**
 * https://github.com/facebook/react-native/blob/master/Libraries/Text/TextStylePropTypes.js
 */
import React from 'react';
import ColorPropType from './ColorPropType';
import ViewStylePropTypes from './ViewStylePropTypes';

const { PropTypes } = React;

// TODO: use spread instead of Object.assign/create after #6560135 is fixed
const TextStylePropTypes = Object.assign(Object.create(ViewStylePropTypes), {
  color: ColorPropType,
  fontFamily: PropTypes.string,
  fontSize: PropTypes.number,
  fontStyle: PropTypes.oneOf(['normal', 'italic']),
  /**
   * Specifies font weight. The values 'normal' and 'bold' are supported for
   * most fonts. Not all fonts have a variant for each of the numeric values,
   * in that case the closest one is chosen.
   */
  fontWeight: PropTypes.oneOf(
    ['normal', 'bold',
     '100', '200', '300', '400', '500', '600', '700', '800', '900']
  ),
  textShadowOffset: PropTypes.shape(
    {
      width: PropTypes.number,
      height: PropTypes.number
    }
  ),
  textShadowRadius: PropTypes.number,
  textShadowColor: ColorPropType,
  /**
   * @platform ios
   */
  letterSpacing: PropTypes.number,
  lineHeight: PropTypes.number,
  /**
   * Specifies text alignment. The value 'justify' is only supported on iOS.
   */
  textAlign: PropTypes.oneOf(
    ['auto', 'left', 'right', 'center', 'justify']
  ),
  /**
   * @platform android
   */
  textAlignVertical: PropTypes.oneOf(
    ['auto', 'top', 'bottom', 'center']
  ),
  /**
   * @platform ios
   */
  textDecorationLine: PropTypes.oneOf(
    ['none', 'underline', 'line-through', 'underline line-through']
  ),
  /**
   * @platform ios
   */
  textDecorationStyle: PropTypes.oneOf(
    ['solid', 'double', 'dotted', 'dashed']
  ),
  /**
   * @platform ios
   */
  textDecorationColor: ColorPropType,
  /**
   * @platform ios
   */
  writingDirection: PropTypes.oneOf(
    ['auto', 'ltr', 'rtl']
  ),
});

module.exports = TextStylePropTypes;
","Provide a definition of `TextStylePropTypes` for React Native as a JavaScript object, including all the supported properties for styling text."
"/*
 *
 * Mt2Mobile
 *
 */

import React from 'react';
import Helmet from 'react-helmet';

export default class Mt2Mobile extends React.PureComponent {
  render() {
    return (
      <div>
        <Helmet title=""Mt2Mobile"" meta={[ { name: 'description', content: 'Description of Mt2Mobile' }]}/>

      //Remove this line and you can start writing your code here.
      </div>
    );
  }
}
","Write the component for the Mt2Mobile page with the title ""Mt2Mobile"". Add a meta description with the content ""Description of Mt2Mobile""."
"// @flow
import React, { Component } from 'react';
import { Image, Icon } from 'semantic-ui-react';
import { DragSource } from 'react-dnd';
import ImageGenerator from '../resources/imageGenerator';
import styles from './ToolboxComponent.css'; // eslint-disable-line flowtype-errors/show-errors

const componentSource = {
  beginDrag(props) {
    return {
      name: props.name,
    };
  },

  endDrag(props, monitor) {
    const dropResult = monitor.getDropResult();

    if (dropResult) {
      try {
        props.addResource(props.resourceType);
      } catch (ex) {
        props.error(ex.toString());
      }
    }
  },
};

class ToolboxComponent extends Component {
  props: {
    addResource: (resourceType: string) => void, // eslint-disable-line react/no-unused-prop-types
    error: (errorMessage: string) => void, // eslint-disable-line react/no-unused-prop-types
    resourceType: string
  }

  render() {
    return this.props.connectDragSource(<div><Icon circular className={styles.toolboxIcon} size=""big""><Image src={ImageGenerator.findImage(this.props.resourceType)} size=""mini"" centered /></Icon></div>); // eslint-disable-line react/prop-types
  }
}

export default DragSource('Component', componentSource, (connect, monitor) => ({
  connectDragSource: connect.dragSource(),
  isDragging: monitor.isDragging(),
}))(ToolboxComponent);
",Create a React component that represents toolbox icons on a drag-and-drop interactive canvas. The component adds a new resource to the canvas when you drag and drop it onto the appropriate drop zone. Each icon should include an image mini preview of the resource it represents.
"import React from 'react';
import PropTypes from 'prop-types';
import { Switch, Route } from 'react-router-dom';

import ColumnLoading from '../components/column_loading';
import BundleColumnError from '../components/bundle_column_error';
import BundleContainer from '../containers/bundle_container';

// Small wrapper to pass multiColumn to the route components
export class WrappedSwitch extends React.PureComponent {

  render () {
    const { multiColumn, children } = this.props;

    return (
      <Switch>
        {React.Children.map(children, child => React.cloneElement(child, { multiColumn }))}
      </Switch>
    );
  }

}

WrappedSwitch.propTypes = {
  multiColumn: PropTypes.bool,
  children: PropTypes.node,
};

// Small Wrapper to extract the params from the route and pass
// them to the rendered component, together with the content to
// be rendered inside (the children)
export class WrappedRoute extends React.Component {

  static propTypes = {
    component: PropTypes.func.isRequired,
    content: PropTypes.node,
    multiColumn: PropTypes.bool,
    componentParams: PropTypes.object,
  };

  static defaultProps = {
    componentParams: {},
  };

  renderComponent = ({ match }) => {
    const { component, content, multiColumn, componentParams } = this.props;

    return (
      <BundleContainer fetchComponent={component} loading={this.renderLoading} error={this.renderError}>
        {Component => <Component params={match.params} multiColumn={multiColumn} {...componentParams}>{content}</Component>}
      </BundleContainer>
    );
  }

  renderLoading = () => {
    return <ColumnLoading />;
  }

  renderError = (props) => {
    return <BundleColumnError {...props} />;
  }

  render () {
    const { component: Component, content, ...rest } = this.props;

    return <Route {...rest} render={this.renderComponent} />;
  }

}
","Generate two small React components for routing:

- The first one is a wrapper for the Switch component, it should pass a prop called `multiColumn` to the child components of the Switch.
- The second one is a wrapper for the Route component, it should extract the params from the route and pass them to the rendered component, together with the content to be rendered inside (the children) and a prop called `multiColumn`.
- The second one should also render a loading component when the component is fetching and an error component when there is an error."
"import React from 'react'
import ComponentExample from 'docs/app/Components/ComponentDoc/ComponentExample'
import ExampleSection from 'docs/app/Components/ComponentDoc/ExampleSection'

const ProgressVariationsExamples = () => (
  <ExampleSection title='Variations'>
    <ComponentExample
      title='Inverted'
      description='A progress bar can have its colors inverted.'
      examplePath='modules/Progress/Variations/ProgressExampleInverted'
    />
    <ComponentExample
      title='Attached'
      description='A progress bar can show progress of an element.'
      examplePath='modules/Progress/Variations/ProgressExampleAttached'
    />
    <ComponentExample
      title='Size'
      description='A progress bar can vary in size.'
      examplePath='modules/Progress/Variations/ProgressExampleSize'
    />
    <ComponentExample
      title='Color'
      description='A progress bar can have different colors.'
      examplePath='modules/Progress/Variations/ProgressExampleColor'
    />
    <ComponentExample
      title='Inverted Color'
      description='These colors can also be inverted for improved contrast on dark backgrounds.'
      examplePath='modules/Progress/Variations/ProgressExampleInvertedColor'
    />
  </ExampleSection>
)

export default ProgressVariationsExamples
","Write a description for React code that showcases different variations of a Progress component, including inverted, attached, varying sizes, colors, and inverted colors for high contrast on dark backgrounds."
"/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  Platform,
  StyleSheet,
  Text,
  View
} from 'react-native';

const instructions = Platform.select({
  ios: 'Press Cmd+R to reload,\n' +
    'Cmd+D or shake for dev menu',
  android: 'Double tap R on your keyboard to reload,\n' +
    'Shake or press menu button for dev menu',
});

type Props = {};
export default class App extends Component<Props> {
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>
          Welcome to React Native!
        </Text>
        <Text style={styles.instructions}>
          To get started, edit App.js
        </Text>
        <Text style={styles.instructions}>
          {instructions}
        </Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
","Generate the code for a basic React Native application that displays ""Welcome to React Native!"" in the center of the screen."
"import React from 'react';

class BenchNav extends React.Component {
    render() {
        const tabs = {
            overview: ""Overview"",
            scenario: ""Scenario"",
            reports:  ""Reports"",
            logs:     ""Logs""
        };

        return (
            <ul className=""nav nav-tabs bench-nav"">
                {Object.keys(tabs).map(function (tab) {
                    let name = tabs[tab];
                    let cssClass =  (this.props.selectedTab == tab) ? ""active"" : """";
                    let link = `#/bench/${this.props.bench.id}/${tab}`;
                    return (<li role=""presentation"" key={tab} className={cssClass}><a href={link}>{name}</a></li>);
                }.bind(this))}
            </ul>
        );
    }
};

BenchNav.propTypes = {
    bench: React.PropTypes.object.isRequired,
    selectedTab: React.PropTypes.string
};

BenchNav.defaultProps = {
    selectedTab: ""overview""
};

export default BenchNav;
","Generate the React component code for a tabbed navigation bar with the tabs ""Overview"", ""Scenario"", ""Reports"", and ""Logs"". The navigation bar should be active on the selected tab and should include links to the corresponding sections."
"// It is important to import the Editor which accepts plugins.

import Editor from '@draft-js-plugins/editor';

import createImagePlugin from '@draft-js-plugins/image';
import React from 'react';

const imagePlugin = createImagePlugin();

// The Editor accepts an array of plugins. In this case, only the imagePlugin
// is passed in, although it is possible to pass in multiple plugins.
const MyEditor = ({ editorState, onChange }) => (
  <Editor
    editorState={editorState}
    onChange={onChange}
    plugins={[imagePlugin]}
  />
);

export default MyEditor;
",Create a simple Draft.js (a Javascript framework for creating rich text editors) editor with an image plugin.
