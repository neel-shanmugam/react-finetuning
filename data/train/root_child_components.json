[{"instruction": "Create a React component that displays a navigation bar with different links depending on whether a user is logged in or not. When a user is not logged in, the navigation bar should display links to the home page, a login page, and a registration page. When a user is logged in, the navigation bar should display links to the home page, a new post page, a settings page, and a profile page. The navigation bar should also display the user's profile picture and username if they are logged in.", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\n\nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;"}, {"instruction": "\n        Update the App component to integrate the new \"Header\" component. The Header component should display the application name and provide navigation links based on the current user's login status. When the user is logged in, display links to the home page, new post page, settings page, and the user's profile page. When the user is logged out, display links to the home page, sign in page, and sign up page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import agent from '../agent';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { APP_LOAD, REDIRECT } from '../constants/actionTypes';\nimport { Route, Switch } from 'react-router-dom';\nimport Article from '../components/Article';\nimport Editor from '../components/Editor';\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Profile from '../components/Profile';\nimport ProfileFavorites from '../components/ProfileFavorites';\nimport Register from '../components/Register';\nimport Settings from '../components/Settings';\nimport { store } from '../store';\nimport { push } from 'react-router-redux';\n\nconst mapStateToProps = state => {\n  return {\n    appLoaded: state.common.appLoaded,\n    appName: state.common.appName,\n    currentUser: state.common.currentUser,\n    redirectTo: state.common.redirectTo\n  }};\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: (payload, token) =>\n    dispatch({ type: APP_LOAD, payload, token, skipTracking: true }),\n  onRedirect: () =>\n    dispatch({ type: REDIRECT })\n});\n\nclass App extends React.Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.redirectTo) {\n      // this.context.router.replace(nextProps.redirectTo);\n      store.dispatch(push(nextProps.redirectTo));\n      this.props.onRedirect();\n    }\n  }\n\n  componentWillMount() {\n    const token = window.localStorage.getItem('jwt');\n    if (token) {\n      agent.setToken(token);\n    }\n\n    this.props.onLoad(token ? agent.Auth.current() : null, token);\n  }\n\n  render() {\n    if (this.props.appLoaded) {\n      return (\n        <div>\n            <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/editor/:slug\" component={Editor} />\n            <Route path=\"/editor\" component={Editor} />\n            <Route path=\"/article/:id\" component={Article} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/@:username/favorites\" component={ProfileFavorites} />\n            <Route path=\"/@:username\" component={Profile} />\n            </Switch>\n        </div>\n      );\n    }\n    return (\n      <div>\n      </div>\n    );\n  }\n}\n\n// App.contextTypes = {\n//   router: PropTypes.object.isRequired\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\"\n\n        Header Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\n\nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\"\n        ", "output": "import agent from '../agent';\nimport Header from './Header';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { APP_LOAD, REDIRECT } from '../constants/actionTypes';\nimport { Route, Switch } from 'react-router-dom';\nimport Article from '../components/Article';\nimport Editor from '../components/Editor';\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Profile from '../components/Profile';\nimport ProfileFavorites from '../components/ProfileFavorites';\nimport Register from '../components/Register';\nimport Settings from '../components/Settings';\nimport { store } from '../store';\nimport { push } from 'react-router-redux';\n\nconst mapStateToProps = state => {\n  return {\n    appLoaded: state.common.appLoaded,\n    appName: state.common.appName,\n    currentUser: state.common.currentUser,\n    redirectTo: state.common.redirectTo\n  }};\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: (payload, token) =>\n    dispatch({ type: APP_LOAD, payload, token, skipTracking: true }),\n  onRedirect: () =>\n    dispatch({ type: REDIRECT })\n});\n\nclass App extends React.Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.redirectTo) {\n      // this.context.router.replace(nextProps.redirectTo);\n      store.dispatch(push(nextProps.redirectTo));\n      this.props.onRedirect();\n    }\n  }\n\n  componentWillMount() {\n    const token = window.localStorage.getItem('jwt');\n    if (token) {\n      agent.setToken(token);\n    }\n\n    this.props.onLoad(token ? agent.Auth.current() : null, token);\n  }\n\n  render() {\n    if (this.props.appLoaded) {\n      return (\n        <div>\n          <Header\n            appName={this.props.appName}\n            currentUser={this.props.currentUser} />\n            <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/editor/:slug\" component={Editor} />\n            <Route path=\"/editor\" component={Editor} />\n            <Route path=\"/article/:id\" component={Article} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/@:username/favorites\" component={ProfileFavorites} />\n            <Route path=\"/@:username\" component={Profile} />\n            </Switch>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <Header\n          appName={this.props.appName}\n          currentUser={this.props.currentUser} />\n      </div>\n    );\n  }\n}\n\n// App.contextTypes = {\n//   router: PropTypes.object.isRequired\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"}, {"instruction": "Generate the code for a React component that displays a navigation bar with links to the home page, sign in page, and sign up page. The component should only be displayed if the user is not currently logged in.", "output": "import React from 'react'; \nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\nexport default LoggedOutView;"}, {"instruction": "\n        When the user is not logged in, display a navigation bar with links to the home page, sign in page, and sign up page. When the user is logged in, display a navigation bar with links to the home page, new post page, settings page, and the user's profile page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n\"\n\n        LoggedOutView Component:\n        \"import React from 'react'; \nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\nexport default LoggedOutView;\"\n        ", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LoggedOutView from './LoggedOutView';\n\nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;"}, {"instruction": "Create a React component that displays a navigation bar for a logged-in user. The navigation bar should include links to the home page, a page for creating a new post, a settings page, and a profile page for the current user. The profile page link should display the user's username and profile picture. If the user is not logged in, the component should not display anything.", "output": "import React from 'react'; \nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\nexport default LoggedInView;\n"}, {"instruction": "\n        Integrate the new LoggedInView component into the Header component. When the user is logged in, display the LoggedInView component, which should include links to the home page, the new post page, the settings page, and the user's profile page. When the user is not logged in, display the LoggedOutView component, which should include links to the home page, the login page, and the sign up page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n\"\n\n        LoggedInView Component:\n        \"import React from 'react'; \nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\nexport default LoggedInView;\n\"\n        ", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LoggedInView from './LoggedInView';\n\nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;"}, {"instruction": "Create a React component that displays a preview of an article, including its title, description, author, date, and number of favorites. Allow users to favorite and unfavorite the article by clicking a button. The button should change its appearance depending on whether the article is favorited or not.", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport { ARTICLE_FAVORITED, ARTICLE_UNFAVORITED } from '../constants/actionTypes';\n\nconst FAVORITED_CLASS = 'btn btn-sm btn-primary';\nconst NOT_FAVORITED_CLASS = 'btn btn-sm btn-outline-primary';\n\nconst mapDispatchToProps = dispatch => ({\n  favorite: slug => dispatch({\n    type: ARTICLE_FAVORITED,\n    payload: agent.Articles.favorite(slug)\n  }),\n  unfavorite: slug => dispatch({\n    type: ARTICLE_UNFAVORITED,\n    payload: agent.Articles.unfavorite(slug)\n  })\n});\n\nconst ArticlePreview = props => {\n  const article = props.article;\n  const favoriteButtonClass = article.favorited ?\n    FAVORITED_CLASS :\n    NOT_FAVORITED_CLASS;\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (article.favorited) {\n      props.unfavorite(article.slug);\n    } else {\n      props.favorite(article.slug);\n    }\n  };\n\n  return (\n    <div className=\"article-preview\">\n      <div className=\"article-meta\">\n        <Link to={`/@${article.author.username}`}>\n          <img src={article.author.image} alt={article.author.username} />\n        </Link>\n\n        <div className=\"info\">\n          <Link className=\"author\" to={`/@${article.author.username}`}>\n            {article.author.username}\n          </Link>\n          <span className=\"date\">\n            {new Date(article.createdAt).toDateString()}\n          </span>\n        </div>\n\n        <div className=\"pull-xs-right\">\n          <button className={favoriteButtonClass} onClick={handleClick}>\n            <i className=\"ion-heart\"></i> {article.favoritesCount}\n          </button>\n        </div>\n      </div>\n\n      <Link to={`/article/${article.slug}`} className=\"preview-link\">\n        <h1>{article.title}</h1>\n        <p>{article.description}</p>\n        <span>Read more...</span>\n        <ul className=\"tag-list\">\n          {\n            article.tagList.map(tag => {\n              return (\n                <li className=\"tag-default tag-pill tag-outline\" key={tag}>\n                  {tag}\n                </li>\n              )\n            })\n          }\n        </ul>\n      </Link>\n    </div>\n  );\n}\n\nexport default connect(() => ({}), mapDispatchToProps)(ArticlePreview);"}, {"instruction": "\n        In the ArticleList component, replace the placeholder `<div>` elements with instances of the ArticlePreview component, passing in each article as a prop. Ensure that each ArticlePreview component has a unique key prop set to the article's slug.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <div key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;\n\"\n\n        ArticlePreview Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport { ARTICLE_FAVORITED, ARTICLE_UNFAVORITED } from '../constants/actionTypes';\n\nconst FAVORITED_CLASS = 'btn btn-sm btn-primary';\nconst NOT_FAVORITED_CLASS = 'btn btn-sm btn-outline-primary';\n\nconst mapDispatchToProps = dispatch => ({\n  favorite: slug => dispatch({\n    type: ARTICLE_FAVORITED,\n    payload: agent.Articles.favorite(slug)\n  }),\n  unfavorite: slug => dispatch({\n    type: ARTICLE_UNFAVORITED,\n    payload: agent.Articles.unfavorite(slug)\n  })\n});\n\nconst ArticlePreview = props => {\n  const article = props.article;\n  const favoriteButtonClass = article.favorited ?\n    FAVORITED_CLASS :\n    NOT_FAVORITED_CLASS;\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (article.favorited) {\n      props.unfavorite(article.slug);\n    } else {\n      props.favorite(article.slug);\n    }\n  };\n\n  return (\n    <div className=\"article-preview\">\n      <div className=\"article-meta\">\n        <Link to={`/@${article.author.username}`}>\n          <img src={article.author.image} alt={article.author.username} />\n        </Link>\n\n        <div className=\"info\">\n          <Link className=\"author\" to={`/@${article.author.username}`}>\n            {article.author.username}\n          </Link>\n          <span className=\"date\">\n            {new Date(article.createdAt).toDateString()}\n          </span>\n        </div>\n\n        <div className=\"pull-xs-right\">\n          <button className={favoriteButtonClass} onClick={handleClick}>\n            <i className=\"ion-heart\"></i> {article.favoritesCount}\n          </button>\n        </div>\n      </div>\n\n      <Link to={`/article/${article.slug}`} className=\"preview-link\">\n        <h1>{article.title}</h1>\n        <p>{article.description}</p>\n        <span>Read more...</span>\n        <ul className=\"tag-list\">\n          {\n            article.tagList.map(tag => {\n              return (\n                <li className=\"tag-default tag-pill tag-outline\" key={tag}>\n                  {tag}\n                </li>\n              )\n            })\n          }\n        </ul>\n      </Link>\n    </div>\n  );\n}\n\nexport default connect(() => ({}), mapDispatchToProps)(ArticlePreview);\"\n        ", "output": "import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;"}, {"instruction": "Create a React component that displays a pagination bar for a list of items. The component should only be visible if there are more than 10 items in the list. The pagination bar should display page numbers and allow the user to click on a page number to navigate to that page. When a page number is clicked, the component should call a function that sets the current page and fetches the data for that page. The component should not be concerned with the specific implementation of the data fetching function, but should simply call the function that is passed to it as a prop.", "output": "import React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport { SET_PAGE } from '../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onSetPage: (page, payload) =>\n    dispatch({ type: SET_PAGE, page, payload })\n});\n\nconst ListPagination = props => {\n  if (props.articlesCount <= 10) {\n    return null;\n  }\n\n  const range = [];\n  for (let i = 0; i < Math.ceil(props.articlesCount / 10); ++i) {\n    range.push(i);\n  }\n\n  const setPage = page => {\n    if(props.pager) {\n      props.onSetPage(page, props.pager(page));\n    }else {\n      props.onSetPage(page, agent.Articles.all(page))\n    }\n  };\n\n  return (\n    <nav>\n      <ul className=\"pagination\">\n\n        {\n          range.map(v => {\n            const isCurrent = v === props.currentPage;\n            const onClick = ev => {\n              ev.preventDefault();\n              setPage(v);\n            };\n            return (\n              <li\n                className={ isCurrent ? 'page-item active' : 'page-item' }\n                onClick={onClick}\n                key={v.toString()}>\n\n                <a className=\"page-link\" href=\"\">{v + 1}</a>\n\n              </li>\n            );\n          })\n        }\n\n      </ul>\n    </nav>\n  );\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(ListPagination);"}, {"instruction": "\n        In the ArticleList component, add a ListPagination component below the list of articles. The ListPagination component should display a pagination control that allows the user to navigate through the pages of articles. The pagination control should display the current page number and the total number of pages. When the user clicks on a page number, the ListPagination component should fetch the articles for that page and update the state of the ArticleList component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticlePreview from './ArticlePreview';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default ArticleList;\n\"\n\n        ListPagination Component:\n        \"import React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport { SET_PAGE } from '../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onSetPage: (page, payload) =>\n    dispatch({ type: SET_PAGE, page, payload })\n});\n\nconst ListPagination = props => {\n  if (props.articlesCount <= 10) {\n    return null;\n  }\n\n  const range = [];\n  for (let i = 0; i < Math.ceil(props.articlesCount / 10); ++i) {\n    range.push(i);\n  }\n\n  const setPage = page => {\n    if(props.pager) {\n      props.onSetPage(page, props.pager(page));\n    }else {\n      props.onSetPage(page, agent.Articles.all(page))\n    }\n  };\n\n  return (\n    <nav>\n      <ul className=\"pagination\">\n\n        {\n          range.map(v => {\n            const isCurrent = v === props.currentPage;\n            const onClick = ev => {\n              ev.preventDefault();\n              setPage(v);\n            };\n            return (\n              <li\n                className={ isCurrent ? 'page-item active' : 'page-item' }\n                onClick={onClick}\n                key={v.toString()}>\n\n                <a className=\"page-link\" href=\"\">{v + 1}</a>\n\n              </li>\n            );\n          })\n        }\n\n      </ul>\n    </nav>\n  );\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(ListPagination);\"\n        ", "output": "import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;"}, {"instruction": "Create a React component that displays a list of errors. The component should accept an object of errors as a prop. If there are any errors, the component should render a list of error messages. Each error message should include the error key and the error message. If there are no errors, the component should not render anything.", "output": "import React from 'react';\n\nclass ListErrors extends React.Component {\n  render() {\n    const errors = this.props.errors;\n    if (errors) {\n      return (\n        <ul className=\"error-messages\">\n          {\n            Object.keys(errors).map(key => {\n              return (\n                <li key={key}>\n                  {key} {errors[key]}\n                </li>\n              );\n            })\n          }\n        </ul>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ListErrors;"}, {"instruction": "\n        Integrate the ListErrors component into the Editor component. The ListErrors component should display any errors that are passed to it as props. The ListErrors component should be placed within the Editor component, above the form.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  ADD_TAG,\n  EDITOR_PAGE_LOADED,\n  REMOVE_TAG,\n  ARTICLE_SUBMITTED,\n  EDITOR_PAGE_UNLOADED,\n  UPDATE_FIELD_EDITOR\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.editor\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddTag: () =>\n    dispatch({ type: ADD_TAG }),\n  onLoad: payload =>\n    dispatch({ type: EDITOR_PAGE_LOADED, payload }),\n  onRemoveTag: tag =>\n    dispatch({ type: REMOVE_TAG, tag }),\n  onSubmit: payload =>\n    dispatch({ type: ARTICLE_SUBMITTED, payload }),\n  onUnload: payload =>\n    dispatch({ type: EDITOR_PAGE_UNLOADED }),\n  onUpdateField: (key, value) =>\n    dispatch({ type: UPDATE_FIELD_EDITOR, key, value })\n});\n\nclass Editor extends React.Component {\n  constructor() {\n    super();\n\n    const updateFieldEvent =\n      key => ev => this.props.onUpdateField(key, ev.target.value);\n    this.changeTitle = updateFieldEvent('title');\n    this.changeDescription = updateFieldEvent('description');\n    this.changeBody = updateFieldEvent('body');\n    this.changeTagInput = updateFieldEvent('tagInput');\n\n    this.watchForEnter = ev => {\n      if (ev.keyCode === 13) {\n        ev.preventDefault();\n        this.props.onAddTag();\n      }\n    };\n\n    this.removeTagHandler = tag => () => {\n      this.props.onRemoveTag(tag);\n    };\n\n    this.submitForm = ev => {\n      ev.preventDefault();\n      const article = {\n        title: this.props.title,\n        description: this.props.description,\n        body: this.props.body,\n        tagList: this.props.tagList\n      };\n\n      const slug = { slug: this.props.articleSlug };\n      const promise = this.props.articleSlug ?\n        agent.Articles.update(Object.assign(article, slug)) :\n        agent.Articles.create(article);\n\n      this.props.onSubmit(promise);\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.match.params.slug !== nextProps.match.params.slug) {\n      if (nextProps.match.params.slug) {\n        this.props.onUnload();\n        return this.props.onLoad(agent.Articles.get(this.props.match.params.slug));\n      }\n      this.props.onLoad(null);\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.match.params.slug) {\n      return this.props.onLoad(agent.Articles.get(this.props.match.params.slug));\n    }\n    this.props.onLoad(null);\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"editor-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-10 offset-md-1 col-xs-12\">\n\n              <form>\n                <fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"text\"\n                      placeholder=\"Article Title\"\n                      value={this.props.title}\n                      onChange={this.changeTitle} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"What's this article about?\"\n                      value={this.props.description}\n                      onChange={this.changeDescription} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <textarea\n                      className=\"form-control\"\n                      rows=\"8\"\n                      placeholder=\"Write your article (in markdown)\"\n                      value={this.props.body}\n                      onChange={this.changeBody}>\n                    </textarea>\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"Enter tags\"\n                      value={this.props.tagInput}\n                      onChange={this.changeTagInput}\n                      onKeyUp={this.watchForEnter} />\n\n                    <div className=\"tag-list\">\n                      {\n                        (this.props.tagList || []).map(tag => {\n                          return (\n                            <span className=\"tag-default tag-pill\" key={tag}>\n                              <i  className=\"ion-close-round\"\n                                  onClick={this.removeTagHandler(tag)}>\n                              </i>\n                              {tag}\n                            </span>\n                          );\n                        })\n                      }\n                    </div>\n                  </fieldset>\n\n                  <button\n                    className=\"btn btn-lg pull-xs-right btn-primary\"\n                    type=\"button\"\n                    disabled={this.props.inProgress}\n                    onClick={this.submitForm}>\n                    Publish Article\n                  </button>\n\n                </fieldset>\n              </form>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);\n\"\n\n        ListErrors Component:\n        \"import React from 'react';\n\nclass ListErrors extends React.Component {\n  render() {\n    const errors = this.props.errors;\n    if (errors) {\n      return (\n        <ul className=\"error-messages\">\n          {\n            Object.keys(errors).map(key => {\n              return (\n                <li key={key}>\n                  {key} {errors[key]}\n                </li>\n              );\n            })\n          }\n        </ul>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ListErrors;\"\n        ", "output": "import ListErrors from './ListErrors';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  ADD_TAG,\n  EDITOR_PAGE_LOADED,\n  REMOVE_TAG,\n  ARTICLE_SUBMITTED,\n  EDITOR_PAGE_UNLOADED,\n  UPDATE_FIELD_EDITOR\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.editor\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddTag: () =>\n    dispatch({ type: ADD_TAG }),\n  onLoad: payload =>\n    dispatch({ type: EDITOR_PAGE_LOADED, payload }),\n  onRemoveTag: tag =>\n    dispatch({ type: REMOVE_TAG, tag }),\n  onSubmit: payload =>\n    dispatch({ type: ARTICLE_SUBMITTED, payload }),\n  onUnload: payload =>\n    dispatch({ type: EDITOR_PAGE_UNLOADED }),\n  onUpdateField: (key, value) =>\n    dispatch({ type: UPDATE_FIELD_EDITOR, key, value })\n});\n\nclass Editor extends React.Component {\n  constructor() {\n    super();\n\n    const updateFieldEvent =\n      key => ev => this.props.onUpdateField(key, ev.target.value);\n    this.changeTitle = updateFieldEvent('title');\n    this.changeDescription = updateFieldEvent('description');\n    this.changeBody = updateFieldEvent('body');\n    this.changeTagInput = updateFieldEvent('tagInput');\n\n    this.watchForEnter = ev => {\n      if (ev.keyCode === 13) {\n        ev.preventDefault();\n        this.props.onAddTag();\n      }\n    };\n\n    this.removeTagHandler = tag => () => {\n      this.props.onRemoveTag(tag);\n    };\n\n    this.submitForm = ev => {\n      ev.preventDefault();\n      const article = {\n        title: this.props.title,\n        description: this.props.description,\n        body: this.props.body,\n        tagList: this.props.tagList\n      };\n\n      const slug = { slug: this.props.articleSlug };\n      const promise = this.props.articleSlug ?\n        agent.Articles.update(Object.assign(article, slug)) :\n        agent.Articles.create(article);\n\n      this.props.onSubmit(promise);\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.match.params.slug !== nextProps.match.params.slug) {\n      if (nextProps.match.params.slug) {\n        this.props.onUnload();\n        return this.props.onLoad(agent.Articles.get(this.props.match.params.slug));\n      }\n      this.props.onLoad(null);\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.match.params.slug) {\n      return this.props.onLoad(agent.Articles.get(this.props.match.params.slug));\n    }\n    this.props.onLoad(null);\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"editor-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-10 offset-md-1 col-xs-12\">\n\n              <ListErrors errors={this.props.errors}></ListErrors>\n\n              <form>\n                <fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"text\"\n                      placeholder=\"Article Title\"\n                      value={this.props.title}\n                      onChange={this.changeTitle} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"What's this article about?\"\n                      value={this.props.description}\n                      onChange={this.changeDescription} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <textarea\n                      className=\"form-control\"\n                      rows=\"8\"\n                      placeholder=\"Write your article (in markdown)\"\n                      value={this.props.body}\n                      onChange={this.changeBody}>\n                    </textarea>\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"Enter tags\"\n                      value={this.props.tagInput}\n                      onChange={this.changeTagInput}\n                      onKeyUp={this.watchForEnter} />\n\n                    <div className=\"tag-list\">\n                      {\n                        (this.props.tagList || []).map(tag => {\n                          return (\n                            <span className=\"tag-default tag-pill\" key={tag}>\n                              <i  className=\"ion-close-round\"\n                                  onClick={this.removeTagHandler(tag)}>\n                              </i>\n                              {tag}\n                            </span>\n                          );\n                        })\n                      }\n                    </div>\n                  </fieldset>\n\n                  <button\n                    className=\"btn btn-lg pull-xs-right btn-primary\"\n                    type=\"button\"\n                    disabled={this.props.inProgress}\n                    onClick={this.submitForm}>\n                    Publish Article\n                  </button>\n\n                </fieldset>\n              </form>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);"}, {"instruction": "Create a React component that displays a list of errors. The errors should be displayed in a bulleted list, with each error message appearing on its own line. If there are no errors, the component should not render anything.", "output": "import React from 'react';\n\nclass ListErrors extends React.Component {\n  render() {\n    const errors = this.props.errors;\n    if (errors) {\n      return (\n        <ul className=\"error-messages\">\n          {\n            Object.keys(errors).map(key => {\n              return (\n                <li key={key}>\n                  {key} {errors[key]}\n                </li>\n              );\n            })\n          }\n        </ul>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ListErrors;"}, {"instruction": "\n        Add a new component called \"ListErrors\" to the \"Login\" component. This component should display a list of errors that are passed to it as props. The \"ListErrors\" component should be placed below the \"Need an account?\" link and above the login form.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import { Link } from 'react-router-dom';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  UPDATE_FIELD_AUTH,\n  LOGIN,\n  LOGIN_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({ ...state.auth });\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeEmail: value =>\n    dispatch({ type: UPDATE_FIELD_AUTH, key: 'email', value }),\n  onChangePassword: value =>\n    dispatch({ type: UPDATE_FIELD_AUTH, key: 'password', value }),\n  onSubmit: (email, password) =>\n    dispatch({ type: LOGIN, payload: agent.Auth.login(email, password) }),\n  onUnload: () =>\n    dispatch({ type: LOGIN_PAGE_UNLOADED })\n});\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.changeEmail = ev => this.props.onChangeEmail(ev.target.value);\n    this.changePassword = ev => this.props.onChangePassword(ev.target.value);\n    this.submitForm = (email, password) => ev => {\n      ev.preventDefault();\n      this.props.onSubmit(email, password);\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    const email = this.props.email;\n    const password = this.props.password;\n    return (\n      <div className=\"auth-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n              <h1 className=\"text-xs-center\">Sign In</h1>\n              <p className=\"text-xs-center\">\n                <Link to=\"/register\">\n                  Need an account?\n                </Link>\n              </p>\n\n              <form onSubmit={this.submitForm(email, password)}>\n                <fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      value={email}\n                      onChange={this.changeEmail} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      value={password}\n                      onChange={this.changePassword} />\n                  </fieldset>\n\n                  <button\n                    className=\"btn btn-lg btn-primary pull-xs-right\"\n                    type=\"submit\"\n                    disabled={this.props.inProgress}>\n                    Sign in\n                  </button>\n\n                </fieldset>\n              </form>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\"\n\n        ListErrors Component:\n        \"import React from 'react';\n\nclass ListErrors extends React.Component {\n  render() {\n    const errors = this.props.errors;\n    if (errors) {\n      return (\n        <ul className=\"error-messages\">\n          {\n            Object.keys(errors).map(key => {\n              return (\n                <li key={key}>\n                  {key} {errors[key]}\n                </li>\n              );\n            })\n          }\n        </ul>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ListErrors;\"\n        ", "output": "import { Link } from 'react-router-dom';\nimport ListErrors from './ListErrors';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  UPDATE_FIELD_AUTH,\n  LOGIN,\n  LOGIN_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({ ...state.auth });\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeEmail: value =>\n    dispatch({ type: UPDATE_FIELD_AUTH, key: 'email', value }),\n  onChangePassword: value =>\n    dispatch({ type: UPDATE_FIELD_AUTH, key: 'password', value }),\n  onSubmit: (email, password) =>\n    dispatch({ type: LOGIN, payload: agent.Auth.login(email, password) }),\n  onUnload: () =>\n    dispatch({ type: LOGIN_PAGE_UNLOADED })\n});\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.changeEmail = ev => this.props.onChangeEmail(ev.target.value);\n    this.changePassword = ev => this.props.onChangePassword(ev.target.value);\n    this.submitForm = (email, password) => ev => {\n      ev.preventDefault();\n      this.props.onSubmit(email, password);\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    const email = this.props.email;\n    const password = this.props.password;\n    return (\n      <div className=\"auth-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n              <h1 className=\"text-xs-center\">Sign In</h1>\n              <p className=\"text-xs-center\">\n                <Link to=\"/register\">\n                  Need an account?\n                </Link>\n              </p>\n\n              <ListErrors errors={this.props.errors} />\n\n              <form onSubmit={this.submitForm(email, password)}>\n                <fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      value={email}\n                      onChange={this.changeEmail} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      value={password}\n                      onChange={this.changePassword} />\n                  </fieldset>\n\n                  <button\n                    className=\"btn btn-lg btn-primary pull-xs-right\"\n                    type=\"submit\"\n                    disabled={this.props.inProgress}>\n                    Sign in\n                  </button>\n\n                </fieldset>\n              </form>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"}, {"instruction": "Create a React component that displays a button that links to a settings page when the user is logged in. The button should have the text \"Edit Profile Settings\" and the class names \"btn btn-sm btn-outline-secondary action-btn\". If the user is not logged in, the component should not render anything.", "output": "import React from 'react';\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\nexport default EditProfileSettings;"}, {"instruction": "\n        In the Profile page, when the user is viewing their own profile, add a link to the \"Edit Profile Settings\" page next to their username and profile picture. This link should only be visible when the user is viewing their own profile.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\n\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };\n\"\n\n        EditProfileSettings Component:\n        \"import React from 'react';\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\nexport default EditProfileSettings;\"\n        ", "output": "import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\nimport EditProfileSettings from './EditProfileSettings';\n\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\n\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };"}, {"instruction": "Create a button that allows a user to follow or unfollow another user. The button should display \"Follow\" when the user is not following the other user and \"Unfollow\" when the user is following the other user. When the button is clicked, it should trigger a function that either follows or unfollows the other user, depending on the current state. The button should be disabled if the user is the same as the one being followed.", "output": "import React from 'react';\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\nexport default FollowUserButton;\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};"}, {"instruction": "\n        In the Profile component, integrate the FollowUserButton component. The FollowUserButton should appear below the EditProfileSettings component and should allow users to follow or unfollow the profile owner. The button should be hidden if the profile owner is the current user.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };\n\"\n\n        FollowUserButton Component:\n        \"import React from 'react';\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\nexport default FollowUserButton;\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\"\n        ", "output": "import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\nimport FollowUserButton from './FollowUserButton';\n\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };"}, {"instruction": "Create a React component that displays a list of articles. If there are no articles, display a \"Loading...\" message. If there are no articles, display a \"No articles are here... yet.\" message. Otherwise, display a list of article previews and a pagination component.", "output": "import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;"}, {"instruction": "\n        Integrate the new \"ArticleList\" component into the \"Profile\" component.\n\nThe \"ArticleList\" component should display a list of articles. If there are no articles, it should display a message indicating that there are no articles. If the articles are still loading, it should display a loading message.\n\nThe \"Profile\" component should use the \"ArticleList\" component to display the user's articles. The \"ArticleList\" component should be placed within the \"articles-toggle\" div.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\n\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\n\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              \n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };\n\"\n\n        ArticleList Component:\n        \"import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;\"\n        ", "output": "import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\n\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\n\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };"}, {"instruction": "Create a React component that displays a list of articles. If there are no articles, display a \"Loading...\" message. If there are no articles, display a \"No articles are here... yet.\" message. Otherwise, display a list of article previews and a pagination component.", "output": "import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;"}, {"instruction": "\n        Add the ArticleList component to the MainView component. The ArticleList component should display a list of articles and a pagination component below the list. The ArticleList component should only be displayed if the articles prop is not empty and is not loading. If the articles prop is empty, display a message indicating that there are no articles. If the articles prop is loading, display a loading message.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n\"\n\n        ArticleList Component:\n        \"import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;\"\n        ", "output": "import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);"}, {"instruction": "Create a React component that renders a navigation tab for a \"Your Feed\" page. When the tab is clicked, it should trigger a function that updates the current tab to \"feed\" and fetches and displays a feed of articles. The tab should be active when the current tab is \"feed\" and inactive otherwise.", "output": "import React from 'react';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\nexport default YourFeedTab;"}, {"instruction": "\n        Add a new tab to the MainView component that allows users to view their personalized feed of articles. The new tab should be labeled \"Your Feed\" and should only be visible to users who are logged in. When the user clicks on the \"Your Feed\" tab, they should be shown a list of articles that are relevant to their interests.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n\"\n\n        YourFeedTab Component:\n        \"import React from 'react';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\nexport default YourFeedTab;\"\n        ", "output": "import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\nimport YourFeedTab from './YourFeedTab';\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);"}, {"instruction": "Generate a React component that renders a navigation tab with the label \"Global Feed\". When the tab is clicked, it should trigger a callback function that updates the current tab to \"all\" and fetches and displays a list of articles. The tab should be active when the current tab is \"all\".", "output": "import React from 'react';\n\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\nexport default GlobalFeedTab;"}, {"instruction": "\n        In the MainView component, add a new tab to the navigation bar that displays \"Global Feed\". When the user clicks on this tab, it should load all articles from the server and display them in the ArticleList component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n\"\n\n        GlobalFeedTab Component:\n        \"import React from 'react';\n\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\nexport default GlobalFeedTab;\"\n        ", "output": "import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\nimport GlobalFeedTab from '../GlobalFeedTab';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);"}, {"instruction": "Create a React component that displays a navigation tab for filtering articles by a specific tag. The tab should only be visible if a tag is provided. The tab should include an icon and the tag name.", "output": "import React from 'react';\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\nexport default TagFilterTab;"}, {"instruction": "\n        In the MainView component, integrate the TagFilterTab component into the navigation bar. The TagFilterTab should only be displayed if a tag is provided. When a tag is provided, the TagFilterTab should display the tag name and an icon. The TagFilterTab should not be clickable.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n\"\n\n        TagFilterTab Component:\n        \"import React from 'react';\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\nexport default TagFilterTab;\"\n        ", "output": "import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\nimport TagFilterTab from './TagFilterTab';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);"}, {"instruction": "Create a React component that displays a banner with the application name and a description. The banner should only be visible if the user is not logged in.", "output": "import React from 'react';\n\nconst Banner = ({ appName, token }) => {\n  if (token) {\n    return null;\n  }\n  return (\n    <div className=\"banner\">\n      <div className=\"container\">\n        <h1 className=\"logo-font\">\n          {appName.toLowerCase()}\n        </h1>\n        <p>A place to share your knowledge.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;"}, {"instruction": "\n        Integrate the new \"Banner\" component into the \"Home\" component. The \"Banner\" component should only be visible when the user is not logged in. When the user is logged in, the \"Banner\" component should not be displayed. The \"Banner\" component should be placed at the top of the \"Home\" component, above the \"MainView\" and \"Tags\" components.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import MainView from './MainView';\nimport React from 'react';\nimport Tags from './Tags';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport {\n  HOME_PAGE_LOADED,\n  HOME_PAGE_UNLOADED,\n  APPLY_TAG_FILTER\n} from '../../constants/actionTypes';\n\nconst Promise = global.Promise;\n\nconst mapStateToProps = state => ({\n  ...state.home,\n  appName: state.common.appName,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickTag: (tag, pager, payload) =>\n    dispatch({ type: APPLY_TAG_FILTER, tag, pager, payload }),\n  onLoad: (tab, pager, payload) =>\n    dispatch({ type: HOME_PAGE_LOADED, tab, pager, payload }),\n  onUnload: () =>\n    dispatch({  type: HOME_PAGE_UNLOADED })\n});\n\nclass Home extends React.Component {\n  componentWillMount() {\n    const tab = this.props.token ? 'feed' : 'all';\n    const articlesPromise = this.props.token ?\n      agent.Articles.feed :\n      agent.Articles.all;\n\n    this.props.onLoad(tab, articlesPromise, Promise.all([agent.Tags.getAll(), articlesPromise()]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n\n        <div className=\"container page\">\n          <div className=\"row\">\n            <MainView />\n\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n\n                <p>Popular Tags</p>\n\n                <Tags\n                  tags={this.props.tags}\n                  onClickTag={this.props.onClickTag} />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\"\n\n        Banner Component:\n        \"import React from 'react';\n\nconst Banner = ({ appName, token }) => {\n  if (token) {\n    return null;\n  }\n  return (\n    <div className=\"banner\">\n      <div className=\"container\">\n        <h1 className=\"logo-font\">\n          {appName.toLowerCase()}\n        </h1>\n        <p>A place to share your knowledge.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;\"\n        ", "output": "import Banner from './Banner';\nimport MainView from './MainView';\nimport React from 'react';\nimport Tags from './Tags';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport {\n  HOME_PAGE_LOADED,\n  HOME_PAGE_UNLOADED,\n  APPLY_TAG_FILTER\n} from '../../constants/actionTypes';\n\nconst Promise = global.Promise;\n\nconst mapStateToProps = state => ({\n  ...state.home,\n  appName: state.common.appName,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickTag: (tag, pager, payload) =>\n    dispatch({ type: APPLY_TAG_FILTER, tag, pager, payload }),\n  onLoad: (tab, pager, payload) =>\n    dispatch({ type: HOME_PAGE_LOADED, tab, pager, payload }),\n  onUnload: () =>\n    dispatch({  type: HOME_PAGE_UNLOADED })\n});\n\nclass Home extends React.Component {\n  componentWillMount() {\n    const tab = this.props.token ? 'feed' : 'all';\n    const articlesPromise = this.props.token ?\n      agent.Articles.feed :\n      agent.Articles.all;\n\n    this.props.onLoad(tab, articlesPromise, Promise.all([agent.Tags.getAll(), articlesPromise()]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n\n        <Banner token={this.props.token} appName={this.props.appName} />\n\n        <div className=\"container page\">\n          <div className=\"row\">\n            <MainView />\n\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n\n                <p>Popular Tags</p>\n\n                <Tags\n                  tags={this.props.tags}\n                  onClickTag={this.props.onClickTag} />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"}, {"instruction": "Create a React component that displays a list of tags. When a tag is clicked, it should trigger a function that updates the page to show articles related to that tag. If no tags are provided, display a \"Loading Tags...\" message.", "output": "import React from 'react';\nimport agent from '../../agent';\n\nconst Tags = props => {\n  const tags = props.tags;\n  if (tags) {\n    return (\n      <div className=\"tag-list\">\n        {\n          tags.map(tag => {\n            const handleClick = ev => {\n              ev.preventDefault();\n              props.onClickTag(tag, page => agent.Articles.byTag(tag, page), agent.Articles.byTag(tag));\n            };\n\n            return (\n              <a\n                href=\"\"\n                className=\"tag-default tag-pill\"\n                key={tag}\n                onClick={handleClick}>\n                {tag}\n              </a>\n            );\n          })\n        }\n      </div>\n    );\n  } else {\n    return (\n      <div>Loading Tags...</div>\n    );\n  }\n};\n\nexport default Tags;"}, {"instruction": "\n        Integrate the new \"Tags\" component into the root component. When the user clicks on a tag, the root component should update the articles displayed based on the selected tag. The \"Tags\" component should display a list of tags, and when a tag is clicked, it should trigger an action in the root component that updates the articles displayed.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import Banner from './Banner';\nimport MainView from './MainView';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport {\n  HOME_PAGE_LOADED,\n  HOME_PAGE_UNLOADED,\n  APPLY_TAG_FILTER\n} from '../../constants/actionTypes';\n\nconst Promise = global.Promise;\n\nconst mapStateToProps = state => ({\n  ...state.home,\n  appName: state.common.appName,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickTag: (tag, pager, payload) =>\n    dispatch({ type: APPLY_TAG_FILTER, tag, pager, payload }),\n  onLoad: (tab, pager, payload) =>\n    dispatch({ type: HOME_PAGE_LOADED, tab, pager, payload }),\n  onUnload: () =>\n    dispatch({  type: HOME_PAGE_UNLOADED })\n});\n\nclass Home extends React.Component {\n  componentWillMount() {\n    const tab = this.props.token ? 'feed' : 'all';\n    const articlesPromise = this.props.token ?\n      agent.Articles.feed :\n      agent.Articles.all;\n\n    this.props.onLoad(tab, articlesPromise, Promise.all([agent.Tags.getAll(), articlesPromise()]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n\n        <Banner token={this.props.token} appName={this.props.appName} />\n\n        <div className=\"container page\">\n          <div className=\"row\">\n            <MainView />\n\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n\n                <p>Popular Tags</p>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\"\n\n        Tags Component:\n        \"import React from 'react';\nimport agent from '../../agent';\n\nconst Tags = props => {\n  const tags = props.tags;\n  if (tags) {\n    return (\n      <div className=\"tag-list\">\n        {\n          tags.map(tag => {\n            const handleClick = ev => {\n              ev.preventDefault();\n              props.onClickTag(tag, page => agent.Articles.byTag(tag, page), agent.Articles.byTag(tag));\n            };\n\n            return (\n              <a\n                href=\"\"\n                className=\"tag-default tag-pill\"\n                key={tag}\n                onClick={handleClick}>\n                {tag}\n              </a>\n            );\n          })\n        }\n      </div>\n    );\n  } else {\n    return (\n      <div>Loading Tags...</div>\n    );\n  }\n};\n\nexport default Tags;\"\n        ", "output": "import Banner from './Banner';\nimport MainView from './MainView';\nimport React from 'react';\nimport Tags from './Tags';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport {\n  HOME_PAGE_LOADED,\n  HOME_PAGE_UNLOADED,\n  APPLY_TAG_FILTER\n} from '../../constants/actionTypes';\n\nconst Promise = global.Promise;\n\nconst mapStateToProps = state => ({\n  ...state.home,\n  appName: state.common.appName,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickTag: (tag, pager, payload) =>\n    dispatch({ type: APPLY_TAG_FILTER, tag, pager, payload }),\n  onLoad: (tab, pager, payload) =>\n    dispatch({ type: HOME_PAGE_LOADED, tab, pager, payload }),\n  onUnload: () =>\n    dispatch({  type: HOME_PAGE_UNLOADED })\n});\n\nclass Home extends React.Component {\n  componentWillMount() {\n    const tab = this.props.token ? 'feed' : 'all';\n    const articlesPromise = this.props.token ?\n      agent.Articles.feed :\n      agent.Articles.all;\n\n    this.props.onLoad(tab, articlesPromise, Promise.all([agent.Tags.getAll(), articlesPromise()]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n\n        <Banner token={this.props.token} appName={this.props.appName} />\n\n        <div className=\"container page\">\n          <div className=\"row\">\n            <MainView />\n\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n\n                <p>Popular Tags</p>\n\n                <Tags\n                  tags={this.props.tags}\n                  onClickTag={this.props.onClickTag} />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"}, {"instruction": "Create a React component that displays an article's metadata, including the author's profile picture, username, the date the article was created, and any relevant actions that can be performed on the article. The component should allow users to click on the author's profile picture or username to navigate to their profile page.", "output": "import ArticleActions from './ArticleActions';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst ArticleMeta = props => {\n  const article = props.article;\n  return (\n    <div className=\"article-meta\">\n      <Link to={`/@${article.author.username}`}>\n        <img src={article.author.image} alt={article.author.username} />\n      </Link>\n\n      <div className=\"info\">\n        <Link to={`/@${article.author.username}`} className=\"author\">\n          {article.author.username}\n        </Link>\n        <span className=\"date\">\n          {new Date(article.createdAt).toDateString()}\n        </span>\n      </div>\n\n      <ArticleActions canModify={props.canModify} article={article} />\n    </div>\n  );\n};\n\nexport default ArticleMeta;"}, {"instruction": "\n        In the Article component, add the newly created ArticleMeta component below the article title, passing in the article data and a flag indicating whether the current user can modify the article.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import CommentContainer from './CommentContainer';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport { ARTICLE_PAGE_LOADED, ARTICLE_PAGE_UNLOADED } from '../../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.article,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: payload =>\n    dispatch({ type: ARTICLE_PAGE_LOADED, payload }),\n  onUnload: () =>\n    dispatch({ type: ARTICLE_PAGE_UNLOADED })\n});\n\nclass Article extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Articles.get(this.props.match.params.id),\n      agent.Comments.forArticle(this.props.match.params.id)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    if (!this.props.article) {\n      return null;\n    }\n\n    const markup = { __html: marked(this.props.article.body, { sanitize: true }) };\n    const canModify = this.props.currentUser &&\n      this.props.currentUser.username === this.props.article.author.username;\n    return (\n      <div className=\"article-page\">\n\n        <div className=\"banner\">\n          <div className=\"container\">\n\n            <h1>{this.props.article.title}</h1>\n\n          </div>\n        </div>\n\n        <div className=\"container page\">\n\n          <div className=\"row article-content\">\n            <div className=\"col-xs-12\">\n\n              <div dangerouslySetInnerHTML={markup}></div>\n\n              <ul className=\"tag-list\">\n                {\n                  this.props.article.tagList.map(tag => {\n                    return (\n                      <li\n                        className=\"tag-default tag-pill tag-outline\"\n                        key={tag}>\n                        {tag}\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"article-actions\">\n          </div>\n\n          <div className=\"row\">\n            <CommentContainer\n              comments={this.props.comments || []}\n              errors={this.props.commentErrors}\n              slug={this.props.match.params.id}\n              currentUser={this.props.currentUser} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);\n\"\n\n        ArticleMeta Component:\n        \"import ArticleActions from './ArticleActions';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst ArticleMeta = props => {\n  const article = props.article;\n  return (\n    <div className=\"article-meta\">\n      <Link to={`/@${article.author.username}`}>\n        <img src={article.author.image} alt={article.author.username} />\n      </Link>\n\n      <div className=\"info\">\n        <Link to={`/@${article.author.username}`} className=\"author\">\n          {article.author.username}\n        </Link>\n        <span className=\"date\">\n          {new Date(article.createdAt).toDateString()}\n        </span>\n      </div>\n\n      <ArticleActions canModify={props.canModify} article={article} />\n    </div>\n  );\n};\n\nexport default ArticleMeta;\"\n        ", "output": "import ArticleMeta from './ArticleMeta';\nimport CommentContainer from './CommentContainer';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport { ARTICLE_PAGE_LOADED, ARTICLE_PAGE_UNLOADED } from '../../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.article,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: payload =>\n    dispatch({ type: ARTICLE_PAGE_LOADED, payload }),\n  onUnload: () =>\n    dispatch({ type: ARTICLE_PAGE_UNLOADED })\n});\n\nclass Article extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Articles.get(this.props.match.params.id),\n      agent.Comments.forArticle(this.props.match.params.id)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    if (!this.props.article) {\n      return null;\n    }\n\n    const markup = { __html: marked(this.props.article.body, { sanitize: true }) };\n    const canModify = this.props.currentUser &&\n      this.props.currentUser.username === this.props.article.author.username;\n    return (\n      <div className=\"article-page\">\n\n        <div className=\"banner\">\n          <div className=\"container\">\n\n            <h1>{this.props.article.title}</h1>\n            <ArticleMeta\n              article={this.props.article}\n              canModify={canModify} />\n\n          </div>\n        </div>\n\n        <div className=\"container page\">\n\n          <div className=\"row article-content\">\n            <div className=\"col-xs-12\">\n\n              <div dangerouslySetInnerHTML={markup}></div>\n\n              <ul className=\"tag-list\">\n                {\n                  this.props.article.tagList.map(tag => {\n                    return (\n                      <li\n                        className=\"tag-default tag-pill tag-outline\"\n                        key={tag}>\n                        {tag}\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"article-actions\">\n          </div>\n\n          <div className=\"row\">\n            <CommentContainer\n              comments={this.props.comments || []}\n              errors={this.props.commentErrors}\n              slug={this.props.match.params.id}\n              currentUser={this.props.currentUser} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);"}, {"instruction": "Create a React component that displays a list of comments and a form for adding a new comment. If the user is not logged in, display a message prompting them to sign in or register to add comments.", "output": "import CommentInput from './CommentInput';\nimport CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;"}, {"instruction": "\n        Integrate the new \"CommentContainer\" component into the \"Article\" component. The \"CommentContainer\" component should appear below the article content and should display a list of comments and a form for adding new comments. If the user is not logged in, they should be prompted to sign in or register to add comments.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleMeta from './ArticleMeta';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport { ARTICLE_PAGE_LOADED, ARTICLE_PAGE_UNLOADED } from '../../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.article,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: payload =>\n    dispatch({ type: ARTICLE_PAGE_LOADED, payload }),\n  onUnload: () =>\n    dispatch({ type: ARTICLE_PAGE_UNLOADED })\n});\n\nclass Article extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Articles.get(this.props.match.params.id),\n      agent.Comments.forArticle(this.props.match.params.id)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    if (!this.props.article) {\n      return null;\n    }\n\n    const markup = { __html: marked(this.props.article.body, { sanitize: true }) };\n    const canModify = this.props.currentUser &&\n      this.props.currentUser.username === this.props.article.author.username;\n    return (\n      <div className=\"article-page\">\n\n        <div className=\"banner\">\n          <div className=\"container\">\n\n            <h1>{this.props.article.title}</h1>\n            <ArticleMeta\n              article={this.props.article}\n              canModify={canModify} />\n\n          </div>\n        </div>\n\n        <div className=\"container page\">\n\n          <div className=\"row article-content\">\n            <div className=\"col-xs-12\">\n\n              <div dangerouslySetInnerHTML={markup}></div>\n\n              <ul className=\"tag-list\">\n                {\n                  this.props.article.tagList.map(tag => {\n                    return (\n                      <li\n                        className=\"tag-default tag-pill tag-outline\"\n                        key={tag}>\n                        {tag}\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"article-actions\">\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);\n\"\n\n        CommentContainer Component:\n        \"import CommentInput from './CommentInput';\nimport CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;\"\n        ", "output": "import ArticleMeta from './ArticleMeta';\nimport CommentContainer from './CommentContainer';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport { ARTICLE_PAGE_LOADED, ARTICLE_PAGE_UNLOADED } from '../../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.article,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: payload =>\n    dispatch({ type: ARTICLE_PAGE_LOADED, payload }),\n  onUnload: () =>\n    dispatch({ type: ARTICLE_PAGE_UNLOADED })\n});\n\nclass Article extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Articles.get(this.props.match.params.id),\n      agent.Comments.forArticle(this.props.match.params.id)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    if (!this.props.article) {\n      return null;\n    }\n\n    const markup = { __html: marked(this.props.article.body, { sanitize: true }) };\n    const canModify = this.props.currentUser &&\n      this.props.currentUser.username === this.props.article.author.username;\n    return (\n      <div className=\"article-page\">\n\n        <div className=\"banner\">\n          <div className=\"container\">\n\n            <h1>{this.props.article.title}</h1>\n            <ArticleMeta\n              article={this.props.article}\n              canModify={canModify} />\n\n          </div>\n        </div>\n\n        <div className=\"container page\">\n\n          <div className=\"row article-content\">\n            <div className=\"col-xs-12\">\n\n              <div dangerouslySetInnerHTML={markup}></div>\n\n              <ul className=\"tag-list\">\n                {\n                  this.props.article.tagList.map(tag => {\n                    return (\n                      <li\n                        className=\"tag-default tag-pill tag-outline\"\n                        key={tag}>\n                        {tag}\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"article-actions\">\n          </div>\n\n          <div className=\"row\">\n            <CommentContainer\n              comments={this.props.comments || []}\n              errors={this.props.commentErrors}\n              slug={this.props.match.params.id}\n              currentUser={this.props.currentUser} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);"}, {"instruction": "Create a React component that allows a user to submit a comment. The component should have a text area for the user to enter their comment, a button to submit the comment, and a profile picture of the current user. When the user submits the comment, the component should dispatch an action to add the comment to the store.", "output": "import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { ADD_COMMENT } from '../../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: payload =>\n    dispatch({ type: ADD_COMMENT, payload })\n});\n\nclass CommentInput extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      body: ''\n    };\n\n    this.setBody = ev => {\n      this.setState({ body: ev.target.value });\n    };\n\n    this.createComment = ev => {\n      ev.preventDefault();\n      const payload = agent.Comments.create(this.props.slug,\n        { body: this.state.body });\n      this.setState({ body: '' });\n      this.props.onSubmit(payload);\n    };\n  }\n\n  render() {\n    return (\n      <form className=\"card comment-form\" onSubmit={this.createComment}>\n        <div className=\"card-block\">\n          <textarea className=\"form-control\"\n            placeholder=\"Write a comment...\"\n            value={this.state.body}\n            onChange={this.setBody}\n            rows=\"3\">\n          </textarea>\n        </div>\n        <div className=\"card-footer\">\n          <img\n            src={this.props.currentUser.image}\n            className=\"comment-author-img\"\n            alt={this.props.currentUser.username} />\n          <button\n            className=\"btn btn-sm btn-primary\"\n            type=\"submit\">\n            Post Comment\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default connect(() => ({}), mapDispatchToProps)(CommentInput);"}, {"instruction": "\n        In the CommentContainer component, add the CommentInput component as a child of the div element with the class name \"col-xs-12 col-md-8 offset-md-2\". The CommentInput component should be placed before the CommentList component.\n\nThe CommentInput component should allow users to enter a comment and submit it. When the user submits the comment, the component should dispatch an action to add the comment to the store.\n\nThe CommentInput component should also receive the following props:\n\n* slug: The slug of the article that the comment is being added to.\n* currentUser: The current user object.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;\n\"\n\n        CommentInput Component:\n        \"import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { ADD_COMMENT } from '../../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: payload =>\n    dispatch({ type: ADD_COMMENT, payload })\n});\n\nclass CommentInput extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      body: ''\n    };\n\n    this.setBody = ev => {\n      this.setState({ body: ev.target.value });\n    };\n\n    this.createComment = ev => {\n      ev.preventDefault();\n      const payload = agent.Comments.create(this.props.slug,\n        { body: this.state.body });\n      this.setState({ body: '' });\n      this.props.onSubmit(payload);\n    };\n  }\n\n  render() {\n    return (\n      <form className=\"card comment-form\" onSubmit={this.createComment}>\n        <div className=\"card-block\">\n          <textarea className=\"form-control\"\n            placeholder=\"Write a comment...\"\n            value={this.state.body}\n            onChange={this.setBody}\n            rows=\"3\">\n          </textarea>\n        </div>\n        <div className=\"card-footer\">\n          <img\n            src={this.props.currentUser.image}\n            className=\"comment-author-img\"\n            alt={this.props.currentUser.username} />\n          <button\n            className=\"btn btn-sm btn-primary\"\n            type=\"submit\">\n            Post Comment\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default connect(() => ({}), mapDispatchToProps)(CommentInput);\"\n        ", "output": "import CommentInput from './CommentInput';\nimport CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;"}, {"instruction": "Create a React component that displays a list of comments. Each comment should be rendered as a separate component, and the list should be updated dynamically as new comments are added or removed.", "output": "import Comment from './Comment';\nimport React from 'react';\n\nconst CommentList = props => {\n  return (\n    <div>\n      {\n        props.comments.map(comment => {\n          return (\n            <Comment\n              comment={comment}\n              currentUser={props.currentUser}\n              slug={props.slug}\n              key={comment.id} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default CommentList;"}, {"instruction": "\n        Update the root component to include the new CommentList component. The CommentList component should display a list of comments, with each comment being displayed as a separate item. The CommentList component should receive the following props:\n\n- `comments`: An array of comment objects.\n- `slug`: The slug of the article that the comments are for.\n- `currentUser`: The current user object.\n\nThe CommentList component should be displayed below the CommentInput component, and it should only be displayed if the current user is logged in.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import CommentInput from './CommentInput';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;\n\"\n\n        CommentList Component:\n        \"import Comment from './Comment';\nimport React from 'react';\n\nconst CommentList = props => {\n  return (\n    <div>\n      {\n        props.comments.map(comment => {\n          return (\n            <Comment\n              comment={comment}\n              currentUser={props.currentUser}\n              slug={props.slug}\n              key={comment.id} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default CommentList;\"\n        ", "output": "import CommentInput from './CommentInput';\nimport CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;"}, {"instruction": "Create a React component that displays a comment. The component should include the comment's body, author's profile picture, author's username, date posted, and a delete button that is only visible to the current user if they are the author of the comment. The component should use the following props: comment, currentUser, slug, and commentId.", "output": "import DeleteButton from './DeleteButton';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Comment = props => {\n  const comment = props.comment;\n  const show = props.currentUser &&\n    props.currentUser.username === comment.author.username;\n  return (\n    <div className=\"card\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n      <div className=\"card-footer\">\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          <img src={comment.author.image} className=\"comment-author-img\" alt={comment.author.username} />\n        </Link>\n        &nbsp;\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <span className=\"date-posted\">\n          {new Date(comment.createdAt).toDateString()}\n        </span>\n        <DeleteButton show={show} slug={props.slug} commentId={comment.id} />\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;"}, {"instruction": "\n        Integrate the new \"Comment\" component into the \"CommentList\" component. When a comment is rendered in the \"CommentList\" component, it should display the comment's body, author's username, author's profile picture, date posted, and a delete button if the current user is the author of the comment.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\n\nconst CommentList = props => {\n  return (\n    <div>\n      {\n        props.comments.map(comment => {\n          return (\n            <div\n              key={comment.id} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default CommentList;\n\"\n\n        Comment Component:\n        \"import DeleteButton from './DeleteButton';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Comment = props => {\n  const comment = props.comment;\n  const show = props.currentUser &&\n    props.currentUser.username === comment.author.username;\n  return (\n    <div className=\"card\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n      <div className=\"card-footer\">\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          <img src={comment.author.image} className=\"comment-author-img\" alt={comment.author.username} />\n        </Link>\n        &nbsp;\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <span className=\"date-posted\">\n          {new Date(comment.createdAt).toDateString()}\n        </span>\n        <DeleteButton show={show} slug={props.slug} commentId={comment.id} />\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;\"\n        ", "output": "import Comment from './Comment';\nimport React from 'react';\n\nconst CommentList = props => {\n  return (\n    <div>\n      {\n        props.comments.map(comment => {\n          return (\n            <Comment\n              comment={comment}\n              currentUser={props.currentUser}\n              slug={props.slug}\n              key={comment.id} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default CommentList;"}, {"instruction": "Create a button component that allows users to delete something (unspecified) when clicked. This button should only be visible under certain conditions indicated by a show prop. Clicking the button should trigger a function named onClick provided by a parent component. This onClick function should presumably handle the deletion logic.", "output": "import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { DELETE_COMMENT } from '../../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: (payload, commentId) =>\n    dispatch({ type: DELETE_COMMENT, payload, commentId })\n});\n\nconst DeleteButton = props => {\n  const del = () => {\n    const payload = agent.Comments.delete(props.slug, props.commentId);\n    props.onClick(payload, props.commentId);\n  };\n\n  if (props.show) {\n    return (\n      <span className=\"mod-options\">\n        <i className=\"ion-trash-a\" onClick={del}></i>\n      </span>\n    );\n  }\n  return null;\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(DeleteButton);"}, {"instruction": "\n        Integrate the DeleteButton component into the Comment component. The DeleteButton should only be visible if the current user is the author of the comment. When the DeleteButton is clicked, it should dispatch an action to delete the comment.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Comment = props => {\n  const comment = props.comment;\n  const show = props.currentUser &&\n    props.currentUser.username === comment.author.username;\n  return (\n    <div className=\"card\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n      <div className=\"card-footer\">\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          <img src={comment.author.image} className=\"comment-author-img\" alt={comment.author.username} />\n        </Link>\n        &nbsp;\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <span className=\"date-posted\">\n          {new Date(comment.createdAt).toDateString()}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;\n\"\n\n        DeleteButton Component:\n        \"import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { DELETE_COMMENT } from '../../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: (payload, commentId) =>\n    dispatch({ type: DELETE_COMMENT, payload, commentId })\n});\n\nconst DeleteButton = props => {\n  const del = () => {\n    const payload = agent.Comments.delete(props.slug, props.commentId);\n    props.onClick(payload, props.commentId);\n  };\n\n  if (props.show) {\n    return (\n      <span className=\"mod-options\">\n        <i className=\"ion-trash-a\" onClick={del}></i>\n      </span>\n    );\n  }\n  return null;\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(DeleteButton);\"\n        ", "output": "import DeleteButton from './DeleteButton';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Comment = props => {\n  const comment = props.comment;\n  const show = props.currentUser &&\n    props.currentUser.username === comment.author.username;\n  return (\n    <div className=\"card\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n      <div className=\"card-footer\">\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          <img src={comment.author.image} className=\"comment-author-img\" alt={comment.author.username} />\n        </Link>\n        &nbsp;\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <span className=\"date-posted\">\n          {new Date(comment.createdAt).toDateString()}\n        </span>\n        <DeleteButton show={show} slug={props.slug} commentId={comment.id} />\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;"}, {"instruction": "Design a form that allows users to update their profile settings, including their profile picture, username, bio, email, and password. The form should be easy to use and should validate user input.", "output": "import React from 'react';\nclass SettingsForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      image: '',\n      username: '',\n      bio: '',\n      email: '',\n      password: ''\n    };\n\n    this.updateState = field => ev => {\n      const state = this.state;\n      const newState = Object.assign({}, state, { [field]: ev.target.value });\n      this.setState(newState);\n    };\n\n    this.submitForm = ev => {\n      ev.preventDefault();\n\n      const user = Object.assign({}, this.state);\n      if (!user.password) {\n        delete user.password;\n      }\n\n      this.props.onSubmitForm(user);\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.currentUser) {\n      Object.assign(this.state, {\n        image: this.props.currentUser.image || '',\n        username: this.props.currentUser.username,\n        bio: this.props.currentUser.bio,\n        email: this.props.currentUser.email\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.currentUser) {\n      this.setState(Object.assign({}, this.state, {\n        image: nextProps.currentUser.image || '',\n        username: nextProps.currentUser.username,\n        bio: nextProps.currentUser.bio,\n        email: nextProps.currentUser.email\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submitForm}>\n        <fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"URL of profile picture\"\n              value={this.state.image}\n              onChange={this.updateState('image')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"text\"\n              placeholder=\"Username\"\n              value={this.state.username}\n              onChange={this.updateState('username')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <textarea\n              className=\"form-control form-control-lg\"\n              rows=\"8\"\n              placeholder=\"Short bio about you\"\n              value={this.state.bio}\n              onChange={this.updateState('bio')}>\n            </textarea>\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"email\"\n              placeholder=\"Email\"\n              value={this.state.email}\n              onChange={this.updateState('email')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"password\"\n              placeholder=\"New Password\"\n              value={this.state.password}\n              onChange={this.updateState('password')} />\n          </fieldset>\n\n          <button\n            className=\"btn btn-lg btn-primary pull-xs-right\"\n            type=\"submit\"\n            disabled={this.state.inProgress}>\n            Update Settings\n          </button>\n\n        </fieldset>\n      </form>\n    );\n  }\n}\nexport default SettingsForm;"}, {"instruction": "\n        In the Settings component, integrate the new SettingsForm component. The SettingsForm component should allow users to edit their profile picture, username, bio, email, and password. When the user clicks the \"Update Settings\" button, the form should submit the changes to the server. If the changes are saved successfully, the Settings component should display a success message. If there are any errors, the Settings component should display the errors to the user.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ListErrors from './ListErrors';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  SETTINGS_SAVED,\n  SETTINGS_PAGE_UNLOADED,\n  LOGOUT\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.settings,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickLogout: () => dispatch({ type: LOGOUT }),\n  onSubmitForm: user =>\n    dispatch({ type: SETTINGS_SAVED, payload: agent.Auth.save(user) }),\n  onUnload: () => dispatch({ type: SETTINGS_PAGE_UNLOADED })\n});\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div className=\"settings-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n\n              <h1 className=\"text-xs-center\">Your Settings</h1>\n\n              <ListErrors errors={this.props.errors}></ListErrors>\n\n              <hr />\n\n              <button\n                className=\"btn btn-outline-danger\"\n                onClick={this.props.onClickLogout}>\n                Or click here to logout.\n              </button>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n\"\n\n        SettingsForm Component:\n        \"import React from 'react';\nclass SettingsForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      image: '',\n      username: '',\n      bio: '',\n      email: '',\n      password: ''\n    };\n\n    this.updateState = field => ev => {\n      const state = this.state;\n      const newState = Object.assign({}, state, { [field]: ev.target.value });\n      this.setState(newState);\n    };\n\n    this.submitForm = ev => {\n      ev.preventDefault();\n\n      const user = Object.assign({}, this.state);\n      if (!user.password) {\n        delete user.password;\n      }\n\n      this.props.onSubmitForm(user);\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.currentUser) {\n      Object.assign(this.state, {\n        image: this.props.currentUser.image || '',\n        username: this.props.currentUser.username,\n        bio: this.props.currentUser.bio,\n        email: this.props.currentUser.email\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.currentUser) {\n      this.setState(Object.assign({}, this.state, {\n        image: nextProps.currentUser.image || '',\n        username: nextProps.currentUser.username,\n        bio: nextProps.currentUser.bio,\n        email: nextProps.currentUser.email\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submitForm}>\n        <fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"URL of profile picture\"\n              value={this.state.image}\n              onChange={this.updateState('image')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"text\"\n              placeholder=\"Username\"\n              value={this.state.username}\n              onChange={this.updateState('username')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <textarea\n              className=\"form-control form-control-lg\"\n              rows=\"8\"\n              placeholder=\"Short bio about you\"\n              value={this.state.bio}\n              onChange={this.updateState('bio')}>\n            </textarea>\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"email\"\n              placeholder=\"Email\"\n              value={this.state.email}\n              onChange={this.updateState('email')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"password\"\n              placeholder=\"New Password\"\n              value={this.state.password}\n              onChange={this.updateState('password')} />\n          </fieldset>\n\n          <button\n            className=\"btn btn-lg btn-primary pull-xs-right\"\n            type=\"submit\"\n            disabled={this.state.inProgress}>\n            Update Settings\n          </button>\n\n        </fieldset>\n      </form>\n    );\n  }\n}\nexport default SettingsForm;\"\n        ", "output": "import ListErrors from './ListErrors';\nimport SettingsForm from './SettingsForm';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  SETTINGS_SAVED,\n  SETTINGS_PAGE_UNLOADED,\n  LOGOUT\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.settings,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickLogout: () => dispatch({ type: LOGOUT }),\n  onSubmitForm: user =>\n    dispatch({ type: SETTINGS_SAVED, payload: agent.Auth.save(user) }),\n  onUnload: () => dispatch({ type: SETTINGS_PAGE_UNLOADED })\n});\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div className=\"settings-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n\n              <h1 className=\"text-xs-center\">Your Settings</h1>\n\n              <ListErrors errors={this.props.errors}></ListErrors>\n\n              <SettingsForm\n                currentUser={this.props.currentUser}\n                onSubmitForm={this.props.onSubmitForm} />\n\n              <hr />\n\n              <button\n                className=\"btn btn-outline-danger\"\n                onClick={this.props.onClickLogout}>\n                Or click here to logout.\n              </button>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);"}, {"instruction": "Design a loading spinner that appears when a user is waiting for data to load. The spinner should be visually appealing and non-distracting, and it should be easy to implement on any web page.", "output": "import React from 'react';\n\nconst Spinner = () => (\n  <div className=\"bobon-spinner mdl-spinner mdl-js-spinner is-active\"></div>\n);\n\nexport default Spinner;"}, {"instruction": "\n        Update the App component to integrate the new Spinner component. When the App is loading data, display the Spinner component. When the App is not loading data, display the page content. When the App is logging in, display the Spinner component. When the App is not logging in, display the page content.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { Link, browserHistory } from 'react-router';\n\nimport C from '../constants';\nimport DialogContainer from '../containers/DialogContainer';\nimport HeaderContainer from '../containers/HeaderContainer';\n\nrequire('../../scss/app.scss');\n\nclass App extends React.Component {\n\n  static propTypes() {\n    return {\n      uid: PropTypes.string,\n      authStatus: PropTypes.string.isRequired,\n      userName: PropTypes.string\n    };\n  }\n\n  componentDidUpdate() {\n    componentHandler.upgradeDom();\n  }\n\n  pageContent() {\n    let content = null;\n    if (!this.props.dataLoading) {\n      content = (\n        <ReactCSSTransitionGroup\n          component=\"div\"\n          transitionName=\"bobon-transition\"\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={500}\n          transitionAppear={true}\n        >\n          { React.cloneElement(this.props.children, {\n              key: this.props.location.pathname\n            }) }\n        </ReactCSSTransitionGroup>\n      );\n    }\n    return content;\n  }\n\n  render() {\n    let extraClass = '';\n    let content = null;\n\n    if (this.props.authStatus !== C.LOGGED_IN) {\n      extraClass = \"bobon-anon\";\n    }\n\n    if (this.props.authStatus === C.LOGGING_IN) {\n      content = null;\n    } else {\n      content = (\n        <div className={ `mdl-layout mdl-js-layout layout--fixed-header ${ extraClass }` }>\n          <HeaderContainer location={ this.props.location }/>\n\n          <main className=\"mdl-layout__content\">\n            <div className=\"bobon-page-content page-content\">\n              { this.pageContent() }\n            </div>\n\n          </main>\n\n          <footer className=\"bobon-footer\">\n            \u00a9 Bobon Profiles 2016. Support: <a href=\"mailto:roast@bobon.coffee\">roast@bobon.coffee</a>.\n          </footer>\n\n          <DialogContainer/>\n        </div>\n      );\n    }\n\n    return content;\n  }\n};\n\nexport default App;\n\"\n\n        Spinner Component:\n        \"import React from 'react';\n\nconst Spinner = () => (\n  <div className=\"bobon-spinner mdl-spinner mdl-js-spinner is-active\"></div>\n);\n\nexport default Spinner;\"\n        ", "output": "import React, { PropTypes } from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { Link, browserHistory } from 'react-router';\n\nimport C from '../constants';\nimport DialogContainer from '../containers/DialogContainer';\nimport HeaderContainer from '../containers/HeaderContainer';\nimport Spinner from './Spinner';\n\nrequire('../../scss/app.scss');\n\nclass App extends React.Component {\n\n  static propTypes() {\n    return {\n      uid: PropTypes.string,\n      authStatus: PropTypes.string.isRequired,\n      userName: PropTypes.string\n    };\n  }\n\n  componentDidUpdate() {\n    componentHandler.upgradeDom();\n  }\n\n  pageContent() {\n    let content = <Spinner/>;\n    if (!this.props.dataLoading) {\n      content = (\n        <ReactCSSTransitionGroup\n          component=\"div\"\n          transitionName=\"bobon-transition\"\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={500}\n          transitionAppear={true}\n        >\n          { React.cloneElement(this.props.children, {\n              key: this.props.location.pathname\n            }) }\n        </ReactCSSTransitionGroup>\n      );\n    }\n    return content;\n  }\n\n  render() {\n    let extraClass = '';\n    let content = null;\n\n    if (this.props.authStatus !== C.LOGGED_IN) {\n      extraClass = \"bobon-anon\";\n    }\n\n    if (this.props.authStatus === C.LOGGING_IN) {\n      content = <Spinner/>;\n    } else {\n      content = (\n        <div className={ `mdl-layout mdl-js-layout layout--fixed-header ${ extraClass }` }>\n          <HeaderContainer location={ this.props.location }/>\n\n          <main className=\"mdl-layout__content\">\n            <div className=\"bobon-page-content page-content\">\n              { this.pageContent() }\n            </div>\n\n          </main>\n\n          <footer className=\"bobon-footer\">\n            \u00a9 Bobon Profiles 2016. Support: <a href=\"mailto:roast@bobon.coffee\">roast@bobon.coffee</a>.\n          </footer>\n\n          <DialogContainer/>\n        </div>\n      );\n    }\n\n    return content;\n  }\n};\n\nexport default App;"}, {"instruction": "Create a React component that renders a button with Material Design styling. The button should be disabled if a `disabled` prop is passed in, and it should have an `onClick` event handler if an `onClick` prop is passed in. The button should have a `customClass` prop that can be used to add additional CSS classes to the button.", "output": "import React from 'react';\n\nclass Button extends React.Component {\n\n  render() {\n    if (this.props.disabled === true) {\n\n      return (\n        <button\n          className={ `mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored ${ this.props.customClass }` }\n          id={ this.props.id ? this.props.id : '' }\n          disabled\n        >\n          { this.props.children }\n        </button>\n      );\n\n    } else {\n\n      return (\n        <button\n          className={ `mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored ${ this.props.customClass }` }\n          onClick={ this.props.onClick }\n          id={ this.props.id ? this.props.id : '' }\n        >\n          { this.props.children }\n        </button>\n      );\n\n    }\n  }\n}\n\nexport default Button;"}, {"instruction": "\n        Integrate the new Button component into the Dialog component. The Button component should be used to replace the existing buttons within the CardAction component of the Dialog component. When the user clicks the \"Yes\" button, the yesAction function should be called and the dialog should be cleared. When the user clicks the \"No\" button, the noAction function should be called and the dialog should be cleared. The buttons should be styled with the \"mdl-button\" class.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\n\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </button>\n\n                <button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;\n\"\n\n        Button Component:\n        \"import React from 'react';\n\nclass Button extends React.Component {\n\n  render() {\n    if (this.props.disabled === true) {\n\n      return (\n        <button\n          className={ `mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored ${ this.props.customClass }` }\n          id={ this.props.id ? this.props.id : '' }\n          disabled\n        >\n          { this.props.children }\n        </button>\n      );\n\n    } else {\n\n      return (\n        <button\n          className={ `mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored ${ this.props.customClass }` }\n          onClick={ this.props.onClick }\n          id={ this.props.id ? this.props.id : '' }\n        >\n          { this.props.children }\n        </button>\n      );\n\n    }\n  }\n}\n\nexport default Button;\"\n        ", "output": "import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;"}, {"instruction": "Create a React component that renders a card with a custom class. The card should be able to contain any content.", "output": "import React from 'react';\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <div className={ `mdl-card ${ this.props.customClass }` }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default Card;"}, {"instruction": "\n        Integrate the new \"Card\" component into the \"Dialog\" component. When the \"Dialog\" component renders its content, it should use the \"Card\" component to display the dialog's title and actions. The \"Card\" component should be customized with the \"bobon-dialog\" and \"bobon-dialog-{dialogType}\" classes, where \"{dialogType}\" is the type of dialog being displayed.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <div customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;\n\"\n\n        Card Component:\n        \"import React from 'react';\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <div className={ `mdl-card ${ this.props.customClass }` }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default Card;\"\n        ", "output": "import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;"}, {"instruction": "Create a React component that renders a card title with a custom class. The component should take children as its content.", "output": "import React from 'react';\n\nclass CardTitle extends React.Component {\n  render() {\n    return (\n      <div className={ `mdl-card__title ${ this.props.customClass }` }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default CardTitle;"}, {"instruction": "\n        In the `Dialog` component, when there is text provided, display it within a `CardTitle` component within the `Card` component. The `CardTitle` component should be placed above the `CardAction` component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;\n\"\n\n        CardTitle Component:\n        \"import React from 'react';\n\nclass CardTitle extends React.Component {\n  render() {\n    return (\n      <div className={ `mdl-card__title ${ this.props.customClass }` }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default CardTitle;\"\n        ", "output": "import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;"}, {"instruction": "Create a React component that wraps its children in a Material Design Lite card action container.", "output": "import React from 'react';\n\nclass CardAction extends React.Component {\n  render() {\n    return(\n      <div className=\"mdl-card__action\">\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default CardAction;"}, {"instruction": "\n        In the Dialog component, integrate the CardAction component into the Card component. The CardAction component should contain two buttons, one with the text specified by the yesText prop and one with the text specified by the noText prop. When the yesText button is clicked, the yesAction prop should be called and the dialog should be cleared. When the noText button is clicked, the noAction prop should be called and the dialog should be cleared.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;\n\"\n\n        CardAction Component:\n        \"import React from 'react';\n\nclass CardAction extends React.Component {\n  render() {\n    return(\n      <div className=\"mdl-card__action\">\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default CardAction;\"\n        ", "output": "import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;"}, {"instruction": "Create a React component called `Home` that displays a login form. The form should be encapsulated in a container component called `LoginFormContainer`.", "output": "import React from 'react';\nimport LoginFormContainer from '../containers/LoginFormContainer';\n\nclass Home extends React.Component {\n  render() {\n    return <LoginFormContainer/>;\n  }\n}\n\nexport default Home;"}, {"instruction": "\n        Integrate the new Home component into the Main component. When the user is not logged in, display the Home component alongside a chart. When the user is logged in, display the RoastListContainer component instead of the Home component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\nimport { Line } from 'react-chartjs';\n\nimport C from '../constants';\nimport RoastListContainer from '../containers/RoastListContainer';\nimport { demoDataset, demoChartOptions } from '../demoData';\n\n\nclass Main extends React.Component {\n  static propTypes() {\n    return {\n      authStatus: PropTypes.string.isRequired\n    };\n  }\n\n  render() {\n    let content = null;\n    if (this.props.authStatus === C.LOGGED_IN) {\n      content = (<RoastListContainer/>);\n    } else {\n      content = (\n        <div className=\"bobon-home-anonymous\">\n          <Line\n            options={ demoChartOptions }\n            data={ demoDataset }\n            width=\"2400\"\n            height=\"1200\"\n          />\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Main;\n\"\n\n        Home Component:\n        \"import React from 'react';\nimport LoginFormContainer from '../containers/LoginFormContainer';\n\nclass Home extends React.Component {\n  render() {\n    return <LoginFormContainer/>;\n  }\n}\n\nexport default Home;\"\n        ", "output": "import React, { PropTypes } from 'react';\nimport { Line } from 'react-chartjs';\n\nimport C from '../constants';\nimport Home from './Home';\nimport RoastListContainer from '../containers/RoastListContainer';\nimport { demoDataset, demoChartOptions } from '../demoData';\n\n\nclass Main extends React.Component {\n  static propTypes() {\n    return {\n      authStatus: PropTypes.string.isRequired\n    };\n  }\n\n  render() {\n    let content = null;\n    if (this.props.authStatus === C.LOGGED_IN) {\n      content = (<RoastListContainer/>);\n    } else {\n      content = (\n        <div className=\"bobon-home-anonymous\">\n          <Line\n            options={ demoChartOptions }\n            data={ demoDataset }\n            width=\"2400\"\n            height=\"1200\"\n          />\n          <Home/>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Main;"}, {"instruction": "Create a React component that displays a set of four cards, each with an image and a headline. The cards should be arranged in a grid, with one card per row on desktop and all four cards stacked on top of each other on tablet. The cards should have the following content:\n\n**Card 1:**\n* Headline: Create roast\n* Image: An image of a coffee bean\n\n**Card 2:**\n* Headline: Drop beans & start timer\n* Image: An image of a coffee timer\n\n**Card 3:**\n* Headline: Enter temperatures. Push FIRST CRACK when it happens\n* Image: An image of a coffee thermometer\n\n**Card 4:**\n* Headline: Stop timer & complete the roast\n* Image: An image of a coffee roaster", "output": "import React from 'react';\n\nconst imgCreate = require('../../images/step_create.png');\nconst imgInput = require('../../images/step_input.png');\nconst imgStart = require('../../images/step_timer.png');\nconst imgStop = require('../../images/step_stop.png');\n\nclass Instructions extends React.Component {\n  render() {\n    return (\n      <div className=\"mdl-grid bobon-instructions bobon-util__full-width\">\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            1. Create roast\n          </div>\n          <img src={ imgCreate } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            2. Drop beans & start timer\n          </div>\n          <img src={ imgStart } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            3. Enter temperatures. Push FIRST CRACK when it happens\n          </div>\n          <img src={ imgInput } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            4. Stop timer & complete the roast\n          </div>\n          <img src={ imgStop } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;"}, {"instruction": "\n        In the RoastList component, add the Instructions component as a child of the Card component, after the CardTitle component. The Instructions component should provide step-by-step instructions on how to use the application to roast coffee beans.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport moment from 'moment';\n\nimport Button from './utils/Button';\nimport C from '../constants';\nimport Card from './utils/Card';\nimport CardAction from './utils/CardAction';\nimport CardContent from './utils/CardContent';\nimport CardTitle from './utils/CardTitle';\nimport NavigationLink from '../components/utils/NavigationLink';\nimport history from '../history';\nimport {\n  displayTemp,\n  displayWeight\n} from '../helpers';\n\nclass RoastList extends React.Component {\n\n  roastStatus(statusText) {\n    switch(statusText) {\n      case C.ROAST_PENDING:\n        return 'pending';\n        break;\n\n      case C.ROAST_COMPLETED:\n        return 'completed';\n        break;\n\n      case C.ROAST_IN_PROGRESS:\n        return 'in progress';\n        break;\n\n      default:\n        return statusText;\n        break;\n    }\n  }\n\n  lastRoastPointDuration(roastPoints) {\n    let duration = null;\n    if (roastPoints) {\n      let roastKey = Object.keys(roastPoints).pop();\n      duration = moment(roastPoints[roastKey].elapsed).format('mm:ss');\n    }\n\n    return duration;\n  }\n\n  roastRows() {\n    let content = null;\n\n    if (this.props.roasts) {\n      content = Object.keys(this.props.roasts).map(key => {\n        let roast = this.props.roasts[key];\n        let roastDate = '';\n\n        if (roast.roastStart) {\n          roastDate = moment(roast.roastStart).format('DD-MM-YY HH:mm');\n        }\n\n        return (\n          <tr key={ key }\n            onClick={(e) => {\n                e.preventDefault();\n                history.push(`/roasts/${key}`);\n              }}\n          >\n            <td className=\"bobon-table-cell--beans-name\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <strong>{ roast.beansName }</strong>\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <div className={ `bobon-text-with-icon bobon-roast-status--${ roast.status.toLowerCase() }` }>\n                <i className=\"material-icons\">fiber_manual_record</i>\n                { this.roastStatus(roast.status) }\n              </div>\n            </td>\n\n            <td className=\"mdl-data-table__cell--non-numeric\">\n              { roastDate }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { roast.beansMoisture } %\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile\">\n              { displayWeight(roast.batchSize, this.props.unitSystem) } { this.props.weightUnit }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { this.lastRoastPointDuration(roast.roastPoints) }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { roast.firstCrack ? moment(roast.firstCrack).format('mm:ss') : '-' }\n            </td>\n\n            <td className=\"mdl-color-text--amber-500\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <button\n                className=\"mdl-button mdl-js-button mdl-button--icon\n                                 mdl-js-ripple-effect\"\n                onClick={ (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.props.removeRoast(\n                      key,\n                      roast.beansName,\n                      roast.roastStart\n                    );\n                  } }\n              >\n                <i className=\"material-icons\">delete</i>\n              </button>\n            </td>\n          </tr>\n        );\n      });\n    }\n\n    return content;\n  }\n\n  render() {\n    let content = null;\n    if (this.props.roasts && Object.keys(this.props.roasts).length > 0) {\n      content = (\n        <div className=\"mdl-grid\">\n          <Card customClass=\"mdl-cell mdl-cell--12-col\">\n\n            <CardTitle>\n              <div className=\"bobon-text-with-icon\">\n                <i className=\"material-icons\">timeline</i>\n                My roasts\n              </div>\n            </CardTitle>\n\n            <table className=\"mdl-data-table mdl-js-data-table\n                              bobon-util__full-width\"\n            >\n              <thead>\n                <tr>\n                  <th className=\"bobon-table-cell--beans-name\n                                 mdl-data-table__cell--non-numeric\"\n                  >\n                    Bean's name\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\n                                 mdl-data-table__cell--non-numeric\"\n                  >\n                    Status\n                  </th>\n                  <th className=\"mdl-data-table__cell--non-numeric\">\n                    Roast date\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Moisture\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Batch Size\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Duration\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    1st crack\n                  </th>\n                  <th className=\"mdl-data-table__cell--non-numeric\">\n                    Del\n                  </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                { this.roastRows() }\n              </tbody>\n            </table>\n          </Card>\n        </div>\n      );\n    } else {\n      content = (\n        <div className=\"mdl-grid\">\n          <Card customClass=\"mdl-cell mdl-cell--12-col\">\n\n            <CardTitle>\n              <div className=\"bobon-text-with-icon\">\n                <i className=\"material-icons\">timeline</i>\n                You have not recorded any roast profile, yet.\n              </div>\n            </CardTitle>\n\n            <CardAction>\n              <Button customClass=\"mdl-button-with-icon mdl-color-text--red-500\"\n                onClick={ () => {\n                    history.push('/new');\n                  } }\n              >\n                <i className=\"material-icons\">whatshot</i>\n                Create a new roast\n              </Button>\n            </CardAction>\n          </Card>\n\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default RoastList;\n\"\n\n        Instructions Component:\n        \"import React from 'react';\n\nconst imgCreate = require('../../images/step_create.png');\nconst imgInput = require('../../images/step_input.png');\nconst imgStart = require('../../images/step_timer.png');\nconst imgStop = require('../../images/step_stop.png');\n\nclass Instructions extends React.Component {\n  render() {\n    return (\n      <div className=\"mdl-grid bobon-instructions bobon-util__full-width\">\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            1. Create roast\n          </div>\n          <img src={ imgCreate } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            2. Drop beans & start timer\n          </div>\n          <img src={ imgStart } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            3. Enter temperatures. Push FIRST CRACK when it happens\n          </div>\n          <img src={ imgInput } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            4. Stop timer & complete the roast\n          </div>\n          <img src={ imgStop } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;\"\n        ", "output": "import React from 'react';\nimport moment from 'moment';\n\nimport Button from './utils/Button';\nimport C from '../constants';\nimport Card from './utils/Card';\nimport CardAction from './utils/CardAction';\nimport CardContent from './utils/CardContent';\nimport CardTitle from './utils/CardTitle';\nimport Instructions from './Instructions';\nimport NavigationLink from '../components/utils/NavigationLink';\nimport history from '../history';\nimport {\n  displayTemp,\n  displayWeight\n} from '../helpers';\n\nclass RoastList extends React.Component {\n\n  roastStatus(statusText) {\n    switch(statusText) {\n      case C.ROAST_PENDING:\n        return 'pending';\n        break;\n\n      case C.ROAST_COMPLETED:\n        return 'completed';\n        break;\n\n      case C.ROAST_IN_PROGRESS:\n        return 'in progress';\n        break;\n\n      default:\n        return statusText;\n        break;\n    }\n  }\n\n  lastRoastPointDuration(roastPoints) {\n    let duration = null;\n    if (roastPoints) {\n      let roastKey = Object.keys(roastPoints).pop();\n      duration = moment(roastPoints[roastKey].elapsed).format('mm:ss');\n    }\n\n    return duration;\n  }\n\n  roastRows() {\n    let content = null;\n\n    if (this.props.roasts) {\n      content = Object.keys(this.props.roasts).map(key => {\n        let roast = this.props.roasts[key];\n        let roastDate = '';\n\n        if (roast.roastStart) {\n          roastDate = moment(roast.roastStart).format('DD-MM-YY HH:mm');\n        }\n\n        return (\n          <tr key={ key }\n            onClick={(e) => {\n                e.preventDefault();\n                history.push(`/roasts/${key}`);\n              }}\n          >\n            <td className=\"bobon-table-cell--beans-name\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <strong>{ roast.beansName }</strong>\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <div className={ `bobon-text-with-icon bobon-roast-status--${ roast.status.toLowerCase() }` }>\n                <i className=\"material-icons\">fiber_manual_record</i>\n                { this.roastStatus(roast.status) }\n              </div>\n            </td>\n\n            <td className=\"mdl-data-table__cell--non-numeric\">\n              { roastDate }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { roast.beansMoisture } %\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile\">\n              { displayWeight(roast.batchSize, this.props.unitSystem) } { this.props.weightUnit }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { this.lastRoastPointDuration(roast.roastPoints) }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { roast.firstCrack ? moment(roast.firstCrack).format('mm:ss') : '-' }\n            </td>\n\n            <td className=\"mdl-color-text--amber-500\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <button\n                className=\"mdl-button mdl-js-button mdl-button--icon\n                                 mdl-js-ripple-effect\"\n                onClick={ (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.props.removeRoast(\n                      key,\n                      roast.beansName,\n                      roast.roastStart\n                    );\n                  } }\n              >\n                <i className=\"material-icons\">delete</i>\n              </button>\n            </td>\n          </tr>\n        );\n      });\n    }\n\n    return content;\n  }\n\n  render() {\n    let content = null;\n    if (this.props.roasts && Object.keys(this.props.roasts).length > 0) {\n      content = (\n        <div className=\"mdl-grid\">\n          <Card customClass=\"mdl-cell mdl-cell--12-col\">\n\n            <CardTitle>\n              <div className=\"bobon-text-with-icon\">\n                <i className=\"material-icons\">timeline</i>\n                My roasts\n              </div>\n            </CardTitle>\n\n            <table className=\"mdl-data-table mdl-js-data-table\n                              bobon-util__full-width\"\n            >\n              <thead>\n                <tr>\n                  <th className=\"bobon-table-cell--beans-name\n                                 mdl-data-table__cell--non-numeric\"\n                  >\n                    Bean's name\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\n                                 mdl-data-table__cell--non-numeric\"\n                  >\n                    Status\n                  </th>\n                  <th className=\"mdl-data-table__cell--non-numeric\">\n                    Roast date\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Moisture\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Batch Size\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Duration\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    1st crack\n                  </th>\n                  <th className=\"mdl-data-table__cell--non-numeric\">\n                    Del\n                  </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                { this.roastRows() }\n              </tbody>\n            </table>\n          </Card>\n        </div>\n      );\n    } else {\n      content = (\n        <div className=\"mdl-grid\">\n          <Card customClass=\"mdl-cell mdl-cell--12-col\">\n\n            <CardTitle>\n              <div className=\"bobon-text-with-icon\">\n                <i className=\"material-icons\">timeline</i>\n                You have not recorded any roast profile, yet.\n              </div>\n            </CardTitle>\n\n            <Instructions/>\n\n            <CardAction>\n              <Button customClass=\"mdl-button-with-icon mdl-color-text--red-500\"\n                onClick={ () => {\n                    history.push('/new');\n                  } }\n              >\n                <i className=\"material-icons\">whatshot</i>\n                Create a new roast\n              </Button>\n            </CardAction>\n          </Card>\n\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default RoastList;"}, {"instruction": "Create a React component that renders a radio button with a label. The radio button should be checked if the `checked` prop is true. The component should only update when the `checked` prop changes.", "output": "import React from 'react';\n\nclass Radio extends React.Component {\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.checked !== this.props.checked;\n  }\n\n  radioInput() {\n    let content = null;\n\n    if (this.props.checked === true) {\n      content = <input\n                  className=\"mdl-radio__button\"\n                  id={ this.props.htmlFor }\n                  name={ this.props.name }\n                  type=\"radio\"\n                  value={ this.props.value }\n                  checked\n                />\n    } else {\n      content = <input\n                  className=\"mdl-radio__button\"\n                  id={ this.props.htmlFor }\n                  name={ this.props.name }\n                  type=\"radio\"\n                  value={ this.props.value }\n                />\n    }\n\n    return content;\n  }\n\n  render() {\n    return (\n      <label\n        className={ `mdl-radio bobon-radio mdl-js-radio mdl-js-ripple-effect ${ this.props.customClass ? this.props.customClass : '' }` }\n        htmlFor={ this.props.htmlFor }\n      >\n        { this.radioInput() }\n        <span className=\"mdl-radio__label\">\n          { this.props.label }\n        </span>\n      </label>\n    );\n  }\n}\n\nexport default Radio ;"}, {"instruction": "\n        Update the Settings component to use the new Radio component for the unit system options. The Radio component should display the unit system labels (\"\u00b0C - kg\" and \"\u00b0F - lbs\") and the current unit system should be checked. When the user clicks on a radio button, the unit system should be updated accordingly.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\n\nimport C from '../constants';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\nimport CardContent from './utils/CardContent';\n\nclass Settings extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return nextProps.unitSystem !== this.props.unitSystem;\n  }\n\n  render() {\n    return (\n      <Card customClass=\"mdl-cell mdl-cell--12-col\">\n        <CardTitle>\n          <div className=\"bobon-text-with-icon\">\n            <i className=\"material-icons\">settings</i>\n            Settings\n          </div>\n        </CardTitle>\n        <CardTitle>\n          <div className=\"bobon-text-with-icon\">\n            <i className=\"material-icons\">straighten</i>\n            Unit System\n          </div>\n        </CardTitle>\n        <CardContent>\n\n          <form onChange={ e => {\n              this.props.onChangeUnitSystem(e, this.props.unitSystem);\n            } }\n          >\n\n            <input\n              type=\"radio\"\n              id=\"unit-system-metric\"\n              name=\"unitSystem\"\n              value={ C.METRIC }\n              checked={ this.props.unitSystem === C.METRIC }\n            />\n            <label htmlFor=\"unit-system-metric\">\u00b0C - kg</label>\n\n            <input\n              type=\"radio\"\n              id=\"unit-system-imperial\"\n              name=\"unitSystem\"\n              value={ C.IMPERIAL }\n              checked={ this.props.unitSystem === C.IMPERIAL }\n            />\n            <label htmlFor=\"unit-system-imperial\">\u00b0F - lbs</label>\n          </form>\n\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default Settings;\n\"\n\n        Radio Component:\n        \"import React from 'react';\n\nclass Radio extends React.Component {\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.checked !== this.props.checked;\n  }\n\n  radioInput() {\n    let content = null;\n\n    if (this.props.checked === true) {\n      content = <input\n                  className=\"mdl-radio__button\"\n                  id={ this.props.htmlFor }\n                  name={ this.props.name }\n                  type=\"radio\"\n                  value={ this.props.value }\n                  checked\n                />\n    } else {\n      content = <input\n                  className=\"mdl-radio__button\"\n                  id={ this.props.htmlFor }\n                  name={ this.props.name }\n                  type=\"radio\"\n                  value={ this.props.value }\n                />\n    }\n\n    return content;\n  }\n\n  render() {\n    return (\n      <label\n        className={ `mdl-radio bobon-radio mdl-js-radio mdl-js-ripple-effect ${ this.props.customClass ? this.props.customClass : '' }` }\n        htmlFor={ this.props.htmlFor }\n      >\n        { this.radioInput() }\n        <span className=\"mdl-radio__label\">\n          { this.props.label }\n        </span>\n      </label>\n    );\n  }\n}\n\nexport default Radio ;\"\n        ", "output": "import React from 'react';\n\nimport C from '../constants';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\nimport CardContent from './utils/CardContent';\nimport Radio from './utils/Radio';\n\nclass Settings extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return nextProps.unitSystem !== this.props.unitSystem;\n  }\n\n  render() {\n    return (\n      <Card customClass=\"mdl-cell mdl-cell--12-col\">\n        <CardTitle>\n          <div className=\"bobon-text-with-icon\">\n            <i className=\"material-icons\">settings</i>\n            Settings\n          </div>\n        </CardTitle>\n        <CardTitle>\n          <div className=\"bobon-text-with-icon\">\n            <i className=\"material-icons\">straighten</i>\n            Unit System\n          </div>\n        </CardTitle>\n        <CardContent>\n\n          <form onChange={ e => {\n              this.props.onChangeUnitSystem(e, this.props.unitSystem);\n            } }\n          >\n            <Radio\n              htmlFor=\"unit-system-metric\"\n              name=\"unitSystem\"\n              value={ C.METRIC }\n              label=\"\u00b0C - kg\"\n              checked={ this.props.unitSystem === C.METRIC }\n            />\n\n            <Radio\n              htmlFor=\"unit-system-imperial\"\n              name=\"unitSystem\"\n              value={ C.IMPERIAL }\n              label=\"\u00b0F - lbs\"\n              checked={ this.props.unitSystem === C.IMPERIAL }\n            />\n          </form>\n\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default Settings;"}, {"instruction": "Create a web page layout with three vertical columns of equal width. The left column should contain a panel with the title \"Container\". The middle column should contain a panel with the title \"Items\". The right column should contain a panel with the title \"Item\".", "output": "import React, { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport { observer } from 'mobx-react'\nimport ContainerPanel from './ContainerPanel'\nimport ItemsPanel from './ItemsPanel'\nimport ItemPanel from './ItemPanel'\n\n@observer\nexport default class EditPanel extends Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={8}>\n          <ContainerPanel />\n        </Col>\n        <Col span={8}>\n          <ItemsPanel />\n        </Col>\n        <Col span={8}>\n          <ItemPanel />\n        </Col>\n      </Row>\n    )\n  }\n}"}, {"instruction": "\n        Integrate the EditPanel component into the root component, such that it appears above the PlayerPanel within the content section of the root component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport PlayerPanel from './PlayerPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\" scrolling=\"0\" width=\"160px\" height=\"30px\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/limichange\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\"\n\n        EditPanel Component:\n        \"import React, { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport { observer } from 'mobx-react'\nimport ContainerPanel from './ContainerPanel'\nimport ItemsPanel from './ItemsPanel'\nimport ItemPanel from './ItemPanel'\n\n@observer\nexport default class EditPanel extends Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={8}>\n          <ContainerPanel />\n        </Col>\n        <Col span={8}>\n          <ItemsPanel />\n        </Col>\n        <Col span={8}>\n          <ItemPanel />\n        </Col>\n      </Row>\n    )\n  }\n}\"\n        ", "output": "import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport PlayerPanel from './PlayerPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\" scrolling=\"0\" width=\"160px\" height=\"30px\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/limichange\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;"}, {"instruction": "Design a React component that displays a list of cards. Each card should have a unique number and respond to clicks by changing its appearance. The component should be able to accept a custom style for the container and the cards.", "output": "import React, { Component } from 'react';\nimport { Card, Icon } from 'antd';\nimport store from './store'\nimport { observer } from 'mobx-react'\n\n@observer\nexport default class PlayerPanel extends Component {\n  cardStyle = {\n    fontSize: 24,\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    cursor: 'pointer'\n  }\n\n  render() {\n\n    let c = []\n\n    store.app.items.getAll().forEach((item, index) => {\n      c.push(\n        <Card\n          key={index}\n          onClick={e => store.app.items.select(item)}\n          bodyStyle={{ height: '100%' }}\n          style={{ ...store.app.items.style, ...item.style }}>\n          <div style={this.cardStyle}>\n            div{index}\n          </div>\n        </Card>\n      )\n    })\n\n    return (\n      <div style={{...store.app.container.style}}>\n        { c }        \n      </div>\n    )\n  }\n}"}, {"instruction": "\n        Add a new component called \"PlayerPanel\" to the root component. The PlayerPanel should be displayed below the EditPanel within the main content area. The PlayerPanel should contain a list of cards, where each card represents an item. When a user clicks on a card, the corresponding item should be selected. The style of the cards should be determined by the \"style\" property of the item and the style of the PlayerPanel should be determined by the \"container.style\" property of the store.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\" scrolling=\"0\" width=\"160px\" height=\"30px\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/limichange\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\"\n\n        PlayerPanel Component:\n        \"import React, { Component } from 'react';\nimport { Card, Icon } from 'antd';\nimport store from './store'\nimport { observer } from 'mobx-react'\n\n@observer\nexport default class PlayerPanel extends Component {\n  cardStyle = {\n    fontSize: 24,\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    cursor: 'pointer'\n  }\n\n  render() {\n\n    let c = []\n\n    store.app.items.getAll().forEach((item, index) => {\n      c.push(\n        <Card\n          key={index}\n          onClick={e => store.app.items.select(item)}\n          bodyStyle={{ height: '100%' }}\n          style={{ ...store.app.items.style, ...item.style }}>\n          <div style={this.cardStyle}>\n            div{index}\n          </div>\n        </Card>\n      )\n    })\n\n    return (\n      <div style={{...store.app.container.style}}>\n        { c }        \n      </div>\n    )\n  }\n}\"\n        ", "output": "import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport PlayerPanel from './PlayerPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\" scrolling=\"0\" width=\"160px\" height=\"30px\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/limichange\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;"}, {"instruction": "Create a React component that wraps an iframe and prevents it from re-rendering when its props change. This is useful for optimizing performance when embedding external content that doesn't require dynamic updates.", "output": "import React from 'react';\n\nexport default class WrappedIframe extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    return (<iframe {...this.props} />);\n  }\n}"}, {"instruction": "\n        Add a new component called \"WrappedIframe\" to the root component. The \"WrappedIframe\" component should be an iframe with the following attributes:\n\n* src: \"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\"\n* scrolling: \"0\"\n* width: \"160px\"\n* height: \"30px\"\n\nPlace the \"WrappedIframe\" component in the header of the root component, to the right of the title.\n\n        Use the following code for context.\n\n        Root Component:\n        \"\"import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport PlayerPanel from './PlayerPanel'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"\"row\"\",\n  flexWrap: \"\"nowrap\"\",\n  justifyContent: \"\"space-between\"\",\n  alignItems: \"\"center\"\",\n  display: \"\"flex\"\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\"App\"\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"\"noopener noreferrer\"\" target=\"\"_blank\"\" href=\"\"https://github.com/limichange\"\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\"\n\"\n\n        WrappedIframe Component:\n        \"import React from 'react';\n\nexport default class WrappedIframe extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    return (<iframe {...this.props} />);\n  }\n}\"\n        ", "output": "\"import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport PlayerPanel from './PlayerPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"\"row\"\",\n  flexWrap: \"\"nowrap\"\",\n  justifyContent: \"\"space-between\"\",\n  alignItems: \"\"center\"\",\n  display: \"\"flex\"\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\"App\"\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\"\" scrolling=\"\"0\"\" width=\"\"160px\"\" height=\"\"30px\"\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"\"noopener noreferrer\"\" target=\"\"_blank\"\" href=\"\"https://github.com/limichange\"\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\""}, {"instruction": "Create a user interface that allows a user to edit the following CSS properties of a selected HTML div element: order, flexGrow, flexShrink, flexBasis, and alignSelf. The user should be able to select the div element from a list of available divs. If no div is selected, display a message indicating that a div must be selected.", "output": "import React, { Component } from 'react'\nimport { Select, InputNumber, Input, Card, Form } from 'antd'\nimport store from '../store'\nimport { observer } from 'mobx-react'\nimport formItemLayout from './formItemLayout'\nimport PanelMenu from './PanelMenu'\n\nconst Option = Select.Option\nconst FormItem = Form.Item\n\n@observer\nexport default class ItemPanel extends Component {\n  render() {\n    let selectItem = store.app.items.selectItem\n    let title = ''\n    let content = {}\n\n    if (selectItem.id === undefined) {\n      title = 'Please select a div'\n      content = <div></div>\n    } else {\n      title = `div${selectItem.id}`\n      content = (\n        <Form>\n          <FormItem {...formItemLayout} label=\"order\">\n            <InputNumber\n              value={selectItem.style.order}\n              onChange={e => selectItem.updateStyle({ order: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexGrow\">\n            <InputNumber\n              value={selectItem.style.flexGrow}\n              onChange={e => selectItem.updateStyle({ flexGrow: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexShrink\">\n            <InputNumber\n              value={selectItem.style.flexShrink}\n              onChange={e => selectItem.updateStyle({ flexShrink: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexBasis\">\n            <Input\n              value={selectItem.style.flexBasis}\n              onChange={e => selectItem.updateStyle({ flexBasis: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"alignSelf\">\n            <Select value={selectItem.style.alignSelf} onChange={e => selectItem.updateStyle({ alignSelf: e })}>\n              <Option value=\"flex-start\">flex-start</Option>\n              <Option value=\"flex-end\">flex-end</Option>\n              <Option value=\"center\">center</Option>\n              <Option value=\"auto\">auto</Option>\n              <Option value=\"baseline\">baseline</Option>\n              <Option value=\"stretch\">stretch</Option>\n            </Select>\n          </FormItem>\n        </Form>\n      )\n    }\n\n    const extra = <PanelMenu object={store.app.items.getSelectItem()} />\n\n    return (\n      <Card extra={extra}\n        title={title}>\n        { content }\n      </Card>\n    )\n  }\n}"}, {"instruction": "\n        Integrate the ItemPanel component into the EditPanel component. The ItemPanel should be displayed in the third column of the EditPanel, and it should allow users to edit the properties of the selected item. The ItemPanel should include a title that displays the name of the selected item, and it should contain a form with fields for editing the item's order, flexGrow, flexShrink, flexBasis, and alignSelf properties. The ItemPanel should also include a PanelMenu component that allows users to perform actions on the selected item.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport { observer } from 'mobx-react'\nimport ContainerPanel from './ContainerPanel'\nimport ItemsPanel from './ItemsPanel'\n\n@observer\nexport default class EditPanel extends Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={8}>\n          <ContainerPanel />\n        </Col>\n        <Col span={8}>\n          <ItemsPanel />\n        </Col>\n      </Row>\n    )\n  }\n}\n\"\n\n        ItemPanel Component:\n        \"import React, { Component } from 'react'\nimport { Select, InputNumber, Input, Card, Form } from 'antd'\nimport store from '../store'\nimport { observer } from 'mobx-react'\nimport formItemLayout from './formItemLayout'\nimport PanelMenu from './PanelMenu'\n\nconst Option = Select.Option\nconst FormItem = Form.Item\n\n@observer\nexport default class ItemPanel extends Component {\n  render() {\n    let selectItem = store.app.items.selectItem\n    let title = ''\n    let content = {}\n\n    if (selectItem.id === undefined) {\n      title = 'Please select a div'\n      content = <div></div>\n    } else {\n      title = `div${selectItem.id}`\n      content = (\n        <Form>\n          <FormItem {...formItemLayout} label=\"order\">\n            <InputNumber\n              value={selectItem.style.order}\n              onChange={e => selectItem.updateStyle({ order: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexGrow\">\n            <InputNumber\n              value={selectItem.style.flexGrow}\n              onChange={e => selectItem.updateStyle({ flexGrow: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexShrink\">\n            <InputNumber\n              value={selectItem.style.flexShrink}\n              onChange={e => selectItem.updateStyle({ flexShrink: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexBasis\">\n            <Input\n              value={selectItem.style.flexBasis}\n              onChange={e => selectItem.updateStyle({ flexBasis: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"alignSelf\">\n            <Select value={selectItem.style.alignSelf} onChange={e => selectItem.updateStyle({ alignSelf: e })}>\n              <Option value=\"flex-start\">flex-start</Option>\n              <Option value=\"flex-end\">flex-end</Option>\n              <Option value=\"center\">center</Option>\n              <Option value=\"auto\">auto</Option>\n              <Option value=\"baseline\">baseline</Option>\n              <Option value=\"stretch\">stretch</Option>\n            </Select>\n          </FormItem>\n        </Form>\n      )\n    }\n\n    const extra = <PanelMenu object={store.app.items.getSelectItem()} />\n\n    return (\n      <Card extra={extra}\n        title={title}>\n        { content }\n      </Card>\n    )\n  }\n}\"\n        ", "output": "import React, { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport { observer } from 'mobx-react'\nimport ContainerPanel from './ContainerPanel'\nimport ItemsPanel from './ItemsPanel'\nimport ItemPanel from './ItemPanel'\n\n@observer\nexport default class EditPanel extends Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={8}>\n          <ContainerPanel />\n        </Col>\n        <Col span={8}>\n          <ItemsPanel />\n        </Col>\n        <Col span={8}>\n          <ItemPanel />\n        </Col>\n      </Row>\n    )\n  }\n}"}, {"instruction": "Create a table that displays the following information for a list of payments:\n- Year (starting from 1, excluding the first item in the list)\n- Interest paid in that year\n- Overpayment made in that year\n- Remaining balance after that year\n\nInclude a header row with the column names and a footer row that shows the total interest and overpayment.", "output": "import React from 'react';\n\nexport default ({ payments, className }) => {\n  let output = payments\n    .filter((year, i) => i > 0 && (year.balance > 0 || year.interestYearly > 0))\n    .reduce(\n      (acc, year, index) => ({\n        interestTotal: acc.interestTotal + year.interestYearly,\n        overpaymentTotal: acc.overpaymentTotal + year.overpayment,\n        rows: [\n          ...acc.rows,\n          [\n            year.partial ? year.partial + 'm' : index + 1,\n            Math.round(year.interestYearly || 0),\n            Math.round(year.overpayment),\n            Math.round(year.balance)\n          ]\n        ]\n      }),\n      { interestTotal: 0, overpaymentTotal: 0, rows: [] }\n    );\n\n  return (\n    <table className={className}>\n      <thead>\n        <tr>\n          <th>Years</th>\n          <th>Interest</th>\n          <th>Overpayment</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n      <tbody>\n        {output.rows.map((row, index) => (\n          <tr key={index}>\n            {row.map((d, i) => (\n              <td key={i}>{d.toLocaleString()}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td colSpan={2}>\n            {Math.round(output.interestTotal).toLocaleString()}\n          </td>\n          <td>{Math.round(output.overpaymentTotal).toLocaleString()}</td>\n          <td />\n        </tr>\n      </tfoot>\n    </table>\n  );\n};"}, {"instruction": "\n        Integrate the Table component into the root component so that it displays the payments data in a table format. The table should be placed next to the chart in the right-hand column of the page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { useState } from 'react';\n\nimport './App.css';\n\nimport Chart from './Chart';\nimport calculate from './calculations';\n\nconst defaultOverpayment = { month: '1', year: '0', amount: '0' };\n\nexport default () => {\n  const [initial, setInitial] = useState('200000');\n  const [rate, setRate] = useState('5');\n  const [years, setYears] = useState('25');\n  const [monthlyOverpayment, setMonthlyOverpayment] = useState('0');\n  const [overpayments, setOverpayments] = useState([defaultOverpayment]);\n\n  const updateOverpayment = index => ({ target }) =>\n    setOverpayments(\n      overpayments.map((overpayment, i) =>\n        i === index\n          ? { ...overpayment, [target.name]: target.value }\n          : overpayment\n      )\n    );\n\n  const { monthlyPayment, payments } = calculate(\n    +initial,\n    +years,\n    +rate,\n    +monthlyOverpayment,\n    overpayments\n  );\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"navbar-header\">\n          <div className=\"navbar-brand\">Mortgage Overpayment Calculator</div>\n        </div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"col-md-8 col-sm-12\">\n          <div className=\"col-sm-4\">\n            <div>\n              <h2>Initial</h2>\n              <label>Amount</label>\n              <input\n                maxLength={7}\n                value={initial}\n                onChange={e => setInitial(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Years</label>\n              <input\n                type=\"number\"\n                maxLength={2}\n                value={years}\n                onChange={e => setYears(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Rate</label>\n              <input\n                type=\"number\"\n                step={0.1}\n                value={rate}\n                onChange={e => setRate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-8\">\n            <div>\n              <h2>Overpayment</h2>\n              <label>Monthly</label>\n              <input\n                type=\"number\"\n                maxLength={5}\n                value={monthlyOverpayment}\n                onChange={e => setMonthlyOverpayment(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Year</label>\n              <label>Month</label>\n              <label>Amount</label>\n            </div>\n            {overpayments.map(({ year, month, amount }, i) => (\n              <div key={i}>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={years}\n                  value={year}\n                  name=\"year\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"12\"\n                  value={month}\n                  name=\"month\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"text\"\n                  value={amount}\n                  name=\"amount\"\n                  onChange={updateOverpayment(i)}\n                />\n\n                {i === overpayments.length - 1 ? (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments([...overpayments, defaultOverpayment])\n                    }\n                  >\n                    +\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments(overpayments.filter((_, j) => j !== i))\n                    }\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"col-sm-12\">\n            <h2>\n              Monthly Payment\n              <span className=\"money\">\n                {(+monthlyOverpayment + monthlyPayment).toFixed(2)}\n              </span>\n            </h2>\n            <Chart payments={payments} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\"\n\n        Table Component:\n        \"import React from 'react';\n\nexport default ({ payments, className }) => {\n  let output = payments\n    .filter((year, i) => i > 0 && (year.balance > 0 || year.interestYearly > 0))\n    .reduce(\n      (acc, year, index) => ({\n        interestTotal: acc.interestTotal + year.interestYearly,\n        overpaymentTotal: acc.overpaymentTotal + year.overpayment,\n        rows: [\n          ...acc.rows,\n          [\n            year.partial ? year.partial + 'm' : index + 1,\n            Math.round(year.interestYearly || 0),\n            Math.round(year.overpayment),\n            Math.round(year.balance)\n          ]\n        ]\n      }),\n      { interestTotal: 0, overpaymentTotal: 0, rows: [] }\n    );\n\n  return (\n    <table className={className}>\n      <thead>\n        <tr>\n          <th>Years</th>\n          <th>Interest</th>\n          <th>Overpayment</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n      <tbody>\n        {output.rows.map((row, index) => (\n          <tr key={index}>\n            {row.map((d, i) => (\n              <td key={i}>{d.toLocaleString()}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td colSpan={2}>\n            {Math.round(output.interestTotal).toLocaleString()}\n          </td>\n          <td>{Math.round(output.overpaymentTotal).toLocaleString()}</td>\n          <td />\n        </tr>\n      </tfoot>\n    </table>\n  );\n};\"\n        ", "output": "import React, { useState } from 'react';\n\nimport './App.css';\n\nimport Table from './Table';\nimport Chart from './Chart';\nimport calculate from './calculations';\n\nconst defaultOverpayment = { month: '1', year: '0', amount: '0' };\n\nexport default () => {\n  const [initial, setInitial] = useState('200000');\n  const [rate, setRate] = useState('5');\n  const [years, setYears] = useState('25');\n  const [monthlyOverpayment, setMonthlyOverpayment] = useState('0');\n  const [overpayments, setOverpayments] = useState([defaultOverpayment]);\n\n  const updateOverpayment = index => ({ target }) =>\n    setOverpayments(\n      overpayments.map((overpayment, i) =>\n        i === index\n          ? { ...overpayment, [target.name]: target.value }\n          : overpayment\n      )\n    );\n\n  const { monthlyPayment, payments } = calculate(\n    +initial,\n    +years,\n    +rate,\n    +monthlyOverpayment,\n    overpayments\n  );\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"navbar-header\">\n          <div className=\"navbar-brand\">Mortgage Overpayment Calculator</div>\n        </div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"col-md-8 col-sm-12\">\n          <div className=\"col-sm-4\">\n            <div>\n              <h2>Initial</h2>\n              <label>Amount</label>\n              <input\n                maxLength={7}\n                value={initial}\n                onChange={e => setInitial(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Years</label>\n              <input\n                type=\"number\"\n                maxLength={2}\n                value={years}\n                onChange={e => setYears(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Rate</label>\n              <input\n                type=\"number\"\n                step={0.1}\n                value={rate}\n                onChange={e => setRate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-8\">\n            <div>\n              <h2>Overpayment</h2>\n              <label>Monthly</label>\n              <input\n                type=\"number\"\n                maxLength={5}\n                value={monthlyOverpayment}\n                onChange={e => setMonthlyOverpayment(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Year</label>\n              <label>Month</label>\n              <label>Amount</label>\n            </div>\n            {overpayments.map(({ year, month, amount }, i) => (\n              <div key={i}>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={years}\n                  value={year}\n                  name=\"year\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"12\"\n                  value={month}\n                  name=\"month\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"text\"\n                  value={amount}\n                  name=\"amount\"\n                  onChange={updateOverpayment(i)}\n                />\n\n                {i === overpayments.length - 1 ? (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments([...overpayments, defaultOverpayment])\n                    }\n                  >\n                    +\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments(overpayments.filter((_, j) => j !== i))\n                    }\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"col-sm-12\">\n            <h2>\n              Monthly Payment\n              <span className=\"money\">\n                {(+monthlyOverpayment + monthlyPayment).toFixed(2)}\n              </span>\n            </h2>\n            <Chart payments={payments} />\n          </div>\n        </div>\n        <Table className=\"col-sm-4\" payments={payments} />\n      </div>\n    </div>\n  );\n};"}, {"instruction": "Create an interactive line chart that visualizes a series of payments over time. The x-axis should represent the payment number, and the y-axis should represent the balance remaining after each payment. The chart should include a baseline line representing the balance if no payments were made, and an actual line representing the balance after each payment. The chart should be responsive to changes in the input data.", "output": "import React, { useEffect, useRef } from 'react';\n\nimport { select } from 'd3-selection';\nimport { line } from 'd3-shape';\nimport { scaleLinear } from 'd3-scale';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport 'd3-transition';\n\nconst margin = { top: 20, right: 20, bottom: 20, left: 80 },\n  fullWidth = 800,\n  fullHeight = 300,\n  width = fullWidth - margin.left - margin.right,\n  height = fullHeight - margin.top - margin.bottom;\n\nconst x = scaleLinear().range([0, width]);\n\nconst y = scaleLinear().range([0, height]);\n\nconst actual = line()\n  .x((d, i) => x(i + (d.partial / 12 || 1) - 1))\n  .y(d => y(d.balance));\n\nconst baseline = line()\n  .x((d, i) => x(i))\n  .y(d => y(d.baseline));\n\nexport default ({ payments }) => {\n  const chart = useRef(null);\n\n  useEffect(() => {\n    const chartEl = select(chart.current);\n    x.domain([0, payments.length - 1]);\n    y.domain([payments[0].balance, 0]);\n\n    chartEl\n      .select('.x')\n      .call(axisBottom(x).ticks(Math.min(payments.length, 30)));\n\n    chartEl.select('.y').call(axisLeft(y));\n\n    chartEl\n      .select('.baseline')\n      .transition()\n      .attr('d', baseline(payments));\n\n    chartEl\n      .select('.actual')\n      .transition()\n      .attr('d', actual(payments));\n  }, [payments]);\n\n  return (\n    <svg\n      ref={chart}\n      height=\"100%\"\n      width=\"100%\"\n      viewBox={`0 0 ${fullWidth} ${fullHeight}`}\n    >\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        <g className=\"axis x\" transform={`translate(0, ${height})`} />\n        <g className=\"axis y\" />\n        <path className=\"line baseline\" />\n        <path className=\"line actual\" />\n      </g>\n    </svg>\n  );\n};"}, {"instruction": "\n        Integrate the newly created \"Chart\" component into the root component. When the user changes any of the input fields, the chart should update to reflect the new values. The chart should be placed below the \"Monthly Payment\" heading.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { useState } from 'react';\n\nimport './App.css';\n\nimport Table from './Table';\nimport calculate from './calculations';\n\nconst defaultOverpayment = { month: '1', year: '0', amount: '0' };\n\nexport default () => {\n  const [initial, setInitial] = useState('200000');\n  const [rate, setRate] = useState('5');\n  const [years, setYears] = useState('25');\n  const [monthlyOverpayment, setMonthlyOverpayment] = useState('0');\n  const [overpayments, setOverpayments] = useState([defaultOverpayment]);\n\n  const updateOverpayment = index => ({ target }) =>\n    setOverpayments(\n      overpayments.map((overpayment, i) =>\n        i === index\n          ? { ...overpayment, [target.name]: target.value }\n          : overpayment\n      )\n    );\n\n  const { monthlyPayment, payments } = calculate(\n    +initial,\n    +years,\n    +rate,\n    +monthlyOverpayment,\n    overpayments\n  );\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"navbar-header\">\n          <div className=\"navbar-brand\">Mortgage Overpayment Calculator</div>\n        </div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"col-md-8 col-sm-12\">\n          <div className=\"col-sm-4\">\n            <div>\n              <h2>Initial</h2>\n              <label>Amount</label>\n              <input\n                maxLength={7}\n                value={initial}\n                onChange={e => setInitial(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Years</label>\n              <input\n                type=\"number\"\n                maxLength={2}\n                value={years}\n                onChange={e => setYears(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Rate</label>\n              <input\n                type=\"number\"\n                step={0.1}\n                value={rate}\n                onChange={e => setRate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-8\">\n            <div>\n              <h2>Overpayment</h2>\n              <label>Monthly</label>\n              <input\n                type=\"number\"\n                maxLength={5}\n                value={monthlyOverpayment}\n                onChange={e => setMonthlyOverpayment(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Year</label>\n              <label>Month</label>\n              <label>Amount</label>\n            </div>\n            {overpayments.map(({ year, month, amount }, i) => (\n              <div key={i}>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={years}\n                  value={year}\n                  name=\"year\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"12\"\n                  value={month}\n                  name=\"month\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"text\"\n                  value={amount}\n                  name=\"amount\"\n                  onChange={updateOverpayment(i)}\n                />\n\n                {i === overpayments.length - 1 ? (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments([...overpayments, defaultOverpayment])\n                    }\n                  >\n                    +\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments(overpayments.filter((_, j) => j !== i))\n                    }\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"col-sm-12\">\n            <h2>\n              Monthly Payment\n              <span className=\"money\">\n                {(+monthlyOverpayment + monthlyPayment).toFixed(2)}\n              </span>\n            </h2>\n          </div>\n        </div>\n        <Table className=\"col-sm-4\" payments={payments} />\n      </div>\n    </div>\n  );\n};\n\"\n\n        Chart Component:\n        \"import React, { useEffect, useRef } from 'react';\n\nimport { select } from 'd3-selection';\nimport { line } from 'd3-shape';\nimport { scaleLinear } from 'd3-scale';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport 'd3-transition';\n\nconst margin = { top: 20, right: 20, bottom: 20, left: 80 },\n  fullWidth = 800,\n  fullHeight = 300,\n  width = fullWidth - margin.left - margin.right,\n  height = fullHeight - margin.top - margin.bottom;\n\nconst x = scaleLinear().range([0, width]);\n\nconst y = scaleLinear().range([0, height]);\n\nconst actual = line()\n  .x((d, i) => x(i + (d.partial / 12 || 1) - 1))\n  .y(d => y(d.balance));\n\nconst baseline = line()\n  .x((d, i) => x(i))\n  .y(d => y(d.baseline));\n\nexport default ({ payments }) => {\n  const chart = useRef(null);\n\n  useEffect(() => {\n    const chartEl = select(chart.current);\n    x.domain([0, payments.length - 1]);\n    y.domain([payments[0].balance, 0]);\n\n    chartEl\n      .select('.x')\n      .call(axisBottom(x).ticks(Math.min(payments.length, 30)));\n\n    chartEl.select('.y').call(axisLeft(y));\n\n    chartEl\n      .select('.baseline')\n      .transition()\n      .attr('d', baseline(payments));\n\n    chartEl\n      .select('.actual')\n      .transition()\n      .attr('d', actual(payments));\n  }, [payments]);\n\n  return (\n    <svg\n      ref={chart}\n      height=\"100%\"\n      width=\"100%\"\n      viewBox={`0 0 ${fullWidth} ${fullHeight}`}\n    >\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        <g className=\"axis x\" transform={`translate(0, ${height})`} />\n        <g className=\"axis y\" />\n        <path className=\"line baseline\" />\n        <path className=\"line actual\" />\n      </g>\n    </svg>\n  );\n};\"\n        ", "output": "import React, { useState } from 'react';\n\nimport './App.css';\n\nimport Table from './Table';\nimport Chart from './Chart';\nimport calculate from './calculations';\n\nconst defaultOverpayment = { month: '1', year: '0', amount: '0' };\n\nexport default () => {\n  const [initial, setInitial] = useState('200000');\n  const [rate, setRate] = useState('5');\n  const [years, setYears] = useState('25');\n  const [monthlyOverpayment, setMonthlyOverpayment] = useState('0');\n  const [overpayments, setOverpayments] = useState([defaultOverpayment]);\n\n  const updateOverpayment = index => ({ target }) =>\n    setOverpayments(\n      overpayments.map((overpayment, i) =>\n        i === index\n          ? { ...overpayment, [target.name]: target.value }\n          : overpayment\n      )\n    );\n\n  const { monthlyPayment, payments } = calculate(\n    +initial,\n    +years,\n    +rate,\n    +monthlyOverpayment,\n    overpayments\n  );\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"navbar-header\">\n          <div className=\"navbar-brand\">Mortgage Overpayment Calculator</div>\n        </div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"col-md-8 col-sm-12\">\n          <div className=\"col-sm-4\">\n            <div>\n              <h2>Initial</h2>\n              <label>Amount</label>\n              <input\n                maxLength={7}\n                value={initial}\n                onChange={e => setInitial(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Years</label>\n              <input\n                type=\"number\"\n                maxLength={2}\n                value={years}\n                onChange={e => setYears(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Rate</label>\n              <input\n                type=\"number\"\n                step={0.1}\n                value={rate}\n                onChange={e => setRate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-8\">\n            <div>\n              <h2>Overpayment</h2>\n              <label>Monthly</label>\n              <input\n                type=\"number\"\n                maxLength={5}\n                value={monthlyOverpayment}\n                onChange={e => setMonthlyOverpayment(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Year</label>\n              <label>Month</label>\n              <label>Amount</label>\n            </div>\n            {overpayments.map(({ year, month, amount }, i) => (\n              <div key={i}>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={years}\n                  value={year}\n                  name=\"year\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"12\"\n                  value={month}\n                  name=\"month\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"text\"\n                  value={amount}\n                  name=\"amount\"\n                  onChange={updateOverpayment(i)}\n                />\n\n                {i === overpayments.length - 1 ? (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments([...overpayments, defaultOverpayment])\n                    }\n                  >\n                    +\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments(overpayments.filter((_, j) => j !== i))\n                    }\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"col-sm-12\">\n            <h2>\n              Monthly Payment\n              <span className=\"money\">\n                {(+monthlyOverpayment + monthlyPayment).toFixed(2)}\n              </span>\n            </h2>\n            <Chart payments={payments} />\n          </div>\n        </div>\n        <Table className=\"col-sm-4\" payments={payments} />\n      </div>\n    </div>\n  );\n};"}, {"instruction": "Create a header with a search bar and a dropdown menu for selecting the media type to search for. The search bar should have a placeholder that says \"Search\". When the user types in the search bar, the results should update in real-time. The dropdown menu should have options for \"All\", \"Audiobook\", \"eBook\", \"Movie\", \"Music\", \"Music Video\", \"Podcast\", \"TV Show\", and \"Software\". When the user clicks on an option in the dropdown menu, the selected media type should be updated. When the user presses the enter key in the search bar, the search results should be displayed.", "output": "/* global $ */\n// @flow\n/* eslint-disable jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport emitter from '../emitter';\nimport type { HeaderState, SearchOption } from '../type';\nimport '../style/Header.css';\n\nconst options: Array<SearchOption> = [\n  'All',\n  'Audiobook',\n  'eBook',\n  'Movie',\n  'Music',\n  'Music Video',\n  'Podcast',\n  'TV Show',\n  'Software'\n];\n\nclass Header extends React.PureComponent<{}, HeaderState> {\n  emitSearch: () => void;\n  _onKeyUp: (e: Object) => void;\n  _onClick: (e: Object) => void;\n  _update: (e: Object) => Function;\n  ticking: boolean;\n  rAf: any;\n\n  state: HeaderState = {\n    media: 'All',\n    query: ''\n  };\n\n  constructor(props: Object) {\n    super(props);\n    this.ticking = false;\n    this.rAf = null;\n    this.emitSearch = () => emitter.emit('search', this.state);\n    this._onClick = e => this.setState(\n      { media: e.target.textContent },\n      () => (this.state.query.length ? this.emitSearch() : null)\n    );\n    this._update = ({ keyCode, target: { value: query } }) => _ => {\n      this.setState({ query }, () => keyCode === 13 && this.emitSearch());\n      this.ticking = false;\n    };\n    this._onKeyUp = e => {\n      if (!this.ticking) {\n        this.rAf = window.requestAnimationFrame(this._update(e));\n        this.ticking = true;\n      }\n    };\n  }\n\n  renderSearchOption = () => options.map(opt =>\n    <li\n      key={opt}\n      className={this.state.media === opt ? 'select' : ''}\n    >\n      <a\n        tabIndex=\"0\"\n        role=\"button\"\n        onClick={this._onClick}\n      >\n        {opt}\n      </a>\n    </li>);\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.rAf);\n  }\n\n  render() {\n    return (\n      <div className=\"navbar-fixed\">\n        <nav>\n          <div className=\"nav-wrapper cyan\">\n            <div className=\"header-search-wrapper\">\n              <i className=\"material-icons black-text\">search</i>\n              <input\n                type=\"text\"\n                placeholder=\"Search\"\n                onKeyUp={this._onKeyUp}\n                className=\"search-input white black-text\"\n              />\n            </div>\n            <div className=\"dropdown-wrapper\">\n              <div\n                className=\"dropdown-button\"\n                role=\"button\"\n                data-activates=\"search-options\"\n              >\n                {this.state.media}\n              </div>\n              <ul id=\"search-options\" className=\"dropdown-content\">\n                {this.renderSearchOption()}\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Header;"}, {"instruction": "\n        Add the Header component to the root component. The Header component should be placed at the top of the root component's render method, before the Container and Ribbon components.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport Container from './Container';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Container />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;\n\"\n\n        Header Component:\n        \"/* global $ */\n// @flow\n/* eslint-disable jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport emitter from '../emitter';\nimport type { HeaderState, SearchOption } from '../type';\nimport '../style/Header.css';\n\nconst options: Array<SearchOption> = [\n  'All',\n  'Audiobook',\n  'eBook',\n  'Movie',\n  'Music',\n  'Music Video',\n  'Podcast',\n  'TV Show',\n  'Software'\n];\n\nclass Header extends React.PureComponent<{}, HeaderState> {\n  emitSearch: () => void;\n  _onKeyUp: (e: Object) => void;\n  _onClick: (e: Object) => void;\n  _update: (e: Object) => Function;\n  ticking: boolean;\n  rAf: any;\n\n  state: HeaderState = {\n    media: 'All',\n    query: ''\n  };\n\n  constructor(props: Object) {\n    super(props);\n    this.ticking = false;\n    this.rAf = null;\n    this.emitSearch = () => emitter.emit('search', this.state);\n    this._onClick = e => this.setState(\n      { media: e.target.textContent },\n      () => (this.state.query.length ? this.emitSearch() : null)\n    );\n    this._update = ({ keyCode, target: { value: query } }) => _ => {\n      this.setState({ query }, () => keyCode === 13 && this.emitSearch());\n      this.ticking = false;\n    };\n    this._onKeyUp = e => {\n      if (!this.ticking) {\n        this.rAf = window.requestAnimationFrame(this._update(e));\n        this.ticking = true;\n      }\n    };\n  }\n\n  renderSearchOption = () => options.map(opt =>\n    <li\n      key={opt}\n      className={this.state.media === opt ? 'select' : ''}\n    >\n      <a\n        tabIndex=\"0\"\n        role=\"button\"\n        onClick={this._onClick}\n      >\n        {opt}\n      </a>\n    </li>);\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.rAf);\n  }\n\n  render() {\n    return (\n      <div className=\"navbar-fixed\">\n        <nav>\n          <div className=\"nav-wrapper cyan\">\n            <div className=\"header-search-wrapper\">\n              <i className=\"material-icons black-text\">search</i>\n              <input\n                type=\"text\"\n                placeholder=\"Search\"\n                onKeyUp={this._onKeyUp}\n                className=\"search-input white black-text\"\n              />\n            </div>\n            <div className=\"dropdown-wrapper\">\n              <div\n                className=\"dropdown-button\"\n                role=\"button\"\n                data-activates=\"search-options\"\n              >\n                {this.state.media}\n              </div>\n              <ul id=\"search-options\" className=\"dropdown-content\">\n                {this.renderSearchOption()}\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Header;\"\n        ", "output": "import React from 'react';\nimport Header from './Header';\nimport Container from './Container';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;"}, {"instruction": "Create a React component that displays a list of items. When the user enters a search query, the component should fetch data from an API and display the results. If no results are found, display a \"No results found\" message. If an error occurs, display an \"Error\" message.", "output": "// @flow\nimport React from 'react';\nimport List from './List';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;"}, {"instruction": "\n        Integrate the new \"Container\" component into the root component, ensuring that:\n\n- The \"Container\" component is rendered below the \"Header\" component and above the \"Ribbon\" component.\n- The \"Container\" component is responsible for displaying search results and error messages.\n- When the user enters a search term in the \"Header\" component, the \"Container\" component should fetch the search results and display them.\n- If the search returns no results, the \"Container\" component should display a \"no results\" message.\n- If the search fails, the \"Container\" component should display an \"error\" message.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport Header from './Header';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;\n\"\n\n        Container Component:\n        \"// @flow\nimport React from 'react';\nimport List from './List';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;\"\n        ", "output": "import React from 'react';\nimport Header from './Header';\nimport Container from './Container';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;"}, {"instruction": "Create a React component that displays a GitHub ribbon in the bottom-right corner of the screen. When clicked, the ribbon should open the GitHub repository for the project in a new tab. The ribbon should be customizable with a color and a URL.", "output": "import React, { Component } from 'react';\nimport '../style/Ribbon.css';\n\nconst Ribbon = () => (\n  <a\n    target=\"_blank\"\n    href=\"https://github.com/LeoAJ/react-iTunes-search\"\n    className=\"github-corner\"\n    rel=\"noopener noreferrer\"\n    aria-label=\"View source on Github\"\n  >\n    <svg\n      width=\"80\"\n      height=\"80\"\n      viewBox=\"0 0 250 250\"\n      className=\"svg\"\n      aria-hidden=\"true\"\n    >\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n      <path\n        d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n        fill=\"currentColor\"\n        className=\"octo-arm path\"\n      />\n      <path\n        d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n        fill=\"currentColor\"\n        className=\"octo-body\"\n      />\n    </svg>\n  </a>\n);\n\nexport default Ribbon;"}, {"instruction": "\n        Integrate the Ribbon component into the App component by adding it to the JSX within the App component's render method, so that the Ribbon component is rendered below the Header and Container components.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport Header from './Header';\nimport Container from './Container';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n    </div>\n  );\n};\n\nexport default App;\n\"\n\n        Ribbon Component:\n        \"import React, { Component } from 'react';\nimport '../style/Ribbon.css';\n\nconst Ribbon = () => (\n  <a\n    target=\"_blank\"\n    href=\"https://github.com/LeoAJ/react-iTunes-search\"\n    className=\"github-corner\"\n    rel=\"noopener noreferrer\"\n    aria-label=\"View source on Github\"\n  >\n    <svg\n      width=\"80\"\n      height=\"80\"\n      viewBox=\"0 0 250 250\"\n      className=\"svg\"\n      aria-hidden=\"true\"\n    >\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n      <path\n        d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n        fill=\"currentColor\"\n        className=\"octo-arm path\"\n      />\n      <path\n        d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n        fill=\"currentColor\"\n        className=\"octo-body\"\n      />\n    </svg>\n  </a>\n);\n\nexport default Ribbon;\"\n        ", "output": "import React from 'react';\nimport Header from './Header';\nimport Container from './Container';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;"}, {"instruction": "Create a React component that displays a message and an icon based on a given status. The component should display a loading spinner when the status is \"loading\", a music note icon and the message \"Welcome back!\" when the status is \"init\", an info icon and the message \"No match\" when the status is \"noContent\", and an error icon and the message \"Error!\" when the status is \"error\". The component should be styled using CSS.", "output": "// @flow\nimport React, { PropTypes } from 'react';\nimport '../style/Message.css';\n\nconst msgMap: Object = {\n  init: {\n    icon: 'music_note',\n    msg: 'Welcome back!'\n  },\n  loading: {\n    msg: 'Loading...'\n  },\n  noContent: {\n    icon: 'info',\n    msg: 'No match'\n  },\n  error: {\n    icon: 'error',\n    msg: 'Error!'\n  }\n};\n\nconst spinner = _ => (\n  <div className=\"sk-circle\">\n    <div className=\"sk-circle1 sk-child\" />\n    <div className=\"sk-circle2 sk-child\" />\n    <div className=\"sk-circle3 sk-child\" />\n    <div className=\"sk-circle4 sk-child\" />\n    <div className=\"sk-circle5 sk-child\" />\n    <div className=\"sk-circle6 sk-child\" />\n    <div className=\"sk-circle7 sk-child\" />\n    <div className=\"sk-circle8 sk-child\" />\n    <div className=\"sk-circle9 sk-child\" />\n    <div className=\"sk-circle10 sk-child\" />\n    <div className=\"sk-circle11 sk-child\" />\n    <div className=\"sk-circle12 sk-child\" />\n  </div>\n);\n\nconst Message = ({ status }: { status: string }) => (\n  <div className=\"toast\">\n    {status === 'loading' ? spinner() : <i className=\"material-icons\">{msgMap[status].icon}</i>}\n    <span className=\"text\">{msgMap[status].msg}</span>\n  </div>\n);\n\nexport default Message;"}, {"instruction": "\n        In the Container component, when the status is not empty, display the Message component with the status as a prop. Otherwise, display the List component with the data as props.\n\n        Use the following code for context.\n\n        Root Component:\n        \"// @flow\nimport React from 'react';\nimport List from './List';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <div /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;\n\"\n\n        Message Component:\n        \"// @flow\nimport React, { PropTypes } from 'react';\nimport '../style/Message.css';\n\nconst msgMap: Object = {\n  init: {\n    icon: 'music_note',\n    msg: 'Welcome back!'\n  },\n  loading: {\n    msg: 'Loading...'\n  },\n  noContent: {\n    icon: 'info',\n    msg: 'No match'\n  },\n  error: {\n    icon: 'error',\n    msg: 'Error!'\n  }\n};\n\nconst spinner = _ => (\n  <div className=\"sk-circle\">\n    <div className=\"sk-circle1 sk-child\" />\n    <div className=\"sk-circle2 sk-child\" />\n    <div className=\"sk-circle3 sk-child\" />\n    <div className=\"sk-circle4 sk-child\" />\n    <div className=\"sk-circle5 sk-child\" />\n    <div className=\"sk-circle6 sk-child\" />\n    <div className=\"sk-circle7 sk-child\" />\n    <div className=\"sk-circle8 sk-child\" />\n    <div className=\"sk-circle9 sk-child\" />\n    <div className=\"sk-circle10 sk-child\" />\n    <div className=\"sk-circle11 sk-child\" />\n    <div className=\"sk-circle12 sk-child\" />\n  </div>\n);\n\nconst Message = ({ status }: { status: string }) => (\n  <div className=\"toast\">\n    {status === 'loading' ? spinner() : <i className=\"material-icons\">{msgMap[status].icon}</i>}\n    <span className=\"text\">{msgMap[status].msg}</span>\n  </div>\n);\n\nexport default Message;\"\n        ", "output": "// @flow\nimport React from 'react';\nimport List from './List';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;"}, {"instruction": "Create a React component that displays a list of items. The component should:\n\n* Take an array of items as a prop.\n* Display the items in a list.\n* If there are no items, display a message indicating that there are no results.\n* Each item should be rendered using a separate component.\n* The component should have a CSS class of \"list-wrapper\".", "output": "// @flow\nimport React, { PropTypes } from 'react';\nimport Item from './Item';\nimport type { SearchResult } from '../type';\nimport '../style/List.css';\n\nconst List = ({\n  results,\n  resultCount\n}: {\n  results: Array<SearchResult>,\n  resultCount: number\n}) => (\n  <div className=\"list-wrapper\">\n    {resultCount > 0 ? results.map((item, i) => <Item key={item.trackId || i} {...item} />) : null}\n  </div>\n);\n\nexport default List;"}, {"instruction": "\n        Integrate the new \"List\" component into the root component. When the root component is in a non-loading state, it should display the \"List\" component with data from the root component's state. When the root component is in a loading state, it should display a loading message.\n\n        Use the following code for context.\n\n        Root Component:\n        \"// @flow\nimport React from 'react';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default Container;\n\"\n\n        List Component:\n        \"// @flow\nimport React, { PropTypes } from 'react';\nimport Item from './Item';\nimport type { SearchResult } from '../type';\nimport '../style/List.css';\n\nconst List = ({\n  results,\n  resultCount\n}: {\n  results: Array<SearchResult>,\n  resultCount: number\n}) => (\n  <div className=\"list-wrapper\">\n    {resultCount > 0 ? results.map((item, i) => <Item key={item.trackId || i} {...item} />) : null}\n  </div>\n);\n\nexport default List;\"\n        ", "output": "// @flow\nimport React from 'react';\nimport List from './List';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;"}, {"instruction": "Create a React component that displays a centered loading spinner inside a card. The spinner should be vertically centered within the card.", "output": "import React from 'react'\nimport { Card, Spinner } from 'elemental'\nimport { styles } from 'refire-app'\n\nconst LoadingSpinner = ({ styles }) => {\n  return (\n    <Card>\n      <div className={styles.spinnerContainer}>\n        <Spinner />\n      </div>\n    </Card>\n  )\n}\n\nconst css = {\n  spinnerContainer: {\n    padding: \"30px 0\",\n  },\n}\n\nexport default styles(css, LoadingSpinner)"}, {"instruction": "\n        Add a loading spinner to the Categories component that displays when there are no boards or categories to display. The spinner should be centered and have a padding of 30px on the top and bottom.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return null;\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)\n\"\n\n        LoadingSpinner Component:\n        \"import React from 'react'\nimport { Card, Spinner } from 'elemental'\nimport { styles } from 'refire-app'\n\nconst LoadingSpinner = ({ styles }) => {\n  return (\n    <Card>\n      <div className={styles.spinnerContainer}>\n        <Spinner />\n      </div>\n    </Card>\n  )\n}\n\nconst css = {\n  spinnerContainer: {\n    padding: \"30px 0\",\n  },\n}\n\nexport default styles(css, LoadingSpinner)\"\n        ", "output": "import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)"}, {"instruction": "Create a React component that displays a list of boards in a category. Each board should be a link to the board's page, and the link should display the board's title. The component should take the following props:\n\n- `boards`: An object containing all of the boards in the app.\n- `category`: The category of the boards to display.\n- `styles`: An object containing styles to apply to the component.", "output": "import React from 'react'\nimport { Link, styles } from 'refire-app'\nimport find from 'lodash/find'\n\nfunction findBoard(boards, boardId) {\n  return find(boards, (board) => {\n    return board.key === boardId\n  }) || { value: {} }\n}\n\nconst Boards = ({ boards, category, styles }) => {\n  return (\n    <div>\n      {\n        Object.keys(category.boards).map((boardId) => {\n          const board = findBoard(boards, boardId)\n          return (\n            <h3 key={boardId} className={styles.header}>\n              <Link to={`board/${board.key}`} className={styles.link}>\n                {board.value.title}\n              </Link>\n            </h3>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  header: {},\n  link: {},\n}\n\nexport default styles(css, Boards)"}, {"instruction": "\n        In the Categories component, add a new component called Boards below the header for each category. The Boards component should display a list of links to boards within the current category. Each link should display the title of the board and link to the board's detail page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)\n\"\n\n        Boards Component:\n        \"import React from 'react'\nimport { Link, styles } from 'refire-app'\nimport find from 'lodash/find'\n\nfunction findBoard(boards, boardId) {\n  return find(boards, (board) => {\n    return board.key === boardId\n  }) || { value: {} }\n}\n\nconst Boards = ({ boards, category, styles }) => {\n  return (\n    <div>\n      {\n        Object.keys(category.boards).map((boardId) => {\n          const board = findBoard(boards, boardId)\n          return (\n            <h3 key={boardId} className={styles.header}>\n              <Link to={`board/${board.key}`} className={styles.link}>\n                {board.value.title}\n              </Link>\n            </h3>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  header: {},\n  link: {},\n}\n\nexport default styles(css, Boards)\"\n        ", "output": "import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)"}, {"instruction": "Design a React component that displays a list of categories. For each category, display its title and a list of boards associated with that category. If there are no categories or boards to display, show a loading spinner.", "output": "import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)"}, {"instruction": "\n        Integrate the Categories component into the Index component. When the Index component loads, it should display a list of categories, each with a title and a list of boards. If there are no categories or boards, display a loading spinner.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { Component } from 'react'\nimport { bindings } from 'refire-app'\n\nclass Index extends Component {\n  render() {\n    const { value: boards = [] } = this.props.boards || {}\n    const { theme } = this.props\n\n    return (\n      <div>\n        {/* <Categories\n          categories={categories}\n          boards={boards}\n          styles={theme.Categories.Categories}\n          theme={theme.Categories}\n        /> */}\n      </div>\n    )\n  }\n}\n\nexport default bindings([\"boards\"])(Index)\n\"\n\n        Categories Component:\n        \"import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)\"\n        ", "output": "import React, { Component } from 'react'\nimport { bindings } from 'refire-app'\n\nimport Categories from './Categories'\n\nclass Index extends Component {\n  render() {\n    const { value: categories = [] } = this.props.categories || {}\n    const { value: boards = [] } = this.props.boards || {}\n    const { theme } = this.props\n\n    return (\n      <div>\n        <Categories\n          categories={categories}\n          boards={boards}\n          styles={theme.Categories.Categories}\n          theme={theme.Categories}\n        />\n      </div>\n    )\n  }\n}\n\nexport default bindings([\"categories\", \"boards\"])(Index)"}, {"instruction": "Create a React component that displays a 5-star rating. The component should accept a percentage prop that determines how many stars are filled in. The filled-in stars should be at the top, and the empty stars should be at the bottom. The component should use CSS to style the stars.", "output": "import React, { PropTypes as T } from 'react'\n\nimport styles from './styles.module.css';\n\nconst RatingIcon = (props) => (<span>\u2605</span>)\n\nexport class Rating extends React.Component {\n  render() {\n    const {percentage} = this.props;\n    const style = {\n      width: `${(percentage || 0) * 100}%`\n    }\n    return (\n      <div className={styles.sprite}>\n        <div className={styles.top} style={style}>\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n        </div>\n        <div className={styles.bottom}>\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Rating"}, {"instruction": "\n        Add a star rating component to the Item component, which displays the rating of a place. The rating should be a percentage, with 100% representing a full rating of 5 stars. The rating component should be placed below the name of the place.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport styles from './styles.module.css'\n\nexport class Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  onClick(e) {\n    this.props.onClick(this.props.place);\n  }\n\n  render() {\n    const {place} = this.props;\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        className={classnames(styles.item, {\n        [styles.itemHovered]: this.state.hovered\n      })}>\n          <h1 className={classnames(styles.title)}>{place.name}</h1>\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  place: T.object.isRequired,\n  onHighlight: T.func,\n}\n\nItem.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {}\n}\n\nexport default Item\n\"\n\n        Rating Component:\n        \"import React, { PropTypes as T } from 'react'\n\nimport styles from './styles.module.css';\n\nconst RatingIcon = (props) => (<span>\u2605</span>)\n\nexport class Rating extends React.Component {\n  render() {\n    const {percentage} = this.props;\n    const style = {\n      width: `${(percentage || 0) * 100}%`\n    }\n    return (\n      <div className={styles.sprite}>\n        <div className={styles.top} style={style}>\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n        </div>\n        <div className={styles.bottom}>\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Rating\"\n        ", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Rating from 'components/Rating/Rating';\nimport styles from './styles.module.css'\n\nexport class Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  onClick(e) {\n    this.props.onClick(this.props.place);\n  }\n\n  render() {\n    const {place} = this.props;\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        className={classnames(styles.item, {\n        [styles.itemHovered]: this.state.hovered\n      })}>\n          <h1 className={classnames(styles.title)}>{place.name}</h1>\n          <Rating className={styles.rating}\n                  percentage={(place.rating/5)} />\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  place: T.object.isRequired,\n  onHighlight: T.func,\n}\n\nItem.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {}\n}\n\nexport default Item"}, {"instruction": "Design a React component that displays a place's name and rating as stars. When the user hovers over the component, it should highlight with a different background color. When the user clicks on the component, it should trigger an onClick event.", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Rating from 'components/Rating/Rating';\nimport styles from './styles.module.css'\n\nexport class Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  onClick(e) {\n    this.props.onClick(this.props.place);\n  }\n\n  render() {\n    const {place} = this.props;\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        className={classnames(styles.item, {\n        [styles.itemHovered]: this.state.hovered\n      })}>\n          <h1 className={classnames(styles.title)}>{place.name}</h1>\n          <Rating className={styles.rating}\n                  percentage={(place.rating/5)} />\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  place: T.object.isRequired,\n  onHighlight: T.func,\n}\n\nItem.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {}\n}\n\nexport default Item"}, {"instruction": "\n        Integrate a new component called \"Item\" into the \"Listing\" component. When a user clicks on an item, it should trigger the \"onClick\" event handler passed down from the \"Listing\" component. The \"Item\" component should display the name of the item and its rating.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport styles from './styles.module.css'\n\nexport class Listing extends React.Component {\n  render() {\n    return (\n      <div className={classnames(styles.container)}>\n      {this.props.places.map(place => {\n        return (\n          <div\n                onClick={this.props.onClick}\n                onHighlight={this.props.onHighlight}\n                offHighlight={this.props.offHighlight}\n                key={place.id} />\n        )\n      })}\n      </div>\n    )\n  }\n}\n\nListing.propTypes = {\n  places: T.array.isRequired,\n  onHighlight: T.func,\n  offHighlight: T.func,\n  onClick: T.func\n}\n\nListing.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {},\n  onClick: () => {},\n}\n\nexport default Listing\n\"\n\n        Item Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Rating from 'components/Rating/Rating';\nimport styles from './styles.module.css'\n\nexport class Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  onClick(e) {\n    this.props.onClick(this.props.place);\n  }\n\n  render() {\n    const {place} = this.props;\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        className={classnames(styles.item, {\n        [styles.itemHovered]: this.state.hovered\n      })}>\n          <h1 className={classnames(styles.title)}>{place.name}</h1>\n          <Rating className={styles.rating}\n                  percentage={(place.rating/5)} />\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  place: T.object.isRequired,\n  onHighlight: T.func,\n}\n\nItem.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {}\n}\n\nexport default Item\"\n        ", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Item from './Item';\nimport styles from './styles.module.css'\n\nexport class Listing extends React.Component {\n  render() {\n    return (\n      <div className={classnames(styles.container)}>\n      {this.props.places.map(place => {\n        return (\n          <Item place={place}\n                onClick={this.props.onClick}\n                onHighlight={this.props.onHighlight}\n                offHighlight={this.props.offHighlight}\n                key={place.id} />\n        )\n      })}\n      </div>\n    )\n  }\n}\n\nListing.propTypes = {\n  places: T.array.isRequired,\n  onHighlight: T.func,\n  offHighlight: T.func,\n  onClick: T.func\n}\n\nListing.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {},\n  onClick: () => {},\n}\n\nexport default Listing"}, {"instruction": "Create a React component that displays a list of items. Each item should be clickable and when clicked, a callback function should be executed. Additionally, when the mouse hovers over an item, a different callback function should be executed, and when the mouse leaves the item, a third callback function should be executed.", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Item from './Item';\nimport styles from './styles.module.css'\n\nexport class Listing extends React.Component {\n  render() {\n    return (\n      <div className={classnames(styles.container)}>\n      {this.props.places.map(place => {\n        return (\n          <Item place={place}\n                onClick={this.props.onClick}\n                onHighlight={this.props.onHighlight}\n                offHighlight={this.props.offHighlight}\n                key={place.id} />\n        )\n      })}\n      </div>\n    )\n  }\n}\n\nListing.propTypes = {\n  places: T.array.isRequired,\n  onHighlight: T.func,\n  offHighlight: T.func,\n  onClick: T.func\n}\n\nListing.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {},\n  onClick: () => {},\n}\n\nexport default Listing"}, {"instruction": "\n        In the Sidebar component, add a Listing component that displays a list of places. When a user clicks on a place in the list, call the onListItemClick prop function and pass in the place, map, and google objects.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport styles from './styles.module.css'\n\nexport class Sidebar extends React.Component {\n  onClick(place, map, google) {\n    if (this.props.onListItemClick) {\n      place.place = place;\n      this.props.onListItemClick(place, map, google)\n    }\n  }\n  render() {\n    return (\n      <div className={classnames(styles.sidebar)}>\n        <div className={classnames(styles.heading)}>\n          <h1>{this.props.title}</h1>\n        </div>\n      </div>\n    )\n  }\n}\n\nSidebar.propTypes = {\n  places: T.array,\n  title: T.string,\n  onListItemClick: T.func\n}\n\nSidebar.defaultProps = {\n  title: 'Restaurants'\n}\n\nexport default Sidebar\"\n\n        Listing Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Item from './Item';\nimport styles from './styles.module.css'\n\nexport class Listing extends React.Component {\n  render() {\n    return (\n      <div className={classnames(styles.container)}>\n      {this.props.places.map(place => {\n        return (\n          <Item place={place}\n                onClick={this.props.onClick}\n                onHighlight={this.props.onHighlight}\n                offHighlight={this.props.offHighlight}\n                key={place.id} />\n        )\n      })}\n      </div>\n    )\n  }\n}\n\nListing.propTypes = {\n  places: T.array.isRequired,\n  onHighlight: T.func,\n  offHighlight: T.func,\n  onClick: T.func\n}\n\nListing.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {},\n  onClick: () => {},\n}\n\nexport default Listing\"\n        ", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Listing from 'components/Listing/Listing'\nimport styles from './styles.module.css'\n\nexport class Sidebar extends React.Component {\n  onClick(place, map, google) {\n    if (this.props.onListItemClick) {\n      place.place = place;\n      this.props.onListItemClick(place, map, google)\n    }\n  }\n  render() {\n    return (\n      <div className={classnames(styles.sidebar)}>\n        <div className={classnames(styles.heading)}>\n          <h1>{this.props.title}</h1>\n        </div>\n        <Listing places={this.props.places}\n                 onClick={this.onClick.bind(this)} />\n      </div>\n    )\n  }\n}\n\nSidebar.propTypes = {\n  places: T.array,\n  title: T.string,\n  onListItemClick: T.func\n}\n\nSidebar.defaultProps = {\n  title: 'Restaurants'\n}\n\nexport default Sidebar"}]