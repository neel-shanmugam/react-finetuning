[{"instruction": "Create a React-based date picker component that uses the KendoDatePicker widget for rendering and provides a mixin for date-related functionality. Ensure that the component includes the 'fieldClass' static method and a 'noControl' property for controlling whether to render an input element or display the selected date as text.", "output": "import React from 'react'\nimport DateWidgetMixin from '../mixins/DateWidgetMixin'\n\n\nconst KendoDatePicker = React.createClass({\n    mixins: [DateWidgetMixin('kendoDatePicker')],\n\n    statics: {\n        fieldClass: function () { return 'formFieldDatepicker'; }\n    },\n\n    getDefaultProps: function () {\n        return {\n            format: 'dd-MMM-yyyy'\n        };\n    },\n\n    /*jshint ignore:start */\n    render: function () {\n        return (this.props.noControl\n            ? (<span>{this.renderValue()}</span>)\n            : (<input type=\"text\" />));\n    }\n    /*jshint ignore:end */\n});\n\nexport default KendoDatePicker;\n"}, {"instruction": "Create a React component that renders a table with the following specifications:\n- The table should have a padded appearance.\n- It should include a header row with three columns: Name, Status, and Notes.\n- The table should have two body rows, each with three columns that contain the following data:\n  - Row 1: Name: John, Status: Approved, Notes: He is a very nice guy and I enjoyed talking to him on the telephone. I hope we get to talk again.\n  - Row 2: Name: Jamie, Status: Approved, Notes: Jamie was not interested in purchasing our product.", "output": "import React from 'react'\nimport { Table } from 'semantic-ui-react'\n\nconst TableExamplePadded = () => (\n  <Table padded>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell>Name</Table.HeaderCell>\n        <Table.HeaderCell>Status</Table.HeaderCell>\n        <Table.HeaderCell>Notes</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n\n    <Table.Body>\n      <Table.Row>\n        <Table.Cell>John</Table.Cell>\n        <Table.Cell>Approved</Table.Cell>\n        <Table.Cell>\n          He is a very nice guy and I enjoyed talking to him on the telephone. I\n          hope we get to talk again.\n        </Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Jamie</Table.Cell>\n        <Table.Cell>Approved</Table.Cell>\n        <Table.Cell>\n          Jamie was not interested in purchasing our product.\n        </Table.Cell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n)\n\nexport default TableExamplePadded\n"}, {"instruction": "Generate a React component that displays a route's information, including its name and a list of endpoints. The component should be called `ReferenceRoute`.", "output": "/**\n * External dependecies.\n */\nimport React from 'react'\n\n/**\n * Internal dependecies.\n */\nimport EndpointsList from './EndpointsList'\n\nconst ReferenceRoute = ( route ) => (\n\t<div className=\"reference-route\">\n\t\t<h2 className=\"reference-route__title\">Route: { route.routeName }</h2>\n\t\t<EndpointsList endpoints={ route.endpoints } />\n\t</div>\n)\n\nexport default ReferenceRoute\n"}, {"instruction": "Create a React component named Navigation that renders a navigation bar with a MainMenu component when the step property is 0, and a Sequence component when the step property is greater than 0. If the step property is not 0 or greater than 0, render nothing.", "output": "import React from 'react';\nimport Sequence from './Sequence';\nimport MainMenu from './MainMenu';\n\nconst Navigation = (props) => {\n  const Empty = () => null; \n  return (\n    <nav>\n      <div className=\"pure-menu pure-menu-horizontal\">\n        {props.step === 0 ? <MainMenu {...props} /> : <Empty />}\n        {props.step > 0 ? <Sequence {...props} /> : <Empty />}\n      </div>\n    </nav>\n  );\n};\n\nNavigation.propTypes = {\n  step: React.PropTypes.number.isRequired\n};\n\nexport default Navigation;\n"}, {"instruction": "Create a React component for a repeatable icon. The icon should have a loop of arrows, with two arrows pointing clockwise and two arrows pointing counterclockwise. The icon should be a square with rounded corners.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvRepeat = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\"/>\n  </SvgIcon>\n);\nAvRepeat = pure(AvRepeat);\nAvRepeat.displayName = 'AvRepeat';\nAvRepeat.muiName = 'SvgIcon';\n\nexport default AvRepeat;\n"}, {"instruction": "Create a React component called `IndexRoute` that can be used in a JSX route configuration to specify the `indexRoute` property of its parent `Route` component. The `IndexRoute` component should have the following propTypes: `path`, `ignoreScrollBehavior`, `component`, `components`, and `getComponents`.", "output": "import React from 'react'\nimport invariant from 'invariant'\nimport warning from 'warning'\nimport { createRouteFromReactElement } from './RouteUtils'\nimport { component, components, falsy } from './PropTypes'\n\nconst { bool, func } = React.PropTypes\n\n/**\n * An <IndexRoute> is used to specify its parent's <Route indexRoute> in\n * a JSX route config.\n */\nconst IndexRoute = React.createClass({\n\n  statics: {\n\n    createRouteFromReactElement(element, parentRoute) {\n      if (parentRoute) {\n        parentRoute.indexRoute = createRouteFromReactElement(element)\n      } else {\n        warning(\n          false,\n          'An <IndexRoute> does not make sense at the root of your route config'\n        )\n      }\n    }\n\n  },\n\n  propTypes: {\n    path: falsy,\n    ignoreScrollBehavior: bool,\n    component,\n    components,\n    getComponents: func\n  },\n\n  render() {\n    invariant(\n      false,\n      '<IndexRoute> elements are for router configuration only and should not be rendered'\n    )\n  }\n\n})\n\nexport default IndexRoute\n"}, {"instruction": "Create a React component that includes a button to generate a new keypair and displays a private key import form and a private key table.", "output": "import React from 'react';\n\nvar PrivKeyImport = require('./PrivKeyImport');\nvar PrivKeyTable = require('./PrivKeyTable');\nvar privKeyActions = require('actions/privKeyActions');\n\nvar PrivKeyBox = React.createClass({\n\n  _generateNewKeypair: function() {\n    privKeyActions.addPrivKey();\n  },\n\n  render: function() {\n    var button = <button onClick={this._generateNewKeypair} className=\"btn btn-warning btn-xs pull-right\" type=\"input\">Generate <span className=\"hidden-xs\">New </span>Keypair</button>;\n\n    return (\n      <div className=\"panel panel-default\">\n        <div className=\"panel-heading\"><span className=\"hidden-xs\">Bitcoin </span>Private Keys {button}</div>\n        <div className=\"panel-body\">\n          <PrivKeyImport />\n          <PrivKeyTable />\n    </div>\n      </div>\n    );\n  }\n});\n\nmodule.exports = PrivKeyBox;"}, {"instruction": "Convert the TabPane component to a Tab component, issuing a deprecation warning.", "output": "import React from 'react';\nimport deprecationWarning from './utils/deprecationWarning';\nimport Tab from './Tab';\n\nconst TabPane = React.createClass({\n  componentWillMount() {\n    deprecationWarning(\n      'TabPane', 'Tab',\n      'https://github.com/react-bootstrap/react-bootstrap/pull/1091'\n    );\n  },\n\n  render() {\n    return (\n      <Tab {...this.props} />\n    );\n  }\n});\n\nexport default TabPane;\n"}, {"instruction": "Generate a React component that displays a list of anime series from a database, with a header and footer. The data should be updated in real-time using a change feed and debounced to improve performance. Display the series in tiles of 4. Include a footer with a copyright notice and a link to the source code on GitHub.", "output": "// npm packages\nimport _ from 'lodash';\nimport React from 'react';\nimport {Observable} from 'rxjs';\n// my packages\nimport db from '../db';\nimport {Crunchyroll} from '../api';\n// my components\nimport Navbar from '../components/navbar';\nimport Series from '../components/series';\n\nexport default class Home extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      series: [],\n    };\n\n    // trigger list update\n    Crunchyroll.getAllSeries();\n  }\n\n  componentDidMount() {\n    this.sub = Observable.fromEvent(\n      db.series.changes({\n        since: 0,\n        live: true,\n        include_docs: true,\n      }),\n      'change'\n    )\n      .filter(change => !change.deleted)\n      .map(change => change.doc)\n      .scan((acc, doc) => acc.concat([doc]), [])\n      .debounceTime(1000)\n      .subscribe(series => this.setState({series}));\n  }\n\n  componentWillUnmount() {\n    this.sub.unsubscribe();\n  }\n\n  render() {\n    const {series} = this.state;\n\n\n    return (\n      <div>\n        <Navbar />\n\n        {_.chunk(series, 4).map((chunk, i) => (\n          <div key={`chunk_${i}`} className=\"tile is-ancestor\">\n            {chunk.map(s => <Series key={s._id} series={s} />)}\n          </div>\n        ))}\n\n\n        <footer className=\"footer\">\n          <div className=\"container\">\n            <div className=\"content has-text-centered\">\n              <p>\n                <strong>Japanistic Anime</strong> by <a>Chris M. Perez</a>. The source code is licensed\n                  <a> MIT.</a>\n              </p>\n            <p>\n              <a className=\"icon\">\n                <i className=\"fa fa-github\"></i>\n              </a>\n            </p>\n          </div>\n        </div>\n      </footer>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component with the following features:\n- A maximum number input field that accepts user input and sets the state of the component.\n- A button that starts a lottery after the maximum number has been set.\n- A list of lottery numbers that updates based on the maximum number and the state of the lottery (started or reset).\n- A reset button that resets the lottery and clears the list of numbers.", "output": "import React from 'react';\nimport LotteryList from '../LotteryList/LotteryList';\nimport ButtonAppBar from '../ButtonAppBar/ButtonAppBar';\nimport AlertDialog from '../AlertDialog/AlertDialog';\nimport './Page.css';\n\nexport default class Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      'max': 100,\n      'start':false,\n      'reset':false\n    };\n    this.handleChangeMax = this.handleChangeMax.bind(this);\n  }\n\n  handleChangeMax(max) {\n    this.setState({\n      'max':max,\n      'start':false,\n      'reset':false\n    });\n  }\n\n  render() {\n    return (\n      <div className='page'>\n        <ButtonAppBar className='app-bar' handler={this.handleChangeMax}/>\n        <LotteryList max={this.state.max} start={this.state.start} reset={this.state.reset}/>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component that, when clicked, opens a YouTube video player modal. The player should accept a video ID as a prop and should close when the user clicks outside of the modal. Include styling using imported SCSS.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n// components\nimport ModalVideo from 'react-modal-video';\n\n// CSS\nimport '../../node_modules/react-modal-video/scss/modal-video.scss';\n\n// images\n\nimport play from './img/play.svg';\n\nclass VideoPlayer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isOpen: false,\n    };\n  }\n\n  openModal = () => {\n    this.setState({\n      isOpen: true,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"video-player\">\n\n        <ModalVideo\n          channel=\"youtube\"\n          isOpen={this.state.isOpen}\n          videoId={this.props.videoId}\n          onClose={() => this.setState({ isOpen: false })}\n        />\n\n        <span onClick={this.openModal}>\n          <span className=\"h2 video-player__text\">Launch Video Player</span>\n          <img className=\"video-player__icon\" src={play} alt=\"play icon\" />\n        </span>\n\n      </div>\n    );\n  }\n}\n\nVideoPlayer.propTypes = {\n  videoId: PropTypes.string.isRequired,\n};\n\nexport default VideoPlayer;\n"}, {"instruction": "Create a React component named \"Counter\" that displays a counter value and provides buttons to increment, decrement, increment only if the counter is odd, and increment asynchronously. Define PropTypes for the counter value and event handlers. Export the component.", "output": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Counter = ({\n  increment, incrementIfOdd, incrementAsync, decrement, counter,\n}) => (\n  <p>\n    Clicked: {counter} times\n    {' '}\n    <button onClick={increment}>+</button>\n    {' '}\n    <button onClick={decrement}>-</button>\n    {' '}\n    <button onClick={incrementIfOdd}>Increment if odd</button>\n    {' '}\n    <button onClick={() => incrementAsync()}>Increment async</button>\n  </p>\n)\n\nCounter.propTypes = {\n  counter: PropTypes.number.isRequired,\n  decrement: PropTypes.func.isRequired,\n  increment: PropTypes.func.isRequired,\n  incrementAsync: PropTypes.func.isRequired,\n  incrementIfOdd: PropTypes.func.isRequired,\n}\n\nexport default Counter\n"}, {"instruction": "Create the JSX code for the landing page, which includes a header, search input, and browse all link.", "output": "import React from 'react'\nimport { render } from 'react-dom'\nimport '../public/style.css'\n\nconst App = React.createClass({\n  render () {\n    return (\n      <div className='app'>\n        <div className='landing'>\n          <h1>svideo</h1>\n          <input type='text' placeholder='Search' />\n          <a>or Browse All</a>\n        </div>\n      </div>\n    )\n  }\n})\n\nrender(<App />, document.getElementById('app'))\n"}, {"instruction": "Generate a React component that renders a code snippet in a syntax-highlighted theme using CodeMirror, given the code text and the desired mode.", "output": "import React from 'react';\n\nexport default class CodeExample extends React.Component {\n  render() {\n    return (\n      <pre className=\"cm-s-solarized cm-s-light\">\n        <code>\n          {this.props.codeText}\n        </code>\n      </pre>\n    );\n  }\n\n  componentDidMount() {\n    if (CodeMirror === undefined) {\n      return;\n    }\n\n    CodeMirror.runMode(\n      this.props.codeText,\n      this.props.mode,\n      React.findDOMNode(this).children[0]\n    );\n  }\n}\n"}, {"instruction": "Create a React component that renders a hamburger menu icon using SVG. The icon should have three horizontal lines that change opacity when hovered over, and a button that triggers a function when clicked.", "output": "import React from 'react'\n\nconst BurgerIcon = React.createClass({\n    propTypes: {\n        onClick: React.PropTypes.func.isRequired\n    },\n\n    getInitialState() {\n        return {hover: false}\n    },\n\n    getLineStyle(index) {\n        return {\n            position: 'absolute',\n            height: '20%',\n            left: 0,\n            right: 0,\n            top: 20 * (index * 2) + '%',\n            opacity: this.state.hover ? 0.6 : 1\n        }\n    },\n\n    handleHover() {\n        this.setState({hover: !this.state.hover})\n    },\n\n    render() {\n        const buttonStyle = {\n            position: 'absolute',\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0,\n            margin: 0,\n            padding: 0,\n            border: 'none',\n            fontSize: 14,\n            color: 'transparent',\n            background: 'transparent',\n            outline: 'none',\n            cursor: 'pointer'\n        }\n\n        return (\n            <div className=\"rbn-burger-button\" style={{zIndex: 1}}>\n                <span className=\"rbn-burger-bars\" style={this.getLineStyle(0)}></span>\n                <span className=\"rbn-burger-bars\" style={this.getLineStyle(1)}></span>\n                <span className=\"rbn-burger-bars\" style={this.getLineStyle(2)}></span>\n                <button onClick={this.props.onClick}\n                  onMouseEnter={this.handleHover}\n                  onMouseLeave={this.handleHover}\n                  style={buttonStyle}>\n                    Open Menu\n                </button>\n            </div>\n        )\n    }\n})\n\nexport default BurgerIcon\n"}, {"instruction": "Describe the logic for a hover effect on a header button component. The button should change background color when the mouse hovers over it.", "output": "import React, { Component } from 'react';\nimport reactCSS, { hover } from 'reactcss';\nimport ReactDOM from 'react-dom';\n\n\nclass HeaderButton extends Component {\n\n    // _onHintTextClick() {\n    //     const component = ReactDOM.findDOMNode(this.refs.ButtonComponent);\n    //\n    //     console.dir(component)\n    //     // component.mouseenter();\n    // }\n    //\n    // componentDidMount() {\n    //     this.refs.container.addEventListener('mouseenter', ::this._onHintTextClick, false);\n    // }\n    //\n    // componentWillUnmount() {\n    //     this.refs.container.removeEventListener('mouseenter', this._onHintTextClick);\n    // }\n\n    render() {\n        const ButtonComponent = this.props.component;\n        const styles = reactCSS({\n            'hover': {\n                button: {\n                    background: this.props.backgroundColor,\n                },\n            },\n        }, this.props, this.state);\n\n        const {\n            className,\n            style,\n            iconStyle,\n            ownProps\n        } = this.props;\n\n\n        return (\n            <div\n                ref=\"container\"\n                className={className}\n                style={{\n                    transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1)',\n                    ...style,\n                    ...styles.button\n                }}\n            >\n                <ButtonComponent\n                    ref=\"ButtonComponent\"\n                    style={iconStyle}\n                    {...ownProps}\n                />\n            </div>\n        );\n    }\n}\n\nexport default hover(HeaderButton);\n"}, {"instruction": "Generate a code snippet for a React component that uses the TextBox with an error message. The component should include the following features:\n- Label: \"First Name\"\n- Name: \"firstname\"\n- Required\n- Error message: \"First name is required.\"", "output": "import React from 'react';\nimport TextInputBEM from 'ps-react/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}"}, {"instruction": "Create a React code snippet that uses the Semantic UI React library to display a step group with a title and description for each step. The code should demonstrate three different ways to define the title and description: using children, using props, and using a combination of both.", "output": "import React from 'react'\nimport { Step } from 'semantic-ui-react'\n\nconst StepExampleDescriptions = () => (\n  <div>\n    <Step.Group>\n      <Step>\n        <Step.Title>Shipping</Step.Title>\n        <Step.Description>Choose your shipping options</Step.Description>\n      </Step>\n    </Step.Group>\n\n    <br />\n\n    <Step.Group>\n      <Step>\n        <Step.Title title='Shipping' />\n        <Step.Description description='Choose your shipping options' />\n      </Step>\n    </Step.Group>\n\n    <br />\n\n    <Step.Group>\n      <Step title='Shipping' description='Choose your shipping options' />\n    </Step.Group>\n  </div>\n)\n\nexport default StepExampleDescriptions\n"}, {"instruction": "Provide a function that creates a React component and renders it into a test document. The function should take a component class, props, and initial state as arguments. It should also include a helper function to simulate events on the rendered component.", "output": "import _$ from 'jquery';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestUtils from 'react-addons-test-utils';\nimport jsdom from 'jsdom';\nimport chai, { expect } from 'chai';\nimport chaiJquery from 'chai-jquery';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from '../src/reducers';\n\nglobal.document = jsdom.jsdom('<!doctype html><html><body></body></html>');\nglobal.window = global.document.defaultView;\nglobal.navigator = global.window.navigator;\nconst $ = _$(window);\n\nchaiJquery(chai, chai.util, $);\n\nfunction renderComponent(ComponentClass, props = {}, state = {}) {\n  const componentInstance =  TestUtils.renderIntoDocument(\n    <Provider store={createStore(reducers, state)}>\n      <ComponentClass {...props} />\n    </Provider>\n  );\n\n  return $(ReactDOM.findDOMNode(componentInstance));\n}\n\n$.fn.simulate = function(eventName, value) {\n  if (value) {\n    this.val(value);\n  }\n  TestUtils.Simulate[eventName](this[0]);\n};\n\nexport {renderComponent, expect};\n"}, {"instruction": "Create a React component called \"ContentContainer\" that displays three sections: a left navigation, a middle section for child components, and a right navigation.", "output": "import React from 'react';\nimport {NavLeft, NavRight} from '../../components/Common/Content';\n\n\n\nexport default class ContentContainer extends React.Component{\n  render(){\n    return (\n      <section className={'content'}>\n        <NavLeft {...this.props} />\n        <div className={'content__middle'}>\n          {this.props.children}\n        </div>\n        <NavRight {...this.props}/>\n      </section>\n    )\n  }\n}\n"}, {"instruction": "Create a React component with multiple routes that direct to specific pages based on the URL. The main page should be the Home page, and there should also be separate About and Contact pages. Include a default Not Found (404) page for URLs that don't match any of the defined routes.", "output": "'use strict'\n\nimport React from 'react'\nimport { Route, IndexRoute } from 'react-router'\nimport App from 'containers/App'\nimport Home from './Home/Home'\n\nimport About from './About/About'\nimport Contact from './Contact/Contact'\n\nimport NoMatch from 'containers/NoMatch'\n\nexport default (\n  <Route path=\"/\" component={App}>\n    <IndexRoute component={Home} />\n\n    <Route path=\"about\" component={About} />\n    <Route path=\"contact\" component={Contact} />\n\n    <Route path=\"*\" component={NoMatch} />\n  </Route>\n)"}, {"instruction": "Create a component test for the Awesome component with the following props:\n- required prop 'foo' of type number\n- optional prop 'bar'", "output": "import test from 'ava'\nimport buildComponentTest from '../../src/generate/build-component-test'\n\nconst expected = `import test from 'ava'\nimport React from 'react'\nimport sinon from 'sinon'\n\nimport { render } from 'react-dom'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport { Simulate } from 'react-addons-test-utils'\n\nimport Awesome from './Awesome'\n\ntest('does something awesome', t => {\n  const output = renderStatic()\n  t.true(output.includes('children'))\n})\n\nfunction renderStatic (props) {\n  return renderToStaticMarkup(<Awesome {...props} />)\n}\n\nfunction renderToDiv (props) {\n  const div = document.createElement('div')\n  render (\n    <Awesome {...props}>\n      {props.children || 'ohai!'}\n    </Awesome>,\n    div\n  )\n\n  return div\n}\n`\n\ntest('creates component test', t => {\n  t.plan(1)\n\n  const output = buildComponentTest('awesome', {\n    props: ['foo:number:required', 'bar']\n  })\n\n  t.same(output, expected)\n})\n"}, {"instruction": "Create a React application that uses Material UI and connect to a Meteor backend. The app should render a top-level component `App` into the `#app` element.", "output": "/* global document */\n\nimport { MuiThemeProvider } from 'material-ui/styles';\nimport { Meteor } from 'meteor/meteor';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from '../imports/ui/components/App';\n\nMeteor.startup(() => {\n  render(\n    <MuiThemeProvider>\n      <App />\n    </MuiThemeProvider>,\n    document.getElementById('app'),\n  );\n});\n"}, {"instruction": "Design a React component for a vertical sidebar menu with the following specifications:\n\n* Fixed position at the top left corner of the screen\n* Height: 100% of the parent container\n* Width: 224px\n* Background color: #5E7B8D\n* Header section with a logo image and the text \"JustNUM\"\n* Menu with the following options:\n    * Tasks (icon: AssignmentLate)\n    * Cases (icon: Work)\n    * Add Case (icon: NoteAdd)\n* Text color for menu items: white\n* Divider lines between menu sections", "output": "import React from 'react';\nimport Paper from 'material-ui/Paper';\nimport Menu from 'material-ui/Menu';\nimport MenuItem from 'material-ui/MenuItem';\nimport { white } from 'material-ui/styles/colors';\nimport AssignmentLate from 'material-ui/svg-icons/action/assignment-late';\nimport Work from 'material-ui/svg-icons/action/work';\nimport NoteAdd from 'material-ui/svg-icons/action/note-add';\nimport Divider from 'material-ui/Divider';\nimport { Link } from 'react-router';\n\n\nconst style = {\n  paper: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    zIndex: 100,\n    height: '100%',\n    width: '224px',\n    backgroundColor: '#5E7B8D',\n  },\n  rightIcon: {\n    textAlign: 'center',\n    lineHeight: '24px',\n  },\n  header: {\n    display: 'flex',\n    marginLeft: '10px',\n    marginBottom: '5px',\n  },\n  headerImg: {\n    marginTop: '5px',\n    width: '54px',\n    height: '54px',\n  },\n  headerText: {\n    color: 'white',\n    marginLeft: '8px',\n    fontSize: '1.6em',\n  },\n};\n\nconst menuItemStyles = {\n  color: 'white',\n};\n\nconst SideBar = () =>\n  <Paper style={style.paper}>\n    <div style={style.header}>\n      <img src=\"logo_sml.png\" role=\"presentation\" style={style.headerImg} />\n      <h1 style={style.headerText}>JustNUM</h1>\n    </div>\n    <Menu>\n      <MenuItem\n        primaryText=\"Tasks\"\n        style={menuItemStyles}\n        leftIcon={<AssignmentLate color={white} />}\n        containerElement={<Link to=\"/authenticated/tasks\" />}\n      />\n      <MenuItem\n        primaryText=\"Cases\"\n        style={menuItemStyles}\n        leftIcon={<Work color={white} />}\n        containerElement={<Link to=\"/authenticated/cases\" />}\n      />\n      <Divider />\n      <MenuItem\n        primaryText=\"Add Case\"\n        style={menuItemStyles}\n        leftIcon={<NoteAdd color={white} />}\n        containerElement={<Link to=\"/authenticated/cases/new\" />}\n      />\n      <Divider />\n    </Menu>\n  </Paper>;\n\nexport default SideBar;\n"}, {"instruction": "Generate a React component that displays a project card with the following information: name, URL, GitHub URL, and description.", "output": "import React from 'react'\n\nexport default (props) => {\n  const project = props.project\n  return (\n    <div className='project-card card'>\n      <h3>Project {project.name}</h3>\n      <div className='card-links'>\n        {project.url ? <a href={project.url} className='fa fa-desktop' /> : null}\n        {project.github_url ? <a href={project.github_url} className='fa fa-github' /> : null}\n      </div>\n      <p>{project.description}</p>\n    </div>\n  )\n}\n"}, {"instruction": "Prepare a testing environment for React Native components by mocking essential dependencies, including Javascript built-ins, React Native built-ins, and NPM modules. Ensure accurate date and time snapshotting and stub essential functions for UI interactions.", "output": "// @flow\nimport React from 'react';\nimport { View } from 'react-native';\n\n// ------------------------\n// Javascript Built-Ins\n// ------------------------\n// Ensure Date.now and new Date() give us the same date for snapshots.\nimport timekeeper from 'timekeeper';\ntimekeeper.freeze(new Date(2017, 3, 1, 8, 0, 0));\n\n// ------------------------\n// React Native Built-Ins\n// ------------------------\n// React Native UI Manager needs a focus function.\n// $FlowFixMe\nimport { UIManager } from 'NativeModules';\nUIManager.focus = jest.fn();\nUIManager.createView = jest.fn(() => <View />);\nUIManager.updateView = jest.fn();\n\n// ------------------------\n// NPM Modules\n// ------------------------\n// Provide a manual mock for native modules.\njest.mock('react-native-maps');\n"}, {"instruction": "Generate a React component that displays a counter with increment and double async button handlers. The component should have a counter container with a green counter value and two buttons, one for incrementing and one for doubling the counter asynchronously.", "output": "import React from 'react';\nimport classes from './Counter.scss';\n\nexport const Counter = (props) => (\n  <div>\n    <h2 className={classes.counterContainer}>\n      Counter:\n      {' '}\n      <span className={classes['counter--green']}>\n        {props.counter}\n      </span>\n    </h2>\n    <button className=\"btn btn-default\" onClick={props.increment}>\n      Increment\n    </button>\n    {' '}\n    <button className=\"btn btn-default\" onClick={props.doubleAsync}>\n      Double (Async)\n    </button>\n  </div>\n);\n\nCounter.propTypes = {\n  counter: React.PropTypes.number.isRequired,\n  doubleAsync: React.PropTypes.func.isRequired,\n  increment: React.PropTypes.func.isRequired\n};\n\nexport default Counter;\n"}, {"instruction": "Generate a custom React component called \"UrlColumn\" that displays a table cell containing a URL field. The URL field should be clickable and open the link in a new tab or window when clicked. If the URL doesn't specify a protocol (e.g., \"http\" or \"https\"), assume \"http\" for the link href. The component should use the provided \"ItemsTableValue\" and \"ItemsTableCell\" components for styling.", "output": "import React from 'react';\nimport ItemsTableCell from '../../components/ItemsTableCell';\nimport ItemsTableValue from '../../components/ItemsTableValue';\n\nvar UrlColumn = React.createClass({\n\tdisplayName: 'UrlColumn',\n\tpropTypes: {\n\t\tcol: React.PropTypes.object,\n\t\tdata: React.PropTypes.object,\n\t},\n\trenderValue () {\n\t\tvar value = this.props.data.fields[this.props.col.path];\n\t\tif (!value) return;\n\n\t\t// if the value doesn't start with a prototcol, assume http for the href\n\t\tvar href = value;\n\t\tif (href && !/^(mailto\\:)|(\\w+\\:\\/\\/)/.test(href)) {\n\t\t\thref = 'http://' + value;\n\t\t}\n\n\t\t// strip the protocol from the link if it's http(s)\n\t\tvar label = value.replace(/^https?\\:\\/\\//i, '');\n\n\t\treturn (\n\t\t\t<ItemsTableValue to={href} padded exterior field={this.props.col.type}>\n\t\t\t\t{label}\n\t\t\t</ItemsTableValue>\n\t\t);\n\t},\n\trender () {\n\t\treturn (\n\t\t\t<ItemsTableCell>\n\t\t\t\t{this.renderValue()}\n\t\t\t</ItemsTableCell>\n\t\t);\n\t},\n});\n\nmodule.exports = UrlColumn;\n"}, {"instruction": "Generate a React component that allows a user to create a new poll, including a title and multiple choices. The component should handle user input for both the title and choices, and allow users to add or delete choices as needed. When the user submits the form, the component should send the poll data to a server using a WebSocket connection.", "output": "'use strict';\n\nimport React from 'react';\nimport NewChoiceInput from './NewChoiceInput';\nimport { communicateNewPoll } from '../actions/pollActions';\n\nexport default class NewPollPage extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      name: '',\n      choices: ['']\n    };\n  }\n\n  handleTitleChange = (e) => {\n    this.setState({ name: e.target.value });\n  }\n\n  updateInput = (value, index) => {\n    this.setState({\n      choices: this.state.choices.map((v, i) => i === index ? value : v)\n    });\n  }\n\n  addNewChoice = () => {\n    this.setState({ choices: [...this.state.choices, ''] });\n  }\n\n  deleteChoice = (idx) => {\n    this.setState({ choices: this.state.choices.filter((v, i) => i !== idx) });\n  }\n\n  submitPoll = () => {\n    const newPoll = {\n      name: this.state.name,\n      choices: this.state.choices.map(val => ({ choice: val, votes: 0 })),\n      // dateCreated is set by the server\n      owner: this.props.user._id\n    };\n    const newPollData = communicateNewPoll(newPoll);\n    this.props.ws.send(JSON.stringify(newPollData));\n    this.props.history.push('/');\n  }\n\n  render () {\n    return (\n      <div className=\"app-root\">\n        <h1>New Poll</h1>\n        <label>\n          Title:\n          <input type=\"text\" value={this.state.name}\n            onChange={this.handleTitleChange}\n          />\n        </label>\n        <h4>Options:</h4>\n        <button className=\"btn\" onClick={this.addNewChoice}>New choice</button>\n        <br/>\n        {\n          this.state.choices.map((choice, idx) => (\n            <NewChoiceInput key={idx} idx={idx} val={this.state.choices[idx]}\n              updateInput={this.updateInput} deleteChoice={this.deleteChoice}\n            />\n          ))\n        }\n        <br/>\n        <button className=\"btn btn-info\" onClick={this.submitPoll}>Submit</button>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Generate the code snippet for a React form component that allows users to register a new pet. The form should have fields for the pet's name, ID, age, and breed. When the form is submitted, the pet's information should be sent to the registerAnimal action creator.", "output": "import './Animal.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { registerAnimal } from '../../../actions/animals';\n\nclass AnimalForm extends Component {\n  renderField(field) {\n    const { meta: { touched, error } } = field;\n    const className = '';\n    return (\n      <div className={className}>\n        <input className=\"form-control\"\n          type={field.type}\n          placeholder={field.placeholder}\n          {...field.input} />\n        <div className=\"text-help\">\n          {touched ? error : ''}\n        </div>\n      </div>\n    );\n  }\n\n  onSubmit(values) {\n    this.props.registerAnimal(values)\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <div className={'animalForm'}>\n        <h3>Cadastre seu pet</h3>\n        <form onSubmit={handleSubmit(this.onSubmit.bind(this))} className={'form-inline'}>\n          <Field\n            name=\"name\"\n            label=\"Nome\"\n            placeholder=\"Nome\"\n            type=\"text\"\n            component={this.renderField}\n          />\n          <Field\n            name=\"id\"\n            label=\"ID\"\n            placeholder=\"ID\"\n            type=\"text\"\n            component={this.renderField}\n          />\n          <Field\n            name=\"age\"\n            label=\"Idade\"\n            placeholder=\"Idade\"\n            type=\"text\"\n            component={this.renderField}\n          />\n          <Field\n            name=\"breed\"\n            label=\"Ra\u00e7a\"\n            placeholder=\"Ra\u00e7a\"\n            component={this.renderField}\n          />\n          <button type=\"submit\" className=\"btn btn-primary\">Entrar</button>\n          <Link to=\"/\" className=\"btn btn-danger\">Cancelar</Link>\n        </form>\n      </div>\n\n    );\n  }\n}\n\nexport default reduxForm({\n    form: 'Animal'\n})(\n    connect(null, {registerAnimal})(AnimalForm)\n);"}, {"instruction": "Create a React component called \"Header\" that includes a brand logo, navigation links, and a banner with a title and description. Use CSS styles to format the header.", "output": "/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */\n\nimport React, { Component } from 'react';\nimport styles from './Header.css';\nimport withStyles from '../../decorators/withStyles';\nimport Link from '../Link';\nimport Navigation from '../Navigation';\n\n@withStyles(styles)\nclass Header extends Component {\n\n  render() {\n    return (\n      <div className=\"Header\">\n        <div className=\"Header-container\">\n          <a className=\"Header-brand\" href=\"/\" onClick={Link.handleClick}>\n            <img className=\"Header-brandImg\" src={require('./logo-small.png')} width=\"38\" height=\"38\" alt=\"React\" />\n            <span className=\"Header-brandTxt\">Your Company</span>\n          </a>\n          <Navigation className=\"Header-nav\" />\n          <div className=\"Header-banner\">\n            <h1 className=\"Header-bannerTitle\">React</h1>\n            <p className=\"Header-bannerDesc\">Complex web apps made easy</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Header;\n"}, {"instruction": "Create a React component that renders a popover containing a form with the specified props.", "output": "import React from 'react';\nimport {Popover} from '@material-ui/core';\nimport ItemForm from './ItemForm'\n\nexport default function FormPopver(props) {\n    return (\n        <div>\n            <Popover\n                open={props.open}\n                anchorReference={props.anchorReference}\n                anchorPosition={props.anchorPosition}\n                anchorEl={props.anchorEl}\n                onClose={props.onClose}\n                anchorOrigin={props.anchorOrigin}\n                transformOrigin={props.transformOrigin}\n            >\n                <ItemForm\n                    onClose={props.onClose}\n                    onAddItem={props.onAddItem}\n                    onEditItem={props.onEditItem}\n                    onRemoveItem={props.onRemoveItem}\n                    data={props.data}\n                    isNewItem={props.isNewItem}\n                    startDate={props.startDate}\n                    travelObjects={props.travelObjects}\n                    isFromSuggestions={props.isFromSuggestions}\n                />\n            </Popover>\n        </div>\n    )\n}"}, {"instruction": "Create a React component called Row that renders a row element with a custom component class. The component should have a default component class of 'div' and should accept any props passed to it.", "output": "import React from 'react';\nimport classNames from 'classnames';\nimport CustomPropTypes from './utils/CustomPropTypes';\n\nconst Row = React.createClass({\n  propTypes: {\n    /**\n     * You can use a custom element for this component\n     */\n    componentClass: CustomPropTypes.elementType\n  },\n\n  getDefaultProps() {\n    return {\n      componentClass: 'div'\n    };\n  },\n\n  render() {\n    let ComponentClass = this.props.componentClass;\n\n    return (\n      <ComponentClass {...this.props} className={classNames(this.props.className, 'row')}>\n        {this.props.children}\n      </ComponentClass>\n    );\n  }\n});\n\nexport default Row;\n"}, {"instruction": "Generate a React component that renders a set of bars in a sparkline graph. The component should take in a list of data points, a width, a height, and a style. The bars should be filled with the specified style.", "output": "import React from 'react';\n\nexport default class SparklinesBars extends React.Component {\n\n    static propTypes = {\n        style: React.PropTypes.object\n    };\n\n    static defaultProps = {\n        style: { fill: 'slategray' }\n    };\n\n    render() {\n\n        const { points, width, height, margin, style } = this.props;\n        const barWidth = points.length >= 2 ? points[1].x - points[0].x : 0;\n\n        return (\n            <g>\n                {points.map((p, i) =>\n                    <rect\n                        key={i}\n                        x={p.x} y={p.y}\n                        width={barWidth} height={height - p.y}\n                        style={style} />\n                )}\n            </g>\n        )\n    }\n}\n"}, {"instruction": "Create a component in React that uses velocity animations to fade in and out when mounting and unmounting.", "output": "import { css } from '../css';\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Velocity from 'velocity-animate';\n\n// const uuid = require('uuid');\n\n\nclass AnimatedBox extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { mounted: false };\n    }\n\n    componentWillMount() {\n        // silence\n    }\n\n    componentWillAppear(callback) {\n        // const el = findDOMNode(this);\n        const el = findDOMNode(this);\n        Velocity(el, { opacity: 1 }, { visibility: 'visible' }, 800)\n        .then(() => {\n            this.setState({ mounted: true });\n            callback();\n        });\n    }\n\n    componentWillEnter(callback) {\n        // const el = findDOMNode(this);\n        callback();\n    }\n\n    componentDidEnter() {\n        const el = findDOMNode(this);\n        Velocity(el, { opacity: 1 }, { visibility: 'visible' }, 800)\n        .then(() => {\n            this.setState({ mounted: true });\n        });\n    }\n\n    componentWillLeave(callback) {\n        const el = findDOMNode(this);\n        Velocity(el, { opacity: 0 }, { visibility: 'hidden' }, { delay: 250, duration: 800 })\n        .then(() => {\n            this.setState({ mounted: false });\n            callback();\n        });\n    }\n\n    render() {\n        const children = !!this.props.children ? this.props.children : null;\n        return (\n            <div className={css.baseCSS.animatedBox + ' ' + css.baseCSS.fullHeight}>\n                {children}\n            </div>\n        );\n    }\n}\n\nAnimatedBox.propTypes = {\n    id: React.PropTypes.string,\n    children: React.PropTypes.node\n};\n\nexport default AnimatedBox;\n"}, {"instruction": "Generate a React Native code snippet that displays a welcome message and instructions on the screen. The message should say \"Welcome to React Native!\" and the instructions should say \"To get started, edit index.android.js\\nDouble tap R on your keyboard to reload, Shake or press menu button for dev menu\". The code should be well-structured and follow best practices.", "output": "/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n\nexport default class Livefyy extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>\n          Welcome to React Native!\n        </Text>\n        <Text style={styles.instructions}>\n          To get started, edit index.android.js\n        </Text>\n        <Text style={styles.instructions}>\n          Double tap R on your keyboard to reload,{'\\n'}\n          Shake or press menu button for dev menu\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n\nAppRegistry.registerComponent('Livefyy', () => Livefyy);\n"}, {"instruction": "Generate the React code for an SVG icon component, which displays a home icon, and accepts props for styling and color.", "output": "import React from 'react';\nimport {blue500, red500, greenA200} from 'material-ui/styles/colors';\nimport SvgIcon from 'material-ui/SvgIcon';\n\nconst iconStyles = {\n  marginRight: 24,\n};\n\nconst HomeIcon = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n  </SvgIcon>\n);\n\nconst SvgIconExampleSimple = () => (\n  <div>\n    <HomeIcon style={iconStyles} />\n    <HomeIcon style={iconStyles} color={blue500} />\n    <HomeIcon style={iconStyles} color={red500} hoverColor={greenA200} />\n  </div>\n);\n\nexport default SvgIconExampleSimple;\n"}, {"instruction": "Write the React component code for the Material Design icon ImageFilterVintage.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageFilterVintage = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M18.7 12.4c-.28-.16-.57-.29-.86-.4.29-.11.58-.24.86-.4 1.92-1.11 2.99-3.12 3-5.19-1.79-1.03-4.07-1.11-6 0-.28.16-.54.35-.78.54.05-.31.08-.63.08-.95 0-2.22-1.21-4.15-3-5.19C10.21 1.85 9 3.78 9 6c0 .32.03.64.08.95-.24-.2-.5-.39-.78-.55-1.92-1.11-4.2-1.03-6 0 0 2.07 1.07 4.08 3 5.19.28.16.57.29.86.4-.29.11-.58.24-.86.4-1.92 1.11-2.99 3.12-3 5.19 1.79 1.03 4.07 1.11 6 0 .28-.16.54-.35.78-.54-.05.32-.08.64-.08.96 0 2.22 1.21 4.15 3 5.19 1.79-1.04 3-2.97 3-5.19 0-.32-.03-.64-.08-.95.24.2.5.38.78.54 1.92 1.11 4.2 1.03 6 0-.01-2.07-1.08-4.08-3-5.19zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z\"/>\n  </SvgIcon>\n);\nImageFilterVintage = pure(ImageFilterVintage);\nImageFilterVintage.displayName = 'ImageFilterVintage';\nImageFilterVintage.muiName = 'SvgIcon';\n\nexport default ImageFilterVintage;\n"}, {"instruction": "Create a React component that renders an SVG icon with a drag handle shape. The icon should have a fill color that can be customized via props.", "output": "import React from 'react';\nimport { string } from 'prop-types';\n\nconst DragHandle = ({ fill, ...props }) =>\n  <svg\n    fill={fill}\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    width=\"24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <defs>\n      <path d=\"M0 0h24v24H0V0z\" id=\"a\" />\n    </defs>\n    <clipPath id=\"b\">\n      <use overflow=\"visible\" />\n    </clipPath>\n    <path d=\"M20 9H4v2h16V9zM4 15h16v-2H4v2z\" />\n  </svg>;\n\nDragHandle.propTypes = {\n  fill: string,\n};\n\nDragHandle.defaultProps = {\n  fill: 'currentColor',\n};\n\nexport default DragHandle;\n"}, {"instruction": "Design a user interface that would allow a user to enter a search query or create a new order. The interface should include a search input field with a search icon, a horizontal divider with the text \"Or\", and a button with a label and an icon.", "output": "import React from 'react'\nimport { Button, Divider, Input, Segment } from 'semantic-ui-react'\n\nconst DividerExampleHorizontal = () => (\n  <Segment basic textAlign='center'>\n    <Input\n      action={{ color: 'blue', content: 'Search' }}\n      icon='search'\n      iconPosition='left'\n      placeholder='Order #'\n    />\n\n    <Divider horizontal>Or</Divider>\n\n    <Button\n      color='teal'\n      content='Create New Order'\n      icon='add'\n      labelPosition='left'\n    />\n  </Segment>\n)\n\nexport default DividerExampleHorizontal\n"}, {"instruction": "Generate a React code snippet that creates an application container using React Hot Loader, rendering an App component to the root HTML element.", "output": "import React from 'react'\nimport { render } from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from './components/App'\n\nfunction renderHTML() {\n  render(\n    <AppContainer>\n      <App />\n    </AppContainer>,\n    document.getElementById('root')\n  )\n}\n\nrenderHTML()\n\nif (module.hot) {\n  module.hot.accept('./components/App', () => {\n    renderHTML()\n  })\n}\n"}, {"instruction": "Provide a React code snippet that displays a table with data insertion capabilities, allowing users to add new rows. The table should include editable columns with different input types, such as text areas, dropdowns, and checkboxes.", "output": "/* eslint max-len: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\n\nconst jobs = [];\nconst jobTypes = [ 'A', 'B', 'C', 'D' ];\n\nfunction addJobs(quantity) {\n  const startId = jobs.length;\n  for (let i = 0; i < quantity; i++) {\n    const id = startId + i;\n    jobs.push({\n      id: id,\n      name: 'Item name ' + id,\n      type: 'B',\n      active: i % 2 === 0 ? 'Y' : 'N'\n    });\n  }\n}\n\naddJobs(5);\n\nexport default class DataInsertTypeTable extends React.Component {\n  render() {\n    return (\n      <BootstrapTable data={ jobs } insertRow={ true }>\n          <TableHeaderColumn dataField='id' isKey={ true }>Job ID</TableHeaderColumn>\n          <TableHeaderColumn dataField='name' editable={ { type: 'textarea' } }>Job Name</TableHeaderColumn>\n          <TableHeaderColumn dataField='type' editable={ { type: 'select', options: { values: jobTypes } } }>Job Type</TableHeaderColumn>\n          <TableHeaderColumn dataField='active' editable={ { type: 'checkbox', options: { values: 'Y:N' } } }>Active</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}\n"}, {"instruction": "Create a React component that renders an SVG icon with two horizontal lines. The component should be pure and have a display name of 'EditorShortText'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet EditorShortText = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M4 9h16v2H4zm0 4h10v2H4z\"/>\n  </SvgIcon>\n);\nEditorShortText = pure(EditorShortText);\nEditorShortText.displayName = 'EditorShortText';\nEditorShortText.muiName = 'SvgIcon';\n\nexport default EditorShortText;\n"}, {"instruction": "Create a description for a React component called \"Counter\" which will display the current count, and provide buttons to increment or decrement the count.", "output": "// @flow\nimport React from 'react';\nimport Button from '../Button';\n\ntype Props = {\n  counterApp: {\n    count: number\n  },\n  increment: CounterAction,\n  decrement: CounterAction\n};\n\nconst Counter = (props: Props) =>\n  <div>\n    Counter: {props.counterApp.count} <br />\n    <Button onClick={props.increment} primary> + </Button>\n    <Button onClick={props.decrement}> - </Button>\n  </div>;\n\nexport default Counter;\n"}, {"instruction": "Create React Router v4 code to define routes for an application with a home page, a users page, a 'create user' page, and a 404 page.", "output": "import React from 'react';\nimport {Route, IndexRoute} from 'react-router';\n\nimport App from './containers/App';\nimport Home from './containers/HomePage';\nimport Users from './containers/Users';\nimport AddUser from './containers/AddUser';\nimport NotFound from './containers/NotFound';\n\nexport default (\n  <Route path=\"/\" component={App}>\n    <IndexRoute component={Home} />\n    <Route path=\"/users\" component={Users} />\n    <Route path=\"/create/user\" component={AddUser} />\n    <Route path=\"*\" component={NotFound} />\n  </Route>\n)\n"}, {"instruction": "Generate a React code snippet that displays a section of examples for the \"Image\" component. Include examples for an image, an image wrapped in a div, and an image link. Provide a brief description for each example.", "output": "import React from 'react'\nimport ComponentExample from 'docs/app/Components/ComponentDoc/ComponentExample'\nimport ExampleSection from 'docs/app/Components/ComponentDoc/ExampleSection'\n\nimport { Message } from 'semantic-ui-react'\n\nconst ImageTypesExamples = () => (\n  <ExampleSection title='Types'>\n    <ComponentExample\n      title='Image'\n      description='An image.'\n      examplePath='elements/Image/Types/ImageExampleImage'\n    >\n      <Message>\n        Unless a size is specified, images will use the original dimensions of\n        the image up to the size of its container.\n      </Message>\n    </ComponentExample>\n    <ComponentExample\n      description='An image can render wrapped in a div.ui.image as alternative HTML markup.'\n      examplePath='elements/Image/Types/ImageExampleWrapped'\n    />\n    <ComponentExample\n      title='Image Link'\n      description='An image can be formatted to link to other content.'\n      examplePath='elements/Image/Types/ImageExampleLink'\n    />\n  </ExampleSection>\n)\n\nexport default ImageTypesExamples\n"}, {"instruction": "Generate the code to set up navigation for a React application, including functions for navigating to a specific route, going back, and setting parameters. Provide a reference to the navigation container to use the navigation functions within the component.", "output": "import React from 'react';\n\nexport const conferenceNavigationRef = React.createRef();\n\n/**\n * User defined navigation action included inside the reference to the container.\n *\n * @param {string} name - Destination name of the route that has been defined somewhere.\n * @param {Object} params - Params to pass to the destination route.\n * @returns {Function}\n */\nexport function navigate(name: string, params?: Object) {\n    return conferenceNavigationRef.current?.navigate(name, params);\n}\n\n/**\n * User defined navigation action included inside the reference to the container.\n *\n * @returns {Function}\n */\nexport function goBack() {\n    return conferenceNavigationRef.current?.goBack();\n}\n\n/**\n * User defined navigation action included inside the reference to the container.\n *\n * @param {Object} params - Params to pass to the destination route.\n * @returns {Function}\n */\nexport function setParams(params: Object) {\n    return conferenceNavigationRef.current?.setParams(params);\n}\n\n"}, {"instruction": "Provide a code snippet of a React component that uses the React-Bootstrap-Table library to create a sortable table with custom sorting styles. The table should have three columns: Product ID, Product Name, and Product Price. The Product Name column should be sortable in both ascending and descending order, and the custom sorting styles should be applied to the header cell.", "output": "/* eslint max-len: 0 */\n/* eslint no-unused-vars: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\n\nconst products = [];\n\nfunction addProducts(quantity) {\n  const startId = products.length;\n  for (let i = 0; i < quantity; i++) {\n    const id = startId + i;\n    products.push({\n      id: id,\n      name: 'Item name ' + id,\n      price: 2100 + i\n    });\n  }\n}\n\naddProducts(5);\n\nexport default class SortTable extends React.Component {\n\n  customSortStyle = (order, dataField) => {\n    if (order === 'desc') {\n      return 'sort-desc';\n    }\n    return 'sort-asc';\n  }\n\n  render() {\n    return (\n      <div>\n        <BootstrapTable ref='table' data={ products }>\n          <TableHeaderColumn dataField='id' isKey dataSort sortHeaderColumnClassName='sorting'>Product ID</TableHeaderColumn>\n          <TableHeaderColumn dataField='name' dataSort sortHeaderColumnClassName={ this.customSortStyle }>Product Name</TableHeaderColumn>\n          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>\n        </BootstrapTable>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component utilising Material UI's `SvgIcon` that renders an icon with a specific path. Implement the `pure` function from the `recompose` library to enhance performance, and assign a meaningful name to the component for easy identification.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from 'material-ui/SvgIcon';\n\nlet BorderInner = props =>\n  <SvgIcon {...props}>\n    <path d=\"M3 21h2v-2H3v2zm4 0h2v-2H7v2zM5 7H3v2h2V7zM3 17h2v-2H3v2zM9 3H7v2h2V3zM5 3H3v2h2V3zm12 0h-2v2h2V3zm2 6h2V7h-2v2zm0-6v2h2V3h-2zm-4 18h2v-2h-2v2zM13 3h-2v8H3v2h8v8h2v-8h8v-2h-8V3zm6 18h2v-2h-2v2zm0-4h2v-2h-2v2z\" />\n  </SvgIcon>;\n\nBorderInner = pure(BorderInner);\nBorderInner.muiName = 'SvgIcon';\n\nexport default BorderInner;\n"}, {"instruction": "Create a React application with a router to direct to two pages, one for development and another for testing, and have a basic stylesheet.", "output": "// @flow\n\nimport React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport Dev from './containers/Dev';\nimport Test from './containers/Test';\nimport './stylesheets/styles.scss';\n\nconst App = () => (\n  <Router basename=\"/\">\n    <div>\n      <Route exact path=\"/\" render={(props) => <Dev {...props} />} />\n      <Route path=\"/testing\" render={(props) => <Test {...props} />} />\n    </div>\n  </Router>\n);\n\nexport default App;\n"}, {"instruction": "Generate a React class component called TableCol that inherits from the BaseMixin, ElementaryMixin, and ColorSchemaMixin mixins. It should have the following propTypes: span. It should have a default span of null. It should check that its parentTagName is UU5.Bricks.Table.ColGroup. It should have a getColorSchema function and a getClassName function. It should implement a _getMainProps function that returns the main props for the component, including the className and span. It should render a <col> element with the main props.", "output": "import React from 'react';\nimport {BaseMixin, ElementaryMixin, ColorSchemaMixin} from './../common/common.js';\n\nimport './table-col.less';\n\nexport default React.createClass({\n\n  //@@viewOn:mixins\n  mixins: [\n    BaseMixin,\n    ElementaryMixin,\n    ColorSchemaMixin\n  ],\n  //@@viewOff:mixins\n\n  //@@viewOn:statics\n  statics: {\n    tagName: 'UU5.Bricks.Table.Col',\n    classNames: {\n      main: 'uu5-bricks-table-col',\n      bg: 'uu5-common-bg'\n    },\n    defaults: {\n      parentTagName: 'UU5.Bricks.Table.ColGroup'\n    }\n  },\n  //@@viewOff:statics\n\n  //@@viewOn:propTypes\n  propTypes: {\n    span: React.PropTypes.number\n  },\n  //@@viewOff:propTypes\n\n  //@@viewOn:getDefaultProps\n  getDefaultProps: function () {\n    return {\n      span: null\n    };\n  },\n  //@@viewOff:getDefaultProps\n\n  //@@viewOn:standardComponentLifeCycle\n  componentWillMount: function () {\n    this.checkParentTagName(this.getDefault().parentTagName);\n  },\n  //@@viewOff:standardComponentLifeCycle\n\n  //@@viewOn:interface\n  //@@viewOff:interface\n\n  //@@viewOn:overridingMethods\n  //@@viewOff:overridingMethods\n\n  //@@viewOn:componentSpecificHelpers\n  _getMainProps: function () {\n    var props = this.buildMainAttrs();\n    this.getColorSchema() && (props.className += ' ' + this.getClassName().bg);\n    this.props.span && (props.span = this.props.span);\n    return props;\n  },\n  //@@viewOff:componentSpecificHelpers\n\n  //@@viewOn:render\n  render: function () {\n    return <col {...this._getMainProps()} />;\n  }\n  //@@viewOff:render\n});"}, {"instruction": "Create a React component that renders an example section for a component documentation page, with the following details:\n- Title: \"States\"\n- Child component: ComponentExample, with the following props:\n  - Title: \"Active\"\n  - Description: \"An embed can be active.\"\n  - Example path: modules/Embed/States/EmbedExampleActive", "output": "import React from 'react'\n\nimport ComponentExample from 'docs/app/Components/ComponentDoc/ComponentExample'\nimport ExampleSection from 'docs/app/Components/ComponentDoc/ExampleSection'\n\nconst EmbedStatesExamples = () => (\n  <ExampleSection title='States'>\n    <ComponentExample\n      title='Active'\n      description='An embed can be active.'\n      examplePath='modules/Embed/States/EmbedExampleActive'\n    />\n  </ExampleSection>\n)\n\nexport default EmbedStatesExamples\n"}, {"instruction": "Create the top-level React component of a dashboard application that displays the range per charge of a Tesla car. The application should include a header, a form to configure the car's settings, a notice area, and containers for the following components: car model selector, statistics display, speed counter, temperature counter, climate control, and wheels selector.", "output": "import React, { Component } from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport TeslaCarContainer from './containers/TeslaCarContainer';\nimport TeslaStatsContainer from './containers/TeslaStatsContainer';\nimport TeslaSpeedCounterContainer from './containers/TeslaSpeedCounterContainer';\nimport TeslaTempCounterContainer from './containers/TeslaTempCounterContainer';\nimport TeslaClimateContainer from './containers/TeslaClimateContainer';\nimport TeslaWheelsContainer from './containers/TeslaWheelsContainer';\nimport TeslaNotice from './components/TeslaNotice/TeslaNotice';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport appReducer from './reducers/teslaRangeApp';\n\nconst store = createStore(appReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Top-level component of entire app\n */\nclass App extends Component {\n  render() {\n    return (\n        <Provider store={store}>\n            <div>\n                <Header />\n                <div className=\"wrapper\">\n                    <form className=\"tesla-battery\">\n                        <h1>Range Per Charge</h1>\n                        <TeslaCarContainer />\n                        <TeslaStatsContainer />\n                        <div className=\"tesla-controls cf\">\n                            <TeslaSpeedCounterContainer />\n                            <div className=\"tesla-climate-container cf\">\n                                <TeslaTempCounterContainer />\n                                <TeslaClimateContainer />\n                            </div>\n                            <TeslaWheelsContainer />\n                        </div>\n                        <TeslaNotice />\n                    </form>\n                </div>\n            </div>\n        </Provider>\n    );\n  }\n}\n\nexport default App;\n"}, {"instruction": "Generate the code to change the title and render the main component when a user accepts an invitation.", "output": "/**\n * External Dependencies\n */\nimport React from 'react';\n\n/**\n * Internal Dependencies\n */\nimport i18n from 'lib/mixins/i18n';\nimport titleActions from 'lib/screen-title/actions';\nimport Main from './main';\n\nexport default {\n\tacceptInvite( context ) {\n\t\ttitleActions.setTitle( i18n.translate( 'Accept Invite', { textOnly: true } ) );\n\n\t\tReact.unmountComponentAtNode( document.getElementById( 'secondary' ) );\n\n\t\tReact.render(\n\t\t\tReact.createElement( Main, context.params ),\n\t\t\tdocument.getElementById( 'primary' )\n\t\t);\n\t}\n};\n"}, {"instruction": "Describe how React's TabPane component should be deprecated and replaced with the Tab component, including where to find more information about the deprecation.", "output": "import React from 'react';\nimport deprecationWarning from './utils/deprecationWarning';\nimport Tab from './Tab';\n\nconst TabPane = React.createClass({\n  componentWillMount() {\n    deprecationWarning(\n      'TabPane', 'Tab',\n      'https://github.com/react-bootstrap/react-bootstrap/pull/1091'\n    );\n  },\n\n  render() {\n    return (\n      <Tab {...this.props} />\n    );\n  }\n});\n\nexport default TabPane;\n"}, {"instruction": "Generate the React component that will render a tooltip button for the quote editor, which when clicked, prompts the user to add a LIMC (Linked Indirect + Margin of Credit) block.", "output": "import React from 'react'\nimport autoBind from 'react-autobind';\nimport { connect } from 'react-redux';\n\n// redux\nimport editorActions from '../../../../actions';\n\n// component\nimport TooltipItemButton from '../TooltipItemButton';\n\n\nclass TooltipLIMC extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tautoBind(this);\n\t}\n\n\tasync promptForLIMC(e) {\n\t\te.preventDefault();\n\t\tconst { setTooltip, tooltip } = this.props;\n\t\tawait setTooltip({ ...tooltip, mode: 'limc' });\n\t}\n\n\tisActive() {\n\t\tconst { editorState } = this.props;\n\n\t\tif (!editorState) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet selection = editorState.getSelection();\n\t\tlet activeBlockType = editorState\n\t\t\t.getCurrentContent()\n\t\t\t.getBlockForKey(selection.getStartKey())\n\t\t\t.getType();\n\t\treturn 'LIMC' === activeBlockType;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<TooltipItemButton\n\t\t\t\tclassName={`${this.isActive() ? 'active' : ''}`}\n\t\t\t\tonClick={this.promptForLIMC}\n\t \t\t>\n\t\t\t\tLIMC\n\t\t\t</TooltipItemButton>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\t...state.editor,\n});\n\nconst mapDispatchToProps = dispatch => ({\n\tsetTooltip: (tooltip) => {\n\t\tdispatch(editorActions.setTooltip(tooltip));\n\t},\n});\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps,\n)(TooltipLIMC);\n"}, {"instruction": "Provide a React component that accepts an onLogout function handler and when triggered, it fires the logout function while displaying a Logout button with customizable styling and text.", "output": "import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { logout } from '../actions/';\nimport { Button } from '../common';\n\nconst StyledLogoutButton = styled(Button)`\n  background-color: ${props => props.theme.primaryColour};\n  color: white;\n  border: 1px solid white;\n  border-radius: 4px;\n  font-size: 20px;\n`;\n\nconst LogoutButton = ({ onLogout }) => (\n  <StyledLogoutButton onClick={onLogout}>Logout</StyledLogoutButton>\n);\n\nconst mapDispatchToProps = dispatch => ({\n  onLogout: () => dispatch(logout()),\n});\n\nexport default connect(() => ({}), mapDispatchToProps)(LogoutButton);\n"}, {"instruction": "Provide a React class component definition. The class should have properties and methods typed with a generic type T. Include a defaultProps declaration, a static state declaration, an instance property with the type T but no initializer, an instance property with the type T and an initializer of 5, and an instance method with no arguments and no return value. Also include an expression that defines an anonymous subclass of React.Component with the same properties and methods as the class component.", "output": "// @flow\n\nimport React from 'react';\n\nclass MyComponent extends React.Component {\n  constructor() {}\n\n  defaultProps: T;\n  static state: T;\n  a: T;\n  b = 5;\n  c: T = 5;\n  method() {}\n}\n\nconst expression = () =>\n  class extends React.Component {\n    constructor() {}\n\n    defaultProps: T;\n    static state: T;\n    a: T;\n    b = 5;\n    c: T = 5;\n    method() {}\n  }\n"}, {"instruction": "Create a React component that displays an error message and severity level in a panel. The message should be displayed between a `<h5>` tag and a `<p>` tag. The panel should have a red border if the severity is \"error\" or a yellow border if the severity is \"warning\".", "output": "import React from 'react';\nimport cx from 'suitcx';\n\nexport default function Error({ message, severity }) {\n  return (\n    <div className={cx('Panel')}>\n      <div className=\"top-bar\">\n        <div className=\"top-bar-left\">\n          <div className=\"menu-text\">Error</div>\n        </div>\n      </div>\n      <div className={`callout ${severity}`}>\n        <h5>Unknown panel</h5>\n        <p>\n          {message}\n        </p>\n      </div>\n    </div>\n  );\n}\n"}, {"instruction": "Create a React component named `Route` that declares which components should be rendered based on the URL. This component should have the following features:\n\n* It should be used to define a nested tree structure of routes.\n* It should search the tree to find a route that matches the URL.\n* It should render the components associated with the active routes.\n* It should include a static method called `createRouteFromReactElement` that converts a React element into a route.\n* It should accept the following props:\n    * `path`: A string representing the URL pattern.\n    * `ignoreScrollBehavior`: A boolean indicating whether to ignore the scroll behavior.\n    * `handler`: A deprecated component prop.\n    * `component`: A component prop.\n    * `components`: A components prop.\n    * `getComponents`: A function prop.", "output": "import React from 'react'\nimport warning from 'warning'\nimport invariant from 'invariant'\nimport { createRouteFromReactElement } from './RouteUtils'\nimport { component, components } from './PropTypes'\n\nconst { string, bool, func } = React.PropTypes\n\n/**\n * A <Route> is used to declare which components are rendered to the page when\n * the URL matches a given pattern.\n *\n * Routes are arranged in a nested tree structure. When a new URL is requested,\n * the tree is searched depth-first to find a route whose path matches the URL.\n * When one is found, all routes in the tree that lead to it are considered\n * \"active\" and their components are rendered into the DOM, nested in the same\n * order as they are in the tree.\n */\nconst Route = React.createClass({\n\n  statics: {\n\n    createRouteFromReactElement(element) {\n      const route = createRouteFromReactElement(element)\n\n      if (route.handler) {\n        warning(\n          false,\n          '<Route handler> is deprecated, use <Route component> instead'\n        )\n\n        route.component = route.handler\n        delete route.handler\n      }\n\n      return route\n    }\n  \n  },\n\n  propTypes: {\n    path: string,\n    ignoreScrollBehavior: bool,\n    handler: component, // deprecated\n    component,\n    components,\n    getComponents: func\n  },\n\n  render() {\n    invariant(\n      false,\n      '<Route> elements are for router configuration only and should not be rendered'\n    )\n  }\n\n})\n\nexport default Route\n"}, {"instruction": "Create a React component for an SVG icon representing a muted volume. The icon should include a path with specific coordinates to draw the shape. Additionally, set the display name and muiName properties for the component.", "output": "import React from 'react';\nimport SvgIcon from '../../SvgIcon';\n\nconst AvVolumeOff = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\"/>\n  </SvgIcon>\n);\nAvVolumeOff.displayName = 'AvVolumeOff';\nAvVolumeOff.muiName = 'SvgIcon';\n\nexport default AvVolumeOff;\n"}, {"instruction": "Create a React component called VideoListItem that displays a video's thumbnail, title, and channel title in a Materialize CSS card. When clicked, the component should call a function to select the video.", "output": "import React from 'react';\n\nconst VideoListItem = ({video, onVideoSelect}) => {\n  const imageUrl      = video.snippet.thumbnails.high.url;\n  const titleVideo    = video.snippet.title;\n  const channelTitle  = video.snippet.channelTitle;\n  // const dataPublish   = video.snippet.publishedAt;\n\n  return(\n    <div style={{cursor: 'pointer'}} className=\"col s12 m12 l11 offset-l1\" onClick={() => onVideoSelect(video)}>\n        <div className=\"card-panel grey lighten-5 z-depth-1\" >\n          <div className=\"row valign-wrapper\">\n            <div className=\"col s6\">\n              <img src={imageUrl} height={100} width={120} alt=\"\"/>\n            </div>\n            <div className=\"col s10\">\n              <h6><strong>{titleVideo}</strong></h6>\n              <span className=\"black-text\">\n                  {channelTitle}<br/>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n};\n\nexport default VideoListItem;\n"}, {"instruction": "Create a React component that pretty prints a JSON object. The component should have a `form` prop that is a Cerebral `state` object. The component should also have a `showPanel` prop that is a boolean. If the `showPanel` prop is `false`, the component should return null. Otherwise, the component should determine if the form is valid using `isValidForm` from `cerebral-forms`. If the form is valid, the component should use `formToJSON` from `cerebral-forms` to convert the form to a JSON object. Otherwise, the component should use `getInvalidFormFields` from `cerebral-forms` to get the invalid form fields and extract the values from them. The component should highlight the syntax of the JSON object using the `syntaxHighlight` helper. The component should return a div with a div containing the pretty-printed JSON object. The div containing the pretty-printed JSON object should have a class that is either `successPane` or `errorPane` depending on whether the form is valid.", "output": "import React from 'react'\nimport {connect} from 'cerebral/react'\nimport {state, props} from 'cerebral/tags'\nimport {isValidForm, getInvalidFormFields, formToJSON} from 'cerebral-forms'\nimport {css} from 'aphrodite'\nimport syntaxHighlight from '../../helpers/syntaxHighlight'\nimport styles from './styles'\n\nexport default connect({\n  form: state`${props`currentView`}.form.**`,\n  showPanel: state`app.settings.showErrors`\n},\n  function PrettyPrint ({form, showPanel}) {\n    if (!showPanel) {\n      return null\n    }\n    const isValid = isValidForm(form)\n    let invalidFormFields = getInvalidFormFields(form)\n    let result = Object.keys(invalidFormFields).reduce((acc, field) => {\n      const {value} = invalidFormFields[field]\n      acc[field] = {\n        value\n      }\n      return acc\n    }, {})\n    if (isValid) {\n      result = formToJSON(form)\n    }\n    const resultPane = css(\n      isValid ? styles.successPane : styles.errorPane\n    )\n    return (\n      <div className={css(styles.container)}>\n        <div className={resultPane}>\n          {isValid ? 'The form is valid' : 'The form is invalid. See invalid fields below'}\n        </div>\n        <div className={css(styles.innerContainer)}>\n          <pre\n            className={css(styles.pretty)}\n            dangerouslySetInnerHTML={{__html: syntaxHighlight(JSON.stringify(result, undefined, 2))}}\n          />\n        </div>\n      </div>\n    )\n  }\n)\n"}, {"instruction": "Generate the React routing configuration for a website with the following pages: About, Contact, Courses, Error, Home, Knowledge, Page, Startups, Services, and Topic.", "output": "import {PageContainer as PhenomicPageContainer} from 'phenomic';\nimport {Route} from 'react-router';\nimport React from 'react';\n\nimport AboutPage from 'layouts/AboutPage';\nimport ContactPage from 'layouts/ContactPage';\nimport CoursesPage from 'layouts/CoursesPage';\nimport ErrorPage from 'layouts/ErrorPage';\nimport HomePage from 'layouts/HomePage';\nimport KnowledgePage from 'layouts/KnowledgePage';\nimport Page from 'layouts/Page';\nimport StartupsPage from 'layouts/StartupsPage';\nimport ServicesPage from 'layouts/ServicesPage';\nimport TopicPage from 'layouts/TopicPage';\n\nimport AppContainer from './AppContainer';\n\nconst PageContainer = props => (\n  <PhenomicPageContainer\n    {...props}\n    layouts={{\n      AboutPage,\n      ContactPage,\n      CoursesPage,\n      ErrorPage,\n      HomePage,\n      KnowledgePage,\n      Page,\n      StartupsPage,\n      ServicesPage,\n      TopicPage,\n    }}\n  />\n);\n\nconst Routes = (\n  <Route component={AppContainer}>\n    <Route path=\"*\" component={PageContainer} />\n  </Route>\n);\n\nexport default Routes;\n"}, {"instruction": "Create a React application with the following structure:\n- A main App component that includes the necessary imports for React and its components, as well as the Material UI library.\n- Use the <MuiThemeProvider> component to wrap the entire application and apply the Material UI theme.\n- Have multiple routes defined using <Route> and <Switch>, including routes for a landing page, register page, login page, home page, and portfolio page.\n- Implement a function to check if the user is logged in (isLoggedIn), and use this function as the `onEnter` prop for the home page route to prevent access to the home page if the user is not logged in.\n- Also include the necessary imports for all the specified pages and components.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Switch, NavLink, Route } from 'react-router-dom';\n\nimport LandingPage from '../containers/Landing/LandingPage';\nimport RegisterPage from '../containers/Auth/RegisterPage';\nimport HomePage from '../containers/Home/HomePage';\nimport LoginPage from '../containers/Login/LoginPage';\nimport PortfolioPage from '../containers/Portfolio/PortfolioPage';\n\nimport { MuiThemeProvider } from 'material-ui/styles';\n\nconst isLoggedIn = () => {\n  if(!sessionStorage.jwt_token){\n    return browserHistory.push('/login');\n  }\n};\n\nclass App extends React.Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div className={\"crypy-app\"}>\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage}/>\n            <Route path=\"login\" component={LoginPage}/>\n            <Route path=\"register\" component={RegisterPage}/>\n            <Route path=\"home\" component={HomePage} onEnter={isLoggedIn}/>\n            <Route path=\"portfolio\" component={PortfolioPage}/>\n          </Switch>\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nApp.propTypes = {\n  children: PropTypes.element\n};\n\nexport default App;\n"}, {"instruction": "Generate code for a customizable comment avatar component in React that allows users to specify the image source, additional classes, and an optional custom element type.", "output": "import cx from 'clsx'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nimport {\n  createHTMLImage,\n  getElementType,\n  getUnhandledProps,\n  htmlImageProps,\n  partitionHTMLProps,\n} from '../../lib'\n\n/**\n * A comment can contain an image or avatar.\n */\nfunction CommentAvatar(props) {\n  const { className, src } = props\n\n  const classes = cx('avatar', className)\n  const rest = getUnhandledProps(CommentAvatar, props)\n  const [imageProps, rootProps] = partitionHTMLProps(rest, { htmlProps: htmlImageProps })\n  const ElementType = getElementType(CommentAvatar, props)\n\n  return (\n    <ElementType {...rootProps} className={classes}>\n      {createHTMLImage(src, { autoGenerateKey: false, defaultProps: imageProps })}\n    </ElementType>\n  )\n}\n\nCommentAvatar.propTypes = {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Specifies the URL of the image. */\n  src: PropTypes.string,\n}\n\nexport default CommentAvatar\n"}, {"instruction": "Provide a description for the following React code snippet: This React component is a documentation article about the concept of components in the Grommet UI library, emphasizing their versatility, responsiveness, and accessibility features.", "output": "// (C) Copyright 2014-2016 Hewlett Packard Enterprise Development LP\n\nimport React, { Component } from 'react';\nimport Paragraph from 'grommet/components/Paragraph';\nimport DocsArticle from '../components/DocsArticle';\n\nexport default class Components extends Component {\n\n  render () {\n    return (\n      <DocsArticle title=\"Components\">\n        <Paragraph>\n          Whether it's structuring content, controlling interaction,\n          or visualizing data, Grommet provides a wide range of components for\n          a variety of situations. And, all components are fully responsive\n          and accessible.\n        </Paragraph>\n      </DocsArticle>\n    );\n  }\n};\n"}, {"instruction": "Create a React component called `FormDropdown` that renders a `FormField` with a `Dropdown` control. The component should accept the same props as `Form` and `Dropdown`, and should default to rendering a `FormField` with a `Dropdown` control.", "output": "import React from 'react'\n\nimport {\n  customPropTypes,\n  getElementType,\n  getUnhandledProps,\n  META,\n} from '../../lib'\nimport Dropdown from '../../modules/Dropdown'\nimport FormField from './FormField'\n\n/**\n * Sugar for <Form.Field control={Dropdown} />.\n * @see Dropdown\n * @see Form\n */\nfunction FormDropdown(props) {\n  const { control } = props\n  const rest = getUnhandledProps(FormDropdown, props)\n  const ElementType = getElementType(FormDropdown, props)\n\n  return <ElementType {...rest} control={control} />\n}\n\nFormDropdown._meta = {\n  name: 'FormDropdown',\n  parent: 'Form',\n  type: META.TYPES.COLLECTION,\n}\n\nFormDropdown.propTypes = {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A FormField control prop. */\n  control: FormField.propTypes.control,\n}\n\nFormDropdown.defaultProps = {\n  as: FormField,\n  control: Dropdown,\n}\n\nexport default FormDropdown\n"}, {"instruction": "Create a function that opens a new window and renders a React component within that window, passing in a Redux store as a prop to the component.", "output": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport DevTools from '../../containers/DevToolsWindow';\n\nexport default function createDevToolsWindow (store) {\n  const win = window.open(\n    null,\n    'redux-devtools', // give it a name so it reuses the same window\n    `width=400,height=${window.outerHeight},menubar=no,location=no,resizable=yes,scrollbars=no,status=no`\n  );\n\n  // reload in case it's reusing the same window with the old content\n  win.location.reload();\n\n  // wait a little bit for it to reload, then render\n  setTimeout(() => {\n    // Wait for the reload to prevent:\n    // \"Uncaught Error: Invariant Violation: _registerComponent(...): Target container is not a DOM element.\"\n    win.document.write('<div id=\"react-devtools-root\"></div>');\n    win.document.body.style.margin = '0';\n\n    ReactDOM.render(\n      <Provider store={store}>\n        <DevTools />\n      </Provider>\n      , win.document.getElementById('react-devtools-root')\n    );\n  }, 10);\n}\n"}, {"instruction": "Generate the React component code to render an artboard and toolbar for a drawing application. The toolbar should contain a tool menu, a layers menu, a document menu, and a preview menu. Use the 'recompose' library to enhance the component with props transformation and state management.", "output": "import React from 'react';\nimport { compose, mapProps, withHandlers, withState } from 'recompose';\nimport styled, { ThemeProvider } from 'styled-components';\nimport * as actionCreators from '../actionCreators';\nimport ArtboardSection from './ArtboardSection';\nimport ToolbarSection from './ToolbarSection';\nimport MenuWrapper from './MenuWrapper';\nimport ToolMenu from './ToolMenu';\nimport LayersMenu from './LayersMenu';\nimport DocumentMenu from './DocumentMenu';\nimport PreviewMenu from './PreviewMenu';\nimport theme from '../theme';\nimport { toDataURI } from '../utils';\n\nconst transformProps = props => {\n  return {\n    ...props,\n    selectedTool: {\n      name: props.tool,\n      ...props.toolbar[props.tool]\n    }\n  };\n};\n\nconst enhance = compose(\n  mapProps(transformProps),\n  withState('bottomMenuHeight', 'setBottomMenuHeight', '25vh'),\n  withHandlers(actionCreators)\n);\n\nexport default enhance(props => (\n  <ThemeProvider theme={theme}>\n    <main>\n      <ArtboardSection {...props} />\n      <ToolbarSection {...props}>\n        <ToolMenu active={props.panel === 'tool'} {...props} />\n        <LayersMenu active={props.panel === 'layers'} {...props} />\n        <PreviewMenu active={props.panel === 'preview'} {...props} />\n        {/* <DocumentMenu active={props.panel === 'document'} {...props} /> */}\n      </ToolbarSection>\n    </main>\n  </ThemeProvider>\n));\n"}, {"instruction": "Generate a React component that renders an SVG icon of an antenna inside a circle.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from 'material-ui/SvgIcon';\n\nlet SettingsInputAntenna = props =>\n  <SvgIcon {...props}>\n    <path d=\"M12 5c-3.87 0-7 3.13-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.87-3.13-7-7-7zm1 9.29c.88-.39 1.5-1.26 1.5-2.29 0-1.38-1.12-2.5-2.5-2.5S9.5 10.62 9.5 12c0 1.02.62 1.9 1.5 2.29v3.3L7.59 21 9 22.41l3-3 3 3L16.41 21 13 17.59v-3.3zM12 1C5.93 1 1 5.93 1 12h2c0-4.97 4.03-9 9-9s9 4.03 9 9h2c0-6.07-4.93-11-11-11z\" />\n  </SvgIcon>;\n\nSettingsInputAntenna = pure(SettingsInputAntenna);\nSettingsInputAntenna.muiName = 'SvgIcon';\n\nexport default SettingsInputAntenna;\n"}, {"instruction": "Create a React component that embeds an item in a page, using the ItemEmbed component to display the embedded item and using the itemDetailQuery GraphQL query to fetch the item details.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'react-apollo';\nimport _ from 'underscore';\n\nimport ItemEmbed from '../../components/ItemEmbed';\nimport itemDetailQuery from '../../graphql/queries/detail';\n\n\nclass ItemEmbedContainer extends React.Component {\n\trender() {\n\t\tlet item = null;\n\t\tconsole.log(this.props);\n\t\tconsole.log(this.props);\n\t\tconsole.log(this.props);\n\t\tconsole.log(this.props);\n\n\t\tif (\n\t\t\tthis.props.itemDetailQuery\n\t\t\t&& this.props.itemDetailQuery.ORPHEUS_project\n\t\t) {\n\t\t\titem = this.props.itemDetailQuery.ORPHEUS_project.item;\n\t\t}\n\n\t\tif (!item) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (\n\t\t\t<ItemEmbed\n\t\t\t\t{...item}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nItemEmbedContainer.propTypes = {\n\titemDetailQuery: PropTypes.object,\n};\n\nexport default compose(\n\titemDetailQuery,\n)(ItemEmbedContainer);\n"}, {"instruction": "Provide the code to create a basic React Router v5 application with the following routes:\n\n1. A base route at `/` which renders the `App` component.\n2. A 404 route at `/*` which renders the `NotFound` component.", "output": "/**\n * react routes\u6a21\u5757\n * @description:\u5b9a\u4e49\u8def\u7531\u8df3\u8f6c\u7ec4\u4ef6\n */\nimport React from 'react'\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute\n} from 'react-router-dom'\n/**\n * App:base component\n * @description:Entry component, first entered the rendering page\n */\nimport App from '../containers/AppContainer'\n/**\n * NotFound:404 component\n * @description:route not match\n */\nimport NotFound from '../components/NotFound'\n\n/**\n * route config\n */\nconst routes = (\n\t<Router>\n\t  \t<Switch>\n\t  \t\t{/*base route*/}\n\t\t    <Route exact path=\"/\" component={App}/>\n\t\t    {/*404\u9875\u9762*/}\n\t\t    <Route component={NotFound}/>\n\t   </Switch>\n\t</Router>\n)\nexport default routes"}, {"instruction": "Create a React component for the Material UI icon library that renders an explicit content icon.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvExplicit = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h4v2h-4v2h4v2H9V7h6v2z\"/>\n  </SvgIcon>\n);\nAvExplicit = pure(AvExplicit);\nAvExplicit.displayName = 'AvExplicit';\nAvExplicit.muiName = 'SvgIcon';\n\nexport default AvExplicit;\n"}, {"instruction": "Generate the React component code for a `CommentContent` component that renders the content of a comment, including an optional `className` prop.", "output": "import cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nimport {\n  customPropTypes,\n  getElementType,\n  getUnhandledProps,\n  META,\n} from '../../lib'\n\n/**\n * A comment can contain content.\n */\nfunction CommentContent(props) {\n  const { className, children } = props\n  const classes = cx(className, 'content')\n  const rest = getUnhandledProps(CommentContent, props)\n  const ElementType = getElementType(CommentContent, props)\n\n  return <ElementType {...rest} className={classes}>{children}</ElementType>\n}\n\nCommentContent._meta = {\n  name: 'CommentContent',\n  parent: 'Comment',\n  type: META.TYPES.VIEW,\n}\n\nCommentContent.propTypes = {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n}\n\nexport default CommentContent\n"}, {"instruction": "Generate the React component that renders a button with a FontAwesome icon, text, and a background color. The button can be linked to a URL or a React router Link.", "output": "import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport \"./css/FaButton.css\";\n\nclass FaButton extends Component {\n    //noinspection JSMethodCanBeStatic\n    render() {\n\n        const linkInner = (\n            <div className=\"fabutton-shade\">\n                <div className=\"fabutton-inner\">\n                    <FontAwesome name={this.props.icon}/>\n                    <div className=\"fabutton-text\">\n                        {this.props.text}\n                    </div>\n                </div>\n            </div>\n        );\n\n        // Check if <a> tag is required or router Link tag. Link tags do not support other origins\n        if (/[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/.test(this.props.to)) {\n            return (\n                <div className=\"FaButton\">\n                    <a href={this.props.to} style={{backgroundColor: this.props.color}}>\n                        {linkInner}\n                    </a>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"FaButton\">\n                    <Link to={this.props.to} style={{backgroundColor: this.props.color}}>\n                        {linkInner}\n                    </Link>\n                </div>\n            )\n        }\n    }\n}\n\nexport default FaButton;"}, {"instruction": "Provide a React component that exposes the value of the `PUBLIC_URL` environment variable as the text content of a span element with an ID of `feature-public-url`.", "output": "/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport React from 'react'\n\nexport default () => (\n  <span id=\"feature-public-url\">{process.env.PUBLIC_URL}.</span>\n)\n"}, {"instruction": "Generate the code for a React Native component that displays a list item for a haircare appointment history. The component should have the following features:\n\n- It should accept an appointment object as a prop that has the following properties:\n  - schedule: An object with the date and time of the appointment\n  - barber: An object with the name of the barber\n  - status: A string indicating the status of the appointment (e.g., \"finished\", \"canceled\", \"scheduled\")\n  - translated_status: A localized string representing the status of the appointment\n- It should display the date and time of the appointment, the name of the barber, and the status of the appointment.\n- It should display an icon next to the status that represents the status (e.g., a checkmark for \"finished\", an \"x\" for \"canceled\", and a clock for \"scheduled\").\n- It should be clickable and, when clicked, it should navigate to a details page for the appointment.", "output": "import React, { Component } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Image,\n} from 'react-native';\n\nimport Icon from 'react-native-vector-icons/MaterialIcons';\n\nimport HaircutDetails from './HaircutDetails';\nimport Touchable from '../common/Touchable';\n\nexport default class HaircutHistoryItem extends Component {\n  _openDetails() {\n    this.props.navigator.push({\n      component: HaircutDetails,\n      passProps: {appointment: this.props.appointment}\n    });\n  }\n\n  _iconForStatus(status) {\n    switch (status) {\n      case 'finished':\n        return 'alarm-on';\n      case 'canceled':\n        return 'alarm-off';\n      case 'scheduled':\n        return 'alarm';\n    }\n  }\n\n  render() {\n    const { appointment } = this.props;\n    const { schedule, barber } = appointment;\n\n    return(\n      <Touchable style={styles.card} onPress={this._openDetails.bind(this)}>\n        <View>\n          <View>\n            <Text style={styles.date} numberOfLines={1}>{schedule.day_number} de {schedule.month_name} \u00e0s {schedule.hour}</Text>\n            <Text style={styles.barber} numberOfLines={1}>{barber.name}</Text>\n            <View style={styles.statusContainer}>\n              <Icon name={this._iconForStatus(appointment.status)} size={24} color='#003459' style={styles.icon} />\n              <Text>{appointment.translated_status}</Text>\n            </View>\n          </View>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\nvar styles = StyleSheet.create({\n  card: {\n    flexDirection: 'column',\n    backgroundColor: 'white',\n    borderColor: '#E8E8E8',\n    borderWidth: 1,\n    padding: 10,\n    marginBottom: 10,\n    borderRadius: 2,\n    elevation: 2,\n    flex: 1\n  },\n  date: {\n    fontWeight: 'bold',\n    color: '#292929',\n    fontSize: 18\n  },\n  barber: {\n    color: '#A2A2A2',\n    fontSize: 18\n  },\n  icon: {\n    marginRight: 5\n  },\n  statusContainer: {\n    flexDirection: 'row',\n    marginTop: 5,\n    alignItems: 'center'\n  }\n});\n"}, {"instruction": "Create a React component that renders a dropdown menu using the Aria-menubutton package. The dropdown should have the following features:\n\n* A label or button to open the dropdown.\n* A dropdown menu that appears beneath or to the side of the button.\n* An optional width for the dropdown menu.\n* An optional position for the dropdown menu (left, right, or below).\n* An optional top overlap for the dropdown menu.\n* Support for nesting dropdown items.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport c from 'classnames';\nimport { Wrapper, Button, Menu, MenuItem } from 'react-aria-menubutton';\nimport { Icon } from 'UI';\n\nconst Dropdown = ({\n  label,\n  button,\n  className,\n  classNameButton = '',\n  dropdownWidth = 'auto',\n  dropdownPosition = 'left',\n  dropdownTopOverlap = '0',\n  children\n}) => {\n  const style = {\n    width: dropdownWidth,\n    top: dropdownTopOverlap,\n    left: dropdownPosition === 'left' ? 0 : 'auto',\n    right: dropdownPosition === 'right' ? 0 : 'auto',\n  };\n  return (\n    <Wrapper className={c('nc-dropdown', className)} onSelection={handler => handler()}>\n      {\n        button\n          ? <Button>{button}</Button>\n          : <Button className={c('nc-dropdownButton', classNameButton)}>{label}</Button>\n      }\n      <Menu>\n        <ul className=\"nc-dropdownList\" style={style}>\n          {children}\n        </ul>\n      </Menu>\n    </Wrapper>\n  );\n};\n\nconst DropdownItem = ({ label, icon, iconDirection, onClick, className }) => (\n  <MenuItem className={c('nc-dropdownItem', className)} value={onClick}>\n    <span>{label}</span>\n    {\n      icon\n        ? <span className=\"nc-dropdownItemIcon\">\n            <Icon type={icon} direction={iconDirection} size=\"small\"/>\n          </span>\n        : null\n    }\n  </MenuItem>\n);\n\n\nexport { Dropdown, DropdownItem };\n"}, {"instruction": "Generate a React element for a quote from provided state.", "output": "\n/** @jsx h */\n\nimport React from 'react'\nimport h from '../helpers/h'\n\nexport const rules = [\n  {\n    serialize(obj, children) {\n      if (obj.kind != 'block') return\n      switch (obj.type) {\n        case 'paragraph': return React.createElement('p', {}, children)\n        case 'quote': return React.createElement('blockquote', {}, children)\n      }\n    }\n  }\n]\n\nexport const input = (\n  <state>\n    <document>\n      <quote>\n        <paragraph>\n          one\n        </paragraph>\n      </quote>\n    </document>\n  </state>\n)\n\nexport const output = `\n<blockquote><p>one</p></blockquote>\n`.trim()\n"}, {"instruction": "Create a react native component that takes props for a touchable highlight style, an underlay color, image source, and an image style. The component should render the touchable highlight with the given style, underlay color, and image source. The touchable highlight should onPress call the function passed as a prop and pass along a parameter also passed as a prop.", "output": "'use strict';\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  TouchableHighlight,\n  Image\n} from 'react-native';\n\nimport styles from '../styles/basestyles.js';\n\nexport default class iconButton extends Component {\n\n  render () {\n    return (\n      <TouchableHighlight\n        style={this.props.touchableHighlightStyle}\n        underlayColor={this.props.underlayColor}\n        onPress={() => { this.props.onButtonPressed(this.props.pressedParam) }}>\n        <Image style={this.props.imageStyle} source={this.props.iconSource} />\n      </TouchableHighlight>\n    );\n  }\n}\n\nAppRegistry.registerComponent('iconButton', () => iconButton);\n"}, {"instruction": "Generate a React component that embeds a livestream from a given channel and file, using the Livestream Embed Player. The player should be 640px wide, 360px high, and autoplay without being muted.", "output": "import React from 'react'\nimport { webcastPropType } from '../../utils/webcastUtils'\n\nconst EmbedLivestream = (props) => {\n  const channel = props.webcast.channel\n  const file = props.webcast.file\n  const iframeSrc = `https://new.livestream.com/accounts/${channel}/events/${file}/player?width=640&height=360&autoPlay=true&mute=false`\n  return (\n    <iframe\n      src={iframeSrc}\n      frameBorder=\"0\"\n      scrolling=\"no\"\n      height=\"100%\"\n      width=\"100%\"\n      allowFullScreen\n    />\n  )\n}\n\nEmbedLivestream.propTypes = {\n  webcast: webcastPropType.isRequired,\n}\n\nexport default EmbedLivestream\n"}, {"instruction": "Generate a React component that displays a series of SVG icons. Each icon should be styled with a margin to the right and specific colors. The icons should include a home icon, a flight takeoff icon, a cloud download icon, and a video game asset icon.", "output": "import React from 'react';\nimport ActionHome from 'material-ui/svg-icons/action/home';\nimport ActionFlightTakeoff from 'material-ui/svg-icons/action/flight-takeoff';\nimport FileCloudDownload from 'material-ui/svg-icons/file/cloud-download';\nimport HardwareVideogameAsset from 'material-ui/svg-icons/hardware/videogame-asset';\nimport {red500, yellow500, blue500} from 'material-ui/styles/colors';\n\nconst iconStyles = {\n  marginRight: 24,\n};\n\nconst SvgIconExampleIcons = () => (\n  <div>\n    <ActionHome style={iconStyles} />\n    <ActionFlightTakeoff style={iconStyles} color={red500} />\n    <FileCloudDownload style={iconStyles} color={yellow500} />\n    <HardwareVideogameAsset style={iconStyles} color={blue500} />\n  </div>\n);\n\nexport default SvgIconExampleIcons;\n"}, {"instruction": "Create a React component function called `SkeletonGroup` that accepts a count (defaults to 1) and a `children` prop. It should render as many `PulseGroup` components as the provided count, each wrapped in a fragment with a unique key. The `children` prop should be rendered inside each `PulseGroup`. Pass all other props to each `PulseGroup`.", "output": "import React from 'react';\nimport PulseGroup from 'skeletons/PulseGroup';\nimport createArray from 'extensions/createArray';\n\nconst SkeletonGroup = ({ count = 1, children, ...rest }) => (\n  <React.Fragment>\n    {createArray(count).map(rowIdx => (\n      <PulseGroup {...rest} key={rowIdx}>\n        {children}\n      </PulseGroup>\n    ))}\n  </React.Fragment>\n);\n\n/**\n * @component\n */\nexport default SkeletonGroup;\n"}, {"instruction": "Create a React component titled 'ChallengeTitle' that displays a title and an optional checkmark icon. The title should be centered and the icon should only appear if the 'isCompleted' prop is set to true. Use the 'ion-checkmark-circled' class for the icon.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  children: PropTypes.string,\n  isCompleted: PropTypes.bool\n};\n\nfunction ChallengeTitle({ children, isCompleted }) {\n  let icon = null;\n  if (isCompleted) {\n    icon = (\n      // TODO Use SVG here\n      <i className='ion-checkmark-circled text-primary' title='Completed' />\n    );\n  }\n  return (\n    <h2 className='text-center challenge-title'>\n      {children || 'Happy Coding!'}\n      {icon}\n    </h2>\n  );\n}\n\nChallengeTitle.displayName = 'ChallengeTitle';\nChallengeTitle.propTypes = propTypes;\n\nexport default ChallengeTitle;\n"}, {"instruction": "Generate an SVG icon for searching with a magnifying glass.", "output": "import React from 'react';\nimport Icon from '../Icon';\n\nexport default class SearchIcon extends Icon {\n  getSVG(){return <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\"><path d=\"M31 28h-1.59l-.55-.55C30.82 25.18 32 22.23 32 19c0-7.18-5.82-13-13-13S6 11.82 6 19s5.82 13 13 13c3.23 0 6.18-1.18 8.45-3.13l.55.55V31l10 9.98L40.98 38 31 28zm-12 0c-4.97 0-9-4.03-9-9s4.03-9 9-9 9 4.03 9 9-4.03 9-9 9z\"/></svg>;}\n};"}, {"instruction": "Create a React Native scene that contains a regular text input. The input should be placed inside a content area and should have a placeholder text of \"Regular Textbox\". The scene should also have a header with a back button and a title of \"Regular\".", "output": "\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { actions } from 'react-native-navigation-redux-helpers';\nimport { Container, Header, Title, Content, Button, Icon, Text, Body, Left, Right, Input, Item } from 'native-base';\nimport { Actions } from 'react-native-router-flux';\n\nimport styles from './styles';\n\nconst {\n  popRoute,\n} = actions;\n\nclass Regular extends Component {\n\n  static propTypes = {\n    popRoute: React.PropTypes.func,\n    navigation: React.PropTypes.shape({\n      key: React.PropTypes.string,\n    }),\n  }\n\n  popRoute() {\n    this.props.popRoute(this.props.navigation.key);\n  }\n\n  render() {\n    return (\n      <Container style={styles.container}>\n        <Header>\n          <Left>\n            <Button transparent onPress={() => Actions.pop()}>\n              <Icon name=\"arrow-back\" />\n            </Button>\n          </Left>\n          <Body>\n            <Title>Regular</Title>\n          </Body>\n          <Right />\n        </Header>\n\n        <Content padder>\n          <Item regular>\n            <Input placeholder=\"Regular Textbox\" />\n          </Item>\n        </Content>\n      </Container>\n    );\n  }\n}\n\nfunction bindAction(dispatch) {\n  return {\n    popRoute: key => dispatch(popRoute(key)),\n  };\n}\n\nconst mapStateToProps = state => ({\n  navigation: state.cardNavigation,\n  themeState: state.drawer.themeState,\n});\n\nexport default connect(mapStateToProps, bindAction)(Regular);\n"}, {"instruction": "Generate a React component for an SVG icon of an image colorize icon. The code should make use of the `recompose/pure` library to optimize for performance and should include type annotations.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageColorize = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M20.71 5.63l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-3.12 3.12-1.93-1.91-1.41 1.41 1.42 1.42L3 16.25V21h4.75l8.92-8.92 1.42 1.42 1.41-1.41-1.92-1.92 3.12-3.12c.4-.4.4-1.03.01-1.42zM6.92 19L5 17.08l8.06-8.06 1.92 1.92L6.92 19z\"/>\n  </SvgIcon>\n);\nImageColorize = pure(ImageColorize);\nImageColorize.displayName = 'ImageColorize';\nImageColorize.muiName = 'SvgIcon';\n\nexport default ImageColorize;\n"}, {"instruction": "Generate a React component class that displays a list of photos loaded from an API. The component should use the Semantic UI React library to style the layout and should include a button to load more photos.", "output": "// @flow\nimport React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nimport List from '../../components/photos/List';\nimport Photos from '../../utils/photos';\n\nconst api = new Photos();\n\nexport default class UnsplashPage extends Component {\n  state = {photos: [], isLoading: true};\n\n  loadPhotos () {\n    this.setState({isLoading: true});\n    api.getPhotos().then(photos => {\n      this.setState({photos, isLoading: false});\n    });\n  };\n\n  componentDidMount() {\n    this.loadPhotos();\n  };\n\n  render() {\n    const { photos } = this.state;\n\n    return (\n      <Grid columns={2} style={{ padding: '2%' }}>\n        <Grid.Column width={10}>\n          <List \n          \tphotos={photos}\n          \tloadMore={this.loadPhotos.bind(this)}\n          \tisLoading={this.state.isLoading}/>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n"}, {"instruction": "Generate the code snippet for a React Native component that displays an image and optionally includes a play icon and duration text. The component should support the following features:\n\n* Display an image.\n* Optionally display a play icon in the center of the image.\n* Optionally display duration text in the bottom right corner of the image.\n* Handle onPress events.\n* Allow for customization of the image, play icon, and duration text styles.", "output": "/**\n * \u5728\u7403\u573a\n * zaiqiuchang.com\n */\n\nimport React from 'react'\nimport {StyleSheet, View, Image, TouchableOpacity} from 'react-native'\nimport flattenStyle from 'flattenStyle'\n\nimport {COLOR} from '../../config'\nimport * as helpers from '../../helpers'\nimport * as components from '../'\n\nexport default ({playIconVisible = false, duration, onPress, containerStyle,\n  style, playIconStyle, ...props}) => {\n  let child = <Image style={style} {...props} />\n  if (onPress) {\n    let {width, height} = flattenStyle(style)\n    let {fontSize} = flattenStyle([styles.playIcon, playIconStyle])\n    let left = Math.floor((width - fontSize) / 2)\n    let top = Math.floor((height - fontSize) / 2)\n    return (\n      <TouchableOpacity onPress={onPress} style={containerStyle}>\n        {child}\n\n        {playIconVisible\n          ? <components.Icon\n            name='play-circle-outline'\n            style={[styles.playIcon, playIconStyle, {top, left}]} />\n          : null}\n\n        {duration\n          ? <components.Text style={styles.durationText}>\n            {helpers.durationText(duration)}\n          </components.Text>\n          : null}\n      </TouchableOpacity>\n    )\n  } else {\n    return (\n      <View style={containerStyle}>\n        {child}\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  playIcon: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    color: COLOR.textLightNormal,\n    opacity: 0.8,\n    backgroundColor: 'transparent',\n    fontSize: 36\n  },\n  durationText: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    color: COLOR.textLightNormal,\n    fontSize: 12,\n    padding: 5\n  }\n})\n"}, {"instruction": "Create a React drag-and-drop problem-solving module that displays problem statements, allows users to move blocks to solve the problem, and interacts with the backend.", "output": "import React, { Component } from 'react';\nimport { DragSource, DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport Block from './Block';\nimport BlockList from './BlockList';\nimport AvailableBlocksSpace from './AvailableBlocksSpace'\n\nclass Problem extends Component {\n    render() {\n        return (\n            <div className=\"problem col-lg-12\">\n                <div className=\"page-header\">\n                      <h1>Problem 4</h1>\n                </div>\n                <pre className=\"code-space\">{this.props.baseBlockString}</pre>\n                <pre>\n                <Block block={this.props.baseBlock}\n                       onMoveBlock={this.props.onMoveBlock}\n                       onSwapBlocks={this.props.onSwapBlocks} />\n                <AvailableBlocksSpace onMoveBlock={this.props.onMoveBlock}>\n                    <BlockList blocks={this.props.blocks}\n                               onMoveBlock={this.props.onMoveBlock}\n                               onSwapBlocks={this.props.onSwapBlocks} />\n                </AvailableBlocksSpace>\n                </pre>\n                <div className=\"btn-group\" role=\"group\" aria-label=\"...\">\n                    <button type=\"button\" className=\"btn btn-default\" onClick={this.props.onReset.bind(this)}>Reset</button>\n                    <button type=\"button\" className=\"btn btn-default\" >Submit</button>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default DragDropContext(HTML5Backend)(Problem);\n"}, {"instruction": "Generate a Material Design React SVG icon component for a mail outline.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet CommunicationContactMail = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M21 8V7l-3 2-3-2v1l3 2 3-2zm1-5H2C.9 3 0 3.9 0 5v14c0 1.1.9 2 2 2h20c1.1 0 1.99-.9 1.99-2L24 5c0-1.1-.9-2-2-2zM8 6c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H2v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1zm8-6h-8V6h8v6z\"/>\n  </SvgIcon>\n);\nCommunicationContactMail = pure(CommunicationContactMail);\nCommunicationContactMail.displayName = 'CommunicationContactMail';\nCommunicationContactMail.muiName = 'SvgIcon';\n\nexport default CommunicationContactMail;\n"}, {"instruction": "Generate the React component for a box displaying statistics about the uptime of certain debuffs. The component should include a title and a list of sub-components, each displaying the uptime of a specific debuff.", "output": "import React from 'react';\nimport Analyzer from 'parser/core/Analyzer';\nimport StatisticsListBox, { STATISTIC_ORDER } from 'interface/others/StatisticsListBox';\nimport DeepWoundsUptime from './DeepWoundsUptime';\nimport RendUptime from './RendUptime';\n\nclass DotUptimeStatisticBox extends Analyzer {\n  static dependencies = {\n    deepwoundsUptime: DeepWoundsUptime,\n    rendUptime: RendUptime,\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.active = Object.keys(this.constructor.dependencies)\n      .map(name => this[name].active)\n      .includes(true);\n  }\n\n  statistic() {\n    return (\n      <StatisticsListBox\n        position={STATISTIC_ORDER.CORE(3)}\n        title=\"DoT uptimes\"\n      >\n        {Object.keys(this.constructor.dependencies).map(name => {\n          const module = this[name];\n          if (!module.active) {\n            return null;\n          }\n          return (\n            <React.Fragment key={name}>\n              {module.subStatistic()}\n            </React.Fragment>\n          );\n        })}\n      </StatisticsListBox>\n    );\n  }\n}\n\nexport default DotUptimeStatisticBox;\n"}, {"instruction": "Create a React component using the class syntax. Include async `getInitialProps` and `componentDidMount` lifecycle methods to fetch and display the response from an API endpoint based on a query string.", "output": "import React from 'react'\n\nexport default class extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { response: '' }\n  }\n\n  static async getInitialProps ({ pathname, query }) {\n    return {\n      pathname,\n      query,\n      queryString: Object.keys(query).join('')\n    }\n  }\n\n  async componentDidMount () {\n    const response = JSON.stringify(\n      await window\n        .fetch(`/api/${this.props.queryString}`)\n        .then(response => response.json().then(data => data)),\n      null,\n      2\n    )\n    this.setState({ response })\n  }\n\n  render () {\n    return (\n      <content>\n        <p>\n          /api/{this.props.queryString} routed to https://swapi.co/api/\n          {this.props.queryString}\n        </p>\n        <p>\n          <a href='?people/2'>Try</a>\n          &nbsp;\n          <a href='/'>Reset</a>\n        </p>\n        <pre>{this.state.response ? this.state.response : 'Loading...'}</pre>\n      </content>\n    )\n  }\n}\n"}, {"instruction": "Generate the React Native component class code for a rectangle shape. The component should have the following properties: x, y, width, height, rx, and ry. The x and y properties must be required, while the others can have default values of 0. The component should also have a render method that returns an RNSVGRect component with the appropriate props.", "output": "import React from 'react';\nimport './Path'; // must import Path first, don`t know why. without this will throw an `Super expression must either be null or a function, not undefined`\nimport createReactNativeComponentClass from 'react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js';\nimport {pathProps, numberProp} from '../lib/props';\nimport {RectAttributes} from '../lib/attributes';\nimport extractProps from '../lib/extract/extractProps';\nimport Shape from './Shape';\n\nexport default class extends Shape {\n    static displayName = 'Rect';\n\n    static propTypes = {\n        ...pathProps,\n        x: numberProp.isRequired,\n        y: numberProp.isRequired,\n        width: numberProp.isRequired,\n        height: numberProp.isRequired,\n        rx: numberProp,\n        ry: numberProp\n    };\n\n    static defaultProps = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        rx: 0,\n        ry: 0\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    render() {\n        let props = this.props;\n\n        return <RNSVGRect\n            ref={ele => {this.root = ele;}}\n            {...extractProps({\n                ...props,\n                x: null,\n                y: null\n            }, this)}\n            x={props.x.toString()}\n            y={props.y.toString()}\n            width={props.width.toString()}\n            height={props.height.toString()}\n            rx={props.rx.toString()}\n            ry={props.ry.toString()}\n        />;\n    }\n}\n\nconst RNSVGRect = createReactNativeComponentClass({\n    validAttributes: RectAttributes,\n    uiViewClassName: 'RNSVGRect'\n});\n"}, {"instruction": "Create a React component that renders an SVG icon representing a file attachment. The icon should be a blue square with a paperclip in the center.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet FileAttachment = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z\"/>\n  </SvgIcon>\n);\nFileAttachment = pure(FileAttachment);\nFileAttachment.displayName = 'FileAttachment';\nFileAttachment.muiName = 'SvgIcon';\n\nexport default FileAttachment;\n"}, {"instruction": "Generate a React component that utilizes React Router and Bootstrap to create a navigation item that changes appearance when the current URL matches the item's href.", "output": "import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { NavItem } from 'react-bootstrap';\n\nexport default props => (\n  <Route\n    path={props.href}\n    exact\n    children={({ match, history }) => (\n      <NavItem\n        onClick={e => history.push(e.currentTarget.getAttribute('href'))}\n        {...props}\n        active={match ? true : false}\n      >\n        {props.children}\n      </NavItem>\n    )}\n  />\n);\n"}, {"instruction": "Generate a React functional component called Header that takes children as props and renders a Material UI AppBar with a Toolbar. The AppBar should have a MenuIcon on the left with aria-label \"Menu\" and a title \"FDTD Solver\" in the center. The component should export default Header.", "output": "import React from 'react';\nimport AppBar from 'material-ui/AppBar';\nimport Toolbar from 'material-ui/Toolbar';\nimport Typography from 'material-ui/Typography';\nimport Button from 'material-ui/Button';\nimport IconButton from 'material-ui/IconButton';\nimport MenuIcon from 'material-ui-icons/Menu';\n\nexport const Header = ({ children }) => (\n\t<AppBar position=\"static\">\n\t\t<Toolbar>\n\t\t\t<IconButton color=\"contrast\" aria-label=\"Menu\">\n\t\t\t\t<MenuIcon />\n\t\t\t</IconButton>\n\t\t\t<Typography type=\"title\" color=\"inherit\">\n\t\t\t\tFDTD Solver\n\t\t\t</Typography>\n\t\t</Toolbar>\n\t</AppBar>\n);\n\nexport default Header;\n"}, {"instruction": "Create a React component that employs a third-party library to demonstrate the implementation of a select field with remote data loading. The component should include options to be populated asynchronously based on user input, as well as a hint text display.", "output": "import React from 'react';\nimport Select from 'react-select';\n\nvar RemoteSelectField = React.createClass({\n\tdisplayName: 'RemoteSelectField',\n\tpropTypes: {\n\t\thint: React.PropTypes.string,\n\t\tlabel: React.PropTypes.string,\n\t},\n\tloadOptions (input, callback) {\n\t\tinput = input.toLowerCase();\n\t\tvar rtn = {\n\t\t\toptions: [\n\t\t\t\t{ label: 'One', value: 'one' },\n\t\t\t\t{ label: 'Two', value: 'two' },\n\t\t\t\t{ label: 'Three', value: 'three' }\n\t\t\t],\n\t\t\tcomplete: true\n\t\t};\n\t\tif (input.slice(0, 1) === 'a') {\n\t\t\tif (input.slice(0, 2) === 'ab') {\n\t\t\t\trtn = {\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{ label: 'AB', value: 'ab' },\n\t\t\t\t\t\t{ label: 'ABC', value: 'abc' },\n\t\t\t\t\t\t{ label: 'ABCD', value: 'abcd' }\n\t\t\t\t\t],\n\t\t\t\t\tcomplete: true\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\trtn = {\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{ label: 'A', value: 'a' },\n\t\t\t\t\t\t{ label: 'AA', value: 'aa' },\n\t\t\t\t\t\t{ label: 'AB', value: 'ab' }\n\t\t\t\t\t],\n\t\t\t\t\tcomplete: false\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (!input.length) {\n\t\t\trtn.complete = false;\n\t\t}\n\n\t\tsetTimeout(function() {\n\t\t\tcallback(null, rtn);\n\t\t}, 500);\n\t},\n\trenderHint () {\n\t\tif (!this.props.hint) return null;\n\t\treturn (\n\t\t\t<div className=\"hint\">{this.props.hint}</div>\n\t\t);\n\t},\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"section\">\n\t\t\t\t<h3 className=\"section-heading\">{this.props.label}</h3>\n\t\t\t\t<Select asyncOptions={this.loadOptions} className=\"remote-example\" />\n\t\t\t\t{this.renderHint()}\n\t\t\t</div>\n\t\t);\n\t}\n});\n\nmodule.exports = RemoteSelectField;\n"}, {"instruction": "Create a React component that renders a list item with a button that toggles a collapsible section. This collapsible section should contain another component that displays detailed information about the list item. The list item should also have a button to add the list item to a stateful array.", "output": "import React from 'react';\nimport { ListGroupItem, Collapse, Button} from 'reactstrap';\nimport NPCStatBlock from './NPCStatBlock';\nimport classNames from 'classnames';\n\nclass MonsterManualItem extends React.Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = { collapse: false };\n\n    this.addToInitiative = this.addToInitiative.bind(this);\n  }\n\n  toggle() {\n    this.setState({ collapse: !this.state.collapse });\n  }\n\n  addToInitiative(item) {\n    this.props.actions.addCombatant({\n      ...item,\n      'initiative': 0,\n      'isKO': false,\n      'isDead': false\n    });\n    this.props.actions.sortCombatants();\n  }\n\n  render() {\n    const {item} = this.props;\n    const listItemClasses = classNames({\n      'monster-manual-list__item': true,\n      'monster-manual-list__item--open': this.state.collapse,\n      'justify-content-between': true\n    });\n    return (\n      <div>\n      <ListGroupItem className={listItemClasses} >\n        <Button size=\"sm\" onClick={() => { this.toggle(); }}>Details</Button>\n        {item.name}\n        <Button size=\"sm\" onClick={() => { this.addToInitiative(item); }}>+</Button>\n      </ListGroupItem>\n      <Collapse isOpen={this.state.collapse}>\n        <NPCStatBlock item={item} />\n      </Collapse>\n      </div>\n    );\n  }\n}\n\nMonsterManualItem.propTypes = {\n  item     : React.PropTypes.object.isRequired,\n  actions  : React.PropTypes.object.isRequired\n};\n\nexport default MonsterManualItem;\n"}, {"instruction": "Generate a React router configuration with a home page (CounterPage), an about page (AboutPage) and an index route (CounterPage).", "output": "import React from 'react';\nimport { IndexRoute, Route } from 'react-router';\nimport App from '../containers/App';\nimport AboutPage from '../containers/AboutPage';\nimport CounterPage from '../containers/CounterPage';\n\nexport default (\n  <Route path=\"/\" component={ App }>\n    <IndexRoute component={ CounterPage }/>\n    <Route path=\"about\" component={ AboutPage }/>\n  </Route>\n);\n"}, {"instruction": "Create a React component that renders a column with optional heading, icon, and scroll handling. The component should have the following:\n- A heading that is displayed if it is provided and not hidden on mobile devices, and should have an ID derived from the heading text with spaces replaced with hyphens.\n- A scroll handler that debounces scroll events and interrupts any ongoing scroll animations.\n- A reference to the component's DOM node for scrolling and event handling.", "output": "import React from 'react';\nimport ColumnHeader from './column_header';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport { scrollTop } from '../../../scroll';\nimport { isMobile } from '../../../is_mobile';\n\nexport default class Column extends React.PureComponent {\n\n  static propTypes = {\n    heading: PropTypes.string,\n    icon: PropTypes.string,\n    children: PropTypes.node,\n    active: PropTypes.bool,\n    hideHeadingOnMobile: PropTypes.bool,\n  };\n\n  handleHeaderClick = () => {\n    const scrollable = this.node.querySelector('.scrollable');\n\n    if (!scrollable) {\n      return;\n    }\n\n    this._interruptScrollAnimation = scrollTop(scrollable);\n  }\n\n  scrollTop () {\n    const scrollable = this.node.querySelector('.scrollable');\n\n    if (!scrollable) {\n      return;\n    }\n\n    this._interruptScrollAnimation = scrollTop(scrollable);\n  }\n\n\n  handleScroll = debounce(() => {\n    if (typeof this._interruptScrollAnimation !== 'undefined') {\n      this._interruptScrollAnimation();\n    }\n  }, 200)\n\n  setRef = (c) => {\n    this.node = c;\n  }\n\n  render () {\n    const { heading, icon, children, active, hideHeadingOnMobile } = this.props;\n\n    const showHeading = heading && (!hideHeadingOnMobile || (hideHeadingOnMobile && !isMobile(window.innerWidth)));\n\n    const columnHeaderId = showHeading && heading.replace(/ /g, '-');\n    const header = showHeading && (\n      <ColumnHeader icon={icon} active={active} type={heading} onClick={this.handleHeaderClick} columnHeaderId={columnHeaderId} />\n    );\n    return (\n      <div\n        ref={this.setRef}\n        role='region'\n        aria-labelledby={columnHeaderId}\n        className='column'\n        onScroll={this.handleScroll}\n      >\n        {header}\n        {children}\n      </div>\n    );\n  }\n\n}\n"}, {"instruction": "Generate a React 404 error page component with styling called `NotFound` that takes a `title` prop. The component should display a title and a message saying the requested page doesn't exist.", "output": "/**\n * React Starter Kit (https://www.reactstarterkit.com/)\n *\n * Copyright \u00a9 2014-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from 'isomorphic-style-loader/lib/withStyles';\nimport s from './NotFound.css';\n\nclass NotFound extends React.Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n  };\n\n  render() {\n    return (\n      <div className={s.root}>\n        <div className={s.container}>\n          <h1>{this.props.title}</h1>\n          <p>Sorry, the page you were trying to view does not exist.</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(s)(NotFound);\n"}, {"instruction": "Generate the code for a React component that takes any arbitrary data and renders it as HTML, including support for React elements and arrays of child nodes.", "output": "import React, { Component } from 'react';\nimport PropTypes from 'subschema-prop-types';\nimport { FREEZE_OBJ } from 'subschema-utils';\n\n\nfunction strip(obj) {\n    return !obj ? FREEZE_OBJ : Object.keys(obj).reduce(function (ret, key) {\n        if (key == 'dataType' || key == 'fieldAttrs' || obj[key]\n                                                        == null) {\n            return ret;\n        }\n        ret[key] = obj[key];\n        return ret;\n    }, {});\n}\n\nexport class ContentWrapper extends Component {\n    static defaultProps = {\n        type   : 'span',\n        content: ''\n    };\n\n    static propTypes = {\n        content   : PropTypes.expression,\n        type      : PropTypes.domType,\n        value     : PropTypes.any,\n        onChange  : PropTypes.any,\n        title     : PropTypes.any,\n        className : PropTypes.cssClass,\n        id        : PropTypes.any,\n        name      : PropTypes.any,\n        fieldAttrs: PropTypes.any\n    };\n\n    render() {\n        const { type, content, dataType, children, context, path, fieldAttrs, title, ...props } = this.props;\n\n        const allProps = {\n            ...strip(fieldAttrs),\n            title: title === false ? void(0) : title,\n            ...props,\n\n        };\n        if (typeof type == 'string') {\n            return React.createElement(type, {\n                ...allProps,\n                dangerouslySetInnerHTML: { __html: content }\n            });\n        }\n        const Type = type;\n        return <Type {...allProps}/>;\n\n    }\n}\n\nexport default ({\n    types: {\n        ContentWrapper\n    }\n})\n"}, {"instruction": "Create a registration form with email and password inputs, a minimum password length of 8 characters, and a confirmation message that says \"Success!!!\" upon successful registration.", "output": "import React from 'react';\nimport RegistrationForm from 'ps-react/RegistrationForm';\n\n/** Registration from with email and password inputs */\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm \n              confirmationMessage=\"Success!!!\" \n              onSubmit={this.onSubmit}\n              minPasswordLength={8}\n              />\n  }\n}"}, {"instruction": "Create a lightweight React component that renders HTML, Head, and Body components and injects dangerously set innerHTML into a div.", "output": "var _jsxFileName = 'layout/DefaultLayout.jsx',\n    _this = this;\n\nimport React from 'react';\nimport { ReactElementType as _ReactElementType, LayoutPropsType as _LayoutPropsType } from '../types';\nimport { Html, Head, Body } from './index';\n\nimport t from 'flow-runtime';\nconst ReactElementType = t.tdz(function () {\n  return _ReactElementType;\n});\nconst LayoutPropsType = t.tdz(function () {\n  return _LayoutPropsType;\n});\nexport default (function defaultLayout(_arg) {\n  const _returnType = t.return(t.ref(ReactElementType));\n\n  let { helmet, content } = t.ref(LayoutPropsType).assert(_arg);\n  return _returnType.assert(React.createElement(\n    Html,\n    { helmet: helmet, __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5\n      }\n    },\n    React.createElement(Head, { helmet: helmet, __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      }\n    }),\n    React.createElement(\n      Body,\n      {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7\n        }\n      },\n      React.createElement('div', { id: 'app', dangerouslySetInnerHTML: { __html: content }, __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        }\n      })\n    )\n  ));\n});\n//# sourceMappingURL=DefaultLayout.js.map"}, {"instruction": "Create a React component that renders an SVG icon for a fullscreen exit button.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet NavigationFullscreenExit = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z\"/>\n  </SvgIcon>\n);\nNavigationFullscreenExit = pure(NavigationFullscreenExit);\nNavigationFullscreenExit.displayName = 'NavigationFullscreenExit';\nNavigationFullscreenExit.muiName = 'SvgIcon';\n\nexport default NavigationFullscreenExit;\n"}, {"instruction": "Generate the React component code for a Supervisor Account icon from Material UI.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionSupervisorAccount = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z\"/>\n  </SvgIcon>\n);\nActionSupervisorAccount = pure(ActionSupervisorAccount);\nActionSupervisorAccount.displayName = 'ActionSupervisorAccount';\nActionSupervisorAccount.muiName = 'SvgIcon';\n\nexport default ActionSupervisorAccount;\n"}, {"instruction": "Generate a React component that includes an input field to search for something and a button to submit the search. Also, add a button to cancel the search and clear the input field. The input should be responsive to different screen sizes.", "output": "import React from 'react';\nimport styled from 'styled-components';\nimport magnifierIcon from '../../../../images/magnifier.svg';\n\nimport { CancelIconButton, CancelIconPlaceHolder, SearchBar } from './common';\n\nconst MobileSearchBarWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 0 auto;\n    padding: 20px 0;\n`;\n\nconst MobileSearchBar = ({\n    handleSearchSubmitKeyUp,\n    handleSearchingTextChange,\n    handleSearchingTextClear,\n    searchingText\n}) => (\n    <MobileSearchBarWrapper>\n        <SearchBar isMobile={true}>\n            <img src={magnifierIcon} />\n            <input\n                autoFocus\n                maxLength={50}\n                onChange={handleSearchingTextChange}\n                onKeyUp={handleSearchSubmitKeyUp}\n                type=\"text\"\n                value={searchingText}\n            />\n            {\n                searchingText ?\n                    <CancelIconButton\n                        handleSearchingTextClear={handleSearchingTextClear}\n                        height=\"25px\"\n                        isMobile={true}\n                        width=\"25px\"\n                    />\n                :\n                    <CancelIconPlaceHolder\n                        height=\"25px\"\n                        width=\"25px\"\n                    />\n            }\n        </SearchBar>\n    </MobileSearchBarWrapper>\n);\n\nexport default MobileSearchBar;\n"}, {"instruction": "Craft a React component that encapsulates the Material Design icon for a strikethrough, matching the visual style of the Material Design specification.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet EditorStrikethroughS = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M7.24 8.75c-.26-.48-.39-1.03-.39-1.67 0-.61.13-1.16.4-1.67.26-.5.63-.93 1.11-1.29.48-.35 1.05-.63 1.7-.83.66-.19 1.39-.29 2.18-.29.81 0 1.54.11 2.21.34.66.22 1.23.54 1.69.94.47.4.83.88 1.08 1.43.25.55.38 1.15.38 1.81h-3.01c0-.31-.05-.59-.15-.85-.09-.27-.24-.49-.44-.68-.2-.19-.45-.33-.75-.44-.3-.1-.66-.16-1.06-.16-.39 0-.74.04-1.03.13-.29.09-.53.21-.72.36-.19.16-.34.34-.44.55-.1.21-.15.43-.15.66 0 .48.25.88.74 1.21.38.25.77.48 1.41.7H7.39c-.05-.08-.11-.17-.15-.25zM21 12v-2H3v2h9.62c.18.07.4.14.55.2.37.17.66.34.87.51.21.17.35.36.43.57.07.2.11.43.11.69 0 .23-.05.45-.14.66-.09.2-.23.38-.42.53-.19.15-.42.26-.71.35-.29.08-.63.13-1.01.13-.43 0-.83-.04-1.18-.13s-.66-.23-.91-.42c-.25-.19-.45-.44-.59-.75-.14-.31-.25-.76-.25-1.21H6.4c0 .55.08 1.13.24 1.58.16.45.37.85.65 1.21.28.35.6.66.98.92.37.26.78.48 1.22.65.44.17.9.3 1.38.39.48.08.96.13 1.44.13.8 0 1.53-.09 2.18-.28s1.21-.45 1.67-.79c.46-.34.82-.77 1.07-1.27s.38-1.07.38-1.71c0-.6-.1-1.14-.31-1.61-.05-.11-.11-.23-.17-.33H21z\"/>\n  </SvgIcon>\n);\nEditorStrikethroughS = pure(EditorStrikethroughS);\nEditorStrikethroughS.displayName = 'EditorStrikethroughS';\nEditorStrikethroughS.muiName = 'SvgIcon';\n\nexport default EditorStrikethroughS;\n"}, {"instruction": "Generate a React component that renders a modal. The modal should have a title and a body, and it should be able to be opened and closed. The modal should be a child of the Modal component, and it should use the sizes helper to set the size of the modal. The modal should also use the ExcludeMovieModalContentConnector component to render the content of the modal.", "output": "import PropTypes from 'prop-types';\nimport React from 'react';\nimport Modal from 'Components/Modal/Modal';\nimport { sizes } from 'Helpers/Props';\nimport ExcludeMovieModalContentConnector from './ExcludeMovieModalContentConnector';\n\nfunction ExcludeMovieModal(props) {\n  const {\n    isOpen,\n    onModalClose,\n    ...otherProps\n  } = props;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      size={sizes.MEDIUM}\n      onModalClose={onModalClose}\n    >\n      <ExcludeMovieModalContentConnector\n        {...otherProps}\n        onModalClose={onModalClose}\n      />\n    </Modal>\n  );\n}\n\nExcludeMovieModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onModalClose: PropTypes.func.isRequired\n};\n\nexport default ExcludeMovieModal;\n"}, {"instruction": "Generate the React component for a settings section that allows the user to select their presence status. This component should have the following functionality:\n- Parse the component code to extract its description and prop types.\n- Display a header with the component's name and description.\n- Provide a code example that demonstrates how to use the component.\n- Display a table of the component's props and their descriptions.", "output": "import React from 'react';\nimport { parse } from 'react-docgen';\nimport CodeExample from '../../../components/CodeExample';\nimport ComponentHeader from '../../../components/ComponentHeader';\nimport PropTypeDescription from '../../../components/PropTypeDescription';\n\nimport Demo from './Demo';\n// eslint-disable-next-line\nimport demoCode from '!raw-loader!./Demo';\n// eslint-disable-next-line\nimport componentCode from '!raw-loader!ringcentral-widgets/components/PresenceSettingSection';\n\nconst PresenceSettingSectionPage = () => {\n  const info = parse(componentCode);\n  return (\n    <div>\n      <ComponentHeader name=\"PresenceSettingSection\" description={info.description} />\n      <CodeExample\n        code={demoCode}\n        title=\"PresenceSettingSection Example\"\n      >\n        <Demo />\n      </CodeExample>\n      <PropTypeDescription componentInfo={info} />\n    </div>\n  );\n};\n\nexport default PresenceSettingSectionPage;\n"}, {"instruction": "Generate a React component that displays a string value as an info item. The component should allow for the value to be truncated and displayed with a tooltip, and for the value to be translated or mapped before display.", "output": "import React from 'react';\nimport EllipsisWithTooltip from 'react-ellipsis-with-tooltip';\nimport PropTypes from 'prop-types';\n\nimport InfoItem from './InfoItem';\nimport { itemIteratorId } from './helpers';\n\nconst StringInfoItem = ({\n  template,\n  attr,\n  tooltipText,\n  translate,\n  mapAttr,\n  elipsed,\n}) => {\n  const inner = (\n    <span>\n      {translate ? __(mapAttr(template, attr)) : mapAttr(template, attr)}\n    </span>\n  );\n  const innerContent = elipsed ? (\n    <EllipsisWithTooltip placement=\"top\">{inner}</EllipsisWithTooltip>\n  ) : (\n    inner\n  );\n\n  return (\n    <InfoItem itemId={itemIteratorId(template, attr)} tooltipText={tooltipText}>\n      {innerContent}\n    </InfoItem>\n  );\n};\n\nStringInfoItem.propTypes = {\n  template: PropTypes.object.isRequired,\n  attr: PropTypes.string.isRequired,\n  tooltipText: PropTypes.string,\n  translate: PropTypes.bool,\n  mapAttr: PropTypes.func,\n  elipsed: PropTypes.bool,\n};\n\nStringInfoItem.defaultProps = {\n  translate: false,\n  mapAttr: (template, attr) => template[attr],\n  elipsed: false,\n  tooltipText: undefined,\n};\n\nexport default StringInfoItem;\n"}, {"instruction": "Create a React component that renders an SVG icon for a rear-facing camera. The icon should be made up of paths that define the shape of the camera and its lens. The component should be pure and should have a display name of 'ImageCameraRear'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageCameraRear = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M10 20H5v2h5v2l3-3-3-3v2zm4 0v2h5v-2h-5zm3-20H7C5.9 0 5 .9 5 2v14c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm-5 6c-1.11 0-2-.9-2-2s.89-2 1.99-2 2 .9 2 2C14 5.1 13.1 6 12 6z\"/>\n  </SvgIcon>\n);\nImageCameraRear = pure(ImageCameraRear);\nImageCameraRear.displayName = 'ImageCameraRear';\nImageCameraRear.muiName = 'SvgIcon';\n\nexport default ImageCameraRear;\n"}, {"instruction": "A React component that displays a live-updating timeline of public social media posts with a navigation header. When the header is clicked, the timeline scrolls to the top. When the user reaches the end of the timeline, the component loads more posts automatically.", "output": "import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../../ui/containers/status_list_container';\nimport { expandPublicTimeline } from '../../../actions/timelines';\nimport Column from '../../../components/column';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { connectPublicStream } from '../../../actions/streaming';\nimport ColumnHeader from '../../../../pawoo/components/animated_timeline_column_header';\n\nconst messages = defineMessages({\n  title: { id: 'standalone.public_title', defaultMessage: 'A look inside...' },\n});\n\n@connect()\n@injectIntl\nexport default class PublicTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(expandPublicTimeline());\n    this.disconnect = dispatch(connectPublicStream());\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandPublicTimeline({ maxId }));\n  }\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <Column ref={this.setRef}>\n        <ColumnHeader\n          icon='globe'\n          title={intl.formatMessage(messages.title)}\n          onClick={this.handleHeaderClick}\n          timelineId='public'\n        />\n\n        <StatusListContainer\n          timelineId='public'\n          onLoadMore={this.handleLoadMore}\n          scrollKey='standalone_public_timeline'\n          trackScroll={false}\n        />\n      </Column>\n    );\n  }\n\n}\n"}, {"instruction": "Generate React code for a Material Design icon representing a low priority using the Material UI library.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ContentLowPriority = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M14 5h8v2h-8zm0 5.5h8v2h-8zm0 5.5h8v2h-8zM2 11.5C2 15.08 4.92 18 8.5 18H9v2l3-3-3-3v2h-.5C6.02 16 4 13.98 4 11.5S6.02 7 8.5 7H12V5H8.5C4.92 5 2 7.92 2 11.5z\"/>\n  </SvgIcon>\n);\nContentLowPriority = pure(ContentLowPriority);\nContentLowPriority.displayName = 'ContentLowPriority';\nContentLowPriority.muiName = 'SvgIcon';\n\nexport default ContentLowPriority;\n"}, {"instruction": "Generate a Flow type definition for a React component property such that it only allows access to a subset of the component's properties.", "output": "// @flow\n\nimport React from 'react';\n\ndeclare var any: any;\n\nclass Foo extends React.Component<{}, void> {yep1: boolean}\nclass Bar extends React.Component<{}, void> {yep2: boolean}\n\n(any: React$ElementRef<Class<Foo>>).yep1; // OK\n(any: React$ElementRef<Class<Foo>>).yep2; // Error\n(any: React$ElementRef<Class<Foo>>).nope; // Error\n(any: React$ElementRef<Class<Bar>>).yep1; // Error\n(any: React$ElementRef<Class<Bar>>).yep2; // OK\n(any: React$ElementRef<Class<Bar>>).nope; // Error\n"}, {"instruction": "Describe a React component that wraps another component and provides it with the current viewport dimensions, including handling window resize events.", "output": "/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */\n\nimport React, { Component } from 'react'; // eslint-disable-line no-unused-vars\nimport EventEmitter from 'eventemitter3';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nlet EE;\nlet viewport = {width: 1366, height: 768}; // Default size for server-side rendering\nconst RESIZE_EVENT = 'resize';\n\nfunction handleWindowResize() {\n  if (viewport.width !== window.innerWidth || viewport.height !== window.innerHeight) {\n    viewport = {width: window.innerWidth, height: window.innerHeight};\n    EE.emit(RESIZE_EVENT, viewport);\n  }\n}\n\nfunction withViewport(ComposedComponent) {\n  return class WithViewport extends Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        viewport: canUseDOM ? {width: window.innerWidth, height: window.innerHeight} : viewport,\n      };\n    }\n\n    componentDidMount() {\n      if (!EE) {\n        EE = new EventEmitter();\n        window.addEventListener('resize', handleWindowResize);\n        window.addEventListener('orientationchange', handleWindowResize);\n      }\n\n      EE.on(RESIZE_EVENT, this.handleResize, this);\n    }\n\n    componentWillUnmount() {\n      EE.removeListener(RESIZE_EVENT, this.handleResize, this);\n      if (!EE.listeners(RESIZE_EVENT, true)) {\n        window.removeEventListener('resize', handleWindowResize);\n        window.removeEventListener('orientationchange', handleWindowResize);\n        EE = null;\n      }\n    }\n\n    render() {\n      return <ComposedComponent {...this.props} viewport={this.state.viewport}/>;\n    }\n\n    handleResize(value) {\n      this.setState({viewport: value}); // eslint-disable-line react/no-set-state\n    }\n\n  };\n}\n\nexport default withViewport;\n"}, {"instruction": "Generate a code snippet of a React component that renders a group of labeled buttons using the Semantic UI React library. The buttons should have different colors, icons, and labels.", "output": "import React from 'react'\nimport { Button } from 'semantic-ui-react'\n\nconst ButtonExampleLabeledBasic = () => (\n  <div>\n    <Button\n      color='red'\n      content='Like'\n      icon='heart'\n      label={{ basic: true, color: 'red', pointing: 'left', content: '2,048' }}\n    />\n\n    <Button\n      basic\n      color='blue'\n      content='Fork'\n      icon='fork'\n      label={{ as: 'a', basic: true, color: 'blue', pointing: 'left', content: '1,048' }}\n    />\n  </div>\n)\n\nexport default ButtonExampleLabeledBasic\n"}, {"instruction": "Design an SVG icon for a gift card that can be used in a React application, ensuring it is performant and reusable.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from 'material-ui/SvgIcon';\n\nlet CardGiftcard = props =>\n  <SvgIcon {...props}>\n    <path d=\"M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z\" />\n  </SvgIcon>;\n\nCardGiftcard = pure(CardGiftcard);\nCardGiftcard.muiName = 'SvgIcon';\n\nexport default CardGiftcard;\n"}, {"instruction": "Generate the necessary React, Redux, and Material UI setup code for a React application to render a Layout component. The code should include the following:\n\n- Importing the necessary modules\n- Injecting the TapEventPlugin for Material UI\n- Configuring the Redux store and connecting it to the app via a Provider\n- Wrapping the Layout component with a MuiThemeProvider to provide Material UI styles", "output": "require('!style!css!./styles/index.css');\nrequire('!style!css!muicss/lib/css/mui.css');\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport injectTapEventPlugin from 'react-tap-event-plugin';\n\nimport store from './store';\n\nimport Layout from './layout';\n\ninjectTapEventPlugin();\n\nrender(\n\t<MuiThemeProvider>\n\t  <Provider store={store}>\n\t    <Layout />\n\t  </Provider>\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n"}, {"instruction": "Create a React component that navigates to either the 'Groups' or 'ServerLink' screen based on the redux state, without adding a back button to the navigation stack.", "output": "import { NavigationActions } from 'react-navigation';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as startupActions from '../actions/startup';\n\nexport class Loading extends React.Component {\n  static propTypes = {\n    getAppState: PropTypes.func.isRequired,\n    navigation: PropTypes.shape({\n      dispatch: PropTypes.func.isRequired,\n    }).isRequired,\n  };\n\n  async componentWillMount() {\n    const { payload } = await this.props.getAppState();\n    const route = payload.serverUrl ? 'Groups' : 'ServerLink';\n\n    // Navigate without adding a back button.\n    const navigate = NavigationActions.reset({\n      index: 0,\n      actions: [NavigationActions.navigate({ routeName: route })],\n    });\n\n    this.props.navigation.dispatch(navigate);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nconst mapDispatchToProps = {\n  getAppState: startupActions.getAppState,\n};\n\nexport default connect(null, mapDispatchToProps)(Loading);\n"}, {"instruction": "Create a React component to display a portion of a page, pass properties to it, connect it to Redux, map the state to props, and export it.", "output": "import React from 'react';\nimport SubitemWrapper from './subcontent/SubitemWrapper';\nimport { connect } from 'react-redux';\n\nconst Pelastussuunnitelma = (props) =>\n    <SubitemWrapper {...props} />;\n\nconst mapStateToProps = ({ pelastussuunnitelmatab }) => ({\n    pelastussuunnitelmatab\n});\n\nexport default connect(mapStateToProps, null)(Pelastussuunnitelma);"}, {"instruction": "Create a React component called App that serves as a shell for all pages and includes a navigation bar for common links visible on all pages.", "output": "/**\n *\n * App.react.js\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n *\n * NOTE: while this component should technically be a stateless functional\n * component (SFC), hot reloading does not currently support SFCs. If hot\n * reloading is not a necessity for you then you can refactor it and remove\n * the linting exception.\n */\n\nimport React from 'react';\n\nexport default class App extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function\n\n  static propTypes = {\n    children: React.PropTypes.node,\n  };\n\n  render() {\n    return (\n      <div>\n        {React.Children.toArray(this.props.children)}\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Design a React application with a menu bar (MenuBar) and two pages: a machine view (MachineView) and an instruction set view (InstructionSetView). The application should use React Router for navigation.", "output": "import React from 'react'\nimport { Route, DefaultRoute, RouteHandler, run } from 'react-router'\n\nimport MenuBar from './components/MenuBar'\nimport MachineView from './components/MachineView'\nimport InstructionSetView from './components/InstructionSetView'\n\nexport default class App extends React.Component {\n    render() {\n        return (\n            <div>\n                <MenuBar/>\n\n                <div className=\"container\">\n                    <RouteHandler />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst routes = (\n    <Route handler={App}>\n        <DefaultRoute handler={MachineView} name=\"simulator\"/>\n        <Route handler={InstructionSetView} name=\"instructionSet\"/>\n    </Route>\n)\n\nrun(routes, (Handler) => React.render(<Handler/>, document.getElementById('app')))\n\n"}, {"instruction": "Generate a React component that displays a table of mechanics and their counts for a given deck. The component should take a deck of cards and the cards' data as props, sort the mechanics alphabetically, and display the mechanic name and its count in the deck. If the cards are still loading, it should display a loading indicator.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Loader from \"../../../../../../../components/loaders/diamond/loader\";\n\nconst DeckMechanics = ({deck, cards}) => {\n  const {loading} = cards;\n  let deckMechanics = [].concat.apply([], _.map(deck, (value)=>value.hasOwnProperty('mechanics') ? value.mechanics : null));\n  let countMechanics = _.countBy(deckMechanics, 'name');\n\n  const listMechanics = () =>{\n    const {mechanics} = cards;\n\n    return _.sortBy(mechanics).map(mechanic=>\n        <tr className={`${countMechanics[mechanic] > 0 ? 'has-mechanic' : ''}`} key={mechanic}>\n          <td>{_.startCase(mechanic)}</td>\n          <td>{countMechanics[mechanic] || 0}</td>\n        </tr>\n    )\n  };\n\n  return (\n      <div className=\"list mechanics-list\">\n        <div className=\"table-scroll\">\n          <table>\n            <thead>\n              <tr>\n                <td>Mechanic</td>\n                <td>Amount</td>\n              </tr>\n            </thead>\n            <tbody>\n            {loading ? <Loader theme=\"light\"/> : listMechanics()}\n            </tbody>\n          </table>\n        </div>\n      </div>\n  );\n};\n\nexport default DeckMechanics;\n\nDeckMechanics.propTypes = {\n  deck: PropTypes.array,\n  cards: PropTypes.object\n};"}, {"instruction": "Generate the React code for a stateless functional component called `BlockLink` that takes the following props: `content`, `isDocumentation`, `link`, and `title`. The component should contain a link that opens in a new tab and displays the title and content passed in as props. The link should have appropriate styling depending on whether `isDocumentation` is true (documentation styling) or false (code styling). Use classnames for styling.", "output": "/**\n *\n * BlockLink\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles.scss';\n\nfunction BlockLink({ content, isDocumentation, link, title }) {\n  return (\n    <a\n      className={cn(\n        styles.blockLink,\n        isDocumentation ? styles.blockLinkDocumentation : styles.blockLinkCode,\n      )}\n      href={link}\n      target=\"_blank\"\n    >\n      <FormattedMessage {...title} />\n      <FormattedMessage {...content}>{message => <p>{message}</p>}</FormattedMessage>\n    </a>\n  );\n}\n\nBlockLink.propTypes = {\n  content: PropTypes.object.isRequired,\n  isDocumentation: PropTypes.bool.isRequired,\n  link: PropTypes.string.isRequired,\n  title: PropTypes.object.isRequired,\n};\n\nexport default BlockLink;\n"}, {"instruction": "Generate the code for a React component that displays a button with the text \"Liked\" or \"Like\" depending on a boolean prop `liked`. The component should be styled with class names based on the `liked` prop.", "output": "import React from 'react';\nimport cx from 'classnames';\n\nimport Button from '../Button';\nimport Text from '../Text';\n\nexport default class LikeButton extends React.Component {\n\n  static propTypes = {\n    children: React.PropTypes.node,\n    liked: React.PropTypes.bool,\n    className: React.PropTypes.string,\n  }\n\n  getClasses() {\n    const liked = this.props.liked;\n\n    return cx(liked ? 'liked' : 'not-liked', this.props.className);\n  }\n\n  render() {\n    const liked = this.props.liked;\n\n    return (\n      <Button {...this.props} className={ this.getClasses() } type=\"flat\">\n        <Text bold>{liked ? 'Liked' : 'Like'}</Text>\n        { this.props.children }\n      </Button>\n    );\n  }\n}\n"}, {"instruction": "Generate a React component called ImageLooks3 that renders an SVG icon with the following shape: a rectangle with rounded corners, containing a smaller rectangle with rounded corners inside it. Style the component with the provided CSS properties.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageLooks3 = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M19.01 3h-14c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 7.5c0 .83-.67 1.5-1.5 1.5.83 0 1.5.67 1.5 1.5V15c0 1.11-.9 2-2 2h-4v-2h4v-2h-2v-2h2V9h-4V7h4c1.1 0 2 .89 2 2v1.5z\"/>\n  </SvgIcon>\n);\nImageLooks3 = pure(ImageLooks3);\nImageLooks3.displayName = 'ImageLooks3';\n\nexport default ImageLooks3;\n"}, {"instruction": "Provide me with the React code snippet for the Option component of the Chooser component library. This component should allow users to create selectable options within the Chooser component. The Option component should accept props such as tag, children, className, unselectedClassName, selectedClassName, value, and data. It should also leverage context to determine if an option is selected and handle click events to update the Chooser component's state.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass Option extends React.Component {\n  static displayName = \"Chooser.Option\";\n\n  static propTypes = {\n    tag: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    unselectedClassName: PropTypes.string,\n    selectedClassName: PropTypes.string,\n    value: PropTypes.any.isRequired,\n    data: PropTypes.any\n  };\n\n  static contextTypes = {\n    chooser: PropTypes.object.isRequired\n  };\n\n  static defaultProps = {\n    tag: 'div'\n  };\n\n  render() {\n    const selectionClasses = this.context.chooser.isSelected(this.props.value) ? this.props.selectedClassName : this.props.unselectedClassName;\n    const classes = classNames(this.props.className, selectionClasses);\n\n    return React.createElement(this.props.tag, { className: classes, onClick: this.handleClick }, this.props.children);\n  }\n\n  handleClick = (evt) => {\n    evt.preventDefault();\n\n    this.context.chooser.handleChoiceClick(this.props.value, this.props.data);\n  }\n}\n\nexport default Option;\n"}, {"instruction": "Provide a code snippet that encloses a React component with Material UI providers to style it using a custom material UI theme. The theme should have a purple primary color and a green secondary color.", "output": "import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from 'material-ui/styles';\nimport purple from 'material-ui/colors/purple';\nimport green from 'material-ui/colors/green';\nimport CssBaseline from 'material-ui/CssBaseline';\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: purple[300],\n      main: purple[500],\n      dark: purple[700],\n    },\n    secondary: {\n      light: green[300],\n      main: green[500],\n      dark: green[700],\n    },\n  },\n});\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <MuiThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;\n"}, {"instruction": "Craft a JavaScript React class component for an italic button in a text editor. Include the `getName` and `isVisible` static methods for menuItem registration, `getDefaultProps` to set default properties, `handlePress` to trigger the button action, `_toggleMarkup` to create an instance of a markup toggle helper, and the `render` method to render the button's markup.", "output": "import React from 'react';\nimport MenuButton from '../../components/MenuButton';\nimport ToggleMarkup from '../../helpers/Manipulation/ToggleMarkup';\nimport SelectedContent from '../../helpers/SelectedContent';\n\nconst ItalicButton = React.createClass({\n  statics: {\n    getName: () => \"italic\",\n    isVisible: (content, selection) => {\n      const selContent = new SelectedContent(selection, content);\n      return !selContent.isHeader();\n    }\n  },\n\n  propTypes: MenuButton.propTypes,\n\n  getDefaultProps() {\n    return {\n      type: \"em\",\n      text: \"Italic\",\n      icon: \"fa-italic\"\n    };\n  },\n\n  handlePress() {\n    const guids   = this.props.selection.guids();\n    const offsets = this.props.selection.offsets();\n    const position = this.props.selection.position();\n\n    const result = this._toggleMarkup().execute(guids, offsets, { type: this.props.type });\n\n    return { content: result.content, position: position };\n  },\n\n  _toggleMarkup() {\n    return new ToggleMarkup(this.props.content);\n  },\n\n  render() {\n    return (\n      <MenuButton {...this.props} onPress={this.handlePress} />\n    );\n  }\n});\n\nexport default ItalicButton;\n"}, {"instruction": "Create a React component representing an individual contact in a list. It should include an avatar, display name, and an \"add\" button to add the contact to a list.", "output": "import React from 'react';\nimport { PureRenderMixin } from 'react/addons';\n\nimport AvatarItem from 'components/common/AvatarItem.react';\n\nvar ContactItem = React.createClass({\n  displayName: 'ContactItem',\n\n  propTypes: {\n    contact: React.PropTypes.object,\n    onSelect: React.PropTypes.func\n  },\n\n  mixins: [PureRenderMixin],\n\n  _onSelect() {\n    this.props.onSelect(this.props.contact);\n  },\n\n  render() {\n    let contact = this.props.contact;\n\n    return (\n      <li className=\"contacts__list__item row\">\n        <AvatarItem image={contact.avatar}\n                    placeholder={contact.placeholder}\n                    size=\"small\"\n                    title={contact.name}/>\n\n        <div className=\"col-xs\">\n          <span className=\"title\">\n            {contact.name}\n          </span>\n        </div>\n\n        <div className=\"controls\">\n          <a className=\"material-icons\" onClick={this._onSelect}>add</a>\n        </div>\n      </li>\n    );\n  }\n});\n\nexport default ContactItem;\n"}, {"instruction": "Generate a simple React component that renders a contact item with an avatar, name, and 'add' button. When the button is clicked, a callback function should be triggered, passing the contact data as an argument.", "output": "import React from 'react';\nimport { PureRenderMixin } from 'react/addons';\n\nimport AvatarItem from 'components/common/AvatarItem.react';\n\nvar ContactItem = React.createClass({\n  displayName: 'ContactItem',\n\n  propTypes: {\n    contact: React.PropTypes.object,\n    onSelect: React.PropTypes.func\n  },\n\n  mixins: [PureRenderMixin],\n\n  _onSelect() {\n    this.props.onSelect(this.props.contact);\n  },\n\n  render() {\n    let contact = this.props.contact;\n\n    return (\n      <li className=\"contacts__list__item row\">\n        <AvatarItem image={contact.avatar}\n                    placeholder={contact.placeholder}\n                    size=\"small\"\n                    title={contact.name}/>\n\n        <div className=\"col-xs\">\n          <span className=\"title\">\n            {contact.name}\n          </span>\n        </div>\n\n        <div className=\"controls\">\n          <a className=\"material-icons\" onClick={this._onSelect}>add</a>\n        </div>\n      </li>\n    );\n  }\n});\n\nexport default ContactItem;\n"}, {"instruction": "Create a React component which takes a list of items and renders a mobile-friendly navigation list that collapses sublists on click.", "output": "/**\n * A mobile section\n */\n\nimport React from 'react';\nimport MobileListItem from './ListItem';\nimport { Link } from 'react-router';\n\nconst MobileSectionItem = React.createClass({\n\tdisplayName: 'MobileSectionItem',\n\tpropTypes: {\n\t\tchildren: React.PropTypes.node.isRequired,\n\t\tclassName: React.PropTypes.string,\n\t\tcurrentListKey: React.PropTypes.string,\n\t\thref: React.PropTypes.string.isRequired,\n\t\tlists: React.PropTypes.array,\n\t},\n\t// Render the lists\n\trenderLists () {\n\t\tif (!this.props.lists || this.props.lists.length <= 1) return null;\n\n\t\tconst navLists = this.props.lists.map((item) => {\n\t\t\t// Get the link and the classname\n\t\t\tconst href = item.external ? item.path : `${Keystone.adminPath}/${item.path}`;\n\t\t\tconst className = (this.props.currentListKey && this.props.currentListKey === item.path) ? 'MobileNavigation__list-item is-active' : 'MobileNavigation__list-item';\n\n\t\t\treturn (\n\t\t\t\t<MobileListItem key={item.path} href={href} className={className} onClick={this.props.onClick}>\n\t\t\t\t\t{item.label}\n\t\t\t\t</MobileListItem>\n\t\t\t);\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"MobileNavigation__lists\">\n\t\t\t\t{navLists}\n\t\t\t</div>\n\t\t);\n\t},\n\trender () {\n\t\treturn (\n\t\t\t<div className={this.props.className}>\n\t\t\t\t<Link\n\t\t\t\t\tclassName=\"MobileNavigation__section-item\"\n\t\t\t\t\tto={this.props.href}\n\t\t\t\t\ttabIndex=\"-1\"\n\t\t\t\t\tonClick={this.props.onClick}\n\t\t\t\t>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</Link>\n\t\t\t\t{this.renderLists()}\n\t\t\t</div>\n\t\t);\n\t},\n});\n\nmodule.exports = MobileSectionItem;\n"}, {"instruction": "Generate a React component that represents a button with click and keypress handlers. The button should have a `Test` label and a class name of `audio-preview-test-button`. It should be tabbable with a tab index of 0.", "output": "// @flow\n\nimport React from 'react';\n\ntype Props = {\n\n    /**\n     * Click handler for the button.\n     */\n    onClick: Function,\n\n    /**\n     * Keypress handler for the button.\n     */\n    onKeyPress: Function,\n};\n\n/**\n * React {@code Component} representing an button used for testing output sound.\n *\n * @returns { ReactElement}\n */\nexport default function TestButton({ onClick, onKeyPress }: Props) {\n    return (\n        <div\n            className = 'audio-preview-test-button'\n            onClick = { onClick }\n            onKeyPress = { onKeyPress }\n            role = 'button'\n            tabIndex = { 0 }>\n            Test\n        </div>\n    );\n}\n"}, {"instruction": "Design an SVG icon representing the Airplay functionality of a device.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvAirplay = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M6 22h12l-6-6zM21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4v-2H3V5h18v12h-4v2h4c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"/>\n  </SvgIcon>\n);\nAvAirplay = pure(AvAirplay);\nAvAirplay.displayName = 'AvAirplay';\nAvAirplay.muiName = 'SvgIcon';\n\nexport default AvAirplay;\n"}, {"instruction": "Generate the template of a React functional component for a Navbar Brand using Reactstrap and Typescript, employing props and context, including imports and styling with classNames.", "output": "import React from 'react';\nimport classNames from 'classnames';\nimport tbsUtils from './utils/bootstrapUtils';\n\nclass NavbarBrand extends React.Component {\n\n  render() {\n    const {className, children, ...props} = this.props;\n    let { $bs_navbar_bsClass: bsClass = 'navbar' } = this.context;\n    let brandClasses = tbsUtils.prefix({ bsClass }, 'brand');\n\n    if (React.isValidElement(children)) {\n      return React.cloneElement(children, {\n        className: classNames(\n          children.props.className, className, brandClasses\n        )\n      });\n    }\n\n    return (\n      <span {...props} className={classNames(className, brandClasses)}>\n        {children}\n      </span>\n    );\n  }\n}\n\nNavbarBrand.contextTypes = {\n  $bs_navbar_bsClass: React.PropTypes.string\n};\n\nexport default NavbarBrand;\n"}, {"instruction": "Create a React application that uses the Found library for routing. The application should have a sidebar with links to the following pages: Main, Foo, Bar, Baz, and Qux. The Main page should display the text \"Main\", the Foo page should display the text \"Foo\", and the Bar page should display the text \"Bar\". The Baz page should redirect to the Foo page, and the Qux page should display a \"Not found\" message.", "output": "import Link from 'found/Link';\nimport Redirect from 'found/Redirect';\nimport Route from 'found/Route';\nimport createBrowserRouter from 'found/createBrowserRouter';\nimport makeRouteConfig from 'found/makeRouteConfig';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction LinkItem(props) {\n  return (\n    <li>\n      <Link {...props} activeStyle={{ fontWeight: 'bold' }} />\n    </li>\n  );\n}\n\nconst propTypes = {\n  children: PropTypes.node,\n};\n\nfunction App({ children }) {\n  return (\n    <div>\n      <ul>\n        <LinkItem to=\"/\">Main</LinkItem>\n        <ul>\n          <LinkItem to=\"/foo\">Foo</LinkItem>\n          <LinkItem to=\"/bar\">Bar (async)</LinkItem>\n          <LinkItem to=\"/baz\">Baz (redirects to Foo)</LinkItem>\n          <LinkItem to=\"/qux\">Qux (missing)</LinkItem>\n        </ul>\n      </ul>\n\n      {children}\n    </div>\n  );\n}\n\nApp.propTypes = propTypes;\n\nconst BrowserRouter = createBrowserRouter({\n  routeConfig: makeRouteConfig(\n    <Route path=\"/\" Component={App}>\n      <Route Component={() => <div>Main</div>} />\n      <Route path=\"foo\" Component={() => <div>Foo</div>} />\n      <Route\n        path=\"bar\"\n        getComponent={() => import('./Bar').then((m) => m.default)}\n        getData={() =>\n          new Promise((resolve) => {\n            setTimeout(resolve, 1000, 'Bar');\n          })\n        }\n        render={({ Component, props }) =>\n          Component && props ? (\n            <Component {...props} />\n          ) : (\n            <div>\n              <small>Loading&hellip;</small>\n            </div>\n          )\n        }\n      />\n      <Redirect from=\"baz\" to=\"/foo\" />\n    </Route>,\n  ),\n\n  /* eslint-disable react/prop-types */\n  renderError: ({ error }) => (\n    <div>{error.status === 404 ? 'Not found' : 'Error'}</div>\n  ),\n  /* eslint-enable react/prop-types */\n});\n\nReactDOM.render(<BrowserRouter />, document.getElementById('root'));\n"}, {"instruction": "Write a React component called HomePage that displays a message in an h1 tag. The message should be \"Hello, world!\", and it should be internationalized using the react-intl library.", "output": "/*\n * HomePage\n *\n * This is the first thing users see of our App, at the '/' route\n *\n * NOTE: while this component should technically be a stateless functional\n * component (SFC), hot reloading does not currently support SFCs. If hot\n * reloading is not a necessity for you then you can refactor it and remove\n * the linting exception.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from './messages';\n\nexport default class HomePage extends React.Component { // eslint-disable-line react/prefer-stateless-function\n\n  render() {\n    return (\n      <h1>\n        <FormattedMessage {...messages.header} />\n      </h1>\n    );\n  }\n}\n"}, {"instruction": "Provide a list of React Native button examples, including basic buttons, buttons with custom styling, buttons with onPress callbacks, and buttons with multiple button types. Include examples of buttons with left-aligned and right-aligned buttons.", "output": "import React from 'react';\nimport {Image} from 'react-native';\n\nvar btnsDefault = [ { text: 'Button' } ];\n\nvar btnsTypes = [\n  { text: 'Primary',    type: 'primary',   },\n  { text: 'Secondary',  type: 'secondary', },\n  { text: 'Delete',     type: 'delete',    }\n];\n\nvar rows = [\n  {\n    text: \"Basic Example\",\n    right: btnsDefault,\n  }, {\n    text: \"onPress Callback\",\n    right: [\n      {\n        text: 'Press Me',\n        onPress: function(){ alert('button pressed') },\n        type: 'primary',\n      }\n    ],\n  }, {\n    text: \"Button Types\",\n    right: btnsTypes,\n  }, {\n    text: \"Button with custom styling\",\n    right: [\n      {\n        text: 'Button',\n        backgroundColor: '#4fba8a',\n        color: '#17807a',\n        underlayColor: \"#006fff\",\n      }\n    ],\n  },\n  {\n    text: \"Overswipe background color (drag me far)\",\n    right: btnsDefault,\n    backgroundColor: '#006fff',\n  }, {\n    text: \"Swipeout autoClose={true}\",\n    right: btnsDefault,\n    autoClose: true,\n  }, {\n    text: \"Five buttons (full-width) + autoClose={true}\",\n    right: [\n      { text: 'One'},\n      { text: 'Two'},\n      { text: 'Three' },\n      { text: 'Four' },\n      { text: 'Five' }\n    ],\n    autoClose: true,\n  }, {\n    text: \"Custom button component\",\n    right: [\n      {\n        component: <Image style={{flex: 1}} source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}} />\n      }\n    ],\n  }, {\n    text: \"Swipe me right (buttons on left side)\",\n    left: btnsDefault,\n  }, {\n    text: \"Buttons on both sides\",\n    left: btnsTypes,\n    right: btnsTypes,\n  },\n];\n\nexport default rows;\n"}, {"instruction": "Design an `SVG` React component for displaying a clock icon. The icon should adhere to the Material Design guidelines and be licensed under the Apache License 2.0.", "output": "/**\n * Copyright (c) 2017-present, NDLA.\n *\n * This source code is licensed under the GPLv3 license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// N.B! AUTOGENERATED FILE. DO NOT EDIT\nimport React from 'react';\nimport Icon from '../Icon';\n\nconst Time = props => (\n  <Icon\n    viewBox=\"0 0 48 48\"\n    data-license=\"Apache License 2.0\"\n    data-source=\"Material Design\"\n    {...props}>\n    <g>\n      <path d=\"M23.99 4C12.94 4 4 12.95 4 24s8.94 20 19.99 20C35.04 44 44 35.05 44 24S35.04 4 23.99 4zM24 40c-8.84 0-16-7.16-16-16S15.16 8 24 8s16 7.16 16 16-7.16 16-16 16zm1-26h-3v12l10.49 6.3L34 29.84l-9-5.34z\" />\n    </g>\n  </Icon>\n);\n\nexport default Time;\n"}, {"instruction": "Generate a React component called 'Bookmark' that renders a bookmark icon. When the icon is clicked, it should call a function passed in as a prop to toggle whether the bookmark is marked. If the bookmark is marked, the icon color should be black, otherwise it should be light gray.", "output": "import React from 'react';\n\n\nconst Bookmark = (props) => {\n  let style = { color: '#ccc'};\n  if(props.markBookmarkFlag){\n    style.color = '#000';\n  }\n\n  const onClick = (evt) => {\n    evt.stopPropagation();\n    const element = evt.target;\n    props.boundActions.toggleBookmark(element, props.feed);\n  };\n\n  return (\n    <span\n      onClick={onClick}\n      style={style}\n      className=\"glyphicon glyphicon-bookmark\"\n      aria-hidden=\"true\"/>\n  );\n};\n\nexport default Bookmark;\n"}, {"instruction": "Generate the React component that allows the user to create and edit quotes, as well as reorder the quotes. The component should include a form for editing the quote, a button to submit the quote, a dropdown to reorder the quotes, and a list of quotes.", "output": "import DraftActions from '../actions/DraftActions'\nimport DraftStore from '../stores/DraftStore'\nimport OrderSelect from './OrderSelect'\nimport Quote from './Quote'\nimport QuoteEditor from './QuoteEditor'\nimport QuotesActions from '../actions/QuotesActions'\nimport QuotesStore from '../stores/QuotesStore'\nimport React from 'react'\n\nfunction getState() {\n  return {\n    ordering: QuotesStore.getOrdering(),\n    quotes: QuotesStore.getQuotes(),\n    draft: DraftStore.getDraft()\n  }\n}\n\nexport default class IndexPage extends React.Component {\n\n  constructor() {\n    this.state = getState()\n    this._onChange = () => this.setState(getState())\n  }\n\n  componentDidMount() {\n    DraftStore.listen(this._onChange)\n    QuotesStore.listen(this._onChange)\n  }\n\n  componentDidUnmount() {\n    DraftStore.unlisten(this._onChange)\n    QuotesStore.unlisten(this._onChange)\n  }\n\n  onChangeDraft(newDraft) {\n    DraftActions.change(newDraft)\n  }\n\n  onSubmit() {\n    DraftActions.submit(DraftStore.getDraft())\n  }\n\n  onReorder(ordering) {\n    QuotesActions.reorder({ ordering: ordering })\n  }\n\n  render() {\n    return <div className=\"page\">\n      <h1>pudd.in</h1>\n      <QuoteEditor {...this.state.draft} onChange={this.onChangeDraft.bind(this)} onSubmit={this.onSubmit} />\n      <OrderSelect value={this.state.ordering} onChange={this.onReorder.bind(this)} />\n      {this.state.quotes.map((q) => <Quote key={q.id} {...q} />)}\n    </div>\n  }\n\n}\n"}, {"instruction": "Create a React component that renders an explicit icon for Material UI. The icon should be a white path inside a black square.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvExplicit = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 6h-4v2h4v2h-4v2h4v2H9V7h6v2z\"/>\n  </SvgIcon>\n);\nAvExplicit = pure(AvExplicit);\nAvExplicit.displayName = 'AvExplicit';\nAvExplicit.muiName = 'SvgIcon';\n\nexport default AvExplicit;\n"}, {"instruction": "Create a React function that returns an object containing a title and a component. The title should be \"Demo Error\" and the component should be an ErrorPage component.", "output": "/**\n * React Starter Kit (https://www.reactstarterkit.com/)\n *\n * Copyright \u00a9 2014-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport ErrorPage from './ErrorPage';\n\nfunction action() {\n  return {\n    title: 'Demo Error',\n    component: <ErrorPage />,\n  };\n}\n\nexport default action;\n"}, {"instruction": "Generate the code to make an About Cell component using React Native that has a profile picture, followed by a name, job, and school.", "output": "import React, { Component } from 'react';\nimport I18n from 'react-native-i18n';\nimport { connect } from 'react-redux';\nimport { View, Text, TouchableOpacity, Image, ScrollView, Alert } from 'react-native';\n\nimport { Styles, Metrics, Images, Colors, Fonts } from '@theme/';\nimport styles from './styles';\nimport CommonWidgets from '@components/CommonWidgets';\nimport Utils from '@src/utils';\n\nimport { Avatar } from 'react-native-elements';\n\nclass AboutCell extends Component {\n  render() {\n    return (\n      <View style={[styles.container, Styles.rowContainer]}>\n        <View style={Styles.center}>\n          {CommonWidgets.renderSizedAvatar(this.props.imgPath, null, Metrics.aboutAvatarSize)}\n        </View>\n        <View style={{ width: 20 }} />\n        <View style={{ flex: 1, justifyContent: 'center' }}>\n          <Text style={{ ...Fonts.style.h4, color: Colors.brandPrimary }}>{this.props.name}</Text>\n          <Text style={{ ...Fonts.style.h4, color: Colors.textPrimary }}>{this.props.job}</Text>\n          <Text style={{ ...Fonts.style.h4, color: Colors.textPrimary }}>{this.props.school}</Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nAboutCell.propTypes = {\n  imgPath: React.PropTypes.string.isRequired,\n  name: React.PropTypes.string.isRequired,\n  job: React.PropTypes.string.isRequired,\n  school: React.PropTypes.string.isRequired,\n};\n\nAboutCell.defaultProps = {\n  imgPath: 'https://facebook.github.io/react/img/logo_og.png',\n  name: 'All American',\n  job: \"Head-Coach: Women's Basketball\",\n  school: 'Washington University',\n};\n\nfunction mapStateToProps(state) {\n  const globals = state.get('globals');\n  return { globals };\n}\n\nexport default connect(mapStateToProps, null)(AboutCell);\n"}, {"instruction": "Generate a React component with a Breadcrumbs component that displays the current navigation hierarchy as a list of links. The component should use the Redux state to determine the current navigation path and display the corresponding items in the hierarchy as links.", "output": "import React from 'react'\nimport {connect} from 'react-redux'\n\nimport Msg from '../i18n/Msg'\n\n\nclass SmallBreadcrumbs extends React.Component {\n  render() {\n    return (\n      <ol className=\"breadcrumb\">\n        {\n          this.props.items.map((it, idx)=> (\n            <li key={it + idx}><Msg phrase={it}/></li>\n          ))\n        }\n      </ol>\n    )\n  }\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const {navigation, routing}= state;\n  const route = routing.locationBeforeTransitions.pathname;\n\n  const titleReducer = (chain, it)=> {\n    if (it.route == route) {\n      chain.push(it.title)\n    } else if (it.items) {\n      it.items.reduce(titleReducer, chain);\n    }\n    return chain\n  };\n\n  const items = navigation.items.reduce(titleReducer, ['Home']);\n\n  return {items}\n};\n\n\nexport default connect(mapStateToProps)(SmallBreadcrumbs)"}, {"instruction": "Create React code that displays three levels of heading text elements (\"h1\", \"h2\", and \"h3\") with the text of \"SpringBoot ReactJS Start!!\" inside each element.", "output": "import React from 'react';\r\n\r\nclass App extends React.Component {\r\n    render(){\r\n\r\n        return (\r\n                <div>\r\n                    <h1>SpringBoot ReactJS Start!!</h1>\r\n                    <h2>SpringBoot ReactJS Start!!</h2>\r\n                    <h3>SpringBoot ReactJS Start!!</h3>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;"}, {"instruction": "Generate a React component that utilizes styled-components to customize the look of the Material UI AppBar component. The new component should have a white background, an elevation of 2, and square corners. The component should accept children and pass them into the Toolbar element.", "output": "import React from 'react'\nimport AppBar from 'material-ui/AppBar'\nimport Toolbar from 'material-ui/Toolbar'\nimport styled from 'styled-components'\n\nconst _AppBar = styled(AppBar)`\n    margin-bottom: 2px;\n`\n\nexport default (props) => {\n    return (\n        <_AppBar position=\"static\" color=\"white\" elevation={2} square>\n            <Toolbar>\n                {props.children}\n            </Toolbar>\n        </_AppBar>\n    )\n}"}, {"instruction": "Generate an SVG icon of the GitHub logo.", "output": "import React from 'react';\n\nconst GithubIcon = () => (\n    <svg viewBox=\"0 0 284 277\">\n      <g>\n        <path fill=\"#fff\" d=\"M141.888675,0.0234927555 C63.5359948,0.0234927555 0,63.5477395 0,141.912168 C0,204.6023 40.6554239,257.788232 97.0321356,276.549924 C104.12328,277.86336 106.726656,273.471926 106.726656,269.724287 C106.726656,266.340838 106.595077,255.16371 106.533987,243.307542 C67.0604204,251.890693 58.7310279,226.56652 58.7310279,226.56652 C52.2766299,210.166193 42.9768456,205.805304 42.9768456,205.805304 C30.1032937,196.998939 43.9472374,197.17986 43.9472374,197.17986 C58.1953153,198.180797 65.6976425,211.801527 65.6976425,211.801527 C78.35268,233.493192 98.8906827,227.222064 106.987463,223.596605 C108.260955,214.426049 111.938106,208.166669 115.995895,204.623447 C84.4804813,201.035582 51.3508808,188.869264 51.3508808,134.501475 C51.3508808,119.01045 56.8936274,106.353063 65.9701981,96.4165325 C64.4969882,92.842765 59.6403297,78.411417 67.3447241,58.8673023 C67.3447241,58.8673023 79.2596322,55.0538738 106.374213,73.4114319 C117.692318,70.2676443 129.83044,68.6910512 141.888675,68.63701 C153.94691,68.6910512 166.09443,70.2676443 177.433682,73.4114319 C204.515368,55.0538738 216.413829,58.8673023 216.413829,58.8673023 C224.13702,78.411417 219.278012,92.842765 217.804802,96.4165325 C226.902519,106.353063 232.407672,119.01045 232.407672,134.501475 C232.407672,188.998493 199.214632,200.997988 167.619331,204.510665 C172.708602,208.913848 177.243363,217.54869 177.243363,230.786433 C177.243363,249.771339 177.078889,265.050898 177.078889,269.724287 C177.078889,273.500121 179.632923,277.92445 186.825101,276.531127 C243.171268,257.748288 283.775,204.581154 283.775,141.912168 C283.775,63.5477395 220.248404,0.0234927555 141.888675,0.0234927555\" />\n      </g>\n    </svg>\n);\n\nexport default GithubIcon;\n"}, {"instruction": "Design a React component called `Team` that encapsulates all the different elements for each team, including a clock, control buttons, and a meta section displaying the team name and current thought. The component should have a dynamic style that hides the team when the `hide` prop is set to `true` and hides both the team and all the child components when `hideAll` is set to `true`.", "output": "import React from 'react'\nimport classNames from 'classnames'\nimport Meta from './Meta'\nimport Control from './Control'\nimport Clock from './Clock'\n\nfunction Team(props) {\n  const divClass = classNames({\n    team: true,\n    hide: props.hide,\n  })\n  return (\n    <div className={divClass}>\n      <Meta\n        right={props.right}\n        teamName={props.name}\n        thought={props.thought}\n        hide={props.hideAll}\n      />\n      <Clock timeout={props.timeout} />\n      <Control controlFns={props.controlFns} running={props.running} end={props.end} />\n    </div>\n  )\n}\n\nexport default Team\n"}, {"instruction": "Create a React component using the `recompose/pure` HOC, the `SvgIcon` component, and a path with specific coordinates to render an icon for a settings cell.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionSettingsCell = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z\"/>\n  </SvgIcon>\n);\nActionSettingsCell = pure(ActionSettingsCell);\nActionSettingsCell.displayName = 'ActionSettingsCell';\nActionSettingsCell.muiName = 'SvgIcon';\n\nexport default ActionSettingsCell;\n"}, {"instruction": "Describe the following code snippet, providing specific details about what it does and any relevant context. This description should not be technical and should be easy for a non-technical audience to understand.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet EditorDragHandle = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M20 9H4v2h16V9zM4 15h16v-2H4v2z\"/>\n  </SvgIcon>\n);\nEditorDragHandle = pure(EditorDragHandle);\nEditorDragHandle.displayName = 'EditorDragHandle';\nEditorDragHandle.muiName = 'SvgIcon';\n\nexport default EditorDragHandle;\n"}, {"instruction": "Create a React component that renders a Material Design icon representing a person making a video call. The component should be pure and have an associated displayName and muiName.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet NotificationPersonalVideo = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M21 3H3c-1.11 0-2 .89-2 2v12c0 1.1.89 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.11-.9-2-2-2zm0 14H3V5h18v12z\"/>\n  </SvgIcon>\n);\nNotificationPersonalVideo = pure(NotificationPersonalVideo);\nNotificationPersonalVideo.displayName = 'NotificationPersonalVideo';\nNotificationPersonalVideo.muiName = 'SvgIcon';\n\nexport default NotificationPersonalVideo;\n"}, {"instruction": "Create a code snippet in React that includes a tooltip component with custom show and hide triggers, alignment, and styling.", "output": "import React from 'react';\nimport {Tooltip} from 'wix-style-react';\n\nimport styles from './Example.scss';\n\nexport default () =>\n  <div>\n    <Tooltip active placement=\"right\" alignment=\"center\" content=\"Dark Theme\" showTrigger=\"custom\" hideTrigger=\"custom\" theme=\"dark\">\n      <div className={styles.box}>Dark Theme</div>\n    </Tooltip>\n    <br/>\n    <Tooltip active placement=\"right\" alignment=\"center\" content=\"Error Theme\" showTrigger=\"custom\" hideTrigger=\"custom\" theme=\"error\">\n      <div className={styles.box}>Error Theme</div>\n    </Tooltip>\n  </div>;\n"}, {"instruction": "Create a React component to display a description from a CMS. The description should be truncated with an ellipsis (...) in case the description text is too long.", "output": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport createReactClass from 'create-react-class'\n\nconst DescriptionTeaser = createReactClass({\n  displayName: 'Teaser Text',\n\n  propTypes: {\n    description: PropTypes.string,\n  },\n\n  style: function () {\n    return {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }\n  },\n\n  render: function () {\n    return (\n      <div\n        className='item-description'\n        dangerouslySetInnerHTML={{ __html: this.props.description }}\n        style={this.style()}\n      />\n    )\n  },\n})\n\nexport default DescriptionTeaser\n"}, {"instruction": "Create a React component that takes the following props: style, iconStyle, tooltip, text, copyText, onCopy, type, and children. The component should render a CopyToClipboard component with the given props. If the type prop is \"icon\", the component should render an IconButton with the given style and iconStyle, and the tooltip prop as the tooltip. If the type prop is \"button\", the component should render a FlatButton with the given style and the tooltip prop as the tooltip. If the type prop is \"link\", the component should render a div with a Tooltip component with the given tooltip prop, and a Truncate component with the given text or copyText prop. If the type prop is \"list\", the component should render a div with a Truncate component with the given text or copyText prop. If the type prop is not provided, the component should render the children prop.", "output": "import React from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { IconButton, FlatButton, FontIcon } from 'material-ui';\nimport Tooltip from '../Tooltip';\nimport Truncate from '../Truncate';\n\nconst Clipboard = ({ style, iconStyle, tooltip, text, copyText, onCopy, type, children, ...other }) => {\n  const styles = {\n    listItem: {\n      display: 'flex',\n      padding: '16px 16px 16px 72px'\n    },\n    tooltipInnerDiv: {\n      display: 'flex'\n    },\n    fontIcon: {\n      fontSize: '1.3em',\n      paddingLeft: 10\n    }\n  };\n  const renderIcon = () => (\n    <IconButton\n      iconClassName=\"synicon-link-variant\"\n      style={style}\n      iconStyle={iconStyle}\n      tooltip={tooltip}\n    />\n  );\n  const renderButton = () => (\n    <FlatButton\n      {...other}\n      primary={true}\n    />\n  );\n  const renderLink = () => (\n    <div>\n      <Tooltip label={tooltip}>\n        <div style={styles.tooltipInnerDiv}>\n          <Truncate text={text || copyText} />\n          <FontIcon\n            color=\"#b8c0c9\"\n            style={styles.fontIcon}\n            className=\"synicon-link-variant\"\n          />\n        </div>\n      </Tooltip>\n    </div>\n  );\n  const renderListItem = () => (\n    <div style={styles.listItem}>\n      <Truncate text={text || copyText} />\n    </div>\n  );\n  const renderContent = () => {\n    const actions = {\n      icon: renderIcon(),\n      button: renderButton(),\n      link: renderLink(),\n      list: renderListItem()\n    };\n\n    return actions[type] || <div>{children}</div>;\n  };\n\n  return (\n    <CopyToClipboard\n      text={copyText}\n      onCopy={onCopy}\n    >\n      {renderContent()}\n    </CopyToClipboard>\n  );\n};\n\nexport default Clipboard;\n"}, {"instruction": "Generate a React app that when provided a statusId, will fetch and display a list of user accounts that have favourited that status.", "output": "import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport { fetchFavourites } from '../../actions/interactions';\nimport { ScrollContainer } from 'react-router-scroll';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'favourited_by', Number(props.params.statusId)]),\n});\n\nclass Favourites extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchFavourites(Number(this.props.params.statusId)));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this.props.dispatch(fetchFavourites(Number(nextProps.params.statusId)));\n    }\n  }\n\n  render () {\n    const { accountIds } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column>\n        <ColumnBackButton />\n\n        <ScrollContainer scrollKey='favourites'>\n          <div className='scrollable'>\n            {accountIds.map(id => <AccountContainer key={id} id={id} withNote={false} />)}\n          </div>\n        </ScrollContainer>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Favourites);\n"}, {"instruction": "Generate a JavaScript code snippet that uses a library to load and render data from an array of routes, allowing for multiple promises to be loaded from each route. The function should take in an array of routes, params, query, and an onData callback to update the data as it becomes available. It should also provide a run function that takes in a render function and an onUrlChange callback, and a render function that updates the data and calls the inner render function. Additionally, it should include a reloadHandler function to reload the data.", "output": "// @flow\n\nimport {map, flatten} from 'lodash'\nimport {Promise} from 'es6-promise'\nimport React from 'react'\n\ntype Route = {\n  handler: {\n    load:Function;\n  }\n}\n\nexport function loadAll(routes:Array<Route>, params:Object, query:Object, onData:(data:any)=>void) {\n  var data = {loaded: false};\n\n  routes\n    .filter(route => route.handler.load)\n    .forEach(function(route) {\n\n      // ok, they're allowed to do more than one, right?\n      var promises = route.handler.load(params, query)\n\n      return map(promises, function(promise, name) {\n\n        if (!promise.then) {\n          // it isn't a promise, it's a value\n          // resolve it\n          promise = Promise.resolve(promise)\n        }\n\n        return promise.then(function(d) {\n          data[name] = d\n          data.loaded = true\n          onData(data)\n        }, throwError)\n      })\n    })\n}\n\nfunction throwError(err) {\n  throw err\n}\n\n// store the last one :)\nvar lastHandler:any\nvar lastState:any\nvar lastData:any\nvar innerRender:any\n\nfunction nothing() {}\n\nexport function run(ren:Function, onUrlChange:Function = nothing):Function {\n\n  innerRender = ren\n\n  return function(Handler, state) {\n    lastHandler = Handler\n    lastState = state\n    lastData = {loaded: false}\n\n    onUrlChange(Handler, state)\n\n    // render once without any data\n    render()\n\n    // render again every time any of the promises resolve\n    loadAll(state.routes, state.params, state.query, render)\n  }\n}\n\nexport function render(data:any = lastData) {\n  lastData = data\n  var Handler = lastHandler\n  var state = lastState\n  innerRender(Handler, state, data)\n}\n\n// global reload\nexport function reloadHandler() {\n  loadAll(lastState.routes, lastState.params, lastState.query, render)\n}\n"}, {"instruction": "Create a React component that renders the Movie Icon from Material Design Icons.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageMovieCreation = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z\"/>\n  </SvgIcon>\n);\nImageMovieCreation = pure(ImageMovieCreation);\nImageMovieCreation.displayName = 'ImageMovieCreation';\n\nexport default ImageMovieCreation;\n"}, {"instruction": "Create a React application with a store that can be passed as props to all child components. Also include a router with the following routes:\n`=\"/\">Welcome\n\"/about-us\">About Us\n\"/contact-us\">Contact Us`", "output": "import React from 'react';\nimport { Router } from 'react-router';\nimport routes from '../../routes';\nimport { browserHistory } from 'react-router';\nimport './App.scss';\n\nconst store = window.store = {};\nconst createElement = (Component, props) => {\n  return <Component {...props} store={store} />\n};\n\nconst App = () => {\n  return (\n    <Router history={browserHistory} children={routes} createElement={createElement} />\n  )\n};\n\nexport default App;\n"}, {"instruction": "Describe a React component that can be used in a footer that allows you to customize the message.", "output": "import React from 'react';\nimport Footer from '../footer.js';\nimport { FormattedHTMLMessage } from 'react-intl';\n\nvar ThunderbirdFooter = React.createClass({\n  contextTypes: {\n    intl: React.PropTypes.object\n  },\n  render: function() {\n    // We can customize the thunderbird message here if we want.\n    return (\n      <Footer {...this.props}>\n        <FormattedHTMLMessage\n          id='footer_updates'\n        />\n      </Footer>\n    );\n  }\n});\n\nmodule.exports = ThunderbirdFooter;\n"}, {"instruction": "Generate the code for a React component that uses a SelectSearch component to select a page, a FormField component for a summary, and a TextHelp component for help. The component should use a FormState object to manage the form state, and should update the form state when the SelectSearch or FormField components change.", "output": "\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport FormField from '../../components/FormField';\n// import ImageField from '../../components/ImageField';\nimport SelectSearch from '../../components/SelectSearch';\nimport TextHelp from '../../components/TextHelp';\nimport FormState from '../../utils/FormState';\n\nexport default class PageItemEdit extends Component {\n\n  constructor(props) {\n    super(props);\n    const { onChange, item } = props;\n    this.state = { formState: new FormState(item, onChange) };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { onChange, item } = nextProps;\n    this.setState({ formState: new FormState(item, onChange) });\n  }\n\n  render() {\n    // const { index } = this.props;\n    const { formState } = this.state;\n    const pageSummary = formState.object;\n\n    return (\n      <div>\n        <FormField label=\"Page\">\n          <SelectSearch category=\"pages\"\n            value={pageSummary.id ? pageSummary.id.name : ''}\n            onChange={suggestion =>\n              formState.change('id')({\n                _id: suggestion._id, name: suggestion.name })} />\n        </FormField>\n        <FormField name=\"summary\" label=\"Summary\" help={<TextHelp />}>\n          <textarea name=\"summary\"\n            value={pageSummary.summary || ''}\n            rows={4}\n            onChange={formState.change('summary')} />\n        </FormField>\n        {/* }\n        <ImageField key=\"image\" label=\"Image\" name={`image-${index}`}\n          formState={formState} property=\"image\" />\n        { */}\n      </div>\n    );\n  }\n\n}\n\nPageItemEdit.propTypes = {\n  // index: PropTypes.number.isRequired,\n  item: PropTypes.object.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n"}, {"instruction": "Generate a React code snippet for an annual leave input field within a table row. Include a TextField component with a label, name, type, hint text, and an event handler for value changes.", "output": "import React from 'react';\n\nimport { TableRow, TableRowColumn } from '@material-ui/core/Table';\nimport TextField from '@material-ui/core/TextField';\n\nconst AnnualLeave = ({ handleChange }) => {\n  return (\n    <TableRow>\n      <TableRowColumn>\n        <h3>Your total number of annual leave days</h3>\n      </TableRowColumn>\n      <TableRowColumn>\n        <TextField\n          name=\"annualLeave\"\n          type=\"number\"\n          hintText=\"Your total number of annual leave days\"\n          onChange={handleChange}\n        />\n      </TableRowColumn>\n    </TableRow>\n  );\n};\n\nexport default AnnualLeave;\n"}, {"instruction": "Create a React component with the following specifications:\n- Name: CommunicationMessage\n- Import React and the pure function from recompose\n- Import the SvgIcon component from another file\n- The component should be a pure component using the pure function from recompose\n- The component should render an SVG icon with the following path:\n  - d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet CommunicationMessage = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"/>\n  </SvgIcon>\n);\nCommunicationMessage = pure(CommunicationMessage);\nCommunicationMessage.displayName = 'CommunicationMessage';\n\nexport default CommunicationMessage;\n"}, {"instruction": "Describe the Label component that optionally applies a bootstrap style to a text label. It hides itself if its content is empty.", "output": "import _Object$values from 'babel-runtime/core-js/object/values';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { bsClass, bsStyles, getClassSet, splitBsProps } from './utils/bootstrapUtils';\nimport { State, Style } from './utils/StyleConfig';\n\nvar Label = function (_React$Component) {\n  _inherits(Label, _React$Component);\n\n  function Label() {\n    _classCallCheck(this, Label);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  Label.prototype.hasContent = function hasContent(children) {\n    var result = false;\n\n    React.Children.forEach(children, function (child) {\n      if (result) {\n        return;\n      }\n\n      if (child || child === 0) {\n        result = true;\n      }\n    });\n\n    return result;\n  };\n\n  Label.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        children = _props.children,\n        props = _objectWithoutProperties(_props, ['className', 'children']);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    var classes = _extends({}, getClassSet(bsProps), {\n\n      // Hack for collapsing on IE8.\n      hidden: !this.hasContent(children)\n    });\n\n    return React.createElement(\n      'span',\n      _extends({}, elementProps, {\n        className: classNames(className, classes)\n      }),\n      children\n    );\n  };\n\n  return Label;\n}(React.Component);\n\nexport default bsClass('label', bsStyles([].concat(_Object$values(State), [Style.DEFAULT, Style.PRIMARY]), Style.DEFAULT, Label));"}, {"instruction": "Generate a React component for Material UI's AvCallToAction SVG icon.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvCallToAction = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3v-3h18v3z\"/>\n  </SvgIcon>\n);\nAvCallToAction = pure(AvCallToAction);\nAvCallToAction.displayName = 'AvCallToAction';\nAvCallToAction.muiName = 'SvgIcon';\n\nexport default AvCallToAction;\n"}, {"instruction": "Generate the code for a React component that implements a button that can link to both internal and external URLs.\nThe button should have different styles depending on its purpose (e.g., primary button, secondary button, success button).\nThe button should also be able to open links in new tabs or windows.\nFinally, the button should be able to be disabled.", "output": "import React from 'react'\nimport ButtonAnchor from 'react-ions/lib/components/Button/ButtonAnchor'\n\nconst ExampleButtonAnchor = () => (\n  <div>\n    <ButtonAnchor path='http://www.google.com' optClass='success'>External</ButtonAnchor>\n    <ButtonAnchor path='http://www.google.com' target='_blank' collapse={true}>External (new window)</ButtonAnchor>\n    <ButtonAnchor path='/components/progress-bar' internal={true} optClass='plain'>Internal</ButtonAnchor>\n    <ButtonAnchor disabled path='/components/progress-bar' internal={true} optClass='secondary'>Disabled</ButtonAnchor>\n  </div>\n)\n\nexport default ExampleButtonAnchor\n"}, {"instruction": "Provide a website footer with links to the home page, Facebook, Twitter, and a privacy policy. Include a copyright notice with the current year. Use inline styles for class names.", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Copyright } from '../';\nimport styles from './Footer.sass';\n\n\nfunction footerLinks() {\n  /* eslint-disable jsx-a11y/href-no-hash */\n  return (\n    <div className={styles.linksWrapper}>\n      <Link to=\"/\">Home</Link>\n      <a\n        href=\"https://www.facebook.com/resistancecalendar\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Facebook\n      </a>\n      <a\n        href=\"https://twitter.com/ResistCalendar\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Twitter\n      </a>\n      <Link to=\"/privacy-policy\">Privacy Policy</Link>\n    </div>\n  );\n  /* eslint-enable jsx-a11y/href-no-hash */\n}\n\nconst Footer = () => {\n  const year = (new Date()).getFullYear();\n\n  return (\n    <footer className={styles.footer}>\n      {footerLinks()}\n      <Copyright year={year} />\n    </footer>\n  );\n};\n\nFooter.propTypes = {};\n\nexport default Footer;\n"}, {"instruction": "Generate a React component that renders media content within a specific day. It should accept a parameter 'params' that includes the year, month, and day. It should use this information to fetch data within that specific time range.", "output": "import React from 'react';\nimport MediaByInterval from './media_by_interval';\nimport moment from 'moment';\n\nexport default class MediaByDay extends MediaByInterval {\n  fetchParams(props) {\n    return {\n      year: props.params.year,\n      month: props.params.month,\n      day: props.params.day\n    }\n  }\n\n  titleElements() {\n    let titleDate = moment({\n      month: this.props.params.month - 1,\n      year:  this.props.params.year,\n      day:   this.props.params.day\n    })\n    return <span>{titleDate.format('Do MMMM YYYY')}</span>\n  }\n}\n"}, {"instruction": "Provide a detailed description of the Wifi Icon component from the `react-icons` library. Include the name of the library and component, a general overview of the component's purpose, and specific details about its visual appearance and functionality.", "output": "import React from 'react';\nimport IconBase from './../components/IconBase/IconBase';\n\nexport default class Wifi extends React.Component {\n\trender() {\nif(this.props.bare) {\n\t\t\treturn <g>\n\n<g>\n\t<path d=\"M256.1,96L256.1,96c-79.9,0-155.7,29.9-213.9,84.1L32,189.6l9.9,9.8l32.3,32l9.3,9.2l9.6-8.8\n\t\tc44.5-40.9,102.3-63.5,162.8-63.5c60.5,0,118.4,22.6,162.8,63.5l9.6,8.8l9.3-9.2l32.3-32l9.9-9.8l-10.2-9.5\n\t\tC411.6,125.9,335.7,96,256.1,96z\"></path>\n\t<path d=\"M397.4,256.4c-38.8-35.1-88.9-54.4-141.1-54.4h-0.1h-0.3h-8.5l-0.1,0.2c-49.2,2-96,21.1-132.6,54.2l-10.5,9.5l10.1,10\n\t\tl32.7,32.4l9.1,9l9.6-8.4c25.3-22.2,57.4-34.5,90.3-34.5c33.1,0,65.2,12.3,90.5,34.5l9.6,8.4l9.1-9l32.7-32.4l10.1-10L397.4,256.4z\n\t\t\"></path>\n\t<path d=\"M256.2,416l9.6-9.5l52.8-52.2l10.6-10.5l-11.6-9.5c-15.4-11.4-32.4-20-61.5-20c-29,0-44.9,9.4-61.5,20l-11.5,9.5l10.6,10.5\n\t\tl52.8,52.2L256.2,416z\"></path>\n</g>\n\n\t\t\t</g>;\n\t\t}\t\treturn <IconBase>\n<g>\n\t<path d=\"M256.1,96L256.1,96c-79.9,0-155.7,29.9-213.9,84.1L32,189.6l9.9,9.8l32.3,32l9.3,9.2l9.6-8.8\n\t\tc44.5-40.9,102.3-63.5,162.8-63.5c60.5,0,118.4,22.6,162.8,63.5l9.6,8.8l9.3-9.2l32.3-32l9.9-9.8l-10.2-9.5\n\t\tC411.6,125.9,335.7,96,256.1,96z\"></path>\n\t<path d=\"M397.4,256.4c-38.8-35.1-88.9-54.4-141.1-54.4h-0.1h-0.3h-8.5l-0.1,0.2c-49.2,2-96,21.1-132.6,54.2l-10.5,9.5l10.1,10\n\t\tl32.7,32.4l9.1,9l9.6-8.4c25.3-22.2,57.4-34.5,90.3-34.5c33.1,0,65.2,12.3,90.5,34.5l9.6,8.4l9.1-9l32.7-32.4l10.1-10L397.4,256.4z\n\t\t\"></path>\n\t<path d=\"M256.2,416l9.6-9.5l52.8-52.2l10.6-10.5l-11.6-9.5c-15.4-11.4-32.4-20-61.5-20c-29,0-44.9,9.4-61.5,20l-11.5,9.5l10.6,10.5\n\t\tl52.8,52.2L256.2,416z\"></path>\n</g>\n</IconBase>;\n\t}\n};Wifi.defaultProps = {bare: false}"}, {"instruction": "Generate a React component that displays information about a diary backup and creates a backup when a button is clicked. The component should include:\n\n- A title (\"Backup\")\n- A paragraph with a label (\"Last backup:\") and the last backup time (or \"Never\" if no backup exists)\n- A button that initiates a backup and displays a progress bar while the backup is in progress\n- The button should have the text \"Create backup\" and use the `ProgressButton` component from the same project", "output": "import _ from 'lodash';\nimport React from 'react';\nimport moment from 'moment';\n\nimport ProgressButton from '../progressButton';\nimport DateFormat from '../date';\nimport { connectRedux } from '../../helpers/decorators';\n\n\nvar Component = React.createClass({\n  render: function() {\n    let { diary } = this.props.data;\n    let { diaryMgr } = diary;\n\n    let lastBackupTime = moment(diaryMgr.backupLastTime);\n\n    lastBackupTime = (lastBackupTime.valueOf()) ? (\n      <DateFormat date={diaryMgr.backupLastTime} format=\"MMMM DD, YYYY - HH:mm:ss\" />\n    ) : (\n      <span>Never</span>\n    ) \n\n    let btnAttrs = {\n      defaultProgressMsg: 'Making backup...',\n      progressProps: {\n        centered: false\n      },\n      checkVar: diary.makingBackup,\n      onClick: this._makeBackup,\n    };\n\n    return (\n      <div className=\"backup-file\">\n        <h2>Backup</h2>\n        <p className=\"last\">\n          <label>Last backup:</label>\n          {lastBackupTime}\n        </p>\n        <ProgressButton {...btnAttrs}>Create backup</ProgressButton>\n      </div>\n    );\n  },\n\n  _makeBackup: function() {\n    this.props.actions.makeBackup();\n  },\n\n});\n\n\nmodule.exports = connectRedux([\n  'makeBackup',\n])(Component);\n\n"}, {"instruction": "Generate a React component that renders an SVG icon with the following design: A grid of 9 squares, arranged in a 3x3 grid. Each square is outlined in black and filled with white.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionSettingsCell = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z\"/>\n  </SvgIcon>\n);\nActionSettingsCell = pure(ActionSettingsCell);\nActionSettingsCell.displayName = 'ActionSettingsCell';\nActionSettingsCell.muiName = 'SvgIcon';\n\nexport default ActionSettingsCell;\n"}, {"instruction": "Generate React code for a custom select component that uses the react-css package for dynamic styling. The component should include hover styles and allow for various color options.", "output": "import React from 'react'\nimport reactCSS, { hover } from 'reactcss'\nimport _ from 'lodash'\nimport { colors, css, fonts } from '../helpers'\n\nexport const Media = (props) => {\n  const styles = reactCSS({\n    'default': {\n      select: {\n        background: 'transparent',\n        border: 'none',\n        height: 30,\n        boxShadow: 'inset 0 0 0 1px #ccc',\n        borderRadius: 2,\n        textTransform: 'uppercase',\n        color: '#aaa',\n        cursor: 'pointer',\n        outline: 'none',\n        fontSize: fonts.sizes.medium,\n\n        transition: 'box-shadow 200ms ease-out, color 200ms ease-out',\n      },\n    },\n    'hover': {\n      select: {\n        boxShadow: 'inset 0 0 0 1px #888',\n        color: '#777',\n      },\n    },\n    'bare': {\n      select: {\n        boxShadow: 'none',\n        padding: 0,\n      },\n    },\n    ...css.build('media', 'color', colors),\n  }, props)\n\n  return (\n    <select style={ styles.select } value={ props.value } onChange={ props.onChange }>\n      { _.map(props.options, (option) => {\n        return <option key={ option.value } value={ option.value }>{ option.label }</option>\n      }) }\n    </select>\n  )\n}\n\nexport default hover(Media)\n"}, {"instruction": "Create a React component named \"SocialNotificationsPaused\" using a third-party library called \"recompose\" to enhance the component for performance optimization and generate the SVG code for a specific icon named \"NotificationsPaused\" from the Material Design Icons library.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet SocialNotificationsPaused = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.93 6 11v5l-2 2v1h16v-1l-2-2zm-3.5-6.2l-2.8 3.4h2.8V15h-5v-1.8l2.8-3.4H9.5V8h5v1.8z\"/>\n  </SvgIcon>\n);\nSocialNotificationsPaused = pure(SocialNotificationsPaused);\nSocialNotificationsPaused.displayName = 'SocialNotificationsPaused';\nSocialNotificationsPaused.muiName = 'SvgIcon';\n\nexport default SocialNotificationsPaused;\n"}, {"instruction": "Create a React application with a tabbed interface using JqxTabs. The tabs should be labeled \"Map\" and \"Information\". The \"Map\" tab should use the Google Maps API to display a map of the Great Pyramid of Giza. The \"Information\" tab should display a brief description of the pyramid.", "output": "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport JqxTabs from '../../../jqwidgets-react/react_jqxtabs.js';\n\nclass App extends React.Component {\n    render() {\n        let initialize = () => {\n            let mapCanvas = document.getElementById('map-canvas');\n            let mapOptions = {\n                center: new google.maps.LatLng(29.979234, 31.134202),\n                zoom: 17,\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n            }\n            let map = new google.maps.Map(mapCanvas, mapOptions)\n        };\n        let initTabContent = (tab) => {\n            if (tab === 0) {\n                google.maps.event.addDomListener(window, 'load', initialize);\n            }\n        }; \n        return (\n            <div>\n\n            <p style={{ fontFamily: 'Verdana' }}>\n                Great Pyramid of Giza</p>\n            <JqxTabs ref='myTabs'\n                width={600} height={400}\n                initTabContent={initTabContent}\n            >\n                <ul style={{ marginLeft: 20 }}>\n                    <li>Map</li>\n                    <li>Information</li>\n                </ul>\n                <div>\n                        <div id=\"map-canvas\" style={{ width: '100%', height: '100%' }}>\n                    </div>\n                </div>\n                <div>\n                    The Great Pyramid of Giza (also known as the Pyramid of Khufu or the Pyramid of\n                    Cheops) is the oldest and largest of the three pyramids in the Giza Necropolis bordering\n                    what is now El Giza, Egypt. It is the oldest of the Seven Wonders of the Ancient\n                    World, and the only one to remain largely intact.\n                </div>\n            </JqxTabs>\n\n        </div>\n        )\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('app'));\n"}, {"instruction": "Create a React error boundary component that logs errors, and if on the search results page, displays a SearchResultErrorMessage component.", "output": "import React from 'react'\nimport logger from 'js/utils/logger'\nimport { getUrlParameters } from 'js/utils/utils'\nimport SearchResultErrorMessage from 'js/components/Search/SearchResultErrorMessage'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true }\n  }\n\n  componentDidCatch(error, info) {\n    logger.error(error)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      const query = getUrlParameters().q || null\n      return <SearchResultErrorMessage query={query} />\n    }\n\n    return this.props.children\n  }\n}\n\nErrorBoundary.propTypes = {}\nErrorBoundary.defaultProps = {}\n\nexport default ErrorBoundary\n"}, {"instruction": "Create a React component named DialogActions that will render a group of buttons based on the given list of actions that will have a label and an onClick function.\nThe component should also have an onClose function that will be passed down to the buttons and a default set of empty actions.", "output": "// @flow\n\nimport React, { Component } from 'react'; \n\nimport { Button } from '../../atoms/Button';\n\nexport type DialogAction = {\n  label: string;\n  onClick: Function;\n};\n\nexport type DialogActionsProps = {\n  actions: DialogAction[];\n  onClose: Function;\n}\n\nexport class DialogActions extends Component<*, DialogActionsProps, *> {\n  render() {\n    const { actions, onClose } = this.props;\n    return (\n      <div>\n        {actions.map((a, i) => (\n          <Button key={i} onClick={a.onClick}>{a.label}</Button>\n        ))}\n        <Button onClick={onClose}>Close</Button>\n      </div>\n    );\n  }\n}\n\nObject.assign(DialogActions, {\n  defaultProps: {\n    actions: []\n  },\n});\n"}, {"instruction": "React component for an SVG icon of a right chevron.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet NavigationChevronRight = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/>\n  </SvgIcon>\n);\nNavigationChevronRight = pure(NavigationChevronRight);\nNavigationChevronRight.displayName = 'NavigationChevronRight';\nNavigationChevronRight.muiName = 'SvgIcon';\n\nexport default NavigationChevronRight;\n"}, {"instruction": "Craft a JavaScript code snippet that renders a right-hand sidebar with a contents navigation for a blog or article. The sidebar should be hidden on mobile and display only on tablet and above screen sizes, featuring a list of anchor tags linking to sections within the page.", "output": "import React from 'react'\nimport Link from 'gatsby-link'\nimport styled from 'styled-components'\nimport { rhythm } from '../utils/typography'\nimport { media } from '../utils/media'\nimport PropTypes from 'prop-types'\n\nimport StyledLink from './Link'\n\nconst Content = styled.section`width: 100%;`\n\nconst SideContainer = styled.ul`\n  list-style: none;\n  margin: 0;\n  position: fixed;\n  ${media.desktop`\n    display: none;\n  `};\n  ${media.giant`\n    display: block;\n  `};\n`\n\nconst SideItem = styled.li`margin: 0;`\n\nconst SideHeader = styled.span`\n  font-size: ${rhythm(1 / 2)};\n  text-transform: uppercase;\n  color: rgba(0, 0, 0, 0.5);\n`\n\nconst SideLink = StyledLink.withComponent(`a`)\n\nconst SideBar = ({ sections }) =>\n  <SideContainer>\n    <SideHeader>Contents</SideHeader>\n    {sections &&\n      sections.split(', ').map((section, array) =>\n        <SideItem>\n          <SideLink href={`#${section}`}>\n            {section.replace(/-/g, ' ')}\n          </SideLink>\n        </SideItem>\n      )}\n  </SideContainer>\n\nSideBar.propTypes = {\n  sections: PropTypes.string,\n}\n\nexport default SideBar\n"}, {"instruction": "Generate a React component that renders an image with the provided URL and an optional onClick handler. The component should toggle a CSS class to hide or show the image based on the display prop.", "output": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport CSSModules from 'react-css-modules'\nimport styles from './Gallery.less'\nimport { className } from './Gallery'\n\nconst GalleryImage = ({ imageUrl, onClick, display = true }) => (\n\t<div\n\t\tonClick={onClick}\n\t>\n\t\t<img styleName={display ? `${className}__image` : `${className}__image ${className}__image--hidden`} // eslint-disable-line max-len\n\t\t\tsrc={imageUrl}\n\t\t\trole='presentation'\n\t\t/>\n\t</div>\n)\n\nGalleryImage.propTypes = {\n\tdisplay: PropTypes.bool,\n\timageUrl: PropTypes.string,\n\tonClick: PropTypes.func\n}\n\nexport default CSSModules(GalleryImage, styles, { allowMultiple: true })\n"}, {"instruction": "Create a React component that displays a group of video cards with a title and extra link. The component should ignore the first video if specified and scroll through the remaining videos.", "output": "import React from 'react';\n\nimport { VideoCardGroupContainer, Title, ExtraLink } from './styles';\nimport VideoCard from './components/VideoCard';\nimport Slider, { SliderItem } from './components/Slider';\n\nfunction VideoCardGroup({ ignoreFirstVideo, category }) {\n  const categoryTitle = category.titulo;\n  const categoryColor = category.cor;\n  const categoryExtraLink = category.link_extra;\n  const videos = category.videos;\n  return (\n    <VideoCardGroupContainer>\n      {categoryTitle && (\n        <>\n          <Title style={{ backgroundColor: categoryColor || 'red' }}>\n            {categoryTitle}\n          </Title>\n          {categoryExtraLink &&\n            <ExtraLink href={categoryExtraLink.url} target=\"_blank\">\n              {categoryExtraLink.text}\n            </ExtraLink>\n          }\n        </>\n      )}\n      <Slider>\n        {videos.map((video, index) => {\n          if (ignoreFirstVideo && index === 0) {\n            return null;\n          }\n\n          return (\n            <SliderItem key={video.titulo}>\n              <VideoCard\n                videoTitle={video.titulo}\n                videoURL={video.url}\n                categoryColor={categoryColor}\n              />\n            </SliderItem>\n          );\n        })}\n      </Slider>\n    </VideoCardGroupContainer>\n  );\n}\n\nexport default VideoCardGroup;\n"}, {"instruction": "Generate an SVG React component that represents the Material Design icon for replay 30 seconds.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvReplay30 = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 5V1L7 6l5 5V7c3.3 0 6 2.7 6 6s-2.7 6-6 6-6-2.7-6-6H4c0 4.4 3.6 8 8 8s8-3.6 8-8-3.6-8-8-8zm-2.4 8.5h.4c.2 0 .4-.1.5-.2s.2-.2.2-.4v-.2s-.1-.1-.1-.2-.1-.1-.2-.1h-.5s-.1.1-.2.1-.1.1-.1.2v.2h-1c0-.2 0-.3.1-.5s.2-.3.3-.4.3-.2.4-.2.4-.1.5-.1c.2 0 .4 0 .6.1s.3.1.5.2.2.2.3.4.1.3.1.5v.3s-.1.2-.1.3-.1.2-.2.2-.2.1-.3.2c.2.1.4.2.5.4s.2.4.2.6c0 .2 0 .4-.1.5s-.2.3-.3.4-.3.2-.5.2-.4.1-.6.1c-.2 0-.4 0-.5-.1s-.3-.1-.5-.2-.2-.2-.3-.4-.1-.4-.1-.6h.8v.2s.1.1.1.2.1.1.2.1h.5s.1-.1.2-.1.1-.1.1-.2v-.5s-.1-.1-.1-.2-.1-.1-.2-.1h-.6v-.7zm5.7.7c0 .3 0 .6-.1.8l-.3.6s-.3.3-.5.3-.4.1-.6.1-.4 0-.6-.1-.3-.2-.5-.3-.2-.3-.3-.6-.1-.5-.1-.8v-.7c0-.3 0-.6.1-.8l.3-.6s.3-.3.5-.3.4-.1.6-.1.4 0 .6.1.3.2.5.3.2.3.3.6.1.5.1.8v.7zm-.8-.8v-.5c0-.1-.1-.2-.1-.3s-.1-.1-.2-.2-.2-.1-.3-.1-.2 0-.3.1l-.2.2s-.1.2-.1.3v2s.1.2.1.3.1.1.2.2.2.1.3.1.2 0 .3-.1l.2-.2s.1-.2.1-.3v-1.5z\"/>\n  </SvgIcon>\n);\nAvReplay30 = pure(AvReplay30);\nAvReplay30.displayName = 'AvReplay30';\n\nexport default AvReplay30;\n"}, {"instruction": "Create a React component that embeds a Dacast video using an iframe. The component should take a webcast object as a prop, which includes a channel and file property. The iframe source should be constructed using the channel and file properties.", "output": "import React from 'react'\nimport { webcastPropType } from '../../utils/webcastUtils'\n\nconst EmbedDacast = (props) => {\n  const channel = props.webcast.channel\n  const file = props.webcast.file\n  const iframeSrc = `https://iframe.dacast.com/b/${channel}/c/${file}`\n  return (\n    <iframe\n      src={iframeSrc}\n      width=\"100%\"\n      height=\"100%\"\n      frameBorder=\"0\"\n      scrolling=\"no\"\n      player=\"vjs5\"\n      autoPlay=\"true\"\n      allowFullScreen\n      webkitallowfullscreen\n      mozallowfullscreen\n      oallowfullscreen\n      msallowfullscreen\n    />\n  )\n}\n\nEmbedDacast.propTypes = {\n  webcast: webcastPropType.isRequired,\n}\n\nexport default EmbedDacast\n"}, {"instruction": "Create a React component that displays a profile page for a specific user. The component should take a `userId` prop and render a `ProfileComponent` container with that `userId`. If no `userId` is provided, it should use the current user's ID.", "output": "import { Meteor } from 'meteor/meteor';\nimport React from 'react';\n\nimport ProfileComponent from '../containers/profile/profile';\n\nexport class Profile extends React.Component {\n  render() {\n    return (\n      <div id=\"page-profile\" className=\"page-container profile\" style={{ overflow: \"hidden\" }}>\n        <div className=\"container\">\n          <div className=\"flex-row nopad\" style={{ padding: \"0 0 5px\" }}>\n            <div className=\"col col-xs-12\">\n              <ProfileComponent userId={ this.props.params.userId ? this.props.params.userId : Meteor.userId() } />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component that displays a profile card with the following information:\n- Name: Charles C Click\n- Email: CharlesClick@vertinext.com\n- Skillset: Web Development\n- Website: Built using React and Materialize\n- Short bio: Coder and web developer in Knoxville, TN, who hosts websites, games and other services through a personal server.\n- Link to resume: Google Doc link", "output": "import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n      <div className=\"row\">\r\n      <div className=\"col s12\">\r\n      <div className=\"card hoverable\">\r\n      <div className=\"card-content red-text\">\r\n        <span className=\"card-title red-text\">Charles C Click</span><br />\r\n        Email:&nbsp;<a href=\"mailto:CharlesClick@vertinext.com\">CharlesClick@vertinext.com</a><br />\r\n        Skillset:&nbsp;Web Development<br />\r\n        This Website:&nbsp;<a href=\"https://facebook.github.io/react/\">React</a> and <a href=\"http://materializecss.com/\">Materialize</a><br />\r\n        <blockquote>\r\n          I am a coder and web developer in Knoxville, TN, who also hosts websites, games and other services through a personal server. There is a list of my Github repositories and currently hosted games and services available on other pages.\r\n        </blockquote>\r\n      </div>\r\n      <div className=\"card-action red-text\">\r\n        <a href=\"https://docs.google.com/document/d/1ykS2_34-GQd0SbrjpG9NbBvq40L62qWxGJc43KAjOD8/edit?usp=sharing\">View Resume</a>\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = Home;\r\n"}, {"instruction": "Create a React component for an error alert icon. It should have a circular design with a cross symbol in the middle. Use Material-UI's SvgIcon as the base and provide a descriptive name and display name.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AlertError = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\n  </SvgIcon>\n);\nAlertError = pure(AlertError);\nAlertError.displayName = 'AlertError';\nAlertError.muiName = 'SvgIcon';\n\nexport default AlertError;\n"}, {"instruction": "Create a React component that notifies a user that an account has moved to another account. The message should include a link to the new account. The component should also include an avatar and display name for the new account.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport AvatarOverlay from '../../../components/avatar_overlay';\nimport DisplayName from '../../../components/display_name';\nimport Icon from 'mastodon/components/icon';\n\nexport default class MovedNote extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    from: ImmutablePropTypes.map.isRequired,\n    to: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleAccountClick = e => {\n    if (e.button === 0) {\n      e.preventDefault();\n      this.context.router.history.push(`/accounts/${this.props.to.get('id')}`);\n    }\n\n    e.stopPropagation();\n  }\n\n  render () {\n    const { from, to } = this.props;\n    const displayNameHtml = { __html: from.get('display_name_html') };\n\n    return (\n      <div className='account__moved-note'>\n        <div className='account__moved-note__message'>\n          <div className='account__moved-note__icon-wrapper'><Icon id='suitcase' className='account__moved-note__icon' fixedWidth /></div>\n          <FormattedMessage id='account.moved_to' defaultMessage='{name} has moved to:' values={{ name: <bdi><strong dangerouslySetInnerHTML={displayNameHtml} /></bdi> }} />\n        </div>\n\n        <a href={to.get('url')} onClick={this.handleAccountClick} className='detailed-status__display-name'>\n          <div className='detailed-status__display-avatar'><AvatarOverlay account={to} friend={from} /></div>\n          <DisplayName account={to} />\n        </a>\n      </div>\n    );\n  }\n\n}\n"}, {"instruction": "Design a React component called `FormHeaderWithSave` that displays a bold header text and a save button side by side. The header text should be slightly larger in size and bold. The save button should be positioned to the right of the header text.", "output": "import React from 'react';\nimport { SpacedLayout } from 'layabout';\nimport styled from 'styled-components';\nimport { Button } from '../../common';\n\nconst HeaderText = styled.span`\n  font-size: 1.1em;\n  font-weight: bold;\n`;\n\nconst FormHeaderWithSave = ({ children }) => (\n  <SpacedLayout container=\"header\">\n    <HeaderText>{children}</HeaderText>\n    <Button type=\"submit\">Save</Button>\n  </SpacedLayout>\n);\n\nexport default FormHeaderWithSave;\n"}, {"instruction": "Generate the React code for an SVG icon representing a camera with an alternate design. The icon should have a circle in the center, a viewfinder shape, and be pure (meaning it doesn't rerender unless its props change).", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageCameraAlt = (props) => (\n  <SvgIcon {...props}>\n    <circle cx=\"12\" cy=\"12\" r=\"3.2\"/><path d=\"M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z\"/>\n  </SvgIcon>\n);\nImageCameraAlt = pure(ImageCameraAlt);\nImageCameraAlt.displayName = 'ImageCameraAlt';\nImageCameraAlt.muiName = 'SvgIcon';\n\nexport default ImageCameraAlt;\n"}, {"instruction": "Generate the React component code for an SVG toggle radio button that is checked. The icon should include a circular outline, a filled circle in the center, and a path for the radio button's outer and inner circle. Ensure the component is pure and has appropriate display name and muiName properties.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ToggleRadioButtonChecked = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/>\n  </SvgIcon>\n);\nToggleRadioButtonChecked = pure(ToggleRadioButtonChecked);\nToggleRadioButtonChecked.displayName = 'ToggleRadioButtonChecked';\nToggleRadioButtonChecked.muiName = 'SvgIcon';\n\nexport default ToggleRadioButtonChecked;\n"}, {"instruction": "Give me the code snippet for a React component called Navigation that displays a sidebar with a user's name and a list of trending topics.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAuthenticatedUser, getIsTrendingTopicsLoading, getTrendingTopics } from '../../reducers';\n\nimport Topics from '../../components/Sidebar/Topics';\nimport Sidenav from '../../components/Navigation/Sidenav';\n\nconst Navigation = ({ authenticatedUser, trendingTopicsLoading, trendingTopics }) => (\n  <div>\n    <Sidenav username={authenticatedUser.name} />\n    <Topics loading={trendingTopicsLoading} topics={trendingTopics} />\n  </div>\n);\n\nNavigation.propTypes = {\n  authenticatedUser: PropTypes.shape().isRequired,\n  trendingTopicsLoading: PropTypes.bool.isRequired,\n  trendingTopics: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default connect(\n  state => ({\n    authenticatedUser: getAuthenticatedUser(state),\n    trendingTopicsLoading: getIsTrendingTopicsLoading(state),\n    trendingTopics: getTrendingTopics(state),\n  }),\n)(Navigation);\n"}, {"instruction": "Design a React component with three columns in each row and two rows. Each column should contain an image, with a centered image in the second column of the first row. Use the Semantic UI React library for styling.", "output": "import React from 'react'\nimport { Grid, Image } from 'semantic-ui-react'\n\nconst GridExampleCelledInternally = () => (\n  <Grid celled='internally'>\n    <Grid.Row>\n      <Grid.Column width={3}>\n        <Image src='http://semantic-ui.com/images/wireframe/image.png' />\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Image src='http://semantic-ui.com/images/wireframe/centered-paragraph.png' />\n      </Grid.Column>\n      <Grid.Column width={3}>\n        <Image src='http://semantic-ui.com/images/wireframe/image.png' />\n      </Grid.Column>\n    </Grid.Row>\n\n    <Grid.Row>\n      <Grid.Column width={3}>\n        <Image src='http://semantic-ui.com/images/wireframe/image.png' />\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Image src='http://semantic-ui.com/images/wireframe/paragraph.png' />\n      </Grid.Column>\n      <Grid.Column width={3}>\n        <Image src='http://semantic-ui.com/images/wireframe/image.png' />\n      </Grid.Column>\n    </Grid.Row>\n  </Grid>\n)\n\nexport default GridExampleCelledInternally\n"}, {"instruction": "Turn the following React Native component into a styled component:\n\n```\nimport React, { Component } from 'react';\nimport { Text } from 'react-native';\n\nclass Subtitle extends Component {\n  render() {\n    return (\n      <Text ref={c => this._root = c} {...this.props} />\n    );\n  }\n}\n\nSubtitle.propTypes = {\n  ...Text.propTypes,\n  style: React.PropTypes.object,\n};\n\nexport default Subtitle;\n```", "output": "/* @flow */\n\n\nimport React, { Component } from 'react';\nimport { Text } from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\nimport mapPropsToStyleNames from '../../Utils/mapPropsToStyleNames';\n\nclass Subtitle extends Component {\n  render() {\n    return (\n      <Text ref={c => this._root = c} {...this.props} />\n    );\n  }\n}\n\nSubtitle.propTypes = {\n  ...Text.propTypes,\n  style: React.PropTypes.object,\n};\n\nconst StyledSubtitle = connectStyle('NativeBase.Subtitle', {}, mapPropsToStyleNames)(Subtitle);\nexport {\n  StyledSubtitle as Subtitle,\n};\n"}, {"instruction": "Create an interactive React component that allows users to preview their content on a simulated mobile device. The preview should be rendered in an iframe with specific dimensions. Make the component customizable by accepting children as props. Include a lifecycle method to access the iframe's document and console log it. Ensure the component uses proper prop types and default props.", "output": "import React, { Component } from 'react';\nimport ReactServer from 'react-dom/server';\nimport ReactDOM, { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport withStyles from 'isomorphic-style-loader/lib/withStyles';\n\n// import s from './Preview.css';\n\nconst styles = {\n  root: {\n    width: '375px',\n    height: '667px',\n  },\n};\n\n// @withStyles(s)\nexport default class MyComponent extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n  };\n\n  static defaultProps = {\n    children: null,\n  };\n\n  componentDidMount() {\n    // const { contentWindow: { document: iframeDocument } } = this.iframe;\n\n    // console.log(iframeDocument);\n  }\n\n  iframeRef = (ref) => { this.iframe = ref; };\n\n  renderContent = () => {\n    const { children } = this.props;\n\n    const html = ReactDOM.renderToString(\n      <html lang=\"zh-CN\">\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n        <title>\u9884\u89c8\u624b\u673a\u5c55\u793a</title>\n        <body>\n          {children}\n        </body>\n      </html>,\n    );\n\n    return html;\n  };\n\n  render() {\n    const { children, ...props } = this.props;\n\n    return (\n      <div\n        ref={this.iframeRef}\n        style={styles.root}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component called FollowButton that handles following and unfollowing a list, with an optional `className` and `style` prop. The button should have the text \"Following\" if the user is following the list, otherwise it should have the text \"Follow.\" The button should be disabled if the user is not logged in or if the list is not a custom list. If the user is not logged in, clicking the button should open a login modal.", "output": "import React from 'react';\nimport {connect} from 'react-redux';\nimport {getListByIdSelector, CUSTOM_LIST} from '../../../redux/list.reducer';\nimport {OPEN_MODAL} from '../../../redux/modal.reducer';\nimport Button from '../../base/Button';\nimport Icon from '../../base/Icon';\nimport T from '../../base/T';\n\nimport {withFollow} from '../../hoc/Follow';\n\nconst getListById = getListByIdSelector();\n\nexport const FollowButton = ({\n  disabled = false,\n  allowFollow,\n  isLoggedIn,\n  isFollowing,\n  follow,\n  unFollow,\n  requireLogin,\n  className,\n  style\n}) => {\n  if (!allowFollow) {\n    return null;\n  }\n  return (\n    <Button\n      className={className}\n      disabled={disabled}\n      type=\"link2\"\n      style={{\n        color: isFollowing ? 'var(--de-york)' : 'var(--petroleum)',\n        textDecoration: 'none',\n        ...style\n      }}\n      onClick={() => {\n        if (!isLoggedIn) {\n          return requireLogin();\n        }\n        if (isFollowing) {\n          return unFollow();\n        }\n        return follow();\n      }}\n      data-cy=\"follow-btn\"\n    >\n      <span className=\"align-middle\">\n        <Icon name=\"playlist_add\" className=\"mr-1 align-middle\" />\n        <T\n          component=\"list\"\n          name={isFollowing ? 'followingList' : 'followList'}\n        />\n      </span>\n    </Button>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const list = getListById(state, {_id: ownProps._id});\n  return {\n    allowFollow: list.type === CUSTOM_LIST,\n    isLoggedIn: state.userReducer.isLoggedIn\n  };\n};\nexport const mapDispatchToProps = dispatch => ({\n  requireLogin: () => {\n    dispatch({\n      type: OPEN_MODAL,\n      modal: 'login',\n      context: {\n        title: <T component=\"list\" name={'followList'} />,\n        reason: <T component=\"list\" name={'loginFollowModalDescription'} />\n      }\n    });\n  }\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withFollow(FollowButton));\n"}, {"instruction": "Create a React component for an SVG icon that displays a power settings icon. The icon should be fully customizable with props and use the Material UI SvgIcon component as its base.", "output": "import React from 'react';\nimport SvgIcon from '../../SvgIcon';\n\nconst ActionSettingsPower = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm2-22h-2v10h2V2zm3.56 2.44l-1.45 1.45C16.84 6.94 18 8.83 18 11c0 3.31-2.69 6-6 6s-6-2.69-6-6c0-2.17 1.16-4.06 2.88-5.12L7.44 4.44C5.36 5.88 4 8.28 4 11c0 4.42 3.58 8 8 8s8-3.58 8-8c0-2.72-1.36-5.12-3.44-6.56zM15 24h2v-2h-2v2z\"/>\n  </SvgIcon>\n);\nActionSettingsPower.displayName = 'ActionSettingsPower';\nActionSettingsPower.muiName = 'SvgIcon';\n\nexport default ActionSettingsPower;\n"}, {"instruction": "Design a React component named ShowcaseEndingCard that renders a paper card containing a site path card with a \"Continue to\" header title. Style the card with a white background, position it inline-block with a vertical alignment, and set its dimensions and margins for optimal display on a webpage.", "output": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport createReactClass from 'create-react-class'\nimport { Paper } from '@material-ui/core'\nimport SitePathCard from '../Collection/SitePathCard'\n\nconst ShowcaseEndingCard = createReactClass({\n  displayName: 'Showcase Ending',\n  propTypes: {\n    siteObject: PropTypes.object.isRequired,\n  },\n\n  style: function () {\n    return {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      position: 'relative',\n      marginLeft: '150px',\n      marginRight: '33vw',\n      height: 'auto',\n      cursor: 'pointer',\n      width: '500px',\n      overflow: 'hidden',\n      marginTop: '12vh',\n      backgroundColor: '#ffffff',\n    }\n  },\n\n  render: function () {\n    return (\n      <Paper style={this.style()}>\n        <SitePathCard siteObject={this.props.siteObject} addNextButton headerTitle='Continue to' fixedSize={false} />\n      </Paper>\n    )\n  },\n\n})\n\nexport default ShowcaseEndingCard\n"}, {"instruction": "Design an SVG icon component for a child-friendly place, such as a park or playground. The icon should be filled with the specified color, and should be pure, meaning that it does not change state over time.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet PlacesChildFriendly = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M13 2v8h8c0-4.42-3.58-8-8-8zm6.32 13.89C20.37 14.54 21 12.84 21 11H6.44l-.95-2H2v2h2.22s1.89 4.07 2.12 4.42c-1.1.59-1.84 1.75-1.84 3.08C4.5 20.43 6.07 22 8 22c1.76 0 3.22-1.3 3.46-3h2.08c.24 1.7 1.7 3 3.46 3 1.93 0 3.5-1.57 3.5-3.5 0-1.04-.46-1.97-1.18-2.61zM8 20c-.83 0-1.5-.67-1.5-1.5S7.17 17 8 17s1.5.67 1.5 1.5S8.83 20 8 20zm9 0c-.83 0-1.5-.67-1.5-1.5S16.17 17 17 17s1.5.67 1.5 1.5S17.83 20 17 20z\"/>\n  </SvgIcon>\n);\nPlacesChildFriendly = pure(PlacesChildFriendly);\nPlacesChildFriendly.displayName = 'PlacesChildFriendly';\nPlacesChildFriendly.muiName = 'SvgIcon';\n\nexport default PlacesChildFriendly;\n"}, {"instruction": "Create a React Native functional component that renders a back button with an arrow icon. The button should be positioned absolutely at the top left corner of the screen with a small offset and have a rounded background with a specific brand color. When pressed, the button should navigate back to the previous screen using the react-native-router-flux library. Ensure the button adapts to the iPhone X notch by adjusting its position accordingly.", "output": "import React from 'react';\nimport {\n  TouchableOpacity,\n  StyleSheet,\n} from 'react-native';\nimport { Icon } from 'react-native-elements';\nimport { Actions } from 'react-native-router-flux';\nimport PropTypes from 'prop-types';\nimport { isIphoneX } from 'react-native-iphone-x-helper';\nimport { AppColors } from '../../theme/';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 20,\n    left: 20,\n    padding: 5,\n    backgroundColor: AppColors.brand().nA_style,\n    borderRadius: 40,\n  },\n});\nconst icon = AppColors.brand().nA_Icon;\n\nexport default class NavBackAbs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: this.props.title,\n    };\n  }\n\n  componentWillMount() {\n    /* this.setState({\n      title: Application.base.instance,\n    }); */\n  }\n\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <TouchableOpacity\n        style={[styles.container, { top: isIphoneX() ? 40 : 20 }]}\n        onPress={Actions.pop}\n      >\n        <Icon\n          name=\"arrow-back\"\n          size={30}\n          color={icon}\n          width={30}\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nNavBackAbs.defaultProps = {\n  title: '',\n};\n\nNavBackAbs.propTypes = {\n  title: PropTypes.string,\n};\n"}, {"instruction": "Create a React Dialog component that displays a confirmation message asking the user if they are sure they want to remove all repos. The Dialog should have two buttons, one labeled \"No\" and the other labeled \"Yes, remove\" which is styled with the error main color from the theme. The Dialog should close when either button is clicked.", "output": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '@material-ui/core/Button'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Dialog from '@material-ui/core/Dialog'\nimport withTheme from '@material-ui/core/styles/withTheme'\n\nfunction ReposConfirmDeleteAll ({ open, onClose, theme }) {\n  return <Dialog\n    maxWidth=\"xs\"\n    aria-labelledby=\"delete-all-confirmation-dialog-title\"\n    open={open}\n    onClose={() => onClose(false)}\n  >\n    <DialogTitle id=\"delete-all-confirmation-dialog-title\">Are you sure you want to remove all repos?</DialogTitle>\n    <DialogActions>\n      <Button onClick={() => onClose(false)}>\n        No\n      </Button>\n      <Button onClick={() => onClose(true)} style={{ color: theme.palette.error.main }}>\n        Yes, remove\n      </Button>\n    </DialogActions>\n  </Dialog>\n}\n\nReposConfirmDeleteAll.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  theme: PropTypes.object.isRequired\n}\n\nexport default withTheme(ReposConfirmDeleteAll)\n"}, {"instruction": "Describe the purpose of this JavaScript code snippet and its impact on a React application.", "output": "import 'babel-polyfill';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createLogger from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport reducers from './reducers';\nimport { RythusCardsApp } from './components/App';\n\n\nconst middleware = [ thunkMiddleware ];\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(createLogger());\n}\n\n\n\nvar initialState = {\n    displayedCard: {},\n    selectedItem: \"Encounter\",\n    menuItems: [\n        { name: 'resourcez', active: false },\n        { name: 'settlementz', active: false },\n        { name: 'battallionz', active: false },\n        { name: 'heroz', active: false },\n        { name: 'merchantz', active: false },\n        { name: 'dungeonz', active: false },\n        { name: 'villainz', active: false },\n        { name: 'monsterz', active: false },\n        { name: 'encounterz', active: false },\n        { name: 'rewardz', active: false }\n    ],\n    isFetching: false,\n    cards: {},\n    discards: {}\n}\n\n\nvar store = createStore(reducers, initialState, applyMiddleware(...middleware));\nrender(\n   <Provider store={store}>\n      <RythusCardsApp />\n    </Provider>,\n    document.getElementById('appy')\n);\n"}, {"instruction": "Generate a React component named HomePage that displays a clock and a link to the About page. The theme of the component should be set via a context.", "output": "import React from 'react';\nimport {useContext} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport ThemeContext from './shared/ThemeContext';\nimport Clock from './shared/Clock';\n\nexport default function HomePage({counter, dispatch}) {\n  const theme = useContext(ThemeContext);\n  return (\n    <>\n      <h2>src/modern/HomePage.js</h2>\n      <h3 style={{color: theme}}>\n        This component is rendered by the outer React ({React.version}).\n      </h3>\n      <Clock />\n      <b>\n        <Link to=\"/about\">Go to About</Link>\n      </b>\n    </>\n  );\n}\n"}, {"instruction": "Create a reusable React page template with a footer. The page should have a title and a content area. The title should be an H4 element. The page should be responsive and use Material UI styling.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, withStyles } from '@material-ui/core';\nimport Footer from '../components/app/Footer';\n\nconst style = theme => ({\n  pageTemplate: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    padding: `0 ${theme.spacing(4)}px`,\n    margin: '0 auto',\n    width: '100%',\n    minWidth: '400px',\n    maxWidth: '1000px',\n  },\n  contentArea: {\n    flexGrow: 1,\n  },\n  title: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n  },\n});\n\nfunction Page({ title, children, className, classes }) {\n  return (\n    <div className={getClassname(classes.pageTemplate, className)}>\n      {title ? <Typography variant=\"h4\" className={classes.title}>{title}</Typography> : null}\n      <div className={classes.contentArea}>\n        {children}\n      </div>\n      <Footer/>\n    </div>\n  );\n}\n\nconst getClassname = (...classNames) => (classNames.filter(item => item).join(' '));\n\nPage.propTypes = {\n  title: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(style)(Page);\n"}, {"instruction": "Generate a React code snippet for a BootstrapTable that logs mouse events on the table and individual rows.", "output": "/* eslint no-console: 0 */\n/* eslint no-console: 0 */\nimport React from 'react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\n\nconst products = [];\n\nfunction addProducts(quantity) {\n  const startId = products.length;\n  for (let i = 0; i < quantity; i++) {\n    const id = startId + i;\n    products.push({\n      id: id,\n      name: 'Item name ' + id,\n      price: 2100 + i\n    });\n  }\n}\n\naddProducts(5);\n\nexport default class MouseEventTable extends React.Component {\n  render() {\n    const options = {\n      onMouseLeave: function() {\n        console.log('mouse leave from table');\n      },\n      onMouseEnter: function() {\n        console.log('mouse enter to table');\n      },\n      onRowMouseOut: function(row, e) {\n        console.log(e);\n        console.log('mouse leave from row ' + row.id);\n      },\n      onRowMouseOver: function(row, e) {\n        console.log(e);\n        console.log('mouse enter from row ' + row.id);\n      }\n    };\n\n    return (\n      <BootstrapTable data={ products } options={ options }>\n          <TableHeaderColumn dataField='id' isKey={ true }>Product ID</TableHeaderColumn>\n          <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>\n          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}\n"}, {"instruction": "Create a React class component called ReactInterval that takes props for a callback function, an optional timeout (in milliseconds), and an enabled flag. The component should use the setInterval() method to call the callback function repeatedly at the specified timeout. The component should start the interval when enabled is true and stop it when enabled is false. If the timeout or callback props change, the component should adjust the interval accordingly. The component should unmount and clear the interval when it is unmounted from the DOM.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport class ReactInterval extends React.Component {\n  static defaultProps = {\n    enabled: false,\n    timeout: 1000\n  };\n\n  static propTypes = {\n    callback: PropTypes.func.isRequired,\n    enabled: PropTypes.bool,\n    timeout: PropTypes.number\n  };\n\n  componentDidMount() {\n    const {enabled} = this.props;\n    if (enabled) {\n      this.start();\n    }\n  }\n\n  shouldComponentUpdate({timeout, callback, enabled}) {\n    const {timeout: timeout1, callback: callback1, enabled: enabled1} = this.props;\n    return (\n      timeout1 !== timeout\n      || callback1 !== callback\n      || enabled1 !== enabled\n    );\n  }\n\n  componentDidUpdate({enabled, timeout}) {\n    const {timeout: timeout1, enabled: enabled1} = this.props;\n    if (enabled1 !== enabled || timeout1 !== timeout) {\n      if (enabled1) {\n        this.start();\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  callback = () => {\n    if (this.timer) {\n      const {callback} = this.props;\n      callback();\n      this.start();\n    }\n  };\n\n  start = () => {\n    this.stop();\n    const {timeout} = this.props;\n    this.timer = setTimeout(this.callback, timeout);\n  };\n\n  stop = () => {\n    clearTimeout(this.timer);\n    this.timer = null;\n  };\n\n  render = () => false;\n}\n"}, {"instruction": "Generate a React application with styled-components that includes a global style definition for the entire application with the following properties:\n\n- Set the font to a sans-serif font.\n- Set the background color to #d8d8d8.\n- Set the minimum width to 700px.\n- Hide the horizontal scrollbar.\n- Set the scrollbar thumb to have a green color and a rounded shape.\n- Set the scrollbar track to be transparent.", "output": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { injectGlobal } from 'styled-components';\nimport App from './App';\n\ninjectGlobal`\n\tbody {\n    font-family: sans-serif;\n\t  margin: 0; \n    padding: 0; \n    background-color: #d8d8d8;\n    min-width: 700px;\n    overflow-x: hidden;\n\t}\n\n::-webkit-scrollbar {\n  width: 3px;\n  height: 3px;\n}\n::-webkit-scrollbar-button {\n  width: 6px;\n  height: 6px;\n}\n::-webkit-scrollbar-thumb {\n  background: #127509;\n  border: 0px none #ffffff;\n  border-radius: 50px;\n}\n::-webkit-scrollbar-thumb:hover {\n  background: #13830a;\n}\n::-webkit-scrollbar-thumb:active {\n  background: #36ef27;\n}\n::-webkit-scrollbar-track {\n  //background: #4a4a4a;\n  background: transparent;\n  border: 0px none #ffffff;\n  border-radius: 50px;\n}\n::-webkit-scrollbar-track:hover {\n  //background: #4a4a4a;\n  background: transparent;\n}\n::-webkit-scrollbar-track:active {\n  //background: #4a4a4a;\n  background: transparent;\n}\n::-webkit-scrollbar-corner {\n  background: transparent;\n}\n`;\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"}, {"instruction": "Create a React component that displays a vertical bar graph representing the scores of players in a game. The graph should have a label for each player and a colored bar representing their score.", "output": "import React from 'react';\nimport { connect } from 'react-redux';\nimport { getPlayers, getScoreTotals } from '../reducers';\n\nconst GraphRowLabel = ({label}) => (<div className={\"graph label\"}>{label}</div>);\n\nconst GraphLine = ({size}) => {\n  const colors = [\"#388e3c\", \"#ffd600\", \"#e65100\", \"#d50000\", \"#d50000\"];\n  const barStyle = { \n    flexBasis: Math.max(Math.min(size, 100), 0) + \"%\",\n    backgroundColor: colors[Math.max(Math.floor(size / 25), 0)],\n  };\n  return (\n      <div className={\"graph row\"}>\n        <div className={\"graph row bar\"} style={barStyle}>{size}</div>\n        <div className={\"graph row blank\"}></div>\n      </div>\n    );\n};\n\nconst ScoreGraphPresentation = ({playerNames, scores}) => {\n  const graphRowLabels = playerNames.map((playerName, i) => <GraphRowLabel key={i} label={playerName} />);\n  const graphLines = scores.map((score, i) => <GraphLine key={i} size={score} />);\n  return (\n        <div className={\"graph\"}>\n          <div className={\"labels\"}>\n            {graphRowLabels}\n          </div>\n          <div className={\"bars\"}>\n            {graphLines}\n          </div>\n        </div>\n      )\n}\n\nconst mapStateToProps = (state) => {\n  const playerNames = getPlayers(state).map((player) => player.name);\n  const scores = getScoreTotals(state);\n\n  return {playerNames: playerNames, scores: scores};\n}\n\nexport default connect(mapStateToProps)(ScoreGraphPresentation);\n"}, {"instruction": "Generate a React component called PaperManage that displays a message stating that it is the user's paper.", "output": "import React from 'react';\n\nclass PaperManage extends React.Component {\n    \n    render() {\n        //var item = this.props.item;\n        \n        return (\n            <div className=\"userDiv\">\n            <div>\n                <p>this is your paper</p>\n            </div>\n            <br/><br/>\n            </div>\n            \n        )\n    }\n};\n\nexport default PaperManage;"}, {"instruction": "Generate code that creates a web page with a form that contains text fields and drop-down menus.\nThe purpose of the form is to edit the details of a professor, including their name, surname, email, password, Skype username, preferred days for tutoring, and the courses they teach.\nThe text fields should be disabled, and the drop-down menus should be populated with a list of options.\nThe layout of the form should be responsive and easy to use.", "output": "import React from 'react';\nimport {State, History} from 'react-router';\nimport { Menu, Mixins, Styles, RaisedButton, TextField, SelectField } from 'material-ui';\nimport Content from '../../components/layout/Content';\nimport ContentHeader from '../../components/layout/ContentHeader';\n\n\nclass Profesor extends React.Component {\n  render() {\n    var profesori = [\n      { payload: '1', text: 'Never' },\n      { payload: '2', text: 'Every Night' },\n      { payload: '3', text: 'Weeknights' },\n      { payload: '4', text: 'Weekends' },\n      { payload: '5', text: 'Weekly' },\n    ];\n    var menu = [{name:'Uredi', link:'profesori/edit'},{name:'Brisi', link:'profesori/remove'}];\n    return (\n    <Content>\n      <ContentHeader title='Odredjen profesor' menu={menu}/>\n      <form style={{margin: '0 auto', position: 'relative', width: 600}}>\n      <TextField hintText=\"Ime\" disabled={true} floatingLabelText=\"Ime\" style={{display: 'block', width: 350, margin: '0 auto'}}/>\n      <TextField hintText=\"Prezime\" disabled={true} floatingLabelText=\"Prezime\" style={{display: 'block', width: 350, margin: '0 auto'}} />\n      <TextField hintText=\"Email\" disabled={true} floatingLabelText=\"Email\" style={{display: 'block', width: 350, margin: '0 auto'}} />\n      <TextField hintText=\"Sifra\" disabled={true} floatingLabelText=\"Sifra\" style={{display: 'block', width: 350, margin: '0 auto'}} />\n      <TextField hintText=\"Skype\" disabled={true} floatingLabelText=\"Skype\" style={{display: 'block', width: 350, margin: '0 auto'}} />\n      <SelectField\n        floatingLabelText=\"Profesor\"\n        hintText=\"Odaberite profesora\"\n        style={{display: 'block', width: 350, margin: '0 auto'}}\n        menuItems={profesori} />\n\n        <SelectField\n          floatingLabelText=\"Kurs\"\n          hintText=\"Odaberite profesora\"\n          style={{display: 'block', width: 350, margin: '0 auto'}}\n          menuItems={profesori} />\n      </form>\n    </Content>\n    );\n  }\n}\n\nexport default Profesor;\n"}, {"instruction": "Create a React component named \"Notes\" that displays a list of notes passed as props. Each note should be rendered using a separate \"Note\" component and should include an edit and delete button.", "output": "import React from 'react';\nimport Note from './Note.jsx';\n\nexport default class Notes extends React.Component {\n    render() {\n        const notes = this.props.items;\n\n        return <ul className=\"notes\">{notes.map(this.renderNote)}</ul>;\n    }\n\n    renderNote = (note) => {\n        return (\n            <li className=\"note\" key={note.id}>\n                <Note\n                    task={note.task}\n                    onEdit={this.props.onEdit.bind(null, note.id)}\n                    onDelete={this.props.onDelete.bind(null, note.id)}\n                />\n            </li>\n        );\n    }\n}\n"}, {"instruction": "Generate the code for a React Native component that displays an image action bar with three buttons: like, collect, and share. The like button should display the number of likes for the image.", "output": "\nimport React, { Component } from 'react';\nimport { View, Image, Text, StyleSheet } from 'react-native';\n\nimport Touchable from 'px/components/Touchable';\n\nimport ListItemLike from 'px/assets/icons/list_item_like.png';\nimport ListItemCollection from 'px/assets/icons/list_item_collection.png';\nimport ListItemShare from 'px/assets/icons/list_item_share.png';\n\nexport default class ImageActionBar extends Component {\n\n  static defaultProps = {\n    src: { },\n  }\n\n  static propTypes = {\n    src: React.PropTypes.object,\n  }\n\n  render() {\n    const { src: { likes } } = this.props;\n    return <View style={styles.base}>\n      <Touchable style={styles.button}>\n        <View style={styles.horizontal}>\n          <Image style={styles.icon} source={ListItemLike} />\n          <Text style={styles.text}>{ likes } likes</Text>\n        </View>\n      </Touchable>\n      <Touchable style={styles.button}>\n        <View style={styles.horizontal}>\n          <Image style={styles.icon} source={ListItemCollection} />\n          <Text style={styles.text}>Collection</Text>\n        </View>\n      </Touchable>\n      <View style={styles.fill} />\n      <Touchable style={styles.button}>\n        <View style={styles.horizontal}>\n          <Image style={styles.icon} source={ListItemShare} />\n          <Text style={styles.text}>Share</Text>\n        </View>\n      </Touchable>\n    </View>\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  base: {\n    height: 38,\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'flex-end',\n  },\n  fill: {\n    flex: 1,\n  },\n  horizontal: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  button: {\n    paddingLeft: 10,\n    paddingRight: 10,\n    height: 38,\n    justifyContent: 'center',\n  },\n  icon: {\n    width: 12,\n    height: 12,\n    marginRight: 6,\n  },\n  text: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: '#9ca0a9',\n  },\n});\n"}, {"instruction": "Provide a JavaScript code snippet that dynamically adds and removes input fields for users to enter skills. The fields should be rendered as a list, and there should be a button that allows users to add more fields. When a field is added, its index should be stored in an array and passed to the child component as a prop.", "output": "import React, { Component } from 'react';\nimport AddButton from './AddButton';\nimport Fieldskill from './Fieldskill';\n\nvar y = [[1],];\n\nclass DynamicFieldsSkills extends Component{\n\tconstructor( context, props ){\n\t\tsuper( context, props );\n\t\tthis.state = {\n\t\t\tcount: 1, \n\t\t\tfields: []\n\t\t} \n\t}\n\t_getAction( event ){\n\t\tevent.preventDefault();\n\t\tthis.setState({ count: this.state.count += 1});\n\t\ty.push( this.state.count );\n\t\tthis.setState({fields: y });\n\t}\n\trender(){\n\n\t\tvar populate = y.map( y => <Fieldskill key = {y} unique = {y} getValue = {this.props.getValue}/> );\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{populate}\n\t\t\t\t<br />\n\t\t\t\t<AddButton getAction = {this._getAction.bind(this)} />\n\t\t\t</div>\n\t\t);a\n\t}\n};\n\nexport default DynamicFieldsSkills;"}, {"instruction": "Create a React component that renders an SVG icon of an upward arrow. The SVG icon should be reusable and have a default width and height of 24px.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet NavigationArrowUpward = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"/>\n  </SvgIcon>\n);\nNavigationArrowUpward = pure(NavigationArrowUpward);\nNavigationArrowUpward.displayName = 'NavigationArrowUpward';\nNavigationArrowUpward.muiName = 'SvgIcon';\n\nexport default NavigationArrowUpward;\n"}, {"instruction": "Create the code for a React component that will render a page layout with a header, content, and footer. The header should include a navigation bar, and the footer should include a copyright notice and social media buttons.", "output": "import React from 'react'\nimport { Link } from 'react-router/lib/Link'\nimport Navbar from './Common/Navbar'\nimport FooterSocialButtons from './Common/FooterSocialButtons'\n\nexport default React.createClass({\n  render() {\n    return (\n      <div>\n        <Navbar />\n        {this.props.children}\n        <footer className=\"footer\">\n          <div className=\"container\">\n            <div className=\"col-sm-4 pull-left\">\n              <p className=\"text-muted\">&copy; <a href=\"https://twitter.com/rosskukulinski\" target=\"_blank\">Ross Kukulinski</a>, <a href=\"https://github.com/geojaz\" target=\"_blank\">Eric Hole</a> and <a href=\"https://github.com/orgs/cloudytimemachine/people\" target=\"_blank\">Contributors</a></p>\n            </div> {/*\n            <div className=\"col-sm-4 pull-right\">\n              <FooterSocialButtons className=\"row content\" />\n            </div> */}\n            </div>\n        </footer>\n     </div>\n    )\n  }\n})\n"}, {"instruction": "Generate an SVG icon React component for the Material Design \"ImageCropSquare\" icon.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageCropSquare = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H6V6h12v12z\"/>\n  </SvgIcon>\n);\nImageCropSquare = pure(ImageCropSquare);\nImageCropSquare.displayName = 'ImageCropSquare';\nImageCropSquare.muiName = 'SvgIcon';\n\nexport default ImageCropSquare;\n"}, {"instruction": "Create a React component that displays notifications using the react-toastr library. The component should have a method that takes a type (success, info, warning, or error), a message, and a title, and displays a notification with those parameters. The notification should slide in and out of view using the 'animated bounceIn' and 'animated bounceOut' classes, respectively. It should disappear after 5 seconds, with an additional 1 second of padding to allow the animation to finish. The toast container should be positioned at the top right of the screen and should have an ID of 'toast-container'.", "output": "import React, { Component } from 'react';\n\nimport { ToastContainer, ToastMessage } from '@allenfang/react-toastr';\n\n\nconst ToastrMessageFactory = React.createFactory(ToastMessage.animation);\n\nclass Notification extends Component {\n  // allow type is success,info,warning,error\n  notice(type, msg, title) {\n    this.refs.toastr[type](\n      msg, title, {\n        mode: 'single',\n        timeOut: 5000,\n        extendedTimeOut: 1000,\n        showAnimation: 'animated  bounceIn',\n        hideAnimation: 'animated bounceOut'\n      });\n  }\n\n  render() {\n    return (\n      <ToastContainer ref='toastr'\n        toastMessageFactory={ ToastrMessageFactory }\n        id='toast-container'\n        className='toast-top-right'/>\n    );\n  }\n}\n\nexport default Notification;\n"}, {"instruction": "Create a React functional component that displays a message box with the following properties:\n- Title: \"Interruption Message\"\n- Confirmation button text: \"Action\"\n- Max height: 200px\n- Theme: \"blue\"\n- Data hook: \"alert-scrollable\"\n- Scrollable content with multiple lines and limited max height", "output": "/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { MessageBoxFunctionalLayout } from 'wix-style-react';\n\nexport default () => (\n  <MessageBoxFunctionalLayout\n    title=\"Interruption Message\"\n    confirmText=\"Action\"\n    maxHeight=\"200px\"\n    theme=\"blue\"\n    dataHook=\"alert-scrollable\"\n  >\n    <div>\n      This is a generic message. No harm done, but really needed to interrupt\n      you.\n    </div>\n    <div>It has multiple lines and limited max height</div>\n    <div>and some are rows hidden</div>\n    <div>and some are rows hidden</div>\n    <div>and some are rows hidden</div>\n    <div>and some are rows hidden</div>\n    <div>and some are rows hidden</div>\n    <div>and some are rows hidden</div>\n    <div>and some are rows hidden</div>\n  </MessageBoxFunctionalLayout>\n);\n"}, {"instruction": "Create a React component that renders an SVG icon for the \"crop free\" action. The icon should be pure and have a display name of \"ImageCropFree.\"", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageCropFree = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M3 5v4h2V5h4V3H5c-1.1 0-2 .9-2 2zm2 10H3v4c0 1.1.9 2 2 2h4v-2H5v-4zm14 4h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zm0-16h-4v2h4v4h2V5c0-1.1-.9-2-2-2z\"/>\n  </SvgIcon>\n);\nImageCropFree = pure(ImageCropFree);\nImageCropFree.displayName = 'ImageCropFree';\nImageCropFree.muiName = 'SvgIcon';\n\nexport default ImageCropFree;\n"}, {"instruction": "Generate a React component story for the Action component's \"File\" display mode. Include examples of different states and options, such as default, hidden label, in progress, disabled, reverse display, transformed icon, custom tooltip, Bootstrap style, and custom class name.", "output": "import React from 'react';\nimport { action } from '@storybook/addon-actions';\n\nimport Action from '../Action';\n\nconst myAction = {\n\tlabel: 'Click me',\n\t'data-feature': 'actionfile',\n\ticon: 'talend-upload',\n\tonChange: action('You changed me'),\n\tdisplayMode: 'file',\n};\n\nexport default {\n\ttitle: 'Buttons/File',\n\tdecorators: [story => <div className=\"col-lg-offset-2 col-lg-8\">{story()}</div>],\n};\n\nexport const Default = () => (\n\t<div>\n\t\t<p>By default :</p>\n\t\t<Action id=\"default\" {...myAction} />\n\t\t<p>With hideLabel option</p>\n\t\t<Action id=\"hidelabel\" {...myAction} hideLabel />\n\t\t<p>In progress</p>\n\t\t<Action id=\"inprogress\" {...myAction} inProgress />\n\t\t<p>Disabled</p>\n\t\t<Action id=\"disabled\" {...myAction} disabled />\n\t\t<p>Reverse display</p>\n\t\t<Action id=\"reverseDisplay\" {...myAction} iconPosition=\"right\" />\n\t\t<p>Transform icon</p>\n\t\t<Action id=\"reverseDisplay\" {...myAction} iconTransform=\"rotate-180\" />\n\t\t<p>Custom tooltip</p>\n\t\t<Action id=\"default\" {...myAction} tooltipLabel=\"Custom label here\" />\n\t\t<p>Bootstrap style</p>\n\t\t<Action id=\"default\" {...myAction} bsStyle=\"primary\" tooltipLabel=\"Custom label here\" />\n\t\t<Action\n\t\t\tid=\"default\"\n\t\t\t{...myAction}\n\t\t\tclassName=\"btn-default btn-inverse\"\n\t\t\ttooltipLabel=\"Custom label here\"\n\t\t/>\n\t</div>\n);\n"}, {"instruction": "Write the code for a React component that will display a list of blog posts on a page. The component should be divided into two columns: the left column should contain the blog posts, and the right column should contain a sidebar. The blog posts should be displayed in a grid, with each post being represented by a card. The card should include the post's title, author, date, and a link to the post. The sidebar should include a list of links to other pages on the site.", "output": "/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport Link from 'gatsby-link';\n\nimport Card from '../components/Card';\nimport Sidebar from '../components/Sidebar';\nimport ShareBox from '../components/ShareBox';\n\nimport './index.scss';\n\nconst NavLinkText = ({ color, text }) => (\n  <div\n    className=\"navlink\"\n    style={{\n      color,\n    }}\n  >\n    {text}\n  </div>\n);\n\nconst NavLink = ({ test, url, text }) => {\n  if (!test) {\n    return <NavLinkText color=\"#7d7d7d\" text={text} />;\n  }\n\n  return (\n    <Link to={`${url}`}>\n      <NavLinkText color=\"#66ccff\" text={text} />\n    </Link>\n  );\n};\n\nconst Page = ({ pageContext, location }) => {\n  const {\n    group, index, first, last, pathPrefix,\n  } = pageContext;\n\n  const previousUrl = index - 1 === 1 ? '' : `/${pathPrefix}/${index - 1}`;\n  const nextUrl = `/${pathPrefix}/${index + 1}`;\n\n  return (\n    <React.Fragment>\n      <div\n        className=\"row homepage\"\n        style={{\n          marginTop: 20,\n        }}\n      >\n        <Sidebar />\n        <div className=\"col-xl-6 col-lg-7 col-md-12 col-xs-12 order-2\">\n          {group.map(({ node }) => (\n            <Card {...node.frontmatter} url={node.frontmatter.slug ? node.frontmatter.slug : node.fields.slug} key={node.fields.slug} />\n          ))}\n\n          <div\n            className=\"row\"\n            style={{\n              justifyContent: 'space-around',\n              marginBottom: '20px',\n            }}\n          >\n            <div className=\"previousLink\">\n              <NavLink test={!first} url={previousUrl} text=\"Previous\" />\n            </div>\n            <div className=\"nextLink\">\n              <NavLink test={!last} url={nextUrl} text=\"Next\" />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\n      </div>\n      <ShareBox url={location.href} hasCommentBox={false} />\n    </React.Fragment>\n  );\n};\n\nexport default Page;\n"}, {"instruction": "Create a React application's route configuration that defines the routes to different components based on the URL. The main App component should be loaded for all routes, while specific components are rendered based on the route, such as the home page, about page, courses page, and course management page.", "output": "import React from 'react';\nimport { Route, IndexRoute } from 'react-router';\nimport App from './components/App';\nimport HomePage from './components/home/HomePage';\nimport AboutPage from './components/about/AboutPage';\nimport CoursesPage from './components/course/CoursesPage';\n// Linting warning is thrown here due to the fact that ManageCoursePage is exported as a default export (for app) and as a named export (for testing).\nimport ManageCoursePage from './components/course/ManageCoursePage'; //eslint-disable-line import/no-named-as-default\n\nexport default (\n  /* Always load the App component and then pass the nested items as \"children\" to the App based on the routing. */\n  <Route path=\"/\" component={App}>\n    {/* If someone goes to /, we will load the HomePage. */}\n    <IndexRoute component={HomePage} />\n    <Route path=\"courses\" component={CoursesPage} />\n    <Route path=\"course\" component={ManageCoursePage} />\n    <Route path=\"course/:id\" component={ManageCoursePage} />\n    <Route path=\"about\" component={AboutPage} />\n  </Route>\n);\n"}, {"instruction": "Generate a React component that manages a user's collection. The component should display a UI for managing the collection, such as adding, editing, and deleting recordings. The component should also handle authentication and authorization, ensuring that only the user who owns the collection can manage it.", "output": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { asyncConnect } from 'redux-connect';\n\nimport { load as loadColl } from 'store/modules/collection';\nimport { getOrderedRecordings } from 'store/selectors';\nimport { AccessContext } from 'store/contexts';\n\nimport CollectionManagementUI from 'components/collection/CollectionManagementUI';\n\n\nclass CollectionManagement extends Component {\n  static propTypes = {\n    auth: PropTypes.object,\n    match: PropTypes.object,\n    history: PropTypes.object\n  };\n\n  render() {\n    const { auth, match: { params: { user } } } = this.props;\n    const canAdmin = auth.getIn(['user', 'username']) === user;\n    return (\n      <AccessContext.Provider value={{ canAdmin }}>\n        <CollectionManagementUI {...this.props} />\n      </AccessContext.Provider>\n    );\n  }\n}\n\n\nconst initialData = [\n  {\n    promise: ({ match: { params: { coll, user } }, store: { dispatch } }) => {\n      return dispatch(loadColl(user, coll));\n    }\n  }\n];\n\nconst mapStateToProps = (outerState) => {\n  const { app, reduxAsyncConnect } = outerState;\n  const isLoaded = app.getIn(['collection', 'loaded']);\n\n  return {\n    auth: app.get('auth'),\n    collection: app.get('collection'),\n    recordingEdited: app.getIn(['recordings', 'edited']),\n    recordings: isLoaded ? getOrderedRecordings(app, true) : null\n  };\n};\n\n\nexport default asyncConnect(\n  initialData,\n  mapStateToProps\n)(CollectionManagement);\n"}, {"instruction": "Generate a React component that renders a brand logo. If the logo is not specified, default to a Keystone logo. Allow the logo to be specified as a string or an array that includes the logo source, width, and height.", "output": "/**\n * Renders a logo, defaulting to the Keystone logo if no brand is specified in\n * the configuration\n */\n\nimport React from 'react';\n\nconst Brand = function (props) {\n\t// Default to the KeystoneJS logo\n\tlet logo = { src: `${Keystone.adminPath}/images/logo.png`, width: 205, height: 68 };\n\tif (props.logo) {\n\t\t// If the logo is set to a string, it's a direct link\n\t\tlogo = typeof props.logo === 'string' ? { src: props.logo } : props.logo;\n\t\t// Optionally one can specify the logo as an array, also stating the\n\t\t// wanted width and height of the logo\n\t\t// TODO: Deprecate this\n\t\tif (Array.isArray(logo)) {\n\t\t\tlogo = { src: logo[0], width: logo[1], height: logo[2] };\n\t\t}\n\t}\n\treturn (\n\t\t<div className=\"auth-box__col\">\n\t\t\t<div className=\"auth-box__brand\">\n\t\t\t\t<a href=\"/\" className=\"auth-box__brand__logo\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={logo.src}\n\t\t\t\t\t\twidth={logo.width ? logo.width : null}\n\t\t\t\t\t\theight={logo.height ? logo.height : null}\n\t\t\t\t\t\talt={props.brand}\n\t\t\t\t\t/>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nmodule.exports = Brand;\n"}, {"instruction": "Create a React component to display a mini bar chart using BizCharts (a charting library). The chart should have its height adjusted automatically, use a specific color, accept data as a prop, and display a tooltip when hovering over the bars.", "output": "/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport { Chart, Tooltip, Geom } from 'bizcharts';\nimport autoHeight from '../autoHeight';\nimport styles from '../index.less';\n\n@autoHeight()\nexport default class MiniBar extends React.Component {\n  render() {\n    const { height, forceFit = true, color = '#1890FF', data = [] } = this.props;\n\n    const scale = {\n      x: {\n        type: 'cat',\n      },\n      y: {\n        min: 0,\n      },\n    };\n\n    const padding = [36, 5, 30, 5];\n\n    const tooltip = [\n      'x*y',\n      (x, y) => ({\n        name: x,\n        value: y,\n      }),\n    ];\n\n    // for tooltip not to be hide\n    const chartHeight = height + 54;\n\n    return (\n      <div className={styles.miniChart} style={{ height }}>\n        <div className={styles.chartContent}>\n          <Chart\n            scale={scale}\n            height={chartHeight}\n            forceFit={forceFit}\n            data={data}\n            padding={padding}\n          >\n            <Tooltip showTitle={false} crosshairs={false} />\n            <Geom type=\"interval\" position=\"x*y\" color={color} tooltip={tooltip} />\n          </Chart>\n        </div>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Design an SVG icon of the playlist play button.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvPlaylistPlay = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M19 9H2v2h17V9zm0-4H2v2h17V5zM2 15h13v-2H2v2zm15-2v6l5-3-5-3z\"/>\n  </SvgIcon>\n);\nAvPlaylistPlay = pure(AvPlaylistPlay);\nAvPlaylistPlay.displayName = 'AvPlaylistPlay';\nAvPlaylistPlay.muiName = 'SvgIcon';\n\nexport default AvPlaylistPlay;\n"}, {"instruction": "Create a React component named SuperButton, it should take props of size, block, and busy. The default size should be defined in a context and passed to the component, and the component should render a div with a className of `default` and style rules defined using the StyleSheet library.", "output": "import React from 'react';\nimport StyleSheet from 'react-inline';\n\nrequire('requirish')._(module);\nvar appUtil = require('src/appUtil');\n\n//import appUtil from 'src/appUtil';\nconsole.log('SuperButton');\nconst { oneOf, bool } = React.PropTypes;\n\nclass SuperButton extends React.Component {\n  render() {\n    return <div className={styles.default}></div>;\n  }\n}\n\nSuperButton.propTypes = {\n  size:   oneOf(['large', 'small']),\n  block:  bool,\n  busy:   bool\n};\n\nconst rixContext = { size: 47 };\nconst { size } = rixContext;\n\nexport default SuperButton;\nexport { rixContext };\n\nconst styles = StyleSheet.create({\n\tdefault: {\n\t\tpadding: '6px 12px',\n\t\t//fontSize: size,\n\t\tlineHeight: 1.5,\n\t\tcursor: 'pointer',\n\t\tborder: '1px solid #2e6da4',\n\t\tborderRadius: 4,\n\t\tcolor: '#fff',\n\t\tbackgroundColor: '#337ab7'\n\t}\n});\n"}, {"instruction": "Create a React component and example for a theme named \"theme-c137\".\nInclude a title, description, list of items, the component itself, and the corresponding module.\nUse the `Modules` helper to retrieve the module and `examples` helper to generate a list of example items.\nExport an object containing the features, example, module, and properties.", "output": "import React from 'react';\nimport { ThemeTest } from '../../components';\nimport Modules from '../../helpers/modules';\nimport { features, properties, examples } from '../common';\n\nconst THEME = 'theme-c137';\n\nconst items = examples(THEME);\n\nconst component = (\n  <ThemeTest theme={THEME} />\n);\n\nconst module = Modules.Modules[THEME];\n\nconst example = {\n  title: 'Get your shit together.',\n  description: 'AwesomeButton Generic Example',\n  items,\n  component,\n  componentClass: Modules.Modules['theme-c137']['aws-btn'],\n};\n\nexport default {\n  features,\n  example,\n  module,\n  properties,\n};\n"}, {"instruction": "A React component that creates a collapsible section with a toggle button, a title, and optional icon. The component can be used to show or hide content.", "output": "/* eslint-disable */\nimport React from 'react';\nimport classnames from 'classnames';\n\nclass Fold extends React.Component {\n  static PropTypes = {\n    icon: React.PropTypes.string,\n    iconClassName: React.PropTypes.string,\n    title: React.PropTypes.string.isRequired\n  };\n\n  state = {\n    isOpen: false\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { icon, iconClassName, title, iconElement } = this.props;\n    const titleIconClassName = classnames('material-icons icon', iconClassName);\n    const className = classnames({\n      'fold': true,\n      'fold--open': this.state.isOpen\n    });\n\n    let foldIcon;\n    if (icon) {\n      foldIcon = <i className={titleIconClassName}>{icon}</i>;\n    }\n    if (iconElement) {\n      foldIcon = iconElement;\n    }\n\n    return (\n      <div className={className}>\n        <div className=\"fold__title\" onClick={this.onClick}>\n          {foldIcon}\n          {title}\n          <i className=\"fold__indicator material-icons pull-right\">arrow_drop_down</i>\n        </div>\n        <div className=\"fold__content\">\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  onClick = () => {\n    this.setState({isOpen: !this.state.isOpen});\n  };\n}\n\nexport default Fold;\n"}, {"instruction": "Create a React component that renders an SVG icon representing a gavel.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionGavel = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z\"/>\n  </SvgIcon>\n);\nActionGavel = pure(ActionGavel);\nActionGavel.displayName = 'ActionGavel';\n\nexport default ActionGavel;\n"}, {"instruction": "Create a React component that generates BEM class names from props and allows for validation in development mode.", "output": "import React from 'react';\nimport { stringify, validate } from 'rebem-classname';\n\nlet buildClassName = stringify;\n\n// validation\n// istanbul ignore next\nif (process.env.NODE_ENV !== 'production') {\n    buildClassName = props => stringify(validate(props));\n}\n\nfunction BEM(props, ...children) {\n    const { tag, block, elem, mods, mix, className, ...restProps } = props;\n    const finalClassName = buildClassName({ block, elem, mods, mix, className });\n    const finalProps = finalClassName ? { ...restProps, className: finalClassName } : restProps;\n\n    return React.createElement(tag || 'div', finalProps, ...children);\n}\n\nfunction blockFactory(block) {\n    return function (props, ...children) {\n        return BEM({ ...props, block }, ...children);\n    };\n}\n\nexport { BEM, blockFactory };\n"}, {"instruction": "Generate a React component called NoResults that displays a message indicating that no results were found for a given query. The component should accept a query prop and display the query within the message.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  query: PropTypes.string\n};\n\nfunction NoResults({ query }) {\n  return (\n    <div className='no-results-wrapper'>\n      <p>\n        We could not find anything relating to <em>{query}</em>\n      </p>\n    </div>\n  );\n}\n\nNoResults.displayName = 'NoResults';\nNoResults.propTypes = propTypes;\n\nexport default NoResults;\n"}, {"instruction": "Generate a code snippet for a React component that can be used to display a list of grouped items in a mobile application. Provide a navigation bar and use the Touchstone JS UI library for styling.", "output": "import Container from 'react-container';\nimport React from 'react';\nimport { Link, UI } from 'touchstonejs';\n\nmodule.exports = React.createClass({\n\tstatics: {\n\t\tnavigationBar: 'main',\n\t\tgetNavigation () {\n\t\t\treturn {\n\t\t\t\ttitle: 'Lists'\n\t\t\t}\n\t\t}\n\t},\n\n\trender: function () {\n\t\treturn (\n\t\t\t<Container scrollable>\n\t\t\t\t<UI.Group>\n\t\t\t\t\t<UI.GroupHeader>Lists</UI.GroupHeader>\n\t\t\t\t\t<UI.GroupBody>\n\t\t\t\t\t\t<Link to=\"tabs:list-simple\" transition=\"show-from-right\">\n\t\t\t\t\t\t\t<UI.Item showDisclosureArrow>\n\t\t\t\t\t\t\t\t<UI.ItemInner>\n\t\t\t\t\t\t\t\t\tSimple List\n\t\t\t\t\t\t\t\t</UI.ItemInner>\n\t\t\t\t\t\t\t</UI.Item>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"tabs:list-complex\" transition=\"show-from-right\">\n\t\t\t\t\t\t\t<UI.Item showDisclosureArrow>\n\t\t\t\t\t\t\t\t<UI.ItemInner>\n\t\t\t\t\t\t\t\t\tComplex List\n\t\t\t\t\t\t\t\t</UI.ItemInner>\n\t\t\t\t\t\t\t</UI.Item>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</UI.GroupBody>\n\t\t\t\t</UI.Group>\n\t\t\t\t<UI.Group>\n\t\t\t\t\t<UI.GroupHeader>GroupHeader</UI.GroupHeader>\n\t\t\t\t\t<UI.GroupBody>\n\t\t\t\t\t\t<UI.GroupInner>\n\t\t\t\t\t\t\t<p>Use groups to contain content or lists. Where appropriate a Group should be accompanied by a GroupHeading and optionally a GroupFooter.</p>\n\t\t\t\t\t\t\tGroupBody will apply the background for content inside groups.\n\t\t\t\t\t\t</UI.GroupInner>\n\t\t\t\t\t</UI.GroupBody>\n\t\t\t\t\t<UI.GroupFooter>GroupFooter: useful for a detailed explaination to express the intentions of the Group. Try to be concise - remember that users are likely to read the text in your UI many times.</UI.GroupFooter>\n\t\t\t\t</UI.Group>\n\t\t\t</Container>\n\t\t);\n\t}\n});\n"}, {"instruction": "Create a React component that displays an icon representing a spell. The component should accept an ID as a prop and use it to look up the spell's icon in a dictionary. If the ID is not found, the component should display a placeholder icon. The component should also accept a boolean prop to specify whether or not to include a link to the spell's page.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport SPELLS from './SPELLS';\nimport SpellLink from './SpellLink';\nimport Icon from './Icon';\n\nconst SpellIcon = ({ id, noLink, ...others }) => {\n  if (process.env.NODE_ENV === 'development' && !SPELLS[id]) {\n    throw new Error(`Unknown spell: ${id}`);\n  }\n\n  const spell = SPELLS[id] || {\n    name: 'Spell not recognized',\n    icon: 'inv_misc_questionmark',\n  };\n\n  const icon = (\n    <Icon\n      icon={spell.icon}\n      alt={spell.name}\n      {...others}\n    />\n  );\n\n  if (noLink) {\n    return icon;\n  }\n\n  return (\n    <SpellLink id={id}>\n      {icon}\n    </SpellLink>\n  );\n};\nSpellIcon.propTypes = {\n  id: PropTypes.number.isRequired,\n  noLink: PropTypes.bool,\n};\n\nexport default SpellIcon;\n"}, {"instruction": "Create a React component for a sharing modal that displays an introduction with a title and description, and a set of sharing buttons. The buttons should open a popup window allowing users to share the content.", "output": "import React from 'react';\nimport settings from 'settings';\nimport ModalIntro from 'components/ModalIntro';\nimport openShareWindow from 'helpers/sharing/openShareWindow';\nimport ShareModalButtons from 'components/ShareModalButtons';\n\nconst ShareModal = ({ title, intro, buttons }) => (\n  <div>\n    <ModalIntro\n      title={title}\n      intro={intro}\n    />\n    <ShareModalButtons\n      openPopup={(url, event) => openShareWindow(url, event, settings.shareButtons.popupTitle)}\n      buttons={buttons}\n    />\n  </div>\n);\n\nexport default ShareModal;\n"}, {"instruction": "Draft an accessible React component that provides a screen reader only message to users.", "output": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Announcer extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        text: ''\n      }\n    }\n\n    static propTypes = {\n      text: PropTypes.string,\n      politeness: PropTypes.string\n    }\n\n    static defaultProps = {\n      className: '',\n      politeness: 'polite'\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n      const currentAnnouncement = this.state.text;\n      let nextAnnouncement = nextProps.text;\n\n      if (nextAnnouncement === currentAnnouncement) {\n        nextAnnouncement = nextAnnouncement + '\\u00A0';\n      }\n\n      this.setState(prevState => ({\n        text: nextAnnouncement\n      }));\n    }\n\n    defaultStyles = {\n        position: 'absolute',\n        visibility: 'visible',\n        overflow: 'hidden',\n        display: 'block',\n        width: '1px',\n        height: '1px',\n        margin: '-1px',\n        border: '0',\n        padding: '0',\n        clip: 'rect(0px, 0px, 0px, 0px)',\n        clipPath: 'polygon(0px 0px, 0px 0px, 0px 0px, 0px 0px)',\n        whiteSpace: 'nowrap'\n    }\n\n    render() {\n        const { className, text, politeness, ...props } = this.props;\n        const styles = className ? {} : this.defaultStyles;\n        return (\n            <div\n                aria-atomic\n                aria-live={politeness}\n                style={styles}\n                className={className}\n                {...props}\n            >\n                {\n                    this.state.text.length ?\n                    <p>{this.state.text}</p> :\n                    null\n                }\n            </div>\n        )\n    }\n}\n\nexport default Announcer;\n"}, {"instruction": "Generate the code for a React component called SingleInput, which represents a text input field with a label, a placeholder, and a help text. The component should accept the following input parameters: `inputType`, `title`, `name`, `controlFunc`, `content`, and `placeholder`.", "output": "/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SingleInput = (props) => (\n\t<div className=\"form-group label-floating is-empty\">\n\t\t<label className=\"control-label\">{props.title}</label>\n\t\t<input\n\t\t\tclassName=\"form-control\"\n\t\t\tname={props.name}\n\t\t\ttype={props.inputType}\n\t\t\tvalue={props.content}\n\t\t\tonChange={props.controlFunc}\n\t\t\tplaceholder={props.placeholder} />\n\t\t<p className=\"help-block\">{props.helpText}</p>\n\t</div>\n);\n\nSingleInput.propTypes = {\n\tinputType: PropTypes.oneOf(['text', 'number']).isRequired,\n\ttitle: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tcontrolFunc: PropTypes.func.isRequired,\n\tcontent: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.number,\n\t]).isRequired,\n\tplaceholder: PropTypes.string,\n};\n\nexport default SingleInput;\n"}, {"instruction": "Generate a React component that displays the ID of an item in a table, with a link to the item's detail page. The component should include appropriate padding and styling, and should handle the case where the item has no ID.", "output": "import React from 'react';\nimport ItemsTableCell from '../../../admin/client/components/ItemsTable/ItemsTableCell';\nimport ItemsTableValue from '../../../admin/client/components/ItemsTable/ItemsTableValue';\n\nvar IdColumn = React.createClass({\n\tdisplayName: 'IdColumn',\n\tpropTypes: {\n\t\tcol: React.PropTypes.object,\n\t\tdata: React.PropTypes.object,\n\t\tlist: React.PropTypes.object,\n\t},\n\trenderValue () {\n\t\tconst value = this.props.data.id;\n\t\tif (!value) return null;\n\n\t\treturn (\n\t\t\t<ItemsTableValue padded interior title={value} href={Keystone.adminPath + '/' + this.props.list.path + '/' + value} field={this.props.col.type}>\n\t\t\t\t{value}\n\t\t\t</ItemsTableValue>\n\t\t);\n\t},\n\trender () {\n\t\treturn (\n\t\t\t<ItemsTableCell>\n\t\t\t\t{this.renderValue()}\n\t\t\t</ItemsTableCell>\n\t\t);\n\t},\n});\n\nmodule.exports = IdColumn;\n"}, {"instruction": "Create a React component that renders an SVG icon for the Material Design \"Explore\" action. The icon should use the following SVG path:\n\n\"M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z\"", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionExplore = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z\"/>\n  </SvgIcon>\n);\nActionExplore = pure(ActionExplore);\nActionExplore.displayName = 'ActionExplore';\nActionExplore.muiName = 'SvgIcon';\n\nexport default ActionExplore;\n"}, {"instruction": "Create a React component that renders a Bootstrap form group. It should accept the following props:\n\n* `standalone`: Whether the form group is standalone (meaning it doesn't have a label or help text).\n* `hasFeedback`: Whether the form group has feedback icons.\n* `bsSize`: The size of the form group (small, medium, or large).\n* `bsStyle`: The style of the form group (success, warning, or error).\n* `groupClassName`: An optional custom class name for the form group.", "output": "import React from 'react';\nimport classNames from 'classnames';\n\nclass FormGroup extends React.Component {\n  render() {\n    let classes = {\n      'form-group': !this.props.standalone,\n      'form-group-lg': !this.props.standalone && this.props.bsSize === 'large',\n      'form-group-sm': !this.props.standalone && this.props.bsSize === 'small',\n      'has-feedback': this.props.hasFeedback,\n      'has-success': this.props.bsStyle === 'success',\n      'has-warning': this.props.bsStyle === 'warning',\n      'has-error': this.props.bsStyle === 'error'\n    };\n\n    return (\n      <div className={classNames(classes, this.props.groupClassName)}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nFormGroup.defaultProps = {\n  hasFeedback: false,\n  standalone: false\n};\n\nFormGroup.propTypes = {\n  standalone: React.PropTypes.bool,\n  hasFeedback: React.PropTypes.bool,\n  bsSize (props) {\n    if (props.standalone && props.bsSize !== undefined) {\n      return new Error('bsSize will not be used when `standalone` is set.');\n    }\n\n    return React.PropTypes.oneOf(['small', 'medium', 'large'])\n      .apply(null, arguments);\n  },\n  bsStyle: React.PropTypes.oneOf(['success', 'warning', 'error']),\n  groupClassName: React.PropTypes.string\n};\n\nexport default FormGroup;\n"}, {"instruction": "Generate the code for a minimal React component that displays a heading and a paragraph with some text.", "output": "/**\n * React Static Boilerplate\n * https://github.com/koistya/react-static-boilerplate\n * Copyright (c) Konstantin Tarkus (@koistya) | MIT license\n */\n\nimport React, { Component } from 'react';\n\nexport default class extends Component {\n\n  render() {\n    return (\n      <div>\n        <h1>Home Page</h1>\n        <p>Coming soon.</p>\n      </div>\n    );\n  }\n\n}\n"}, {"instruction": "Create a React component called `Regular` that takes in children and className as props. The component should render a span element with a class name that combines `root` from a CSS module and any class names provided via the `className` prop.", "output": "import styles from './Regular.less';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classnames from 'classnames';\n\nexport default function Regular({ children, className, ...restProps }) {\n  return (\n    <span {...restProps} className={classnames(styles.root, className)}>\n      {children}\n    </span>\n  );\n}\n\nRegular.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string\n};\n"}, {"instruction": "Generate the code for a React component that displays the details of a YouTube video, including the embedded video, title, and description. If no video is provided, display a \"Loading...\" message.", "output": "import React from 'react';\n\nconst VideoDetail = ({video}) => {\n\n  if(!video){\n    return <div>Loading...</div>;\n  }\n\n  const videoId = video.id.videoId;\n  const url = `https://youtube.com/embed/${videoId}`\n\n  return (\n    <div className='video-detail col-md-8'>\n      <div className='embed-responsive embed-responsive-16by9'>\n        <iframe className='embed-responsive-item' src={url}></iframe>\n      </div>\n        <div>{video.snippet.title}</div>\n        <div>{video.snippet.description}</div>\n    </div>\n  )\n}\n\nexport default VideoDetail"}, {"instruction": "Provide a React component rendering a placeholder for empty screens using iconography and i18n text.", "output": "import Component from 'react-pure-render/component';\nimport React from 'react';\nimport { FormattedMessage, defineMessages } from 'react-intl';\nimport EditorFormatAlignLeft from 'material-ui/svg-icons/editor/format-align-left';\nimport { grey200 } from 'material-ui/styles/colors';\n\n\nconst _messages = defineMessages({\n  emptyArticle: {\n    defaultMessage: 'No data so far',\n    id: 'ui.emptyArticle.empty'\n  }\n});\n\nexport default class EmptyList extends Component {\n\n  render() {\n    const emptyListContainerStyle = {\n      width: '100%',\n      height: '70vh',\n      verticalAlign: 'middle',\n      textAlign: 'center',\n      color: grey200\n    };\n    const emptyListContentStyle = {\n      position: 'relative',\n      top: '50%',\n      transform: 'translateY(-50%)'\n    };\n    const iconStyle = {\n      width: 300,\n      height: 300\n    };\n\n    return (\n      <div style={emptyListContainerStyle}>\n        <div style={emptyListContentStyle}>\n          <EditorFormatAlignLeft color={grey200} style={iconStyle} />\n          <p>\n            <FormattedMessage {..._messages.emptyArticle} />\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React class component called `MyPropertiesExample` with a render method that displays a div containing an h1 element with text \"Properties\" and another div containing the text \"My favorite dish is\" followed by a prop called \"dish\".\nAdd defaultProps to the class component that sets the default value of the \"dish\" prop to \"shrimp with pasta\" and propTypes to define the \"dish\" prop as required and of type string.\nNest the `MyPropertiesExample` component inside another React class component called `MyVodooComponent`, and pass in a \"dish\" prop of \"chicken\". Export the `MyPropertiesExample` component by default.", "output": "import React from 'react';\n\nclass MyPropertiesExample extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Properties</h1>\n        My favourite dish is {this.props.dish}.\n      </div>\n    );\n  }\n}\n\nMyPropertiesExample.defaultProps = {\n  dish: 'shrimp with pasta'\n};\n\nMyPropertiesExample.propTypes = {\n  dish: React.PropTypes.string.isRequired\n};\n\nclass MyVodooComponent extends React.Component {\n  render() {\n    return (\n      <MyPropertiesExample dish=\"chicken\"/>\n    );\n  }\n}\n\nexport default MyPropertiesExample;\n"}, {"instruction": "Design a reusable button component that leverages the functionality from Material UI. The button should have a contained style with a primary color scheme, and it should support the ability to pass in custom styles through a className prop.", "output": "import cx from 'clsx';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport MuiButton from '@mui/material/Button';\n\nfunction Button({ children, className, ...props }) {\n  return (\n    <MuiButton\n      variant=\"contained\"\n      color=\"primary\"\n      className={cx('Button', className)}\n      type=\"submit\"\n      {...props}\n    >\n      {children}\n    </MuiButton>\n  );\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Button;\n"}, {"instruction": "Create a React Native component that displays a list of games. The component should include a header with the labels 'Home', '1 X 2', and 'Away'. Each game should be represented by a row in the list. The row should include the home team, away team, and a button that allows the user to select the result of the game. When the user selects a result, the component should update its state and re-render the list.", "output": "import React, { Component } from 'react';\nimport { View, FlatList, Text } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { Game } from '../game';\nimport { styles } from './style';\n\n\nclass GameListing extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      refresh: this.props.refreshGameListing\n    };\n  }\n\n  _keyExtractor = (item, index) => item.id;\n\n  _renderItem = ({ item }) => {\n    const homeTeam = item.outcome.home;\n    const awayTeam = item.outcome.away;\n    return (<Game\n      id={item.id}\n      homeTeam={homeTeam}\n      awayTeam={awayTeam}\n      popularity={item.outcome.popularity}\n      selectResult={(id, result) => {\n        this.props.selectResult(id, result);\n        this.setState({ refresh: !this.state.refresh });\n      }}\n      selection={item.outcome.selection}\n    />);\n  };\n\n\n  render() {\n    return (\n      <View style={styles.gameList}>\n        <View style={styles.title}>\n          <Text style={styles.titleText}>Home</Text><Text style={styles.titleText}>1 X 2</Text>\n          <Text style={styles.titleText}>Away</Text>\n        </View>\n        { this.props.gamesList.length > 0 ?\n          <FlatList\n            data={this.props.gamesList[this.props.selectedGamesList].rows}\n            renderItem={this._renderItem}\n            keyExtractor={this._keyExtractor}\n            extraData={this.state.refresh}\n          /> : null }\n      </View>\n    );\n  }\n}\n\nGameListing.propTypes = {\n  gamesList: PropTypes.array.isRequired,\n  selectResult: PropTypes.func.isRequired,\n  selectedGamesList: PropTypes.number,\n  refreshGameListing: PropTypes.bool\n};\n\n\nGameListing.defaultProps = {\n  refreshGameListing: false\n};\n\n\nexport {\n  GameListing\n};\n"}, {"instruction": "Create a simple note-taking app that saves the notes in the browser's local storage.", "output": "import React, { Component } from 'react';\n\nexport default class Notepad extends Component {\n\n  constructor(props) {\n    super(props);\n    const notepad = this.getNotepad();\n    const initialNote = 'Write your notes here - We\\'ll save it for offline!';\n    this.state = {\n      note: notepad || initialNote,\n    };\n  }\n\n  setNotepad = (val) => {\n    localStorage.notepad = val;\n  };\n\n  getNotepad = () => localStorage.notepad;\n\n  saveText = (e) => {\n    e.preventDefault();\n    this.setNotepad(this.state.note);\n  }\n\n  updateTextArea = (e) => {\n    this.setState({\n      note: e.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"border\">\n        <h2 className=\"header\">\n          Notepad\n        </h2>\n        <br />\n        <form onSubmit={this.saveText}>\n          <label htmlFor=\"notepad-textbox\">\n            <input\n              id=\"notepad-textbox\"\n              type=\"text\"\n              value={this.state.note}\n              onChange={this.updateTextArea}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React Higher Order Component (HOC) that checks if a global variable exists and then fetches data from an API if it does. Pass the data as props to the wrapped component and render it.", "output": "'use strict';\n\nimport React from 'react';\n\nimport checkGlobal from 'utils/checkGlobal';\n\nexport default (\n  name,\n  func,\n  getData = callback => callback({}),\n  defaultData = {}\n) => Component => {\n  const state = {};\n  state[`${name}CanUse`] = false;\n\n  return class CheckAPI extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        ...state,\n        ...defaultData\n      };\n    }\n\n    componentDidMount() {\n      checkGlobal.add(\n        name, func,\n        () => getData(\n          data => {\n            state[`${name}CanUse`] = true;\n            this.setState({\n              ...state,\n              ...data\n            });\n          }\n        )\n      );\n    }\n\n    render() {\n      return (\n        <Component {...this.state}\n          {...this.props}\n        />\n      );\n    }\n  };\n};\n"}, {"instruction": "Generate the React component code for the \"Body\" component, which is used to display the main content of a page. The component takes various props, including the title, SEO text, description, and content. It also includes a sticky left banner and a gradient mask to conceal permission blocks.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport cn from 'classnames';\nimport { Section, Wrapper, Heading } from 'common/base';\nimport GradientMask from 'common/GradientMask';\nimport MarkdownParser from './MarkdownParser';\nimport styles from './Body.module.css';\nimport LeftBanner from '../ExperienceSearch/Banners/Banner1';\n\nconst Body = ({ title, seoText, description, content, permissionBlock }) => (\n  <Section Tag=\"main\" pageTop>\n    <Wrapper size=\"m\">\n      <Heading size=\"l\" bold marginBottom>\n        {title}\n      </Heading>\n      <div className={cn('subheadingM', styles.description)}>{description}</div>\n    </Wrapper>\n    <Wrapper size=\"l\">\n      <div className={styles.contentWrapper}>\n        <StickyContainer className={cn(styles.leftBanner)}>\n          <Sticky disableCompensation>\n            {({ style }) => (\n              <div style={style}>\n                <LeftBanner />\n              </div>\n            )}\n          </Sticky>\n        </StickyContainer>\n        <div className={styles.content}>\n          <GradientMask show={permissionBlock !== null}>\n            <MarkdownParser content={content} />\n          </GradientMask>\n          {permissionBlock}\n        </div>\n      </div>\n      {seoText && <div className={styles.seoText}>{seoText}</div>}\n    </Wrapper>\n  </Section>\n);\n\nBody.propTypes = {\n  title: PropTypes.string,\n  seoText: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n  permissionBlock: PropTypes.element,\n};\nBody.defaultProps = {\n  title: '',\n  description: '',\n  content: '',\n  permissionBlock: null,\n};\n\nexport default Body;\n"}, {"instruction": "Create React Native components for switch and text settings that can be used in a settings screen. The switch setting should have a text label and a switch that can be toggled. The text setting should have a text label and a text input field. Style the components using a provided stylesheet.", "output": "import React, { Component } from 'react';\nimport {\n\tStyleSheet,\n\tView,\n\tText,\n\tDimensions,\n\tSwitch,\n\tTextInput\n} from 'react-native'\n\nconst {width, height} = Dimensions.get('window')\n\nexport class SwitchSetting extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tvalue: true\n\t\t}\n\t}\n\trender() {\n\t\treturn(\n\t\t\t<View style={styles.card}>\n\t\t\t\t<Text style={styles.setting}>{this.props.setting.title}</Text>\n\t\t\t\t<Switch tintColor=\"#094B81\" onTintColor=\"#094B81\" value={this.state.value} onChange={(e)=>{this.setState({value: !this.state.value})}}/>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nexport class TextSetting extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tvalue: ''\n\t\t}\n\t}\n\trender() {\n\t\treturn(\n\t\t\t<View style={styles.card}>\n\t\t\t\t<Text style={styles.setting}>{this.props.setting.title}</Text>\n\t\t\t\t<TextInput style={styles.textInput} placeholder={this.props.setting.placeholder || \"\"} value={this.state.value} onChangeText={(t)=>{this.setState({value: t})}} />\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcard: {\n\t\tpaddingLeft: 15,\n\t\tpaddingRight: 15,\n\t\tpaddingTop: 10,\n\t\tpaddingBottom: 15,\n\t\tbackgroundColor: '#01223E',\n\t\tjustifyContent: 'space-between',\n\t\talignItems: 'center',\n\t\tflexDirection: 'row',\n\t\tborderBottomWidth: 1,\n\t\tborderBottomColor: '#00111F',\n\t\twidth: width-30,\n\t\theight: 65\n\t},\n\ttextInput: {\n\t\theight: 40,\n\t\tborderColor: '#094B81',\n\t\tborderWidth: 1,\n\t\twidth: width-150,\n\t\tbackgroundColor: '#094B81'\n\t},\n\tsetting: {\n\t\tfontSize: 20,\n\t\tcolor: '#094B81'\n\t},\n\tswitch: {}\n})"}, {"instruction": "Design a React component that renders a data list displaying extension data. The component should include a heading, description, and list of links for each extension.", "output": "import React from 'react';\nimport {\n    DataList,\n    DataListItem,\n    DataListItemRow,\n    DataListItemCells,\n    DataListCell,\n    Title\n} from '@patternfly/react-core';\n\nexport const ExtensionsDataList = (props) =>\n(\n    <DataList aria-label=\"Community extensions\">\n        {props.data.map(item => {\n            const links = item.links.map((link, index) => {\n                return (\n                    <span key={index} className=\"pf-c-extensions__link\">\n                        <a href={link.href} target=\"_blank\" rel=\"noopener noreferrer\">{link.name}</a>\n                    </span>\n                );\n            });\n            return (\n                <DataListItem aria-labelledby=\"simple-item1\">\n                    <DataListItemRow>\n                        <DataListItemCells\n                            dataListCells={[\n                                <DataListCell key=\"primary content\" width={2}>\n                                    <Title headingLevel=\"h3\">{item.component}</Title>\n                                    <span className=\"pf-c-extensions__component-description\">{item.description}</span>\n                                </DataListCell>,\n                                <DataListCell key=\"secondary content\">{links}</DataListCell>\n                            ]}\n                        />\n                    </DataListItemRow>\n                </DataListItem>\n            )\n        })}\n    </DataList>\n);"}, {"instruction": "Generate a React component called LoginForm that has three input fields: email, password, and submit. The component will have an error message displayed if there is one.", "output": "import React from 'react'\nimport Input from '../common/forms/Input'\nconst LoginForm = (props) => (\n  <div className='container'>\n    <form>\n      <div className='error'>{props.error}</div>\n      <Input\n        type='email'\n        name='email'\n        value={props.user.email}\n        placeholder='E-mail'\n        onChange={props.onChange} />\n      <br />\n      <Input\n        type='password'\n        name='password'\n        value={props.user.password}\n        placeholder='Password'\n        onChange={props.onChange} />\n      <input className='btn btn-primary' type='submit' value='login' onClick={props.onSave} />\n      <br />\n    </form>\n  </div>\n)\n\nexport default LoginForm\n"}, {"instruction": "Generate a React component that renders an SVG icon of a lock with a keyhole in the center. The icon should be pure and have a display name of 'HardwareSecurity'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet HardwareSecurity = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11v8.8z\"/>\n  </SvgIcon>\n);\nHardwareSecurity = pure(HardwareSecurity);\nHardwareSecurity.displayName = 'HardwareSecurity';\nHardwareSecurity.muiName = 'SvgIcon';\n\nexport default HardwareSecurity;\n"}, {"instruction": "Generate a React component using Mineral UI's Icon component with \"RemoveCircle\" iconography and provide type checking with flow.", "output": "/* @flow */\nimport React from 'react';\nimport Icon from 'mineral-ui/Icon';\n\nimport type { IconProps } from 'mineral-ui/Icon/types';\n\n/* eslint-disable prettier/prettier */\nexport default function IconRemoveCircle(props: IconProps) {\n  const iconProps = {\n    rtl: false,\n    ...props\n  };\n\n  return (\n    <Icon {...iconProps}>\n      <g>\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\"/>\n      </g>\n    </Icon>\n  );\n}\n\nIconRemoveCircle.displayName = 'IconRemoveCircle';\nIconRemoveCircle.category = 'content';\n"}, {"instruction": "Create a React component that displays a form with the following fields: name, email. Add validation to the email field using `formsy-react-components`. The form should contain two buttons: \"Reset\" and \"Save\". The \"Save\" button should be disabled if the form is invalid. When the form is submitted, the `onSave` callback should be invoked, passing in an object containing the form values.", "output": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router';\nimport Formsy from 'formsy-react';\nimport autoBind from '../../lib/autoBind';\nimport { Input, Textarea } from 'formsy-react-components';\n\nclass UserForm extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      canSubmit: false\n    };\n\n    autoBind(this, {\n      bindOnly: ['enableButton', 'disableButton',  'submit', 'resetForm']\n    });\n  }\n\n  enableButton() {\n    this.setState({\n      canSubmit: true\n    });\n  }\n\n  disableButton() {\n    this.setState({\n      canSubmit: false\n    });\n  }\n\n  submit(model) {\n    this.props.onSave(model);\n  }\n\n  resetForm() {\n    this.refs.form.reset();\n  }\n\n  render() {\n    return (\n      <div>\n        <Formsy.Form ref=\"form\" className=\"horizontal\" onValidSubmit={this.submit} onValid={this.enableButton} onInvalid={this.disableButton}>\n          <Input formNoValidate required name=\"name\" label=\"Name\" placeholder=\"Name\" value={this.props.user.name || ''} />\n          <Input formNoValidate required name=\"email\" label=\"Email\" placeholder=\"Email\" value={this.props.user.email || ''}\n            validations=\"isEmail\"\n            validationError=\"This is not a valid email\" />\n          <div>\n            <button type=\"button\" onClick={this.resetForm}>Reset</button>\n            &nbsp;\n            <input type=\"submit\" disabled={!this.state.canSubmit} value={this.props.saving ? 'Saving... ' : 'Save'} />\n            &nbsp;\n            <Link to=\"/app/users\">Cancel</Link>\n          </div>\n        </Formsy.Form>\n      </div>\n    );\n  }\n}\n\nUserForm.propTypes = {\n  onSave: PropTypes.func.isRequired,\n  saving: PropTypes.bool.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nexport default UserForm;\n"}, {"instruction": "Create a React component that renders a Material Design social notifications icon. The component should be pure and have a display name of \"SocialNotifications\".", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet SocialNotifications = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\"/>\n  </SvgIcon>\n);\nSocialNotifications = pure(SocialNotifications);\nSocialNotifications.displayName = 'SocialNotifications';\n\nexport default SocialNotifications;\n"}, {"instruction": "Create a React higher-order component that provides the current viewport dimensions, as an object with `width` and `height` properties, to the wrapped component as a prop named `viewport`. It should listen to the window `resize` and `orientationchange` events and update the viewport dimensions when they change. The component should also clean up event listeners when unmounted.", "output": "/*! React Starter Kit | MIT License | http://www.reactstarterkit.com/ */\n\nimport React, { Component } from 'react'; // eslint-disable-line no-unused-vars\nimport EventEmitter from 'eventemitter3';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\n\nlet EE;\nlet viewport = {width: 1366, height: 768}; // Default size for server-side rendering\nconst RESIZE_EVENT = 'resize';\n\nfunction handleWindowResize() {\n  if (viewport.width !== window.innerWidth || viewport.height !== window.innerHeight) {\n    viewport = {width: window.innerWidth, height: window.innerHeight};\n    EE.emit(RESIZE_EVENT, viewport);\n  }\n}\n\nfunction withViewport(ComposedComponent) {\n  return class WithViewport extends Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        viewport: canUseDOM ? {width: window.innerWidth, height: window.innerHeight} : viewport,\n      };\n    }\n\n    componentDidMount() {\n      if (!EE) {\n        EE = new EventEmitter();\n        window.addEventListener('resize', handleWindowResize);\n        window.addEventListener('orientationchange', handleWindowResize);\n      }\n\n      EE.on(RESIZE_EVENT, this.handleResize, this);\n    }\n\n    componentWillUnmount() {\n      EE.removeListener(RESIZE_EVENT, this.handleResize, this);\n      if (!EE.listeners(RESIZE_EVENT, true)) {\n        window.removeEventListener('resize', handleWindowResize);\n        window.removeEventListener('orientationchange', handleWindowResize);\n        EE = null;\n      }\n    }\n\n    render() {\n      return <ComposedComponent {...this.props} viewport={this.state.viewport}/>;\n    }\n\n    handleResize(value) {\n      this.setState({viewport: value}); // eslint-disable-line react/no-set-state\n    }\n\n  };\n}\n\nexport default withViewport;\n"}, {"instruction": "Create a React component called Signin that allows a user to sign in using a form with an email and password. The component should dispatch an action to log the user in when the form is submitted. If there is an error during sign in, the component should display an alert message.", "output": "import React, { Component } from 'react';\nimport { reduxForm } from 'redux-form';\nimport * as actions from '../../actions';\n\nclass Signin extends Component {\n  handleFormSubmit({email, password}){\n    console.log(email, password);\n    // need to do something to log user in\n    this.props.signinUser({ email, password });\n  }\n\n  renderAlert(){\n    if(this.props.errorMessage){\n      return (\n        <div className=\"alert alert-danger\">\n          <strong>Oops!</strong> {this.props.errorMessage}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const { handleSubmit, fields: { email, password }} = this.props;\n\n    return (\n      <form onSubmit={handleSubmit(this.handleFormSubmit.bind(this))}>\n        <fieldset className=\"form-group\">\n          <label>Email: </label>\n          <input {...email} className=\"form-control\" />\n        </fieldset>\n        <fieldset className=\"form-group\">\n          <label>Password: </label>\n          <input {...password} type=\"password\" className=\"form-control\" />\n        </fieldset>\n        {this.renderAlert()}\n        <button action=\"submit\" className=\"btn btn-primary\">Sign in</button>\n      </form>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  return { errorMessage: state.auth.error };\n}\n\nexport default reduxForm({\n  form: 'signin',\n  fields: ['email', 'password']\n}, mapStateToProps, actions)(Signin);\n"}, {"instruction": "Describe in detail a React component that creates an article element with a class name derived from props. Pass event callbacks and an optional style and className prop to the article element, ensuring that the component renders all child components.", "output": "var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../../../build/styles';\nimport { getCallbacks } from './../../helper/helper';\n\nexport default class Media extends Component {\n\n  createClassName() {\n    return [styles.media, this.props.className].join(' ').trim();\n  }\n\n  render() {\n    return React.createElement(\n      'article',\n      _extends({}, getCallbacks(this.props), {\n        style: this.props.style,\n        className: this.createClassName()\n      }),\n      this.props.children\n    );\n  }\n}\nMedia.propTypes = {\n  style: PropTypes.object,\n  children: PropTypes.any,\n  className: PropTypes.string\n};\nMedia.defaultProps = {\n  style: {},\n  className: ''\n};"}, {"instruction": "Generate React component code for a newsletter signup form, with a grid layout and designed with accessibility in mind.", "output": "import React from 'react';\n\nexport function Newsletter() {\n\treturn (\n\t\t<section className=\"newsletter bg-black white pt3 pt5-m\">\n\t\t\t<div id=\"mc_embed_signup\" className=\"grid\">\n\t\t\t\t<div className=\"grid-item w-10 push-1\">\n\t\t\t\t\t<h3 className=\"f2\">Our newsletter</h3>\n\t\t\t\t</div>\n\t\t\t\t<form\n\t\t\t\t\tclassName=\"grid-item w-10 push-1 validate justify-end\"\n\t\t\t\t\taction=\"//fathomlondon.us16.list-manage.com/subscribe/post?u=9e5fce7688712fa6bf674d034&amp;id=adf3cf97ef\"\n\t\t\t\t\tmethod=\"post\"\n\t\t\t\t\tid=\"mc-embedded-subscribe-form\"\n\t\t\t\t\tname=\"mc-embedded-subscribe-form\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t>\n\t\t\t\t\t<div id=\"mc_embed_signup_scroll\">\n\t\t\t\t\t\t<div className=\"mc-field-group\">\n\t\t\t\t\t\t\t<label htmlFor=\"mce-EMAIL\" className=\"label light-grey\">\n\t\t\t\t\t\t\t\tEmail Address\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\tplaceholder=\"you@email.com\"\n\t\t\t\t\t\t\t\tname=\"EMAIL\"\n\t\t\t\t\t\t\t\tclassName=\"required email\"\n\t\t\t\t\t\t\t\tid=\"mce-EMAIL\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div id=\"mce-responses\" className=\"clear\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"response\"\n\t\t\t\t\t\t\t\tid=\"mce-error-response\"\n\t\t\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"response\"\n\t\t\t\t\t\t\t\tid=\"mce-success-response\"\n\t\t\t\t\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* real people should not fill this in and expect good things - do not remove this or risk form bot signups */}\n\t\t\t\t\t\t<div style={{ position: 'absolute', left: '-5000px' }} hidden>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"b_9e5fce7688712fa6bf674d034_adf3cf97ef\"\n\t\t\t\t\t\t\t\ttabIndex=\"-1\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-end\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tvalue=\"Subscribe\"\n\t\t\t\t\t\t\t\tname=\"subscribe\"\n\t\t\t\t\t\t\t\ttitle=\"Subscribe\"\n\t\t\t\t\t\t\t\taria-label=\"Subscribe\"\n\t\t\t\t\t\t\t\tid=\"mc-embedded-subscribe\"\n\t\t\t\t\t\t\t\tclassName=\"button mt1 hover-bg-white hover-black\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n"}, {"instruction": "Generate the React component code that handles file upload and data display. The component should use Redux for state management and have the following functionality:\n- File upload functionality using FileUploadComponent\n- Data display functionality using DataDisplayComponent\n- The component should connect to the Redux store and use appropriate selectors and operations for data management", "output": "import React from 'react';\nimport {connect} from 'react-redux';\nimport operations from '../operations';\nimport FileUploadComponent from './FileUploadComponent';\nimport DataDisplayComponent from './DataDisplayComponent';\nimport selectors from '../selectors';\n\nexport class DataContainer extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      onFileUpload,\n      loading,\n      itemNames\n    } = this.props;\n\n    return (\n      <div>\n        <FileUploadComponent onFileUpload={onFileUpload} loading={loading}/>\n        <DataDisplayComponent itemNames={itemNames}/>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const dataLoader = selectors.dataLoaderRootSelector(state);\n  return {\n    itemNames: selectors.getItemNames(dataLoader),\n    loading: selectors.isLoading(dataLoader),\n    error: selectors.getError(dataLoader)\n  };\n};\n\nconst dispatchToProps = dispatch => {\n  return {\n    onFileUpload: file => {\n      dispatch(operations.loadFile(file));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, dispatchToProps)(DataContainer);"}, {"instruction": "Create a user authentication system with React.js that allows a user to log in and out of a page. Upon logging in, the user's details should be stored in the local storage. Upon logging out, the user's details should be removed from the local storage.", "output": "import React from 'react';\nimport Header from '../components/Header.js';\n\nexport default class Logout extends React.Component {\n  static async getInitialProps({ req }) {\n    const user = req ? req.user : null;\n    return { user };\n  }\n\n  componentDidMount() {\n    if (this.props.user) {\n      try {\n        window.localStorage.setItem('user', this.props.user);\n      } catch (err) {}\n    } else if (typeof this.props.user !== 'undefined') {\n      window.localStorage.removeItem('user');\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <h1>Logged out!</h1>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Design a custom React component that renders a scatter plot chart using the `react-chartjs-2` library. Include options to customize the chart's color, data points, x and y axis labels, and title.", "output": "import React from 'react';\r\nimport { Scatter } from 'react-chartjs-2';\r\n\r\nconst scatterChart = ({color = 'blue', values = [], keys = {}, title = ''}) => {\r\n  const data = {\r\n    datasets: [{\r\n      label: `${keys.x} / ${keys.y}`,\r\n      fill: false,\r\n      pointBackgroundColor: 'rgba(0, 0, 0, 0)',\r\n      pointBorderColor: 'rgba(0, 0, 0, 0)',\r\n      borderColor: color,\r\n      data: values.map(line => ({x: line[keys.x], y: line[keys.y]}))\r\n    }]\r\n  }\r\n  const options = {\n\r\n    title: {\n      display: title ? true : false,\n      text: title,\n      fontSize: 24\n    }\r\n  }\r\n  return <Scatter data={data} options={options} />\r\n};\r\n\r\nconst charts = {\r\n  scatter: props => scatterChart(props),\r\n};\r\n\r\nconst Chart = ({type, ...props}) => charts[type](props);\r\n\r\nexport default Chart;\r\n"}, {"instruction": "Illustrate an alternative approach to creating tabs without using a TabPanel component by utilizing TabBar and Tab components. Include instructions for changing the active tab and displaying the currently active tab's ID.", "output": "import React, { Component } from 'react';\nimport { TabBar, Tab, Panel, Container } from '@extjs/ext-react';\n\nexport default class TabBarExample extends Component {\n\n    state = {\n        activeTab: \"download\"\n    }\n\n    render() {\n        const { activeTab } = this.state;\n\n        return (\n            <Container layout={{ type: 'vbox', align: 'center' }} padding=\"10\">\n                <Panel ui=\"instructions\" margin=\"0 0 20 0\" shadow >\n                    <div>To acheive the look and feel of tabs without using a <code>TabPanel</code>, you can use <code>TabBar</code> and <code>Tab</code> as standalone components.</div>\n                </Panel>\n\n                <TabBar width=\"400\" shadow onActiveTabChange={this.onTabChange} activeTab={activeTab}>\n                    <Tab itemId=\"info\" title=\"Info\" iconCls=\"x-fa fa-info-circle\" onActivate={this.onActivateTab}/>\n                    <Tab itemId=\"download\" title=\"Download\" iconCls=\"x-fa fa-download\" badgeText=\"2\" onActivate={this.onActivateTab}/>\n                    <Tab itemId=\"favorites\" title=\"Favorites\" iconCls=\"x-fa fa-star\" onActivate={this.onActivateTab}/>\n                    <Tab itemId=\"bookmarks\" title=\"Bookmarks\" iconCls=\"x-fa fa-bookmark\" onActivate={this.onActivateTab}/>\n                </TabBar>\n\n                <Panel ui=\"instructions\" margin=\"20 0 0 0\" shadow >\n                    <div>Active Tab: {activeTab}</div>\n                </Panel>\n            </Container>\n        )\n    }\n\n    onTabChange = (bar, tab) => {\n        this.setState({ activeTab: tab.getItemId() })\n    }\n\n} "}, {"instruction": "Create a React component called `Thumbnail` that displays an image with an optional caption and can be clicked if a URL is provided.", "output": "import React from 'react';\nimport classSet from 'classnames';\nimport BootstrapMixin from './BootstrapMixin';\nimport SafeAnchor from './SafeAnchor';\n\nconst Thumbnail = React.createClass({\n  mixins: [BootstrapMixin],\n\n  propTypes: {\n    alt: React.PropTypes.string,\n    href: React.PropTypes.string,\n    src: React.PropTypes.string\n  },\n\n  getDefaultProps() {\n    return {\n      bsClass: 'thumbnail'\n    };\n  },\n\n  render() {\n    let classes = this.getBsClassSet();\n\n    if(this.props.href) {\n      return (\n        <SafeAnchor {...this.props} href={this.props.href} className={classSet(this.props.className, classes)}>\n          <img src={this.props.src} alt={this.props.alt} />\n        </SafeAnchor>\n      );\n    }\n    else {\n      if(this.props.children) {\n        return (\n          <div {...this.props} className={classSet(this.props.className, classes)}>\n            <img src={this.props.src} alt={this.props.alt} />\n            <div className=\"caption\">\n              {this.props.children}\n            </div>\n          </div>\n        );\n      }\n      else {\n        return (\n          <div {...this.props} className={classSet(this.props.className, classes)}>\n            <img src={this.props.src} alt={this.props.alt} />\n          </div>\n        );\n      }\n    }\n  }\n});\n\nexport default Thumbnail;\n"}, {"instruction": "Create a React component that imports the SvgIcon element from a library and defines a new component called EditorShortText. This component should use the SvgIcon and define the path data for the icon.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet EditorShortText = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M4 9h16v2H4zm0 4h10v2H4z\"/>\n  </SvgIcon>\n);\nEditorShortText = pure(EditorShortText);\nEditorShortText.displayName = 'EditorShortText';\nEditorShortText.muiName = 'SvgIcon';\n\nexport default EditorShortText;\n"}, {"instruction": "Create a React component that utilizes React Router to implement protected routes, ensuring that unauthorized users are redirected to a login page before accessing certain routes.", "output": "import React, { Component } from 'react';\nimport { Link, RouteHandler } from 'react-router';\n\nimport { Jumbotron, Nav, Row, Col } from 'react-bootstrap';\n\nimport { NavItemLink } from 'react-router-bootstrap';\n\nimport AuthStore from '../stores/auth';\nimport SignIn from '../pages/signin';\n\nexport default class MainLayout extends Component {\n  static displayName = 'MainLayout';\n  constructor() {\n    super();\n  }\n\n  static willTransitionTo(transition) {\n    if (!AuthStore.isLoggedIn()) {\n      SignIn.attemptedTransition = transition;\n      transition.redirect('sign-in');\n    }\n  }\n\n  render() {\n    return (\n      <div>\n      <div className=\"container\">\n        <Row>\n          <Col md={2}>\n            <h3>Links</h3>\n            <Nav bsStyle=\"pills\" stacked>\n              <NavItemLink to=\"index\">Index</NavItemLink>\n              <NavItemLink to=\"null-page\">Null</NavItemLink>\n            </Nav>\n          </Col>\n          <Col md={10} className=\"well\">\n            <RouteHandler />\n          </Col>\n        </Row>\n      </div>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component called ErrorBoundary that implements error boundaries. The component should log errors and error information to the console, display a friendly error message to the user, and fall back to displaying the children if no error occurs.", "output": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ErrorBoundary extends Component {\n\n  static propTypes = {\n    children: PropTypes.node,\n  }\n\n  state = {\n    error: null,\n    errorInfo: null,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      return (\n        <div>\n          <h2>Error</h2>\n          <p>{this.state.error && this.state.error.toString()}</p>\n          <pre>{this.state.errorInfo.componentStack}</pre>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n"}, {"instruction": "Create a React component that displays a list of uploaded media files with the ability to remove them. The component should have a smooth animation on the uploaded file as it appears on the screen and a thumbnail of the file using a provided preview URL. The component should be able to receive a list of media files as a prop.", "output": "import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport UploadProgressContainer from '../containers/upload_progress_container';\nimport Motion from 'react-motion/lib/Motion';\nimport spring from 'react-motion/lib/spring';\n\nconst messages = defineMessages({\n  undo: { id: 'upload_form.undo', defaultMessage: 'Undo' },\n});\n\nclass UploadForm extends React.PureComponent {\n\n  static propTypes = {\n    media: ImmutablePropTypes.list.isRequired,\n    onRemoveFile: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onRemoveFile = (e) => {\n    const id = Number(e.currentTarget.parentElement.getAttribute('data-id'));\n    this.props.onRemoveFile(id);\n  }\n\n  render () {\n    const { intl, media } = this.props;\n\n    const uploads = media.map(attachment =>\n      <div className='compose-form__upload' key={attachment.get('id')}>\n        <Motion defaultStyle={{ scale: 0.8 }} style={{ scale: spring(1, { stiffness: 180, damping: 12 }) }}>\n          {({ scale }) =>\n            <div className='compose-form__upload-thumbnail' data-id={attachment.get('id')} style={{ transform: `translateZ(0) scale(${scale})`, backgroundImage: `url(${attachment.get('preview_url')})` }}>\n              <IconButton icon='times' title={intl.formatMessage(messages.undo)} size={36} onClick={this.onRemoveFile} />\n            </div>\n          }\n        </Motion>\n      </div>\n    );\n\n    return (\n      <div className='compose-form__upload-wrapper'>\n        <UploadProgressContainer />\n        <div className='compose-form__uploads-wrapper'>{uploads}</div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(UploadForm);\n"}, {"instruction": "Generate the React code for the `MediaBody` component, which is a container for the body content of a media component. It should support custom `componentClass` prop and use `classNames` to combine the provided `className` prop and generated class set.", "output": "import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport elementType from 'prop-types-extra/lib/elementType';\n\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\n\nvar propTypes = {\n  componentClass: elementType\n};\n\nvar defaultProps = {\n  componentClass: 'div'\n};\n\nvar MediaBody = function (_React$Component) {\n  _inherits(MediaBody, _React$Component);\n\n  function MediaBody() {\n    _classCallCheck(this, MediaBody);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  MediaBody.prototype.render = function render() {\n    var _props = this.props,\n        Component = _props.componentClass,\n        className = _props.className,\n        props = _objectWithoutProperties(_props, ['componentClass', 'className']);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    var classes = getClassSet(bsProps);\n\n    return React.createElement(Component, _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }));\n  };\n\n  return MediaBody;\n}(React.Component);\n\nMediaBody.propTypes = propTypes;\nMediaBody.defaultProps = defaultProps;\n\nexport default bsClass('media-body', MediaBody);"}, {"instruction": "Design a simple and customizable React button component with specified border, background color, and padding. Include propTypes and defaultProps for the component.", "output": "/* eslint-disable import/no-extraneous-dependencies, import/no-unresolved, import/extensions */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst buttonStyles = {\n  border: '1px solid #eee',\n  borderRadius: 3,\n  backgroundColor: '#FFFFFF',\n  cursor: 'pointer',\n  fontSize: 15,\n  padding: '3px 10px',\n  margin: 10,\n};\n\nconst Button = ({ children, onClick }) =>\n  <button style={buttonStyles} onClick={onClick}>\n    {children}\n  </button>;\n\nButton.propTypes = {\n  children: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n};\nButton.defaultProps = {\n  onClick: () => {},\n};\n\nexport default Button;\n"}, {"instruction": "Generate the React component code for a Material Design icon representing a page view, using the 'recompose/pure' library for performance optimization. Name the component 'ActionPageview'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionPageview = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M11.5 9C10.12 9 9 10.12 9 11.5s1.12 2.5 2.5 2.5 2.5-1.12 2.5-2.5S12.88 9 11.5 9zM20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-3.21 14.21l-2.91-2.91c-.69.44-1.51.7-2.39.7C9.01 16 7 13.99 7 11.5S9.01 7 11.5 7 16 9.01 16 11.5c0 .88-.26 1.69-.7 2.39l2.91 2.9-1.42 1.42z\"/>\n  </SvgIcon>\n);\nActionPageview = pure(ActionPageview);\nActionPageview.displayName = 'ActionPageview';\n\nexport default ActionPageview;\n"}, {"instruction": "Generate the code snippet for a React component called StepTitle, which can optionally contain a title and is used within a Step component.", "output": "import _extends from 'babel-runtime/helpers/extends';\nimport _isNil from 'lodash/isNil';\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\n\n/**\n * A step can contain a title.\n */\nfunction StepTitle(props) {\n  var children = props.children,\n      className = props.className,\n      title = props.title;\n\n  var classes = cx('title', className);\n  var rest = getUnhandledProps(StepTitle, props);\n  var ElementType = getElementType(StepTitle, props);\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    _isNil(children) ? title : children\n  );\n}\n\nStepTitle.handledProps = ['as', 'children', 'className', 'title'];\nStepTitle._meta = {\n  name: 'StepTitle',\n  parent: 'Step',\n  type: META.TYPES.ELEMENT\n};\n\nprocess.env.NODE_ENV !== \"production\" ? StepTitle.propTypes = {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  title: customPropTypes.contentShorthand\n} : void 0;\n\nexport default StepTitle;"}, {"instruction": "Design the code block for a component that displays a label with text and description, and demonstrate its usage in a field.", "output": "/*\n * Copyright (c) 2016-present, Parse, LLC\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\nimport React from 'react';\nimport Field from 'components/Field/Field.react';\nimport Label from 'components/Label/Label.react';\n\nexport const component = Label;\n\nexport const demos = [\n  {\n    render: () => (\n      <Field\n        label={<Label text='This is my text.' description='This is my description.' />}\n        input={null} />\n    )\n  }\n];\n"}, {"instruction": "Create a class-based action that initializes an MK-Meta-Engine action with a given option, loads data from a web API, and provides a way to reduce injections for both initialization and data loading.", "output": "import React from 'react'\nimport { action as MetaAction, AppLoader } from 'mk-meta-engine'\nimport config from './config'\n\nclass action {\n    constructor(option) {\n        this.metaAction = option.metaAction\n        this.config = config.current\n        this.webapi = this.config.webapi\n    }\n\n    onInit = ({ component, injections }) => {\n        this.component = component\n        this.injections = injections\n        injections.reduce('init')\n\n        this.load()\n    }\n\n    load = async () => {\n        const response = await this.webapi.version.query()\n        this.injections.reduce('load', response)\n    }\n\n\n}\n\nexport default function creator(option) {\n    const metaAction = new MetaAction(option),\n        o = new action({ ...option, metaAction }),\n        ret = { ...metaAction, ...o }\n\n    metaAction.config({ metaHandlers: ret })\n\n    return ret\n}"}, {"instruction": "Generate a React component class named Login that is used for user authentication. The component should handle form submission and redirect the user to a specified path after successful login. Include relevant propTypes and necessary functions for form handling and error handling.", "output": "import './login.styl';\nimport Component from '../components/component.react';\nimport React from 'react';\nimport exposeRouter from '../components/exposerouter.react';\nimport {focusInvalidField} from '../lib/validation';\n\n@exposeRouter\nexport default class Login extends Component {\n\n  static propTypes = {\n    actions: React.PropTypes.object.isRequired,\n    auth: React.PropTypes.object.isRequired,\n    msg: React.PropTypes.object.isRequired,\n    router: React.PropTypes.func\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n    const {actions: {auth}, auth: {form}} = this.props;\n    auth.login(form.fields)\n      .then(() => this.redirectAfterLogin())\n      .catch(focusInvalidField(this));\n  }\n\n  redirectAfterLogin() {\n    const {router} = this.props;\n    const nextPath = router.getCurrentQuery().nextPath;\n    router.replaceWith(nextPath || 'home');\n  }\n\n  render() {\n    const {\n      actions: {auth: actions},\n      auth: {form},\n      msg: {auth: {form: msg}}\n    } = this.props;\n\n    return (\n      <div className=\"login\">\n        <form onSubmit={::this.onFormSubmit}>\n          <fieldset disabled={form.disabled}>\n            <legend>{msg.legend}</legend>\n            <input\n              autoFocus\n              name=\"email\"\n              onChange={actions.setFormField}\n              placeholder={msg.placeholder.email}\n              value={form.fields.email}\n            />\n            <br />\n            <input\n              name=\"password\"\n              onChange={actions.setFormField}\n              placeholder={msg.placeholder.password}\n              type=\"password\"\n              value={form.fields.password}\n            />\n            <br />\n            <button\n              children={msg.button.login}\n              type=\"submit\"\n            />\n            {form.error &&\n              <span className=\"error-message\">{form.error.message}</span>\n            }\n            <div>{msg.hint}</div>\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n\n}\n"}, {"instruction": "Provide a way to write automated tests for React components using Chai, jsdom, and React Test Utils. Include functions for rendering components and simulating events on their DOM elements.", "output": "import _$ from 'jquery';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestUtils from 'react-addons-test-utils';\nimport jsdom from 'jsdom';\nimport chai, { expect } from 'chai';\nimport chaiJquery from 'chai-jquery';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from '../src/reducers';\n\nglobal.document = jsdom.jsdom('<!doctype html><html><body></body></html>');\nglobal.window = global.document.defaultView;\nglobal.navigator = global.window.navigator;\nconst $ = _$(window);\n\nchaiJquery(chai, chai.util, $);\n\nfunction renderComponent(ComponentClass, props = {}, state = {}) {\n  const componentInstance =  TestUtils.renderIntoDocument(\n    <Provider store={createStore(reducers, state)}>\n      <ComponentClass {...props} />\n    </Provider>\n  );\n\n  return $(ReactDOM.findDOMNode(componentInstance));\n}\n\n$.fn.simulate = function(eventName, value) {\n  if (value) {\n    this.val(value);\n  }\n  TestUtils.Simulate[eventName](this[0]);\n};\n\nexport {renderComponent, expect};\n"}, {"instruction": "Generate a React component that displays a dynamic hexbin chart. The chart should have 2000 data points that are randomly distributed. The data points should move smoothly around the chart in a circular pattern. The hexagons should be colored according to the number of data points within them.", "output": "import React from 'react';\nimport {range} from 'd3-array';\nimport {hexbin as d3hexbin} from 'd3-hexbin';\nimport {randomNormal} from 'd3-random';\nimport {scaleLinear} from 'd3-scale';\nimport {interpolateLab} from 'd3-interpolate';\n\nconst width = 960;\nconst height = 500;\nlet i = -1;\nlet theta = 0;\nconst deltaTheta = 0.3;\nconst n = 2000;\nconst k = 20;\n\nlet randomX = randomNormal(width / 2, 80);\nlet randomY = randomNormal(height / 2, 80);\nlet points = range(n).map(function() { return [randomX(), randomY()]; });\n\nconst color = scaleLinear()\n  .domain([0, 20])\n  .range([\"rgba(0, 0, 0, 0)\", \"steelblue\"])\n  .interpolate(interpolateLab);\n\nconst hexbin = d3hexbin().radius(20);\n\nexport default class DynamicHexbin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {points};\n  }\n\n  componentDidMount() {\n    this.handle = window.setInterval(() => { this._update(); }, 20);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.handle);\n  }\n\n  _update() {\n    theta += deltaTheta;\n    randomX = randomNormal(width / 2 + 80 * Math.cos(theta), 80),\n    randomY = randomNormal(height / 2 + 80 * Math.sin(theta), 80);\n\n    for (let j = 0; j < k; ++j) {\n      i = (i + 1) % n;\n      points[i][0] = randomX();\n      points[i][1] = randomY();\n    }\n\n    this.setState({ points });\n  }\n\n  render() {\n    const hexagons = hexbin(this.state.points).map(point => (\n      <path\n        d={hexbin.hexagon(19.5)}\n        transform={`translate(${point.x}, ${point.y})`}\n        fill={color(point.length)}\n      />\n    ));\n\n    return (\n      <svg width={width} height={height}>\n        <g className=\"hexagons\">\n          {hexagons}\n        </g>\n      </svg>\n    );\n  }\n}\n"}, {"instruction": "Create a React component that displays a message. Add styles if necessary.", "output": "import React from 'react'<% if (addStyle) { %>\nimport { makeStyles } from '@material-ui/core/styles'<% } %>\n// import use<%= startCaseName %> from './use<%= startCaseName %>'<% if (addStyle) { %>\nimport styles from './<%= name %>.styles'\n\nconst useStyles = makeStyles(styles)<% } %>\n\nfunction <%= name %>() {\n  <% if (addStyle) { %>const classes = useStyles()<% } %>\n  // const {} = use<%= startCaseName %>()\n\n  return (\n    <% if (addStyle) { %><div className={classes.root}><% } else { %><div><% } %>\n      <span><%= name %> Component</span>\n    </div>\n  )\n}\n\nexport default <%= name %>\n"}, {"instruction": "Display real-time number of pending requests for a specified administrator.", "output": "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { fetchAdminPendingNumRest } from \"./api\";\n\nexport const run = () => {\n  // This is lazy\n  fetchAdminPendingNumRest()\n    .then(response => response.json())\n    .then(response => {\n      ReactDOM.render((\n        `${response.num}`\n        ), document.getElementById('admin-pending-num')\n      );\n    })\n};\n"}, {"instruction": "Generate a React component using the Material-UI styling library that can be used as a footer for a web application. The component should accept a string as a prop and display that string as text in the footer. The footer should be fixed to the bottom of the screen and have a drop shadow.", "output": "// Copyright \u00a9 2016, Ugo Pozo\n//             2016, C\u00e2mara Municipal de S\u00e3o Paulo\n\n// footer.js - footer component of the search interface.\n\n// This file is part of Anubis.\n\n// Anubis is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Anubis is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport {Toolbar, ToolbarGroup, ToolbarTitle} from 'material-ui';\nimport {PropTypes as RPropTypes} from 'react';\n\nconst getStateProps = state => ({\n    footer: state.getIn(['applicationData', 'footer']),\n});\n\n@connect(getStateProps)\nexport default class Header extends React.Component {\n    static propTypes = {\n        footer: RPropTypes.string,\n    }\n\n    static contextTypes = {\n        muiTheme: React.PropTypes.object,\n    }\n\n    render() {\n        const color = this.context.muiTheme.flatButton.textColor;\n\n        return (\n            <Toolbar\n                style={{\n                    boxShadow: \"0 -10px 15px 0 rgba(0,0,0,0.4)\",\n                    position: \"fixed\",\n                    bottom: 0,\n                    width: \"100%\",\n                    fontFamily: \"'Roboto', sans-serif\",\n                    zIndex: 1500,\n                }}\n            >\n                <ToolbarGroup>\n                    <ToolbarTitle\n                        style={{color}}\n                        text={this.props.footer}\n                    />\n                </ToolbarGroup>\n            </Toolbar>\n        );\n    }\n}\n\n\n"}, {"instruction": "Create code that sets up a server using the Razzle framework, including the necessary imports and express configuration. Use cache.reset() and cache.injectOptions() to manage CSS styles. Handle client and server-side rendering with StaticRouter. Return the server as an export.", "output": "import { cache } from 'jsxstyle';\nimport App from './App';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\n\nconst server = express();\n\nserver\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get('/*', (req, res) => {\n    cache.reset();\n    let styles = '';\n    cache.injectOptions({\n      onInsertRule(css) {\n        styles += css;\n      },\n    });\n    const context = {};\n\n    const markup = renderToString(\n      <StaticRouter context={context} location={req.url}>\n        <App />\n      </StaticRouter>\n    );\n\n    if (context.url) {\n      res.redirect(context.url);\n    } else {\n      res.send(\n        `<!doctype html>\n    <html lang=\"\">\n    <head>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta charSet='utf-8' />\n        <title>Welcome to Razzle</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        ${\n          assets.client.css\n            ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">`\n            : ''\n        }\n        ${styles ? `<style type=\"text/css\">${styles}</style>` : ''}\n        ${\n          process.env.NODE_ENV === 'production'\n            ? `<script src=\"${assets.client.js}\" defer></script>`\n            : `<script src=\"${assets.client.js}\" defer crossorigin></script>`\n        }\n    </head>\n    <body>\n        <div id=\"root\">${markup}</div>\n    </body>\n</html>`\n      );\n    }\n  });\n\nexport default server;\n"}, {"instruction": "Design a React.js component that displays a card with a title and description. The card should have edit and delete buttons that trigger functions passed as props when clicked. When the mouse hovers over the card, the z-depth should increase, and when the mouse leaves, it should return to its default z-depth.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardActions, CardTitle, CardText } from 'material-ui/Card';\nimport DeleteButton from './DeleteButton';\nimport EditButton from './EditButton';\n\nconst buttonStyle = {\n  margin: '0.5em',\n};\nconst cardStyle = {\n  marginTop: '1em',\n  marginBottom: '1em',\n};\n/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable react/jsx-boolean-value */\nclass CategoryCard extends React.Component {\n  constructor() {\n    super();\n    this.state = { edit: false, shadow: 1 };\n    this.onMouseOut = this.onMouseOut.bind(this);\n    this.onMouseOut = this.onMouseOut.bind(this);\n  }\n  onMouseOver = () => { this.setState({ shadow: 3 }); }\n  onMouseOut = () => { this.setState({ shadow: 1 }); }\n  render() {\n    const { item } = this.props;\n    return (\n      <Card\n        style={cardStyle}\n        zDepth={this.state.shadow}\n        onMouseOver={this.onMouseOver}\n        onFocus={this.onMouseOver}\n        onMouseOut={this.onMouseOut}\n        onBlur={this.onMouseOut}\n      >\n        <CardTitle\n          title={item.name}\n          actAsExpander={true}\n          showExpandableButton={true}\n        />\n        <CardText expandable={true}>\n          {item.description}\n        </CardText>\n        <CardActions expandable={true}>\n          <EditButton style={buttonStyle} edit={this.props.edit} post={item}>\n            Edit\n          </EditButton>\n          <DeleteButton\n            style={buttonStyle}\n            delete={this.props.delete}\n            post={item}\n          />\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nCategoryCard.propTypes = {\n  delete: PropTypes.func.isRequired,\n  edit: PropTypes.func.isRequired,\n  item: PropTypes.object.isRequired,\n};\nexport default CategoryCard;\n"}, {"instruction": "Create a React function called ParameterDetailBody that accepts three props: node, minHeight (optional), and returns a JSX element. Inside the function, use a ternary operator to conditionally apply a minHeight style to a div element. Within this div, include two more divs with classes \"information\" and \"row\". In the \"row\" div, create two child divs with classes \"col\" and \"col-sm-4 box\" for the first child, and \"col-sm-8 box\" for the second child. Fill these divs with specific text and data derived from the \"node\" prop, including the parameter name, value used, and other details.", "output": "'use strict';\n\nimport React from 'react';\n\n\nexport const ParameterDetailBody = React.memo(function ParameterDetailBody({ node, minHeight }){\n    return (\n        <div style={typeof minHeight === 'number' ? { minHeight } : null}>\n            <div className=\"information\">\n                <div className=\"row\">\n\n                    <div className=\"col col-sm-4 box\">\n                        <span className=\"text-600\">Parameter Name</span>\n                        <h3 className=\"text-300 text-truncate\">{ node.name || node.meta.name }</h3>\n                    </div>\n\n                    <div className=\"col-sm-8 box\">\n                        <span className=\"text-600\">Value Used</span>\n                        <h4 className=\"text-300 text-truncate\">\n                            <code>{ node.meta.run_data.value }</code>\n                        </h4>\n                    </div>\n\n                </div>\n            </div>\n            <hr/>\n        </div>\n    );\n});\n\n"}, {"instruction": "Generate the React Router code for a web application with an App component and three pages: LoginPage, SpikePage, and ViewPage. The LoginPage should be the default page, and the SpikePage and ViewPage should be accessible through the /spike/:id and /view/:id routes respectively.", "output": "import React from 'react';\r\nimport { Route, IndexRoute } from 'react-router';\r\n\r\nimport App from './App';\r\nimport LoginPage from '../../pages/login/page';\r\nimport ViewPage from '../../pages/view/page';\r\nimport SpikePage from '../../pages/spike/page';\r\n\r\n\r\nexport default (\r\n  <Route path=\"/\" component={App}>\r\n    <IndexRoute component={LoginPage} />\r\n    <Route path=\"spike/:id\" component={SpikePage} />\r\n    <Route path=\"view/:id\" component={ViewPage} />\r\n  </Route>\r\n);\r\n"}, {"instruction": "Generate a React component for rendering a Material Design wifi signal icon with three bars, where the strength of the signal is 3 out of 4.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet DeviceSignalWifi3Bar = (props) => (\n  <SvgIcon {...props}>\n    <path fillOpacity=\".3\" d=\"M12.01 21.49L23.64 7c-.45-.34-4.93-4-11.64-4C5.28 3 .81 6.66.36 7l11.63 14.49.01.01.01-.01z\"/><path d=\"M3.53 10.95l8.46 10.54.01.01.01-.01 8.46-10.54C20.04 10.62 16.81 8 12 8c-4.81 0-8.04 2.62-8.47 2.95z\"/>\n  </SvgIcon>\n);\nDeviceSignalWifi3Bar = pure(DeviceSignalWifi3Bar);\nDeviceSignalWifi3Bar.displayName = 'DeviceSignalWifi3Bar';\nDeviceSignalWifi3Bar.muiName = 'SvgIcon';\n\nexport default DeviceSignalWifi3Bar;\n"}, {"instruction": "Create React application that registers event listener to detect visibility change, and sends a message using actions to update the store when the visibility changes.", "output": "import React from 'react';\n\nimport requireAuth from 'utils/require-auth';\n\nimport VisibilityActionCreators from 'actions/VisibilityActionCreators';\n\nimport ActivitySection from 'components/ActivitySection.react';\nimport SidebarSection from 'components/SidebarSection.react';\nimport ToolbarSection from 'components/ToolbarSection.react';\nimport DialogSection from 'components/DialogSection.react';\n\nconst visibilitychange = 'visibilitychange';\nvar onVisibilityChange = () => {\n  if (!document.hidden) {\n    VisibilityActionCreators.createAppVisible();\n  } else {\n    VisibilityActionCreators.createAppHidden();\n  }\n};\n\nclass Main extends React.Component {\n  componentWillMount() {\n    document.addEventListener(visibilitychange, onVisibilityChange);\n\n    if (!document.hidden) {\n      VisibilityActionCreators.createAppVisible();\n    }\n  }\n\n  constructor() {\n    super();\n  }\n\n\n  render() {\n    return (\n      <div className=\"app row\">\n\n        <SidebarSection/>\n\n        <section className=\"main col-xs\">\n          <ToolbarSection/>\n          <DialogSection/>\n        </section>\n\n        <ActivitySection/>\n      </div>\n    );\n  }\n}\n\nexport default requireAuth(Main);\n"}, {"instruction": "Create a reusable React panel component with a header that includes a title, icon, and utility buttons, and a footer that includes a footer note and action buttons.", "output": "import React from 'react';\n\nconst Panel = (props) => {\n\n  let panelClass = ['rh-panel'],\n      header, footer;\n\n  if (props.title || props.icon || props.utilityButtons) {\n    header = <PanelHeader {...props}/>;\n  }\n\n  if (props.footerNote || props.actionButtons) {\n    footer = <PanelFooter {...props}/>;\n  }\n\n  return (<section className={panelClass.join(' ')}>\n    {header}\n    <div className=\"rh-panel-content\">\n      {props.children}\n    </div>\n    {footer}\n  </section>);\n};\n\nexport default Panel;\n\nexport const PanelHeader = ({title, icon, utilityButtons}) => {\n  let headerIcon = icon ?\n    <div className=\"rh-panel-header-icon\"><i className={'fa fa-' + icon}/>\n    </div> : null;\n\n    // TODO apply key to utility buttons\n  return (<div className=\"rh-panel-header\">\n    {headerIcon}\n    <div className=\"rh-panel-header-label\">\n      <h1>{title}</h1>\n    </div>\n    <div className=\"rh-panel-header-buttons\">\n      {utilityButtons ? utilityButtons.map(b => b) : null}\n    </div>\n  </div>);\n};\n\nexport const PanelFooter = ({footerNote, actionButtons}) => {\n  // TODO apply key to action buttons\n  return (<div className=\"rh-panel-footer\">\n    <h1>{footerNote}</h1>\n    <div className=\"rh-panel-footer-buttons\">\n      {actionButtons ? actionButtons.map(b => b) : null}\n    </div>\n  </div>);\n};"}, {"instruction": "Create a React component using the Material UI library that renders an SVG icon of a square with a plus sign inside it. The icon should be resizable and able to receive different colors.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ContentAddBox = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/>\n  </SvgIcon>\n);\nContentAddBox = pure(ContentAddBox);\nContentAddBox.displayName = 'ContentAddBox';\nContentAddBox.muiName = 'SvgIcon';\n\nexport default ContentAddBox;\n"}, {"instruction": "Generate a React component that lists categories from a Relay query and allows the user to navigate to a category page. The component should include a header, description, and grid of categories.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { QueryRenderer, graphql } from 'react-relay';\nimport relayEnvironment from 'app/config/relay';\nimport PageError from 'app/components/Common/PageError';\nimport PageLoader from 'app/components/Common/PageLoader';\nimport StoreLayout from 'app/components/Store/Main/StoreLayout';\nimport CategoriesGrid from 'app/components/Store/Category/CategoriesGrid';\nimport Paper from 'app/components/Store/Main/Paper';\n\nconst CategoriesRoute = ({\n  categories,\n  history,\n  notifier,\n  viewer,\n}) => (\n  <StoreLayout\n    notifier={notifier}\n    viewer={viewer}\n  >\n    <Paper paddings={['top', 'bottom', 'left', 'right']}>\n      <h1>Shop By Categories</h1>\n      <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters.</p>\n    </Paper>\n    <Paper paddings={['bottom', 'left', 'right']}>\n      <CategoriesGrid\n        categories={categories}\n        onCategoryClick={(id) => history.push(`category/${id}`)}\n      />\n    </Paper>\n  </StoreLayout>\n);\n\nCategoriesRoute.propTypes = {\n  viewer: PropTypes.object.isRequired,\n  notifier: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  categories: PropTypes.object.isRequired,\n};\n\nexport default (props) => (\n  <QueryRenderer\n    environment={relayEnvironment}\n    query={graphql`\n      query CategoriesRouteQuery {\n        categories {\n          ...CategoriesGrid_categories\n        }\n\n        notifier {\n          ...StoreLayout_notifier\n        }\n\n        viewer {\n          ...StoreLayout_viewer\n        }\n      }\n    `}\n    render={({ error, props: relayProps }) => {\n      if (error) {\n        return <PageError error={error} />;\n      }\n\n      if (relayProps) {\n        return <CategoriesRoute {...relayProps} {...props} />;\n      }\n\n      return <PageLoader />;\n    }}\n  />\n);\n"}, {"instruction": "Generate a javascript React component to display a set of tabbed panels.\nThe component should receive children components that will be used as the content of the tabs.\nThe component should have a state variable to keep track of the currently selected tab index.\nThe component should render a set of tab titles, one for each child component. When a tab title is clicked, the component should update the selected tab index and set the state accordingly.\nThe component should render the content of the currently selected tab.\nThe component should use the react-redux library to connect to the redux store and retrieve the current selection. If the selection is a stream, the component should set the selected tab index to 1, otherwise it should set the selected tab index to 0.\nThe component should have propTypes to validate the props that are passed to it.", "output": "import React from 'react';\nimport './Tabs.css';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { setSelection } from '../../../actions/Selection';\nimport PropTypes from 'prop-types';\n\nclass Tabs extends React.Component {\n\n  static propTypes = {\n    selection: PropTypes.object,\n    children: PropTypes.node,\n    setSelection: PropTypes.func,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: 0,\n    };\n\n    this.renderTitles = this.renderTitles.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.selection.objType === 'streams') {\n      this.setState({\n        selected: 1,\n      });\n    } else {\n      this.setState({\n        selected: 0,\n      });\n    }\n  }\n\n  onClick(idx, event) {\n    event.preventDefault();\n    this.setState({\n      selected: idx,\n    });\n    this.props.setSelection(this.props.children[idx].props.label.toLowerCase());\n  }\n\n  renderTitles() {\n    return this.props.children.map((child, idx) => {\n      let selectedClass = idx === this.state.selected ? 'tabs-selected' : null;\n      return (\n        <a href=\"#\" onClick={this.onClick.bind(this, idx)} key={idx}>\n          <div className={selectedClass}>\n            {child.props.label}\n          </div>\n        </a>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"tabs-container\">\n        <div className=\"tabs-labels\">\n          {this.renderTitles()}\n        </div>\n        <div className=\"tabs-content\">\n          {this.props.children[this.state.selected]}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    selection: state.selection,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelection: bindActionCreators(setSelection, dispatch),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tabs);\n"}, {"instruction": "Design an SVG icon for a texture effect featuring a rectangular frame and a diagonal line with rounded edges.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from 'material-ui/SvgIcon';\n\nlet Texture = props =>\n  <SvgIcon {...props}>\n    <path d=\"M19.51 3.08L3.08 19.51c.09.34.27.65.51.9.25.24.56.42.9.51L20.93 4.49c-.19-.69-.73-1.23-1.42-1.41zM11.88 3L3 11.88v2.83L14.71 3h-2.83zM5 3c-1.1 0-2 .9-2 2v2l4-4H5zm14 18c.55 0 1.05-.22 1.41-.59.37-.36.59-.86.59-1.41v-2l-4 4h2zm-9.71 0h2.83L21 12.12V9.29L9.29 21z\" />\n  </SvgIcon>;\n\nTexture = pure(Texture);\nTexture.muiName = 'SvgIcon';\n\nexport default Texture;\n"}, {"instruction": "Create a React component that displays a static message \"Category List\" in an h2 element with a text-center class for the text alignment.", "output": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../actions/admin';\n\nclass CategoryList extends Component {\n    render() {\n        return (\n            <div>\n                <h2 className=\"text-center\">Category List</h2>\n            </div>\n        );\n    }\n};\n\nfunction mapStateToProps({ auth }) {\n        return { auth };\n}\n\nexport default connect(mapStateToProps, actions)(CategoryList);"}, {"instruction": "Generate the code to create three React Material UI Raised Buttons, the first should have the default icon, the second should have a green background and a white icon, and the third should be a link button with a custom icon and a secondary style.", "output": "import React from 'react';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport {fullWhite} from 'material-ui/styles/colors';\nimport ActionAndroid from 'material-ui/svg-icons/action/android';\nimport FontIcon from 'material-ui/FontIcon';\n\nconst style = {\n  margin: 12,\n};\n\nconst RaisedButtonExampleIcon = () => (\n  <div>\n    <RaisedButton\n      icon={<ActionAndroid />}\n      style={style}\n    />\n    <RaisedButton\n      backgroundColor=\"#a4c639\"\n      icon={<ActionAndroid color={fullWhite} />}\n      style={style}\n    />\n    <RaisedButton\n      linkButton={true}\n      href=\"https://github.com/callemall/material-ui\"\n      secondary={true}\n      icon={<FontIcon className=\"muidocs-icon-custom-github\" />}\n      style={style}\n    />\n  </div>\n);\n\nexport default RaisedButtonExampleIcon;\n"}, {"instruction": "Generate a React app that allows users to input a URL to a JSONstat data file or use predefined static data to display a sortable data table. If the URL is invalid, display an error message.", "output": "\"use strict\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport JSONstat from \"jsonstat\";\nimport SortTable from \"./sortTable.js\";\nimport getJSONStatFromUrl from \"./remotedata.js\";\nimport dataset1128 from \"./staticdata.js\"\n\nconst rootId = \"dataTable\";\n\n\nfunction getParameterByName(name, url) {\n    if (!url) {\n      url = window.location.href;\n    }\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\nfunction createTable() {\n  // If 'source' query parameter is present, we try to retrieve and display the response in a table.\n  let sourceUrl = getParameterByName('source');\n  console.log(sourceUrl);\n  if(sourceUrl){\n    \n    getJSONStatFromUrl(sourceUrl, \n      (failureString)=> {\n        createErrorMessage(failureString)\n      },\n      (remoteJsonStatData)=> {\n        ReactDOM.render(<SortTable rows={remoteJsonStatData.rows} \n                                   cols={remoteJsonStatData.cols} />,\n                        document.getElementById(rootId))\n      });\n  }\n  // If no source is present, then we use a predefined static data source. \n  else {\n    let staticJsonStatData = JSONstat(dataset1128).Dataset(0).toTable({type: \"object\"});\n    ReactDOM.render(\n      <SortTable rows={staticJsonStatData.rows} \n                 cols={staticJsonStatData.cols} />,\n      document.getElementById(rootId)\n    );  \n  }  \n}\n\nfunction createErrorMessage(errorString){\n  ReactDOM.render(\n      <div> {errorString} </div>,\n      document.getElementById(rootId)\n    );\n}\n\ncreateTable();"}, {"instruction": "Design two React component classes, LeftPanel and RightPanel, which render div elements with specific class names to define their width in a two-column layout.", "output": "/**\n * Created by mr470 on 02.04.2016.\n */\n\n\"use strict\";\n\nimport React, { Component } from 'react';\n\n\nclass LeftPanel extends Component{\n    render() {\n        const { children } = this.props;\n        return (\n            <div className=\"column column-25\">\n                {children}\n            </div>\n        );\n    }\n}\nclass RightPanel extends Component{\n    render() {\n        const { children } = this.props;\n        return (\n            <div className=\"column column-75\">\n                {children}\n            </div>\n        );\n    }\n}\n\nexport {\n    RightPanel, LeftPanel\n}\n\n\n\n"}, {"instruction": "Create a reusable React component called MyComponent that can be used for any purpose and has the following features:\n\n- It has a required prop called \"children\" to render the content inside the component.\n- It has an optional prop called \"showPagination\" which defaults to `true`.\n- It has an optional prop called \"paginationColor\" which defaults to `#09c`.\n- It has an optional prop called \"paginationSpace\" which defaults to `20`.", "output": "import React, { Component } from 'react';\n\n/**\n * General component description.\n */\nexport default class MyComponent extends Component {\n  render() {\n    // ...\n  }\n}\n\nMyComponent.defaultProps = {\n    showPagination: true,\n    paginationColor: '#09c',\n    paginationSpace: 20\n}\n\nMyComponent.propTypes = {\n  /** Description of prop \"children\". */\n  children: React.PropTypes.node.isRequired,\n  showPagination: React.PropTypes.bool,\n  paginationColor: React.PropTypes.string,\n  paginationSpace: React.PropTypes.number,\n}\n"}, {"instruction": "Create a React form with an Ext JS URL field that includes a placeholder, label, and width, and adds URL validation.", "output": "import React from 'react';\nimport { FormPanel, URLField } from '@extjs/ext-react';\n\nExt.require('Ext.data.validator.Url');\n\nexport default function UrlFieldExample() {\n    return (\n        <FormPanel shadow>\n            <URLField \n                placeholder=\"http://www.domain.com\" \n                label=\"URL\" \n                width=\"200\"\n                validators=\"url\"\n            />\n        </FormPanel>\n    )\n} "}, {"instruction": "Generate a React Storybook component for a Confirm component that has a Confirm Modal that opens when clicking a child \"action\" component. Provide a detailed description of the props and exclude the Button component from the prop tables.", "output": "import React from 'react';\nimport {withInfo} from '@storybook/addon-info';\nimport {action} from '@storybook/addon-actions';\n\nimport Confirm from 'app/components/confirm';\nimport Button from 'app/components/button';\n\nexport default {\n  title: 'Core/Buttons/Confirm',\n};\n\nexport const _Confirm = withInfo({\n  text:\n    'Component whose child is rendered as the \"action\" component that when clicked opens the \"Confirm Modal\"',\n  propTablesExclude: [Button],\n})(() => (\n  <div>\n    <Confirm onConfirm={action('confirmed')} message=\"Are you sure you want to do this?\">\n      <Button priority=\"primary\">Confirm on Button click</Button>\n    </Confirm>\n  </div>\n));\n"}, {"instruction": "Generate the React component for an integration icon. The icon should be an SVG and have a default size of `medium`. \nIt should be responsive by default and have an `a11yTitle` prop for accessibility. \nThe icon should use the `CSSClassnames` utility to generate the necessary CSS class names.", "output": "// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport CSSClassnames from '../../../utils/CSSClassnames';\nimport Intl from '../../../utils/Intl';\nimport Props from '../../../utils/Props';\n\nconst CLASS_ROOT = CSSClassnames.CONTROL_ICON;\nconst COLOR_INDEX = CSSClassnames.COLOR_INDEX;\n\nexport default class Icon extends Component {\n  render () {\n    const { className, colorIndex } = this.props;\n    let { a11yTitle, size, responsive } = this.props;\n    let { intl } = this.context;\n\n    const classes = classnames(\n      CLASS_ROOT,\n      `${CLASS_ROOT}-integration`,\n      className,\n      {\n        [`${CLASS_ROOT}--${size}`]: size,\n        [`${CLASS_ROOT}--responsive`]: responsive,\n        [`${COLOR_INDEX}-${colorIndex}`]: colorIndex\n      }\n    );\n\n    a11yTitle = a11yTitle || Intl.getMessage(intl, 'integration');\n\n    const restProps = Props.omit(this.props, Object.keys(Icon.propTypes));\n    return <svg {...restProps} version=\"1.1\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" role=\"img\" className={classes} aria-label={a11yTitle}><path fill=\"none\" stroke=\"#231F1F\" strokeWidth=\"2\" d=\"M5,21 L23,21 L23,9 L5,9 M19,15 L1,15 L1,3 L19,3\"/></svg>;\n  }\n};\n\nIcon.contextTypes = {\n  intl: PropTypes.object\n};\n\nIcon.defaultProps = {\n  responsive: true\n};\n\nIcon.displayName = 'Integration';\n\nIcon.icon = true;\n\nIcon.propTypes = {\n  a11yTitle: PropTypes.string,\n  colorIndex: PropTypes.string,\n  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'huge']),\n  responsive: PropTypes.bool\n};\n\n"}, {"instruction": "Create a React component that displays a line chart of response time data. The component should include the following features:\n- A title of \"Response Time\"\n- A display of the latest response time\n- A display of the maximum response time\n- A display of the average response time\n- A line chart of the response time data over time, with the x-axis labeled as \"Time\" and the y-axis labeled as \"Response Time (ms)\"\n- The ability to pass in the data, average response time, and maximum response time as props", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport styles from './styles';\n\n\nclass ResponseTime extends React.Component {\n  static propTypes = {\n    average: PropTypes.number.isRequired,\n    data: PropTypes.array.isRequired,\n    max: PropTypes.number.isRequired,\n  }\n\n  render() {\n    let latestResponse = 0;\n    for (let i = this.props.data.length - 1; i >= 0; --i) {\n      const response = this.props.data[i].time;\n      if (response !== 0) {\n        latestResponse = response;\n        break;\n      }\n    }\n    return (\n      <div style={styles.content}>\n        <h4>Response Time</h4>\n        Last Response Time: {latestResponse} ms<br />\n        Max Response Time: {this.props.max} ms<br />\n        Average Response Time: {this.props.average} ms<br />\n        <LineChart\n          width={500}\n          height={300}\n          data={this.props.data}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n        >\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"time\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n      </div>\n    );\n  }\n}\n\n\nexport default ResponseTime;\n"}, {"instruction": "Craft a component in React to delineate an icon representing the functionality of launching a URL in a web browser. Utilize Material Design as a guideline for the visual aesthetics.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionOpenInBrowser = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6l-4 4h3v6h2v-6h3l-4-4z\"/>\n  </SvgIcon>\n);\nActionOpenInBrowser = pure(ActionOpenInBrowser);\nActionOpenInBrowser.displayName = 'ActionOpenInBrowser';\n\nexport default ActionOpenInBrowser;\n"}, {"instruction": "Generate React Native code for a screen that displays a list of elements. The first button should take the user to a previous screen.", "output": "\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { actions } from 'react-native-navigation-redux-helpers';\nimport { Container, Header, Title, Content, Button, Icon, List, ListItem, Text } from 'native-base';\n\nimport styles from './styles';\n\nconst {\n  replaceAt,\n} = actions;\n\nclass NHBasicList extends Component {\n\n  static propTypes = {\n    replaceAt: React.PropTypes.func,\n    navigation: React.PropTypes.shape({\n      key: React.PropTypes.string,\n    }),\n  }\n\n  replaceAt(route) {\n    this.props.replaceAt('basicList', { key: route }, this.props.navigation.key);\n  }\n\n  render() {\n    return (\n      <Container style={styles.container}>\n        <Header>\n          <Button transparent onPress={() => this.replaceAt('list')}>\n            <Icon name=\"ios-arrow-back\" />\n          </Button>\n\n          <Title>Basic List</Title>\n        </Header>\n\n        <Content>\n          <List>\n            <ListItem >\n              <Text>Simon Mignolet</Text>\n            </ListItem>\n            <ListItem>\n              <Text>Nathaniel Clyne</Text>\n            </ListItem>\n            <ListItem>\n              <Text>Dejan Lovren</Text>\n            </ListItem>\n            <ListItem>\n              <Text>Mama Sakho</Text>\n            </ListItem>\n            <ListItem>\n              <Text>Alberto Moreno</Text>\n            </ListItem>\n            <ListItem>\n              <Text>Emre Can</Text>\n            </ListItem>\n            <ListItem>\n              <Text>Joe Allen</Text>\n            </ListItem>\n            <ListItem>\n              <Text>Phil Coutinho</Text>\n            </ListItem>\n          </List>\n        </Content>\n      </Container>\n    );\n  }\n}\n\nfunction bindAction(dispatch) {\n  return {\n    replaceAt: (routeKey, route, key) => dispatch(replaceAt(routeKey, route, key)),\n  };\n}\n\nconst mapStateToProps = state => ({\n  navigation: state.cardNavigation,\n});\n\nexport default connect(mapStateToProps, bindAction)(NHBasicList);\n"}, {"instruction": "Create a React component that displays a website footer with the following elements:\n- A copyright notice with the text \"\u00a9 Your Company.\"\n- A separator (\"\u00b7\")\n- A navigation link with the text \"Home\" that links to the root URL (\"/\")\n- Another separator (\"\u00b7\")\n- Another navigation link with the text \"Privacy\" that links to the \"/privacy\" URL\n- Another separator (\"\u00b7\")\n- Another navigation link with the text \"Not Found\" that links to the \"/not-found\" URL\n- Style the footer using SCSS with the following class names:\n  - `.root` for the main footer container\n  - `.container` for the inner container that holds the footer content\n  - `.text` for the copyright notice\n  - `.spacer` for the separators\n  - `.link` for the navigation links", "output": "/**\n * React Starter Kit (https://www.reactstarterkit.com/)\n *\n * Copyright \u00a9 2014-2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport s from './Footer.scss';\nimport withStyles from '../../decorators/withStyles';\nimport Link from '../Link';\n\n@withStyles(s)\nclass Footer extends Component {\n\n  render() {\n    return (\n      <div className={s.root}>\n        <div className={s.container}>\n          <span className={s.text}>\u00a9 Your Company</span>\n          <span className={s.spacer}>\u00b7</span>\n          <a className={s.link} href=\"/\" onClick={Link.handleClick}>Home</a>\n          <span className={s.spacer}>\u00b7</span>\n          <a className={s.link} href=\"/privacy\" onClick={Link.handleClick}>Privacy</a>\n          <span className={s.spacer}>\u00b7</span>\n          <a className={s.link} href=\"/not-found\" onClick={Link.handleClick}>Not Found</a>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Footer;\n"}, {"instruction": "Generate a javascript file that uses hapi.js and react-router to create a server that serves static js and image files, routes a '/hello' request, and renders react components on the server.", "output": "import path from 'path';\nimport React from 'react';\nimport Router from 'react-router';\nimport Hapi from 'hapi';\nimport _merge from 'lodash.merge';\nimport routes from './routes.jsx';\nimport component from './components/Html.jsx';\n\nconst server = new Hapi.Server();\n\nserver.connection({port: 8000});\n\nserver.route({\n  method: 'GET',\n  path: '/hello',\n  handler: function (request, reply) {\n    reply('don\\'t worry, be hapi!');\n  }\n});\n\nserver.route({\n  method: 'GET',\n  path: '/js/{param*}',\n  handler: {\n    directory: {\n      path: './public/js',\n      listing: true,\n      index: true\n    }\n  }\n});\n\nserver.route({\n  method: 'GET',\n  path: '/images/{param*}',\n  handler: {\n    directory: {\n      path: './public/images',\n      listing: true,\n      index: true\n    }\n  }\n});\n\nserver.ext('onPostHandler', (request, replay) => {\n  Router.run(routes, request.url.path, (Handler, state) => {\n    if (!state.routes.length) {\n      return replay.continue();\n    }\n\n    let html = React.renderToStaticMarkup(component({\n      title: 'test',\n      markup: React.renderToString(React.createFactory(Handler)())\n    }));\n\n    return replay('<!DOCTYPE html>' + html);\n  });\n});\n\nserver.start(() => {\n  console.log('Server running at: ' + server.info.uri);\n});"}, {"instruction": "Create a React component that renders a border clear SVG icon. The SVG should have a width and height of 48 pixels.", "output": "import React from 'react';\nimport Icon from '../Icon';\n\nexport default class BorderClearIcon extends Icon {\n  getSVG(){return <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\"><path d=\"M14 10h4V6h-4v4zm0 16h4v-4h-4v4zm0 16h4v-4h-4v4zm8-8h4v-4h-4v4zm0 8h4v-4h-4v4zM6 42h4v-4H6v4zm0-8h4v-4H6v4zm0-8h4v-4H6v4zm0-8h4v-4H6v4zm0-8h4V6H6v4zm16 16h4v-4h-4v4zm16 8h4v-4h-4v4zm0-8h4v-4h-4v4zm0 16h4v-4h-4v4zm0-24h4v-4h-4v4zm-16 0h4v-4h-4v4zM38 6v4h4V6h-4zm-16 4h4V6h-4v4zm8 32h4v-4h-4v4zm0-16h4v-4h-4v4zm0-16h4V6h-4v4z\"/></svg>;}\n};"}, {"instruction": "Create a React component named `ImageDehaze` that renders an SVG icon with three horizontal lines, similar to the Material Design \"dehaze\" icon. The icon should be responsive to its container.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageDehaze = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M2 15.5v2h20v-2H2zm0-5v2h20v-2H2zm0-5v2h20v-2H2z\"/>\n  </SvgIcon>\n);\nImageDehaze = pure(ImageDehaze);\nImageDehaze.displayName = 'ImageDehaze';\nImageDehaze.muiName = 'SvgIcon';\n\nexport default ImageDehaze;\n"}, {"instruction": "Extract the description from the given code snippet.", "output": "import React from 'react';\nimport MarkdownDocs from 'docs/src/modules/components/MarkdownDocs';\nimport { prepareMarkdown } from 'docs/src/modules/utils/parseMarkdown';\n\nconst pageFilename = 'api/table-pagination';\nconst requireRaw = require.context('!raw-loader!./', false, /\\/table-pagination\\.md$/);\n\nexport default function Page({ docs }) {\n  return <MarkdownDocs docs={docs} />;\n}\n\nPage.getInitialProps = () => {\n  const { demos, docs } = prepareMarkdown({ pageFilename, requireRaw });\n  return { demos, docs };\n};\n"}, {"instruction": "Create a React component with a pure higher order component that wraps an SVG icon with a specific path and name, ensuring it can be imported and used in a React application.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionSwapVerticalCircle = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM6.5 9L10 5.5 13.5 9H11v4H9V9H6.5zm11 6L14 18.5 10.5 15H13v-4h2v4h2.5z\"/>\n  </SvgIcon>\n);\nActionSwapVerticalCircle = pure(ActionSwapVerticalCircle);\nActionSwapVerticalCircle.displayName = 'ActionSwapVerticalCircle';\nActionSwapVerticalCircle.muiName = 'SvgIcon';\n\nexport default ActionSwapVerticalCircle;\n"}, {"instruction": "Create a React icon component that renders the Material Design Undo icon.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ContentUndo = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z\"/>\n  </SvgIcon>\n);\nContentUndo = pure(ContentUndo);\nContentUndo.displayName = 'ContentUndo';\nContentUndo.muiName = 'SvgIcon';\n\nexport default ContentUndo;\n"}, {"instruction": "Provide the code snippet to wire up a React application with Redux using the Provider, store, and application container.", "output": "import 'babel-polyfill'\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './containers/App'\nrequire('./styles/app.css')\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\n\nrender(\n  <Provider store={store}>\n    <div className='app'>\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById('root')\n)\n"}, {"instruction": "Generate a React component for React Highcharts that displays a polar chart with monthly temperature data and allows users to export the chart as an image.", "output": "import React from 'react'\nimport ReactHighcharts from 'react-highcharts'\nimport HighchartsExporting from 'highcharts-exporting'\nimport HighchartsMore from 'highcharts-more'\n\nHighchartsMore(ReactHighcharts.Highcharts)\nHighchartsExporting(ReactHighcharts.Highcharts)\n\nconst config = {\n  chart: {\n    polar: true,\n  },\n  xAxis: {\n    categories: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ],\n  },\n  series: [\n    {\n      data: [\n        29.9,\n        71.5,\n        106.4,\n        129.2,\n        144.0,\n        176.0,\n        135.6,\n        148.5,\n        216.4,\n        194.1,\n        95.6,\n        54.4,\n      ],\n    },\n  ],\n}\n\nconst HighMoreComponent = () => {\n  return <ReactHighcharts config={config} />\n}\n\nexport default HighMoreComponent\n"}, {"instruction": "Generate the React component's code for a header that displays a user's profile picture, name, and logout button when logged in, and a login link when logged out. The header should also display the group logo and name, as well as the number of members in the group.", "output": "import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { groupURI } from '../config/urls';\nimport apiFetch from '../apiFetch';\n\nimport LoginLink from './LoginLink';\nimport LogoutBtn from './LogoutBtn';\n\nclass Header extends Component {\n  state = {\n    group: null,\n  };\n  componentWillMount() {\n    this.fetchData();\n  }\n  async fetchData() {\n    const group = await this.getGroup();\n    this.setState({\n      group,\n    });\n  }\n  async getGroup() {\n    return await apiFetch(groupURI());\n  }\n  render() {\n    const { group } = this.state;\n    const { me, onLoginClick, onLogoutClick, pathname } = this.props;\n    return (\n      <header className=\"header\">\n        <div className=\"container\">\n          <div className=\"row\">\n            {group != null &&\n              <Link to=\"/\" className=\"logo\">\n                <div>\n\n                  <img\n                    src=\"/mancreact512.png\"\n                    alt={group.name}\n                    width=\"100\"\n                  />\n\n                </div>\n                <div className=\"logo-title\">{group.name}</div>\n              </Link>}\n            {group != null &&\n              <div className=\"members\">\n                <strong>{group.members}</strong> members\n              </div>}\n            <div className=\"signin\">\n              {!me\n                ? <LoginLink onClick={onLoginClick} pathname={pathname} />\n                : <div>\n                    <img\n                      className=\"avatar\"\n                      src={me.photo.thumb_link}\n                      alt={me.name}\n                    />\n                    <span className=\"account-name\">\n                      Hello, {me.name}!\n                    </span>\n                    <LogoutBtn onClick={onLogoutClick} />\n                  </div>}\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n"}, {"instruction": "Create a React component that displays two badges. The first badge should show the number of learned words in an album, and the second badge should show the total number of words in the album. The badges should be positioned at the top right corner of the component.", "output": "import React, { Component } from 'react';\nimport Badge from 'material-ui/Badge';\n\nexport default class RunVariable extends Component {\n\n  render() {\n    const { statisticsAlbum } = this.props;\n    return (\n      <span>\n        <Badge\n          badgeContent={statisticsAlbum.learned}\n          primary={true}\n          secondary={false}\n          badgeStyle={{top: 5, right: 1}}\n          title=\"Learned words\"\n        />\n\n        <Badge\n          badgeContent={statisticsAlbum.length}\n          secondary={true}\n          badgeStyle={{top: 5, right: 1}}\n          title=\"Size album\"\n        />\n      </span>\n\n    );\n  }\n\n}\n"}, {"instruction": "Generate a React component that renders a timeline of ability cooldowns. The component should accept the following props:\n- start: The start time of the fight in milliseconds.\n- end: The end time of the fight in milliseconds.\n- secondWidth: The width of each second in the timeline in pixels.\n- eventsBySpellId: A map of spell IDs to an array of ability events.\n- abilities: An Abilities instance.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Abilities from 'parser/core/modules/Abilities';\n\nimport './Cooldowns.scss';\nimport Lane from './Lane';\n\nclass Cooldowns extends React.PureComponent {\n  static propTypes = {\n    start: PropTypes.number.isRequired,\n    end: PropTypes.number.isRequired,\n    secondWidth: PropTypes.number.isRequired,\n    eventsBySpellId: PropTypes.instanceOf(Map).isRequired,\n    abilities: PropTypes.instanceOf(Abilities).isRequired,\n  };\n\n  getSortIndex([spellId, events]) {\n    const ability = this.props.abilities.getAbility(spellId);\n    if (!ability || ability.timelineSortIndex === undefined) {\n      return 1000 - events.length;\n    } else {\n      return ability.timelineSortIndex;\n    }\n  }\n\n  renderLanes(eventsBySpellId, growUp) {\n    return Array.from(eventsBySpellId)\n      .sort((a, b) => this.getSortIndex(growUp ? b : a) - this.getSortIndex(growUp ? a : b))\n      .map(item => this.renderLane(item));\n  }\n  renderLane([spellId, events]) {\n    return (\n      <Lane\n        key={spellId}\n        spellId={spellId}\n        fightStartTimestamp={this.props.start}\n        fightEndTimestamp={this.props.end}\n        secondWidth={this.props.secondWidth}\n      >\n        {events}\n      </Lane>\n    );\n  }\n  render() {\n    const { eventsBySpellId } = this.props;\n    return (\n      <div className=\"cooldowns\">\n        {this.renderLanes(eventsBySpellId, false)}\n      </div>\n    );\n  }\n}\n\nexport default Cooldowns;\n"}, {"instruction": "Create a helper function that renders a React component within a Redux store for integration testing. Include methods for simulating events on the component and assertions using Chai Jquery.", "output": "import _$ from 'jquery';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestUtils from 'react-addons-test-utils';\nimport jsdom from 'jsdom';\nimport chai, { expect } from 'chai';\nimport chaiJquery from 'chai-jquery';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from '../src/reducers';\n\nglobal.document = jsdom.jsdom('<!doctype html><html><body></body></html>');\nglobal.window = global.document.defaultView;\nglobal.navigator = global.window.navigator;\nconst $ = _$(window);\n\nchaiJquery(chai, chai.util, $);\n\nfunction renderComponent(ComponentClass, props = {}, state = {}) {\n  const componentInstance =  TestUtils.renderIntoDocument(\n    <Provider store={createStore(reducers, state)}>\n      <ComponentClass {...props} />\n    </Provider>\n  );\n\n  return $(ReactDOM.findDOMNode(componentInstance));\n}\n\n$.fn.simulate = function(eventName, value) {\n  if (value) {\n    this.val(value);\n  }\n  TestUtils.Simulate[eventName](this[0]);\n};\n\nexport {renderComponent, expect};\n"}, {"instruction": "Create a React component that wraps any other component and requires the user to be logged in to access it. If the user is not logged in, they should be redirected to a login page.", "output": "import React from 'react';\n\nimport LoginStore from 'stores/LoginStore';\n\nexport default (Component) => {\n  return class Authenticated extends React.Component {\n    static willTransitionTo(transition) {\n      if (!LoginStore.isLoggedIn()) {\n        transition.redirect('/auth', {}, {'nextPath': transition.path});\n      }\n    }\n\n    render() {\n      return <Component {...this.props}/>;\n    }\n  };\n};\n"}, {"instruction": "Description: Generate a React component to validate and submit user input data.\nThe component should render a form with input fields and a submit button.\nWhen the form is submitted, the form data should be validated using the provided validate function,\nand the submit function should be called with the validated data.\nThe form should display appropriate error messages if validation fails.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\n\nimport {validate} from '../../utils';\nimport '../../assets/styles/common/form.scss';\n\nconst renderField = (field) => {\n  let {input, label, type, meta: { touched, error }, input: { name }} = field;\n\n  let renderErrors = () => (\n    <div className=\"input-error\">\n      <span className=\"error\">{error}</span>\n    </div>\n  );\n\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input type={type} {...input} className={(touched && error) ? 'form-control invalid': 'form-control'} />\n      {touched && error ? renderErrors(): null}\n    </div>\n  );\n};\n\nlet CreateUserForm = ({handleSubmit}) => {\n  let submit = () => {\n\n  };\n\n  return (\n    <form noValidate autoComplete=\"off\" onSubmit={handleSubmit(submit)}>\n      <Field label=\"Name\"  name=\"name\" component={renderField} />\n      <Field  label=\"Email address\" name=\"email\" component={renderField} />\n      <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n    </form>\n  );\n};\n\nCreateUserForm.propTypes = {\n  handleSubmit: PropTypes.func,\n  pristine: PropTypes.bool,\n  submitting: PropTypes.bool,\n  reset: PropTypes.func\n};\n\nCreateUserForm = reduxForm({\n  form: 'addNewUserForm',\n  validate\n})(CreateUserForm);\n\nexport default CreateUserForm;\n"}, {"instruction": "Create a React component that imports an image called \"tiniest-cat.jpg\" from the \"assets\" folder, sets the image's source attribute to that image, and adds the alt text \"tiniest cat\" to the image.", "output": "/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport React from 'react';\nimport tiniestCat from './assets/tiniest-cat.jpg';\n\nexport default () =>\n  <img id=\"feature-image-inclusion\" src={tiniestCat} alt=\"tiniest cat\" />;\n"}, {"instruction": "Create a React component that renders a div with a class name of 'grid-offset' and serves as a container for child components.", "output": "// Dependencies.\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// Define class.\nclass GridOffset extends React.Component {\n  // Render method.\n  render () {\n    // Expose UI.\n    return (\n      <div className='grid-offset'>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\n// Validation.\nGridOffset.propTypes = {\n  children: PropTypes.node\n}\n\n// Export.\nexport default GridOffset\n"}, {"instruction": "Describe the Python-esque syntax and flow type definitions, also providing an example expression.", "output": "// @flow\n\nimport React from 'react';\n\nclass MyComponent extends React.Component<*, Props> {\n  static defaultProps = {};\n\n  defaultProps: T;\n  static props: T;\n  static state: T;\n  a: T;\n  b = 5;\n  c: T = 5;\n  method() {}\n}\n\nconst expression = () =>\n  class extends React.Component<*, Props> {\n    static defaultProps = {};\n\n    defaultProps: T;\n    static props: T;\n    static state: T;\n    a: T;\n    b = 5;\n    c: T = 5;\n    method() {}\n  }\n"}, {"instruction": "Design a React Native component that displays a profile header with a background image, a profile image, and a title and summary text. The profile image should be circular if specified, and the background image should be blurred with a specified radius.", "output": "import React from 'react';\nimport {\n  StyleSheet,\n  Image,\n  View,\n  Dimensions,\n} from 'react-native';\n\nconst { width } = Dimensions.get('window');\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingBottom: 30,\n  },\n  backgroundImg: {\n    resizeMode: 'cover',\n    height: 150,\n  },\n  profileImg: {\n    borderWidth: 2,\n    borderColor: '#fff',\n    borderRadius: 4,\n    width: 100,\n    height: 100,\n    position: 'absolute',\n    alignSelf: 'center',\n    top: 75,\n    left: (width / 2) - 50,\n  },\n  shadow: {\n    position: 'absolute',\n    alignSelf: 'center',\n    top: 75,\n    left: (width / 2) - 50,\n    borderRadius: 4,\n    width: 100,\n    height: 100,\n    shadowColor: '#D8D8D8',\n    shadowRadius: 2,\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.8,\n  },\n  title: {\n    flex: 1,\n    textAlign: 'center',\n    fontSize: 30,\n    marginTop: 35,\n    marginBottom: 10,\n    fontWeight: '300',\n  },\n  summary: {\n    paddingHorizontal: 10,\n  },\n});\n\nconst ProfileHeader = ({ profileImg, backgroundImg, circle, blurRadius }) => (\n  <View style={styles.container}>\n    <Image\n      blurRadius={blurRadius}\n      source={{ uri: backgroundImg }}\n      style={styles.backgroundImg}\n    />\n    <View style={[styles.shadow, { borderRadius: circle ? 50 : 0 }]} />\n    <Image\n      source={{ uri: profileImg }}\n      style={[styles.profileImg, { borderRadius: circle ? 50 : 0 }]}\n    />\n  </View>\n);\n\nProfileHeader.defaultProps = {\n  circle: false,\n  blurRadius: 0,\n};\n\nProfileHeader.propTypes = {\n  title: React.PropTypes.string,\n  summary: React.PropTypes.string,\n  profileImg: React.PropTypes.string,\n  backgroundImg: React.PropTypes.string,\n  circle: React.PropTypes.bool,\n  blurRadius: React.PropTypes.number,\n};\n\nexport default ProfileHeader;\n"}, {"instruction": "Provide code to create a React component that can render a carousel caption, complete with a customized appearance using CSS classes.", "output": "import classNames from 'classnames';\nimport React from 'react';\nimport elementType from 'react-prop-types/lib/elementType';\n\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\n\nconst propTypes = {\n  componentClass: elementType,\n};\n\nconst defaultProps = {\n  componentClass: 'div',\n};\n\nclass CarouselCaption extends React.Component {\n  render() {\n    const { componentClass: Component, className, ...props } = this.props;\n    const [bsProps, elementProps] = splitBsProps(props);\n\n    const classes = getClassSet(bsProps);\n\n    return (\n      <Component\n        {...elementProps}\n        className={classNames(className, classes)}\n      />\n    );\n  }\n}\n\nCarouselCaption.propTypes = propTypes;\nCarouselCaption.defaultProps = defaultProps;\n\nexport default bsClass('carousel-caption', CarouselCaption);\n"}, {"instruction": "Generate the front-end portion of a React application that uses React Router for navigation, Redux for state management, and Webpack for module bundling.", "output": "import './css/index.css';\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport { BrowserRouter } from 'react-router-dom';\nimport createRoutes from './routes';\n\nconst rootEl = document.getElementById('root');\n\nconst App = ({ store }) => {\n  if (!store) {\n    let state = null;\n    try {\n      state = JSON.parse(window.__INITIAL_STATE__);\n    } catch (err) {\n      // TODO send to Sentry\n    }\n    store = configureStore(state);\n  }\n\n  const routes = createRoutes(store);\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        {routes}\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\nrender(\n  <App />,\n  rootEl\n);\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = <App />;\n    render(\n      <AppContainer>\n         <NextApp />\n      </AppContainer>,\n      rootEl\n    );\n  });\n}\n"}, {"instruction": "Create a React application with a login form and a main interface screen. The main interface should only be accessible after logging in, while the login form should be displayed when the user is not logged in. Use React Router for navigation and a PrivateRoute component to protect the main interface.", "output": "import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './components/login';\nimport MainScreen from './components/main-screen';\nimport PrivateRoute from './components/private-route';\n\nconst App = () => (\n  <Switch>\n    <PrivateRoute path=\"/\" exact component={MainScreen} />\n    <Route path=\"/login\" exact component={Login} />\n  </Switch>\n);\n\nexport default App;\n"}, {"instruction": "Generate the React component code for the Font Awesome Exclamation icon. The icon should have a viewBox of 40x40 and use the specified path data.", "output": "import React from 'react';\nimport IconBase from 'react-icon-base';\n\nexport default class FaExclamation extends React.Component {\n    render() {\n        return (\n            <IconBase viewBox=\"0 0 40 40\" {...this.props}>\n                <g><path d=\"m24.4 27.9v5q0 0.5-0.4 1t-1 0.4h-5.7q-0.6 0-1-0.4t-0.4-1v-5q0-0.6 0.4-1t1-0.5h5.7q0.6 0 1 0.5t0.4 1z m0.7-23.6l-0.6 17.1q0 0.6-0.5 1t-1 0.5h-5.7q-0.6 0-1-0.5t-0.5-1l-0.6-17.1q0-0.6 0.4-1t1-0.4h7.1q0.6 0 1 0.4t0.4 1z\"/></g>\n            </IconBase>\n        );\n    }\n}\n"}, {"instruction": "Generate the React code for the OscillatorBank component, which should display a bank of Oscillator components. Each oscillator should be able to be removed, and there should be a button to add a new oscillator. The component should be connected to the Redux store to get the list of oscillators and to dispatch actions to add and remove oscillators.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport Container from '../../../components/Container';\nimport Oscillator from './Oscillator';\nimport RoundButton from '../../../components/Button/RoundButton';\nimport * as actions from '../../actions';\nimport { getOscillators } from '../../selectors';\n\nconst Bank = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n\n  & > div:not(:first-of-type) {\n    margin-left: 5px;\n  }\n`;\n\nconst OscillatorBank = ({\n  addOscillator,\n  oscillators,\n  setOscillatorSetting,\n  removeOscillator\n}) => {\n  const addButton = <RoundButton active click={addOscillator} text=\"+\" />;\n  return (\n    <Container full title=\"Oscillators\" titleControl={addButton}>\n      <Bank>\n        {oscillators.map((o, i) => {\n          return (\n            <Oscillator\n              key={i}\n              oscillator={o}\n              remove={removeOscillator}\n              setValue={setOscillatorSetting}\n            />\n          );\n        })}\n      </Bank>\n    </Container>\n  );\n};\n\nOscillatorBank.propTypes = {\n  addOscillator: PropTypes.func.isRequired,\n  oscillators: PropTypes.array.isRequired,\n  setOscillatorSetting: PropTypes.func.isRequired,\n  removeOscillator: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    oscillators: getOscillators(state)\n  };\n};\n\nexport default connect(mapStateToProps, actions)(OscillatorBank);\n"}, {"instruction": "Generate the React code snippet for multiple Card components with different props. Demonstrate the use of the wrap method to modify component props and styles.", "output": "import React from 'react'\nimport ReactDom from 'react-dom'\nimport { wrap } from '@cicada/react-lego'\nimport Case from '../Case'\nimport Card  from './Card'\n\nconst Root = Card.Root.extend`\n  border: 1px dashed black;\n`\n\nconst Text = ({children}) => {\n\n  return <div>{children.map(child => {\n    if (/^name:/.test(child) ) return '\u59d3\u540d: '\n    if (/^age:/.test(child)) return '\u5e74\u9f84: '\n    return child\n  })}</div>\n}\n\nReactDom.render((\n  <div>\n    <Case title=\"\u666e\u901a Card\">\n        <Card name=\"jim\" age={11} />\n    </Case>\n    <Case title=\"\u4f20\u5165\u4e86 Root\uff0c \u7b80\u5355\u6f14\u793a\u66ff\u6362\u6837\u5f0f\">\n      <Card name=\"jim\" age={11} Root={Root}/>\n    </Case>\n    <Case title=\"\u4f20\u5165\u4e86 Text\uff0c \u7b80\u5355\u6f14\u793a\u66ff\u6362\u6587\u6848\">\n      <Card name=\"jim\" age={11} Text={Text}/>\n    </Case>\n  </div>\n), document.getElementById('root'))\n"}, {"instruction": "Create a React component named \"Example\" that uses the InfiniteScroll component from the grommet library. The InfiniteScroll component should be populated with an array of 240 items, each of which is a string like \"item 1\", \"item 2\", etc. The component should render a Box for each item with a Text element inside. The InfiniteScroll component should be configured to replace its content when the scroll position reaches the \"27\"th item, and to show the new content before the current content.", "output": "import React from 'react';\n\nimport { Box, InfiniteScroll, Text } from 'grommet';\n\nconst allItems = Array(240)\n  .fill()\n  .map((_, i) => `item ${i + 1}`);\n\nconst Example = (props) => (\n  // Uncomment <Grommet> lines when using outside of storybook\n  // <Grommet theme={...}>\n  <InfiniteScroll items={allItems} {...props}>\n    {(item) => (\n      <Box key={item} pad=\"medium\" border={{ side: 'bottom' }} align=\"center\">\n        <Text>{item}</Text>\n      </Box>\n    )}\n  </InfiniteScroll>\n  // </Grommet>\n);\n\nexport const ShowBefore = () => <Example replace show={27} />;\n\nShowBefore.storyName = 'Replace, show before step';\n\nShowBefore.parameters = {\n  chromatic: { disable: true },\n};\n\nexport default {\n  title: 'Utilities/InfiniteScroll/Replace, show before step',\n};\n"}, {"instruction": "Create an object representing navigation options for a React Native application. Include options for a detail view, a list view, and an empty view. For each view, specify the component to render, any parameters to pass to the component, and the navigation bar options, including buttons and title.", "output": "import React from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\nimport { actionCreators as navigationActions } from 'react-native-renavigate';\n\nimport PostDetailContainer from './PostDetailContainer';\nimport PostListContainer from './PostListContainer';\nimport EmptyView from './EmptyView';\n\nconst navButtonStyle = { padding: 5, color: 'blue' };\nconst titleStyle = { fontWeight: 'bold' };\n\nexport default {\n  DETAIL: (params) => ({\n    component: PostDetailContainer,\n    params,\n    leftButton: (dispatch) => {\n      const goBack = () => {\n        dispatch(navigationActions.pop());\n      };\n      return (\n        <TouchableOpacity onPress={goBack}>\n          <Text style={navButtonStyle}>Back</Text>\n        </TouchableOpacity>\n      );\n    },\n    rightButton: () => {\n      return <Text style={navButtonStyle}>FAV</Text>;\n    },\n    title: () => {\n      return <Text style={[navButtonStyle, titleStyle]}>{ params.title }</Text>;\n    }\n  }),\n  LIST: (params) => ({\n    component: PostListContainer,\n    params,\n    title: () => {\n      return <Text style={[titleStyle, navButtonStyle]}>YOUR POSTS</Text>;\n    }\n  }),\n  EMPTY_VIEW: (params) => ({\n    component: EmptyView,\n    params,\n    title: () => {\n      return <Text style={[titleStyle, navButtonStyle]}>EMPTY VIEW</Text>;\n    }\n  })\n};\n"}, {"instruction": "Generate the code for a React component that renders a list of items. The component should include a form for adding new items, a list of existing items, and a button to toggle the status of each item. The component should also connect to a Redux store to retrieve items and toggle their status.", "output": "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport log from 'logger';\nimport { queryItems, toggleItem } from '../../actions/items';\nimport { AddItemComponent, ItemListComponent } from '../Items';\nimport './Items.scss';\n\nclass ItemListContainer extends Component {\n\n  componentDidMount() {\n    log.info('Fetching Items');\n    this.props.queryItems();\n  }\n\n  render() {\n    if (this.props.items != undefined) {\n      return (\n        <div className=\"itemPage\">\n          <AddItemComponent />\n          <ItemListComponent\n            records={this.props.items}\n            status={this.props.status}\n            toggleItem={this.props.toggleItem}/>\n        </div>\n      );\n    }\n    else {\n      return null;\n    }\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  items: state.app.items.data,\n  status: {\n    isFetching: state.app.items.isFetching,\n    ...state.app.appErrors,\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  { queryItems, toggleItem }\n)(ItemListContainer);\n\n\n"}, {"instruction": "Create a React component that initializes a WYSIWYG editor with the TinyMCE library and includes a mention feature allowing users to tag other users in the text.", "output": "import 'babel/polyfill';\nimport React from 'react';\nimport TinyMCE from 'react-tinymce';\nimport Mention from '../../Mention';\nimport simpleDataSource from './simple';\n\nconst plugins = [\n  'autolink',\n  'autoresize',\n  'code',\n  'image',\n  'link',\n  'media',\n  'mention',\n  'tabfocus'\n];\n\nexport default function initializeEditor() {\n  var domNode = createContainer();\n\n  React.render(\n    <div>\n      <TinyMCE\n        content={''}\n        config={{\n          extended_valid_elements: 'blockquote[dir|style|cite|class|dir<ltr?rtl],iframe[src|frameborder|style|scrolling|class|width|height|name|align],pre',\n          menubar: false,\n          plugins: plugins.join(','),\n          skin: 'kindling',\n          statusbar: false,\n          theme: 'kindling',\n          toolbar: 'bold italic underline strikethrough | bullist numlist blockquote | link unlink | image media | removeformat code'\n        }}\n      />\n      <Mention\n        dataSource={simpleDataSource}\n        delimiter={'@'}\n      />\n    </div>\n  , domNode);\n\n  return window.tinymce;\n}\n\nfunction createContainer() {\n  const root = document.createElement('div');\n  const id = 'root';\n  root.setAttribute('id', id);\n  document.body.appendChild(root);\n  return document.getElementById(id);\n}\n"}, {"instruction": "Create a React component that allows a user to trash a specific look by sending a request to a backend API. The component should use the react-modal, react-icons/lib/md/delete, react-cookie, and axios libraries. The component should be able to remove the look from the UI after it has been trashed.", "output": "import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport MdDelete from 'react-icons/lib/md/delete';\nconst cookie = require('react-cookie')\nconst axios = require('axios');\n\nclass TrashLookThree extends React.Component {\n    constructor(props) {\n        super(props);\n\n\n        this.trashLook = this.trashLook.bind(this);\n    }\n    trashLook() {\n        const user = cookie.load('user');\n        const emailQuery = user.email;\n        const lookId = user.looks[2]._id;\n        console.log(lookId)\n        axios.put('https://seemedate.herokuapp.com/api/see/delete-look', {\n            emailQuery: emailQuery,\n            lookId: lookId\n        },\n            { headers: { Authorization: cookie.load('token') } })\n            .then((response) => {\n                cookie.save('token', response.data.token, { path: '/' });\n                cookie.save('user', response.data.user, { path: '/' });\n                this.props.remove();\n                // window.location.reload()\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }\n    render() {\n        return (\n            <div>\n                <button className=\"trash-look\" onClick={this.trashLook}><MdDelete /></button>\n            </div>\n        );\n    }\n}\n\nexport default TrashLookThree;"}, {"instruction": "Generate a React component that renders an SVG icon with the following design: A bell with a sync icon inside it. The bell should be outlined and the sync icon should be filled. The component should be pure and have a display name of \"NotificationSync\".", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet NotificationSync = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z\"/>\n  </SvgIcon>\n);\nNotificationSync = pure(NotificationSync);\nNotificationSync.displayName = 'NotificationSync';\n\nexport default NotificationSync;\n"}, {"instruction": "Provide me with the prototype code for defining a React component using the aframe-react library, including various button components and implementing the TWEEN.js library for animation.", "output": "import {Entity} from 'aframe-react';\nimport React from 'react';\nimport Back from './buttons/Back';\nimport BookSeat from './buttons/BookSeat';\nimport ChangeSeat from './buttons/ChangeSeat';\n\nexport default class Navigation extends React.Component {\n\n  opacity = { x: 0 };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      opacity: { x: 0 },\n      navBackTextOpacity: { x: 0 },\n      navBackTextVisible: false\n    };\n\n    this.fadeIn = this.fadeIn.bind(this);\n    this.fadeOut = this.fadeOut.bind(this);\n    this.tweenUpdate = this.tweenUpdate.bind(this);\n  }\n\n  fadeIn() {\n    let newOpacity = { x: 1 };\n    let tween = new TWEEN.Tween(this.opacity).to(newOpacity, 300);\n    tween.start();\n\n    tween.onUpdate(this.tweenUpdate);\n  }\n\n  fadeOut() {\n    let newOpacity = { x: 0 };\n    let tween = new TWEEN.Tween(this.opacity).to(newOpacity, 300);\n    tween.start();\n\n    tween.onUpdate(this.tweenUpdate);\n  }\n\n  tweenUpdate() {\n    this.setState({ opacity: this.opacity });\n  }\n\n  render() {\n    return (\n        <Entity>\n          <Back Opacity={ this.state.opacity.back }\n                fadeIn={ this.fadeIn }\n                fadeOut={ this.fadeOut } />\n          <BookSeat Opacity={ this.state.opacity.bookseat }\n                    fadeIn={ this.fadeIn }\n                    fadeOut={ this.fadeOut }\n                    handleBookSeatClick={ this.props.handleBookSeatClick }/>\n          <ChangeSeat\n              handleChangeSeatClick={ this.props.handleChangeSeatClick }\n              Opacity={ this.state.opacity.x }\n              fadeIn={ this.fadeIn }\n              fadeOut={ this.fadeOut }/>\n        </Entity>\n    );\n  }\n}\n"}, {"instruction": "Create a React component called \"ActionDelete\" that renders an SVG icon representing the \"Delete\" action. The SVG icon should have a height and width of 24px, and should include a path with the coordinates for the icon's shape. The component should be pure and should have a display name of \"ActionDelete\".", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionDelete = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"/>\n  </SvgIcon>\n);\nActionDelete = pure(ActionDelete);\nActionDelete.displayName = 'ActionDelete';\nActionDelete.muiName = 'SvgIcon';\n\nexport default ActionDelete;\n"}, {"instruction": "Create a React application that renders an App component into a root element. Make sure to import necessary dependencies and hydrate the app to the root element.", "output": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"}, {"instruction": "Generate a React component that analyzes the player's use of the 'Rule of Threes' talent, which enhances the 'Arcane Barrage' spell when the player has the 'Rule of Threes' buff. The component should track the number of 'Arcane Barrages' cast with the buff active and calculate the utilization percentage. Additionally, it should provide suggestions if the utilization percentage is below a certain threshold, advising the player to optimize their use of the buff.", "output": "import React from 'react';\nimport SPELLS from 'common/SPELLS';\nimport SpellLink from 'common/SpellLink';\nimport { formatPercentage } from 'common/format';\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\nimport Analyzer from 'parser/core/Analyzer';\n\nconst debug = false;\n\nclass RuleOfThrees extends Analyzer {\n\tstatic dependencies = {\n\t\tabilityTracker: AbilityTracker,\n  };\n\n\tbarrageWithRuleOfThrees = 0;\n\n\tconstructor(...args) {\n    super(...args);\n\t   this.active = this.selectedCombatant.hasTalent(SPELLS.RULE_OF_THREES_TALENT.id);\n  \t}\n\n\ton_byPlayer_cast(event) {\n\t\tconst spellId = event.ability.guid;\n\t\tif (spellId !== SPELLS.ARCANE_BARRAGE.id) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.selectedCombatant.hasBuff(SPELLS.RULE_OF_THREES_BUFF.id,event.timestamp + 1)) {\n\t\t\tdebug && this.log(\"Arcane Barrage with Rule of Threes Buff\");\n\t\t\tthis.barrageWithRuleOfThrees += 1;\n\t\t}\n\t}\n\n\tget utilization() {\n\t\treturn 1 - (this.barrageWithRuleOfThrees / this.abilityTracker.getAbility(SPELLS.ARCANE_BARRAGE.id).casts);\n\t}\n\n\tget suggestionThresholds() {\n    return {\n      actual: this.utilization,\n      isLessThan: {\n        minor: 0.95,\n        average: 0.90,\n        major: 0.80,\n      },\n      style: 'percentage',\n    };\n  }\n\n\tsuggestions(when) {\n\t\twhen(this.suggestionThresholds)\n\t\t\t.addSuggestion((suggest, actual, recommended) => {\n\t\t\t\treturn suggest(<>You cast <SpellLink id={SPELLS.ARCANE_BARRAGE.id} /> {this.barrageWithRuleOfThrees} times while you had the <SpellLink id={SPELLS.RULE_OF_THREES_BUFF.id} /> buff. This buff makes your next <SpellLink id={SPELLS.ARCANE_BLAST.id} /> or <SpellLink id={SPELLS.ARCANE_MISSILES.id} /> free after you gain your third Arcane Charge, so you should ensure that you use the buff before clearing your charges.</>)\n\t\t\t\t\t.icon(SPELLS.RULE_OF_THREES_TALENT.icon)\n\t\t\t\t\t.actual(`${formatPercentage(this.utilization)}% Utilization`)\n\t\t\t\t\t.recommended(`${formatPercentage(recommended)}% is recommended`);\n\t\t\t});\n\t}\n}\n\nexport default RuleOfThrees;\n"}, {"instruction": "Create a React component that dynamically inserts a given HTML element into the DOM. When the component is mounted, it should append the provided HTML element to a div. When the component is unmounted, it should remove the HTML element from the DOM.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class DomComponent extends React.PureComponent {\n  componentDidMount() {\n    this.refs.dom.appendChild(this.props.childDom);\n  }\n\n  componentWillUnmount() {\n    $(this.refs.dom).empty();\n  }\n\n  render() {\n    const {\n      childDom,\n      ...rest\n    } = this.props;\n    return (\n      <div {...rest} ref=\"dom\"></div>\n    );\n  }\n}\n\nDomComponent.propTypes = {\n  childDom: PropTypes.instanceOf(HTMLElement).isRequired,\n};\n"}, {"instruction": "Create a React component that allows users to edit a person's first and last name and save the changes to a store. The component should include a form with input fields for the first and last name, a button to save the changes, and a button to cancel the changes. The component should also display a message if the form is invalid.", "output": "import React from 'react';\nimport Reflux from 'reflux';\nimport PersonStore from '../../stores/PersonStore';\nimport {PersonActions} from '../../actions';\nimport Glyph           from '../Glyph';\n\nexport default React.createClass({\n  displayName: 'Person',\n\n  mixins: [Reflux.connect(PersonStore, 'person')],\n\n  contextTypes: {\n    router: React.PropTypes.func\n  },\n\n  componentWillMount() {\n    let router = this.context.router;\n    let id = router.getCurrentParams().id;\n    if (id !== undefined) {\n      PersonActions.loadPersonWithId(id);\n    }\n  },\n\n  changePersonProps() {\n    PersonActions.setProps({\n      fname: this.refs.fn.getDOMNode().value,\n      lname: this.refs.ln.getDOMNode().value\n    });\n  },\n\n  save() {\n    if (this.state.person.isValid()) {\n      PersonActions.savePerson();\n      this.context.router.transitionTo('people');\n    }\n  },\n\n  render() {\n    return (\n      <form className='row'>\n      <div className='col-xs-5'>\n        <h1>Person</h1>\n          <div className='form-group'>\n            <label>First Name</label>\n            <input\n              type='text'\n              ref='fn'\n              className='form-control'\n              placeholder='First Name'\n              onChange={this.changePersonProps}\n              defaultValue={this.state.person.fname} />\n          </div>\n          <div className='form-group'>\n            <label>Last Name</label>\n            <input\n              type='text'\n              ref='ln'\n              className='form-control'\n              placeholder='Last Name'\n              onChange={this.changePersonProps}\n              defaultValue={this.state.person.lname} />\n          </div>\n          <button className='btn btn-primary' onClick={this.save}><Glyph icon='floppy-disk'/> Save</button>\n        </div>\n      </form>\n    );\n  }\n});\n"}, {"instruction": "Create a React component for a non-profit donation page with a title, form, and padding.", "output": "import React from 'react';\nimport Helmet from 'react-helmet';\nimport { Grid } from '@freecodecamp/react-bootstrap';\n\nimport { Spacer, FullWidthRow } from '../components/helpers';\nimport YearEndDonationForm from '../components/YearEndGift/YearEndDonationForm';\n\nfunction YearEndGiftPage() {\n  return (\n    <>\n      <Helmet title='Support our nonprofit | freeCodeCamp.org' />\n      <Grid>\n        <main>\n          <Spacer />\n          <FullWidthRow>\n            <YearEndDonationForm defaultTheme='light' />\n          </FullWidthRow>\n          <Spacer />\n          <Spacer />\n        </main>\n      </Grid>\n    </>\n  );\n}\n\nYearEndGiftPage.displayName = 'YearEndGiftPage';\n\nexport default YearEndGiftPage;\n"}, {"instruction": "Create a React class component to maintain an incrementing counter using props. Increment the counter on button click, and log whether the counter is incrementing. Only allow the component to update when the counter is divisible by 3. Log the previous counter value on every update.", "output": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = { increasing: false };\n    }\n    update(e) {\n        ReactDOM.render(<App val={this.props.val + 1} />, document.getElementById(\"root\"))\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({ increasing: nextProps.val > this.props.val })\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.val % 3 === 0;\n    }\n    render() {\n        console.log(this.state.increasing);\n        return (\n            <button onClick={this.update.bind(this) }>\n                {this.props.val}\n            </button>\n        )\n    }\n    componentDidUpdate(prevProps, prevState){\n        console.log(`prevProps: ${prevProps.val}`)\n    }\n}\n\nApp.defaultProps = { val: 0 }\n\nexport default App;\n"}, {"instruction": "Create a React component that allows users to select from a list of options. This component should be able to render the selected option's label as a non-editable input field and provide a drop-down menu to change the selection. Ensure that the component handles numeric values and provides a workaround for Safari's autocorrect issue.", "output": "import Field from '../Field';\nimport React from 'react';\nimport Select from 'react-select';\nimport { FormInput } from '../../../admin/client/App/elemental';\n\n/**\n * TODO:\n * - Custom path support\n */\n\nmodule.exports = Field.create({\n\n\tdisplayName: 'SelectField',\n\tstatics: {\n\t\ttype: 'Select',\n\t},\n\n\tvalueChanged (newValue) {\n\t\t// TODO: This should be natively handled by the Select component\n\t\tif (this.props.numeric && typeof newValue === 'string') {\n\t\t\tnewValue = newValue ? Number(newValue) : undefined;\n\t\t}\n\t\tthis.props.onChange({\n\t\t\tpath: this.props.path,\n\t\t\tvalue: newValue,\n\t\t});\n\t},\n\n\trenderValue () {\n\t\tconst { ops, value } = this.props;\n\t\tconst selected = ops.find(opt => opt.value === value);\n\n\t\treturn (\n\t\t\t<FormInput noedit>\n\t\t\t\t{selected ? selected.label : null}\n\t\t\t</FormInput>\n\t\t);\n\t},\n\n\trenderField () {\n\t\tconst { numeric, ops, path, value: val } = this.props;\n\n\t\t// TODO: This should be natively handled by the Select component\n\t\tconst options = (numeric)\n\t\t\t? ops.map(function (i) {\n\t\t\t\treturn { label: i.label, value: String(i.value) };\n\t\t\t})\n\t\t\t: ops;\n\t\tconst value = (typeof val === 'number')\n\t\t\t? String(val)\n\t\t\t: val;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{/* This input element fools Safari's autocorrect in certain situations that completely break react-select */}\n\t\t\t\t<input type=\"text\" style={{ position: 'absolute', width: 1, height: 1, zIndex: -1, opacity: 0 }} tabIndex=\"-1\"/>\n\t\t\t\t<Select\n\t\t\t\t\tsimpleValue\n\t\t\t\t\tname={this.getInputName(path)}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tonChange={this.valueChanged}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t},\n\n});\n"}, {"instruction": "Design a small, material-style icon for a new fiber.", "output": "import React from 'react';\nimport Icon from '../Icon';\n\nexport default class FiberNewIcon extends Icon {\n  getSVG(){return <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\"><path d=\"M40 8H8c-2.21 0-3.98 1.79-3.98 4L4 36c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM17 30h-2.4l-5.1-7v7H7V18h2.5l5 7v-7H17v12zm10-9.49h-5v2.24h5v2.51h-5v2.23h5V30h-8V18h8v2.51zM41 28c0 1.1-.9 2-2 2h-8c-1.1 0-2-.9-2-2V18h2.5v9.01h2.25v-7.02h2.5v7.02h2.25V18H41v10z\"/></svg>;}\n};"}, {"instruction": "Design an SVG icon representing a Bluetooth signal searching for nearby devices.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet DeviceBluetoothSearching = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M14.24 12.01l2.32 2.32c.28-.72.44-1.51.44-2.33 0-.82-.16-1.59-.43-2.31l-2.33 2.32zm5.29-5.3l-1.26 1.26c.63 1.21.98 2.57.98 4.02s-.36 2.82-.98 4.02l1.2 1.2c.97-1.54 1.54-3.36 1.54-5.31-.01-1.89-.55-3.67-1.48-5.19zm-3.82 1L10 2H9v7.59L4.41 5 3 6.41 8.59 12 3 17.59 4.41 19 9 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM11 5.83l1.88 1.88L11 9.59V5.83zm1.88 10.46L11 18.17v-3.76l1.88 1.88z\"/>\n  </SvgIcon>\n);\nDeviceBluetoothSearching = pure(DeviceBluetoothSearching);\nDeviceBluetoothSearching.displayName = 'DeviceBluetoothSearching';\nDeviceBluetoothSearching.muiName = 'SvgIcon';\n\nexport default DeviceBluetoothSearching;\n"}, {"instruction": "Generate the React code for a Material Design icon, CastConnected. The icon should be pure and have a Material UI name of 'SvgIcon'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from 'material-ui/SvgIcon';\n\nlet CastConnected = props =>\n  <SvgIcon {...props}>\n    <path d=\"M1 18v3h3c0-1.66-1.34-3-3-3zm0-4v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm18-7H5v1.63c3.96 1.28 7.09 4.41 8.37 8.37H19V7zM1 10v2c4.97 0 9 4.03 9 9h2c0-6.08-4.93-11-11-11zm20-7H3c-1.1 0-2 .9-2 2v3h2V5h18v14h-7v2h7c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\" />\n  </SvgIcon>;\n\nCastConnected = pure(CastConnected);\nCastConnected.muiName = 'SvgIcon';\n\nexport default CastConnected;\n"}, {"instruction": "Generate the React code for a top navigation bar for a website. The navigation bar should have a logo on the left, and a list of links on the right. The links should include \"About,\" \"Account,\" and \"Sign out.\" If the user is not signed in, the \"Account\" and \"Sign out\" links should be replaced with a \"Sign in\" link.", "output": "import React, { Component } from 'react';\nimport { Menu, Container, Image } from 'semantic-ui-react'\nimport { Link, withRouter } from 'react-router-dom';\nimport image from '../img/lotus.svg';\nimport { isEmpty } from 'lodash';\nimport './navbar.css'\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { signOut } from '../redux/actions';\n\n\nclass TopNavBar extends Component {\n\trender() {\n\t\tconst { signOut, currentUser } = this.props\n\n\t\tif (!isEmpty(currentUser) && localStorage.getItem(\"auth\")) {\n\t\t\treturn (\n\t\t\t\t<Menu fixed='top' className='navbar'>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<Menu.Item header as={Link} to='/' className='nav-main-item'>\n\t\t\t\t\t\t\t<Image size='mini' src={image} id='nav-logo'></Image>\n\t\t\t\t\t\t\tBloom\n\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t<Menu.Menu position='right'>\n\t\t\t\t\t\t\t<Menu.Item name='about' as={Link} to='/about'>\n\t\t\t\t\t\t\t\tAbout\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t<Menu.Item name='account' as={Link} to='/account'>\n\t\t\t\t\t\t\t\tAccount\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t<Menu.Item name='signout' as='a' onClick={signOut}>\n\t\t\t\t\t\t\t\tSign out\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t</Menu.Menu>\n\t\t\t\t\t</Container>\n\t\t\t\t</Menu>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Menu fixed='top' className='navbar'>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<Menu.Item header as={Link} to='/' className='nav-main-item'>\n\t\t\t\t\t\t\t<Image size='mini' src={image} id='nav-logo'></Image>\n\t\t\t\t\t\t\tBloom\n\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t<Menu.Menu position='right'>\n\t\t\t\t\t\t\t<Menu.Item name='about' as={Link} to='/about'>\n\t\t\t\t\t\t\t\tAbout\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t\t<Menu.Item name='login' as={Link} to='/login'>\n\t\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t\t</Menu.Menu>\n\t\t\t\t\t</Container>\n\t\t\t\t</Menu>\n\t\t\t)\n\t\t}\n\t}\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currentUser: state.currentUser,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        signOut,\n    }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopNavBar);\n"}, {"instruction": "Get all the necessary data to display a list of ROMs in a React component, and load it when the component mounts, and cancel any pending requests when the component unmounts.", "output": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { get } from '../../../api';\nimport { promisifyData, cancelPromises } from '../../../utils';\nimport RomsList from './List';\n\nclass RomsListContainer extends Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      directoryListing: [],\n      esSystems: [],\n    };\n  }\n\n  async componentWillMount() {\n    const state = await promisifyData(\n      get('directoryListing'),\n      get('esSystems')\n    );\n\n    state.loaded = true;\n\n    this.setState(state);\n  }\n\n  componentWillUnmount() {\n    cancelPromises();\n  }\n\n  render() {\n    return (\n      <RomsList {...this.state} />\n    );\n  }\n}\n\nexport default translate()(RomsListContainer);\n"}, {"instruction": "Create a React page layout with two vertical columns using Material UI's Grid component. The left column should occupy 90% of the screen width and contain an EventsListDashboard component. The right column should occupy the remaining 10% of the screen width and contain a Debts component.", "output": "import React from 'react';\nimport Grid from 'material-ui/Grid';\nimport EventsListDashboard from '../containers/events/EventsListDashboard';\nimport Debts from '../containers/debts/Debts';\n\nconst Index = () =>\n  <Grid container direction=\"row\">\n    <Grid item xs={12} lg={9}>\n      <EventsListDashboard />\n    </Grid>\n    <Grid item xs={12} lg={3}>\n      <Debts />\n    </Grid>\n  </Grid>;\n\nexport default Index;\n"}, {"instruction": "Design a React Native component that displays a map marker callout. The callout should contain the text \"You are here (callout view).\"", "output": "import React, { Component } from 'react';\nimport { AppRegistry, Text, View, Image, Button } from 'react-native';\nimport { styles } from './styles';\n\nexport class MapMarkerCalloutView extends Component {\n\n  render() {\n    return (\n        <View style={styles.calloutContainer}>\n            <Text style={styles.calloutText}>You are here (callout view)</Text>\n        </View>\n    );\n  }\n}"}, {"instruction": "Create a React component that displays \"Logging out...\" for a short duration before reloading the page. Ensure that the component is properly styled using CSS modules.", "output": "import React from 'react';\nimport withStyles from 'isomorphic-style-loader/lib/withStyles';\nimport s from './Logout.css';\n\nclass Logout extends React.Component {\n  componentDidMount() {\n    setTimeout(() => {\n      window.location.reload();\n    }, 1250);\n  }\n\n  render() {\n    return <div className={s.text}>Logging out...</div>;\n  }\n}\n\nexport default withStyles(s)(Logout);\n"}, {"instruction": "Design a user dropdown component with an image trigger that shows the user's avatar and name. The dropdown should have options for \"Account,\" \"Settings,\" and \"Sign Out.\" Use the 'faker' library for generating the avatar and name. Ensure the component uses 'shengnian-ui-react' for styling.", "output": "import faker from 'faker'\nimport React from 'react'\nimport { Dropdown, Image } from 'shengnian-ui-react'\n\nconst trigger = (\n  <span>\n    <Image avatar src={faker.internet.avatar()} /> {faker.name.findName()}\n  </span>\n)\n\nconst options = [\n  { key: 'user', text: 'Account', icon: 'user' },\n  { key: 'settings', text: 'Settings', icon: 'settings' },\n  { key: 'sign-out', text: 'Sign Out', icon: 'sign out' },\n]\n\nconst DropdownImageTriggerExample = () => (\n  <Dropdown trigger={trigger} options={options} pointing='top left' icon={null} />\n)\n\nexport default DropdownImageTriggerExample\n"}, {"instruction": "Provide a React app with redux integration and support for routing within the app.", "output": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise';\nimport { Router } from 'react-router';\nimport createHistory from 'history/lib/createHashHistory';\n\nimport reducers from './reducers';\nimport routes from './routes';\n\nconst history = createHistory({\n  queryKey: false\n});\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\nReactDOM.render(\n\t<Provider store={createStoreWithMiddleware(reducers)}>\n\t\t<Router history={history} routes={routes} />\n\t</Provider>\n  , document.getElementById('root')\n);\n"}, {"instruction": "Generate an SVG icon component named AvRadio that visualizes a radio button in React using the Material UI library's SvgIcon component. The icon should have a circular shape with a small circle inside it to indicate an active state. Implement the component using pure from recompose for performance optimization.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvRadio = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M3.24 6.15C2.51 6.43 2 7.17 2 8v12c0 1.1.89 2 2 2h16c1.11 0 2-.9 2-2V8c0-1.11-.89-2-2-2H8.3l8.26-3.34L15.88 1 3.24 6.15zM7 20c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm13-8h-2v-2h-2v2H4V8h16v4z\"/>\n  </SvgIcon>\n);\nAvRadio = pure(AvRadio);\nAvRadio.displayName = 'AvRadio';\nAvRadio.muiName = 'SvgIcon';\n\nexport default AvRadio;\n"}, {"instruction": "Create a React component that renders a dropdown menu with two items: \"Left\" and \"Right\". When the \"Left\" item is clicked, a sub-menu should appear to the left of the item, and when the \"Right\" item is clicked, a sub-menu should appear to the right of the item. Style the dropdown using Semantic UI React.", "output": "import React from 'react'\nimport { Dropdown } from 'semantic-ui-react'\n\nconst DropdownExampleMenuDirection = () => (\n  <Dropdown text='Menu' floating labeled button className='icon'>\n    {/* <i class=\"dropdown icon\"></i> */}\n    <Dropdown.Menu>\n      <Dropdown.Item>\n        <i className='left dropdown icon'></i>\n        <span className='text'>Left</span>\n        <div className='left menu'>\n          <Dropdown.Item>1</Dropdown.Item>\n          <Dropdown.Item>2</Dropdown.Item>\n          <Dropdown.Item>3</Dropdown.Item>\n        </div>\n      </Dropdown.Item>\n      <Dropdown.Item>\n        <i className='dropdown icon'></i>\n        <span className='text'>Right</span>\n        <div className='right menu'>\n          <Dropdown.Item>1</Dropdown.Item>\n          <Dropdown.Item>2</Dropdown.Item>\n          <Dropdown.Item>3</Dropdown.Item>\n        </div>\n      </Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n)\n\nexport default DropdownExampleMenuDirection\n"}, {"instruction": "Prompt: Create a React component that will render an unordered list of links based on the array of items passed in as props. The links should be styled as pills and the currently active link should be highlighted with the class \"selected\".", "output": "/**\n * Created by dom on 9/15/16.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router';\n\nconst NavigationTree = React.createClass({\n  propTypes: {\n    items: React.PropTypes.array.isRequired\n  },\n  render() {\n    const flatten = (item) => {\n      return (\n        <li key={item.name}>\n          <Link to={item.url} activeClassName=\"selected\">{item.name}</Link>\n        </li>\n      );\n    };\n    return (\n      <ul className=\"nav nav-pills\">\n        {this.props.items.map(flatten)}\n      </ul>\n    );\n  }\n});\n\nexport default NavigationTree;\n"}, {"instruction": "Design a React component that displays a hint to the user. The hint should be hidden by default and only visible when the user hovers over a question mark icon. The component should support customization via a theme object.", "output": "import React from 'react';\n\nexport const defaultTheme = {\n  base: undefined,\n  questionMark: undefined,\n  visibleContent: undefined,\n  hiddenContent: undefined,\n};\n\nconst Hint = ({ children, isOpen = false, theme = defaultTheme }) => { // eslint-disable-line no-shadow\n  return (\n    <div className={theme.base}>\n      <div className={theme.questionMark}>?</div>\n      <div className={isOpen ? theme.visibleContent : theme.hiddenContent}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Hint;\n"}, {"instruction": "Generate a React component that contains a button that on click navigates to the previous page. The button should have a chevron-left icon and the text \"Back.\", and it should be aria-labelled \"Back button\".", "output": "import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nclass ColumnBackButton extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  handleClick = () => {\n    if (window.history && window.history.length === 1) this.context.router.push(\"/\");\n    else this.context.router.goBack();\n  }\n\n  render () {\n    return (\n      <div role='button' tabIndex='0' onClick={this.handleClick} className='column-back-button'>\n        <i className='fa fa-fw fa-chevron-left column-back-button__icon'/>\n        <FormattedMessage id='column_back_button.label' defaultMessage='Back' />\n      </div>\n    );\n  }\n\n}\n\nexport default ColumnBackButton;\n"}, {"instruction": "Generate a React code component that includes state management to provide a user interface for email enrollment. The component should display a form with an input field for the email address and a submit button. Upon form submission, the component should toggle between different UI states to provide feedback to the user, such as displaying a loading message while sending the email, a success message if the email was sent successfully, or an error message if there was an issue. The component should also handle state updates to reflect the different UI states.", "output": "import React from 'react';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {uiState: 'INIT'};\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.setState({uiState: 'SENDING'});\n    this.props.enrollWithEmail(this._input.value, (err) => {\n      if (err) {\n        console.log(err);\n        this.setState({uiState: 'FAIL'});\n      } else {\n        this.setState({uiState: 'SUCCESS'});\n      }\n    });\n  }\n\n  render() {\n    if (this.state.uiState === 'SENDING') return <div>\u6b63\u5728\u53d1\u9001\u90ae\u4ef6...</div>;\n    if (this.state.uiState === 'SUCCESS') return <div>\u90ae\u4ef6\u5df2\u53d1\u9001\uff0c\u8bf7\u67e5\u770b\u60a8\u7684\u90ae\u7bb1</div>;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          {this.state.uiState === 'FAIL' && <p>\u90ae\u4ef6\u53d1\u9001\u5931\u8d25\uff0c\u8bf7\u91cd\u8bd5</p>}\n          <p>\u8bf7\u586b\u5199\u767b\u5f55\u7528\u7684\u90ae\u7bb1\u5730\u5740\uff0c\u6211\u4eec\u5c06\u53d1\u9001\u4e00\u4e2a\u94fe\u63a5\u5230\u4f60\u90ae\u7bb1\uff0c\u901a\u8fc7\u8be5\u94fe\u63a5\u8bbe\u7f6e\u767b\u5f55\u5bc6\u7801</p>\n          <form onSubmit={this.onSubmit}>\n            <div className=\"input-group\">\n              <input className=\"form-control\" type=\"text\" ref={(c) => this._input = c}/>\n              <span className=\"input-group-btn\">\n                <button className=\"btn btn-default\" type=\"submit\">\u63d0\u4ea4</button>\n              </span>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component that renders a Material UI SVG icon representing a pizza for a given set of properties. The component should be pure and have a display name of 'MapsLocalPizza'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet MapsLocalPizza = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 2C8.43 2 5.23 3.54 3.01 6L12 22l8.99-16C18.78 3.55 15.57 2 12 2zM7 7c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm5 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"/>\n  </SvgIcon>\n);\nMapsLocalPizza = pure(MapsLocalPizza);\nMapsLocalPizza.displayName = 'MapsLocalPizza';\nMapsLocalPizza.muiName = 'SvgIcon';\n\nexport default MapsLocalPizza;\n"}, {"instruction": "Create a React component that uses `component-router` to display a filter and content. The filter should open and close based on the `value` of the route and the content should expand or not based on the `value` of the route.", "output": "import React from 'react';\nimport {ComponentRouter} from 'component-router';\nimport styles from './Quickstart.css';\n\nimport Filter from './Filter';\nimport Content from './Content';\n\n\nconst FilterWrapper = React.createClass({\n  propTypes: {\n    componentRouter: React.PropTypes.object\n  },\n\n\n  shouldComponentUpdate({componentRouter: {value}}) {\n    return value !== this.props.componentRouter.value;\n  },\n\n\n  render() {\n    const {value} = this.props.componentRouter;\n\n    return <Filter isOpened={value === 'opened'} />;\n  }\n});\n\n\nconst ContentWrapper = React.createClass({\n  propTypes: {\n    componentRouter: React.PropTypes.object\n  },\n\n\n  shouldComponentUpdate({componentRouter: {value}}) {\n    return value !== this.props.componentRouter.value;\n  },\n\n\n  render() {\n    const {value = 'chart'} = this.props.componentRouter;\n\n    return <Content expanded={value} />;\n  }\n});\n\n\nconst Quickstart = React.createClass({\n  shouldComponentUpdate() {\n    return false;\n  },\n\n\n  render() {\n    return (\n      <div className={styles.quickstart}>\n\n        <ComponentRouter config={FilterWrapper} namespace=\"filter\" />\n\n        <div className={styles.content}>\n\n          <ComponentRouter config={ContentWrapper} namespace=\"expanded\" />\n\n        </div>\n      </div>\n    );\n  }\n});\n\n\nexport default Quickstart;\n"}, {"instruction": "Generate a React Native component named `Spacer` that creates a horizontal line with styling that includes a height of 2px, a background color of `#EFEFEF`, margins of 30px on the horizontal axis and 20px on the vertical axis.", "output": "import React from 'react'\nimport { View } from 'react-native'\n\nclass Spacer extends React.Component {\n    render() {\n        return (\n            <View\n                style={{\n                    height: 2,\n                    backgroundColor: '#EFEFEF',\n                    marginHorizontal: 30,\n                    marginVertical: 20\n                }}\n            />\n        )\n    }\n}\n\nexport default Spacer\n"}, {"instruction": "Design a React component to represent Material Design's Image Filter 7 icon. Include the necessary imports and finalize the component with styling and proper naming conventions.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageFilter7 = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14zm-8-2l4-8V5h-6v2h4l-4 8h2z\"/>\n  </SvgIcon>\n);\nImageFilter7 = pure(ImageFilter7);\nImageFilter7.displayName = 'ImageFilter7';\nImageFilter7.muiName = 'SvgIcon';\n\nexport default ImageFilter7;\n"}, {"instruction": "Describe a React component that creates an anchor link with an id and a hash symbol in front to allow for smooth scrolling to that section on the page when clicked.", "output": "import React from 'react';\n\nconst Anchor = React.createClass({\n  propTypes: {\n    id: React.PropTypes.oneOfType([\n      React.PropTypes.string,\n      React.PropTypes.number\n    ])\n  },\n  render() {\n    return (\n      <a id={this.props.id} href={'#' + this.props.id} className=\"anchor\">\n        <span className=\"anchor-icon\">#</span>\n        {this.props.children}\n      </a>\n    );\n  }\n});\n\nexport default Anchor;\n"}, {"instruction": "Create a React component named `TimelineFilter`. This component should have a form with one `input` field that is used for filtering a timeline. The `input` field should have a placeholder that says \"Search Benchmarks\" and should update the state with its value when changed. The form should be submitted when the user presses the Enter key. The component should also have a function called `_runSearch` that is called when the form is submitted. This function should navigate to the \"/timeline\" route and pass the value of the `filter` state as a query parameter. The component should also have a function called `_onKeyDown` that is called when a key is pressed on the `input` field. This function should call the `_runSearch` function if the Enter key is pressed. Finally, the component should have a function called `_onChange` that is called when the value of the `input` field changes. This function should update the state with the new value of the `input` field and should call the `_runSearch` function after a delay. The default delay should be 500 milliseconds.", "output": "import React from 'react';\nimport MZBenchRouter from '../utils/MZBenchRouter';\nimport MZBenchActions from '../actions/MZBenchActions';\nimport BenchStore from '../stores/BenchStore';\n\nclass TimelineFilter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.autoSearchHandler = null;\n        this.state = {filter: this.props.filter};\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.filter != nextProps.filter) {\n            this.setState({filter: nextProps.filter});\n        }\n    }\n\n    render() {\n        return (\n            <form>\n                <div className=\"form-group\">\n                    <div className=\"input-group\">\n                        <div className=\"input-group-addon\">Filter</div>\n                        <input type=\"text\" ref=\"filterInput\" className=\"form-control\" placeholder=\"Search Benchmarks\" onKeyDown={this._onKeyDown.bind(this)} value={this.state.filter} onChange={this._onChange.bind(this)} />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n\n    _runSearch() {\n        MZBenchRouter.navigate(\"/timeline\", {q: this.state.filter});\n    }\n\n    _onKeyDown(event) {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            this._runSearch();\n        }\n    }\n\n    _onChange(event) {\n        this.setState({filter: event.target.value});\n\n        if (this.autoSearchHandler) {\n            clearTimeout(this.autoSearchHandler);\n        }\n        this.autoSearchHandler = setTimeout(() => this._runSearch(), this.props.autoSearchInterval);\n    }\n};\n\nTimelineFilter.propTypes = {\n    filter: React.PropTypes.string,\n    autoSearchInterval: React.PropTypes.number\n};\n\nTimelineFilter.defaultProps = {\n    autoSearchInterval: 500\n};\n\nexport default TimelineFilter;\n"}, {"instruction": "Create a React application that uses the `semantic-ui-react` library to generate a grid of four images with relaxed spacing.", "output": "import React from 'react'\nimport { Grid, Image } from 'semantic-ui-react'\n\nconst GridExampleRelaxedVery = () => (\n  <Grid relaxed='very' columns={4}>\n    <Grid.Column>\n      <Image src='/assets/images/wireframe/image.png' />\n    </Grid.Column>\n    <Grid.Column>\n      <Image src='/assets/images/wireframe/image.png' />\n    </Grid.Column>\n    <Grid.Column>\n      <Image src='/assets/images/wireframe/image.png' />\n    </Grid.Column>\n    <Grid.Column>\n      <Image src='/assets/images/wireframe/image.png' />\n    </Grid.Column>\n  </Grid>\n)\n\nexport default GridExampleRelaxedVery\n"}, {"instruction": "Generate the JavaScript code for a React component that can render a list of entries. Each entry should be a StatefulEntry component, and the list should be sorted in reverse order.", "output": "import PropTypes from 'prop-types';\nimport React from 'react';\nimport StatefulEntry from './Entry';\n\nconst EntryList = (props) => {\n  const entryNodes = props.data.map(entry => {\n    return (\n      <StatefulEntry\n        key={entry.id}\n        onSubmit={props.onSubmit}\n        onChange={props.onChange}\n        {...entry}\n      />\n    );\n  }).reverse();\n  return (\n    <div className=\"entryList\">\n      {entryNodes}\n    </div>\n  );\n};\nexport default EntryList;\n\nEntryList.propTypes = {\n  data: PropTypes.array.isRequired,\n  onChange: PropTypes.func,\n  onSubmit: PropTypes.func,\n};\nEntryList.defaultProps = {\n  data: [],\n};"}, {"instruction": "Generate the code to create a Redux store with React Router integration. The store should be enhanced with the Redux DevTools extension for debugging.", "output": "import React from 'react'\n\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport { createDevTools } from 'redux-devtools'\nimport LogMonitor from 'redux-devtools-log-monitor'\nimport DockMonitor from 'redux-devtools-dock-monitor'\n\nimport { routerReducer, routerMiddleware } from 'react-router-redux'\n\nexport const DevTools = createDevTools(\n  <DockMonitor toggleVisibilityKey=\"ctrl-h\" changePositionKey=\"ctrl-q\">\n    <LogMonitor theme=\"tomorrow\" preserveScrollTop={false} />\n  </DockMonitor>\n)\n\nexport function configureStore(history, initialState) {\n  const reducer = combineReducers({\n    routing: routerReducer\n  })\n\n  let devTools = []\n  if (typeof document !== 'undefined') {\n    devTools = [ DevTools.instrument() ]\n  }\n\n  const store = createStore(\n    reducer,\n    initialState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history)\n      ),\n      ...devTools\n    )\n  )\n\n  return store\n}\n"}, {"instruction": "Generate a React component that renders a static page based on the data in a route's page prop. Ensure the page's title is set in the Helmet component using the site title from the config file and include the page's body as dangerouslySetInnerHTML.", "output": "import React from 'react'\nimport Helmet from 'react-helmet'\nimport { config } from 'config'\n\nmodule.exports = React.createClass({\n  propTypes () {\n    return {\n      router: React.PropTypes.object,\n    }\n  },\n  render () {\n    const page = this.props.route.page.data\n    return (\n      <div>\n        <Helmet\n          title={`${config.siteTitle} | ${page.title}`} \n        />\n        <div dangerouslySetInnerHTML={{ __html: page.body }} />\n      </div>\n    )\n  },\n})\n"}, {"instruction": "Create a React component that renders a horizontal divider. It should have the following features:\n\n- The component should be able to be indented to a specific margin from the left side of its container.\n- It should have its appearance customized with inline styles.\n- It should use the Material UI's theme to style its appearance by default.", "output": "import React from 'react';\n\nconst propTypes = {\n  /**\n   * The css class name of the root element.\n   */\n  className: React.PropTypes.string,\n\n  /**\n   * If true, the `Divider` will be indented `72px`.\n   */\n  inset: React.PropTypes.bool,\n\n  /**\n   * Override the inline-styles of the root element.\n   */\n  style: React.PropTypes.object,\n};\n\nconst defaultProps = {\n  inset: false,\n};\n\nconst contextTypes = {\n  muiTheme: React.PropTypes.object.isRequired,\n};\n\nconst Divider = (props, context) => {\n  const {\n    inset,\n    style,\n    ...other,\n  } = props;\n\n  const {muiTheme} = context;\n  const {prepareStyles} = muiTheme;\n\n  const styles = {\n    root: {\n      margin: 0,\n      marginTop: -1,\n      marginLeft: inset ? 72 : 0,\n      height: 1,\n      border: 'none',\n      backgroundColor: muiTheme.baseTheme.palette.borderColor,\n    },\n  };\n\n  return (\n    <hr {...other} style={prepareStyles(Object.assign({}, styles.root, style))} />\n  );\n};\n\nDivider.muiName = 'Divider';\nDivider.propTypes = propTypes;\nDivider.defaultProps = defaultProps;\nDivider.contextTypes = contextTypes;\n\nexport default Divider;\n"}, {"instruction": "Provide me with a React snippet that shows users how to get started with using the react-material-design package.", "output": "import React from 'react';\n\nconst GettingStarted = () => (\n    <div>\n        <h1>Getting Started</h1>\n        <p>More to come...</p>\n        <p>To install run: yarn add react-material-design</p>\n        <p>Once installed import the react-material-design components you'll be usings like so: import {'{'} FAB {'}'} from 'react-material-design';</p>\n    </div>\n);\n\nexport default GettingStarted;\n"}, {"instruction": "Create a React component called HashTagPicsContainer that displays a list of hashtag images. Include a heading with the hashtag and a down arrow icon, and use the map function to iterate through the hashtag images and display them as HashTagPic components.", "output": "import React from 'react';\nimport HashTagPic from './HashTagPicComponent';\n\n\nconst HashTagPicsContainer = (props) => {\n  return (\n    <div>\n      <p>\n        <i className=\"icon small instagram\"></i>Tag your grams for this Spread with {props.hashtag} <i className=\"icon small arrow circle down\"></i>\n      </p>\n      {props.hashTagPics.map((pic, index) =>\n        <HashTagPic\n          key={index}\n          id={index}\n          pic = {pic}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default HashTagPicsContainer;\n"}, {"instruction": "Design an SVG icon for the 'delete forever' action, which is a trash can with an 'X' across it. The icon should have various properties such as width, height, fill, and stroke.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionDeleteForever = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"/>\n  </SvgIcon>\n);\nActionDeleteForever = pure(ActionDeleteForever);\nActionDeleteForever.displayName = 'ActionDeleteForever';\nActionDeleteForever.muiName = 'SvgIcon';\n\nexport default ActionDeleteForever;\n"}, {"instruction": "Create a React component that represents a like element for a feed, with options to specify primary content, additional classes, an icon, and mutually exclusive primary content. Include prop types and default props.", "output": "import _extends from 'babel-runtime/helpers/extends';\nimport _isNil from 'lodash/isNil';\nimport cx from 'classnames';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { customPropTypes, getElementType, getUnhandledProps, META } from '../../lib';\nimport Icon from '../../elements/Icon';\n\n/**\n * A feed can contain a like element.\n */\nfunction FeedLike(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n\n\n  var classes = cx('like', className);\n  var rest = getUnhandledProps(FeedLike, props);\n  var ElementType = getElementType(FeedLike, props);\n\n  if (!_isNil(children)) {\n    return React.createElement(\n      ElementType,\n      _extends({}, rest, { className: classes }),\n      children\n    );\n  }\n\n  return React.createElement(\n    ElementType,\n    _extends({}, rest, { className: classes }),\n    Icon.create(icon),\n    content\n  );\n}\n\nFeedLike.handledProps = ['as', 'children', 'className', 'content', 'icon'];\nFeedLike._meta = {\n  name: 'FeedLike',\n  parent: 'Feed',\n  type: META.TYPES.VIEW\n};\n\nFeedLike.defaultProps = {\n  as: 'a'\n};\n\nprocess.env.NODE_ENV !== \"production\" ? FeedLike.propTypes = {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for icon. Mutually exclusive with children. */\n  icon: customPropTypes.itemShorthand\n} : void 0;\n\nexport default FeedLike;"}, {"instruction": "Compose a JavaScript function, `createComponent`, which facilitates the shallow rendering of React components for testing purposes. This function should leverage React's `TestUtils` and adhere to the convention established in the provided reference: http://simonsmith.io/unit-testing-react-components-without-a-dom/.", "output": "/**\n * Function to get the shallow output for a given component\n * As we are using phantom.js, we also need to include the fn.proto.bind shim!\n *\n * @see http://simonsmith.io/unit-testing-react-components-without-a-dom/\n * @author somonsmith\n */\nimport React from 'react';\nimport TestUtils from 'react-addons-test-utils';\n\n/**\n * Get the shallow rendered component\n *\n * @param  {Object} component The component to return the output for\n * @param  {Object} props [optional] The components properties\n * @param  {Mixed} ...children [optional] List of children\n * @return {Object} Shallow rendered output\n */\nexport default function createComponent(component, props = {}, ...children) {\n  const shallowRenderer = TestUtils.createRenderer();\n  shallowRenderer.render(React.createElement(component, props, children.length > 1 ? children : children[0]));\n  return shallowRenderer.getRenderOutput();\n}\n"}, {"instruction": "Create a React component that renders a gallery of images. Each image should be a link to its own page, and should have a thumbnail and a title.", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport IMAGES from '../../images/images';\nimport Thumbnail from '../Thumbnail/Thumbnail';\n\nclass Gallery extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Gallery</h2>\n                {\n                    IMAGES.map((img) => (\n                        <Link\n                            key={img.id}\n                            to={{\n                                pathname: `/img/${img.id}`,\n                                state: { modal: true }\n                            }}\n                        >\n                            <Thumbnail color={img.color}/>\n                            <p style={{ marginTop: 0 }}>{img.title}</p>\n                        </Link>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default Gallery;\n"}, {"instruction": "Generate the code to create a guide page with instructions for navigating a game on both touch devices and keyboards. Include specific instructions for jumping, moving, and pausing the game.", "output": "import React from 'react';\nimport SubPage from '../reusable/SubPage.js';\nimport SubPageContent from '../reusable/SubPageContent.js';\nimport KeyboardKey from '../reusable/KeyboardKey';\n\nexport default class Guide extends SubPage{\n  render (){\n    return (\n      <SubPageContent {...this.props}>\n        <h1>Guide</h1>\n        <h2>Objective</h2>\n        <ul>\n          <li>avoid obstacles</li>\n          <li>avoid center</li>\n          <li>collect stars</li>\n          <li>as fast as you can</li>\n        </ul>\n        <h2>Controls on a touch device:</h2>\n        <p>Tap \u261f anywhere to jump</p>\n        <p>Swipe \u2194 anywhere to move</p>\n        <h2>Controls on a keyboard:</h2>\n        <p><KeyboardKey>\u2191</KeyboardKey>/<KeyboardKey>W</KeyboardKey>/<KeyboardKey>space</KeyboardKey> to jump</p>\n        <p><KeyboardKey>\u2190</KeyboardKey><KeyboardKey>\u2192</KeyboardKey>/<KeyboardKey>A</KeyboardKey><KeyboardKey>D</KeyboardKey> to move</p>\n        <p><KeyboardKey>Esc</KeyboardKey>/<KeyboardKey>pause break</KeyboardKey>/<KeyboardKey>Backspace</KeyboardKey> to pause</p>\n        <h2>Navigation</h2>\n        <p>In addition to clicking and tapping, you can navigate all menus using <KeyboardKey>\u2191</KeyboardKey><KeyboardKey>\u2190</KeyboardKey><KeyboardKey>\u2193</KeyboardKey><KeyboardKey>\u2192</KeyboardKey> and <KeyboardKey>W</KeyboardKey><KeyboardKey>A</KeyboardKey><KeyboardKey>S</KeyboardKey><KeyboardKey>D</KeyboardKey></p>\n      </SubPageContent>\n    );\n  }\n}\n"}, {"instruction": "Generate the code for a React Native component that displays a catalog of items in a list using the ListView component, and connects to Redux to fetch the catalog data and manage the loading state. The component should also have a button that navigates to a \"carrinho\" or shopping cart page.", "output": "import React, { Component } from 'react';\nimport { View, ListView, RefreshControl, ScrollView } from 'react-native';\nimport { Container, Content, Card, CardItem, Text, Button, Icon } from 'native-base';\nimport { connect } from 'react-redux';\nimport { fetch_catalogo } from '../../actions';\nimport CatalogoItem from './CatalogoItem';\nimport { Actions } from 'react-native-router-flux';\n\nclass CatalogoLista extends Component {\n\n  componentWillMount() {\n    this.props.fetch_catalogo();\n    this.createDataSource(this.props)\n    // const { carrinhoLista } = this.props;\n    // console.log(this.props);\n\n    Actions.refresh({rightTitle: 'Carrinho', onRight: () => Actions.carrinho({type:'reset', listCarrinho: this.props.carrinhoLista}), rightButtonTextStyle: { color:'white'} });\n  }\n\n  componentWillReceiveProps(nextProps){\n    this.createDataSource(nextProps)\n  }\n\n  createDataSource({listCatalogo}) {\n    const ds = new ListView.DataSource({\n      rowHasChanged: (r1, r2) => r1 !== r2\n    });\n    this.dataSource = ds.cloneWithRows(listCatalogo);\n  }\n\n  renderRow(listCatalogo) {\n    return <CatalogoItem catalogoLista={listCatalogo} />\n  }\n\n  _onRefresh(){\n    setTimeout(() => {\n      this.props.fetch_catalogo();\n      }, 1000);\n  }\n\n\n  render(){\n    return(\n      <ListView\n        enableEmptySections\n        dataSource={this.dataSource}\n        renderRow={this.renderRow}\n        style={{marginTop: 70}}\n        />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n\n\n  const listCatalogo = _.map(state.catalogo.catalogoLista, (key, value) => {\n    return { ...key, value };\n  });\n  const { refreshing } = state.catalogo;\n  const { carrinhoLista } = state.carrinho;\n  return { listCatalogo, refreshing, carrinhoLista };\n\n}\n\nexport default connect(mapStateToProps, {fetch_catalogo})(CatalogoLista);\n"}, {"instruction": "Create a React application with routing. The application should have two routes: '/' and '/home'. The '/' route should redirect logged-in users to '/home' and display a login form for non-logged-in users. The '/home' route should be accessible only to logged-in users and display a home page. If a user is not logged in and tries to access '/home', they should be redirected to '/'. The login form should have a login button that sets the 'loggedIn' state to true, and a logout button that sets the 'loggedIn' state to false.", "output": "\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Link, Redirect } from 'react-router-dom';\nimport { Home } from './component/home';\nimport { Login } from './component/login';\nimport 'antd/dist/antd.less';\nimport './share/style/global.less';\nimport './share/mr/mr.css';\n\nlet loggedIn = window.localStorage.getItem('loggedIn');\n\nclass App extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedIn: true\n        }\n    }\n\n    login = () => {\n        this.setState({\n            loggedIn: true\n        })\n    }\n\n    logout = () => {\n        this.setState({\n            loggedIn: false\n        })\n    }\n\n    render() {\n        return (\n            <Router>\n            <div className='home'>\n            <Route exact path='/' component={Home}></Route>\n            {/* <Route exact path=\"/\" render={() => (\n                this.state.loggedIn ? (\n                    <Redirect to=\"/home\"/>\n                ) : (\n                    <Login login={this.login}/>\n                )\n            )}/> */}\n            </div>\n        </Router>\n        )\n    }\n}\n\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\n"}, {"instruction": "Create a React component called `UserBasePage` that will be used as the base for all user-related pages within the application. This component should include a wrapper div with a class of `bg`, a `Sidebar` component, and a placeholder for child components.", "output": "import React from 'react';\nimport { Link } from 'react-router';\n\nimport styles from '../styles/User.scss';\nimport Sidebar from '../components/Sidebar';\n\n/* eslint react/prop-types: 0 */\nexport function UserBasePage(props) {\n  return (\n    <div className={styles.bg}>\n      <Sidebar />\n      { props.children }\n    </div>\n  );\n}\nexport default UserBasePage;\n"}, {"instruction": "Generate a React component named `UpdateConfig` that conditionally renders three different components: `null`, `UpdateDiff`, or a `TaskConfig`.", "output": "import React from 'react';\n\nimport PanelGroup, { Container, StandardPanelTitle } from 'components/Layout';\nimport TaskConfig from 'components/TaskConfig';\nimport UpdateDiff from 'components/UpdateDiff';\n\nimport { isNully } from 'utils/Common';\n\nexport default function UpdateConfig({ update }) {\n  if (isNully(update.update.instructions.desiredState)) {\n    return null;\n  } else if (update.update.instructions.initialState.length > 0) {\n    return <UpdateDiff update={update} />;\n  }\n\n  return (<Container>\n    <PanelGroup noPadding title={<StandardPanelTitle title='Update Config' />}>\n      <TaskConfig config={update.update.instructions.desiredState.task} />\n    </PanelGroup>\n  </Container>);\n}\n"}, {"instruction": "Create a React functional component that represents a button. The component should accept the following props:\n- children: The text or content to display inside the button.\n- onPress: A function to be called when the button is pressed.\n- style: An optional style object to override the default button styles.\n\nThe button should have a default padding of 14px, padding on the left and right sides of 20px, and a border width of 1px with a silver border color. The text inside the button should have a font size of 18px.", "output": "import React from 'react'\nimport {View, TouchableNativeFeedback, Text, StyleSheet} from 'react-native'\n\nexport const Button = ({children, onPress, style}) => (\n  <TouchableNativeFeedback\n    onPress={onPress}\n    background={TouchableNativeFeedback.SelectableBackground()}>\n    <View style={[styles.button, style]}>\n      <Text style={styles.label}>{children}</Text>\n    </View>\n  </TouchableNativeFeedback>\n)\n\nconst styles = StyleSheet.create({\n  button: {\n    padding: 14,\n    paddingRight: 20,\n    paddingLeft: 20,\n    flex: 1,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'silver',\n  },\n  label: {\n    fontSize: 18,\n  },\n})\n"}, {"instruction": "Generate a React component that fetches a message from a JSON file and displays it on the screen. The component should have a state variable to store the message and a method to fetch the message. The component should render a div with a class of \"hello\" and a h1 with a class of \"hello__message\" that displays the message.", "output": "import React from 'react';\n\nexport default class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: 'Loading...'\n    };\n\n    this.fetchMessage();\n  }\n\n  fetchMessage() {\n    fetch('/message.json')\n      .then((response) => response.json())\n      .then((data) => this.setState({ message: data.message }));\n  }\n\n  render() {\n    return (\n      <div className=\"hello\">\n        <h1 className=\"hello__message\">{this.state.message}</h1>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Design an SVG icon for a cell phone with full Wi-Fi signal, in a sharp and modern style.", "output": "import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(\n  <React.Fragment><path fillOpacity=\".3\" d=\"M6 22h16V5.97L6 22z\" /><path d=\"M18 9.98L6 22h12V9.98zM3.93 5.93l1.29 1.29c3.19-3.19 8.38-3.19 11.57 0l1.29-1.29c-3.91-3.91-10.25-3.91-14.15 0zm5.14 5.14L11 13l1.93-1.93c-1.07-1.06-2.79-1.06-3.86 0zM6.5 8.5l1.29 1.29c1.77-1.77 4.65-1.77 6.43 0L15.5 8.5c-2.48-2.48-6.52-2.48-9 0z\" /></React.Fragment>\n, 'CellWifiSharp');\n"}, {"instruction": "Create a React component named EditorFormatAlignRight that inherits from the SvgIcon component. The component should render an SVG icon with the following path: \"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z\". The component should have a pure export and a display name of 'EditorFormatAlignRight'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet EditorFormatAlignRight = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z\"/>\n  </SvgIcon>\n);\nEditorFormatAlignRight = pure(EditorFormatAlignRight);\nEditorFormatAlignRight.displayName = 'EditorFormatAlignRight';\nEditorFormatAlignRight.muiName = 'SvgIcon';\n\nexport default EditorFormatAlignRight;\n"}, {"instruction": "Create a React component called ImageBrightness7 that displays an SVG icon of a sun with half of it shaded, representing low brightness.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ImageBrightness7 = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4z\"/>\n  </SvgIcon>\n);\nImageBrightness7 = pure(ImageBrightness7);\nImageBrightness7.displayName = 'ImageBrightness7';\n\nexport default ImageBrightness7;\n"}, {"instruction": "Generate a React component that serves as a shell for the application. It should include the following:\n\n- The component should be named `Shell`.\n- The component should import necessary components from the `index` directory.\n- The component should have a `render` method that returns a layout with:\n    - A Header component that displays a menu if the user is logged in.\n    - A main content area where child components can be rendered.\n    - A Footer component.\n- The component should be connected to the Redux store and retrieve the `isLoggedIn` property from the `auth` reducer.", "output": "'use strict'\n\nimport React from 'react'\nimport {connect} from 'react-redux'\n\nimport {Header, Footer}  from '../components/index'\n\nexport const Shell = React.createClass({\n  render () {\n    const handleToggle = this.handleToggle\n    const {children, isLoggedIn} = this.props\n\n    return (\n      <div className=\"shell\">\n        <Header showMenu={isLoggedIn}/>\n        <div className={'page-wrapper'}>{children}</div>\n        <Footer />\n      </div>\n    )\n  }\n})\n\nexport default connect((state) => {\n  return {\n    isLoggedIn: state.auth.isLoggedIn\n  }\n})(Shell)\n"}, {"instruction": "Describe a React component that displays a column in a table with a loading placeholder. The column should have a title and an optional icon.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nexport default class ColumnLoading extends ImmutablePureComponent {\n\n  static propTypes = {\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n    icon: PropTypes.string,\n  };\n\n  static defaultProps = {\n    title: '',\n    icon: '',\n  };\n\n  render() {\n    let { title, icon } = this.props;\n    return (\n      <Column>\n        <ColumnHeader icon={icon} title={title} multiColumn={false} focusable={false} placeholder />\n        <div className='scrollable' />\n      </Column>\n    );\n  }\n\n}\n"}, {"instruction": "Generate the React component code for an icon representing a map with directions. The icon should have a transparent background with a width and height of 48px, and the icon should display the symbol for directions in blue.", "output": "import React from 'react';\nimport IconBase from '@suitejs/icon-base';\n\nfunction MdDirections(props) {\n  return (\n    <IconBase viewBox=\"0 0 48 48\" {...props}>\n      <path d=\"M43.405 22.585c.79.78.79 2.04.01 2.83l-18 18c-.78.78-2.05.78-2.83 0v-.01l-18-17.99c-.78-.78-.78-2.05 0-2.83l18-18c.77-.78 2.04-.78 2.82 0l18 18zm-15.41 6.41l7-7-7-7v5h-10c-1.11 0-2 .89-2 2v8h4v-6h8v5z\" />\n    </IconBase>\n  );\n}\n\nexport default MdDirections;\n"}, {"instruction": "Provide a React application showcasing the features of an auto-complete component and tag component. The application should include multiple examples, one showcasing the basic usage of the auto-complete component, another demonstrating how to use the tag component, and a final example illustrating how to group tags using the tag group component.", "output": "// \u89e3\u51b3 IE 11 \u517c\u5bb9\u6027\u95ee\u9898\nimport 'babel-polyfill';\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Markdown } from 'react-markdown-reader';\nimport CodeView from 'react-code-view';\nimport { PageContainer } from 'rsuite-docs';\nimport './less/index.less';\nimport Tag, { TagGroup } from '../src';\nimport randomText from './util/randomText';\n\nconst tags = (() => {\n  const common = Array.from(new Array(5)).map(() => `\u6807\u7b7e${randomText()}`);\n  const custom = [\n    {\n      text: `\u6807\u7b7e${randomText()}`,\n      color: Tag.Color.PRIMARY,\n    },\n    {\n      text: `\u6807\u7b7e${randomText()}`,\n      color: Tag.Color.SUCCESS,\n      closable: true\n    }\n  ];\n  return [...custom, ...new Set(common)];\n})();\n\nclass App extends Component {\n  render() {\n    return (\n      <PageContainer\n        activeKey=\"Autocomplete\"\n        githubURL=\"https://github.com/rsuite/rsuite-autocomplete\"\n      >\n        <Markdown>{require('../README.md')}</Markdown>\n        <CodeView\n          dependencies={{\n            React,\n            Tag,\n            randomText\n          }}\n        >\n          {require('./md/basic.md')}\n        </CodeView>\n\n        <CodeView\n          dependencies={{\n            React,\n            Tag,\n            TagGroup,\n            randomText,\n            tags\n          }}\n        >\n          {require('./md/tagGroup.md')}\n        </CodeView>\n\n        <CodeView\n          dependencies={{\n            React,\n            Tag,\n            TagGroup,\n            randomText,\n            tags\n          }}\n          babelTransformOptions={{\n            presets: [\n              'es2015',\n              'react',\n              'stage-1'\n            ]\n          }}\n        >\n          {require('./md/tagGroupCustomized.md')}\n        </CodeView>\n        <Markdown>{require('./md/tagProps.md')}</Markdown>\n        <Markdown>{require('./md/tagGroupProps.md')}</Markdown>\n      </PageContainer>\n    );\n  }\n}\n\nReactDOM.render(<App />,\n  document.getElementById('app')\n);\n"}, {"instruction": "Generate a React class component that extends BaseChart which imports the 'dc' library and various mixins for a row chart. The component should have propTypes and a componentDidMount lifecycle method where the chart is instantiated and configured.", "output": "import React from 'react'\nimport dc from 'dc'\nimport BaseChart from './base-chart'\nimport baseMixin from '../mixins/base-mixin'\nimport marginMixin from '../mixins/margin-mixin'\nimport capMixin from '../mixins/cap-mixin'\nimport colorMixin from '../mixins/color-mixin'\nimport rowMixin from '../mixins/row-mixin'\n\nconst {any, bool, number, oneOfType} = React.PropTypes\n\n@rowMixin\n@colorMixin\n@capMixin\n@marginMixin\n@baseMixin\nexport default class RowChart extends BaseChart{\n  static displayName = 'RowChart'\n\n  componentDidMount(){\n    this.chart = dc.rowChart(this.chart)\n    this.configure()\n    this.chart.render()\n  }\n}\n"}, {"instruction": "Design a React app routing schema with code-splitting for a recipe app that includes an App component as the root, a RecipeListPage as the default route, and another RecipeListPage for the \"/recipes\" path.", "output": "import React from 'react';\nimport { Route, IndexRoute } from 'react-router';\nimport App from './modules/app/components/App';\nimport RecipeListPage from './modules/recipe/pages/RecipeListPage'\n\n// require.ensure polyfill for node\nif (typeof require.ensure !== 'function') {\n  require.ensure = function requireModule(deps, callback) {\n    callback(require);\n  };\n}\n\n/* Workaround for async react routes to work with react-hot-reloader till\n  https://github.com/reactjs/react-router/issues/2182 and\n  https://github.com/gaearon/react-hot-loader/issues/288 is fixed.\n */\nif (process.env.NODE_ENV !== 'production') {\n  // Require async routes only in development for react-hot-reloader to work.\n  // require('./modules/recipe/pages/RecipeCreatePage');\n  require('./modules/recipe/pages/RecipeListPage');\n}\n\n// react-router setup with code-splitting\n// More info: http://blog.mxstbr.com/2016/01/react-apps-with-pages/\nexport default (\n  <Route path=\"/\" component={App}>\n    <IndexRoute component={RecipeListPage} />\n    <Route path=\"/recipes\" component={RecipeListPage}/>\n  </Route>\n);\n"}, {"instruction": "Create a React component named InputGroupButton that extends the React.Component class using the extends keyword.\nThis component should take a className prop and pass all other props to the `elementProps` variable.\nUse the splitBsProps helper to split the props into bsProps and elementProps, then use the getClassSet helper to create a classes variable that combines the bsProps with the className prop.\nFinally, render a span element with the className from classes and spread the elementProps into it, ensuring that all props are correctly passed through to the element except for the className", "output": "import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\n\nvar InputGroupButton = function (_React$Component) {\n  _inherits(InputGroupButton, _React$Component);\n\n  function InputGroupButton() {\n    _classCallCheck(this, InputGroupButton);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  InputGroupButton.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        props = _objectWithoutProperties(_props, ['className']);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    var classes = getClassSet(bsProps);\n\n    return React.createElement('span', _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }));\n  };\n\n  return InputGroupButton;\n}(React.Component);\n\nexport default bsClass('input-group-btn', InputGroupButton);"}, {"instruction": "Generate a React Storybook configuration for a Dialog component with different styles and configurations that can be controlled through knobs.", "output": "import React from 'react';\nimport {storiesOf, action} from '@storybook/react';\nimport {withKnobs, text, boolean} from '@storybook/addon-knobs';\nimport {StoryWrapper} from './../_lib/storyUtils';\nimport Dialog from '.';\nimport Button from './../Button';\n\nstoriesOf('Dialog', module)\n    .addDecorator(withKnobs)\n    .addWithInfo(\n        'default',\n        'Dialog',\n        () => (\n            <StoryWrapper>\n                <Dialog\n                    isOpen={boolean('Is opened?', true)}\n                    title={text('Title', 'Hello title!')}\n                    onRequestClose={action('onRequestClose')}\n                    actions={[\n                        <Button key=\"foo\">An action button</Button>\n                    ]}\n                    style=\"wide\"\n                    >\n                    {text('Inner content', 'Hello world!')}\n                </Dialog>\n            </StoryWrapper>\n        ),\n        {inline: true, source: false}\n    )\n    .addWithInfo(\n        'narrow',\n        'Dialog',\n        () => (\n            <StoryWrapper>\n                <Dialog\n                    isOpen={boolean('Is opened?', true)}\n                    title={text('Title', 'Hello title!')}\n                    onRequestClose={action('onRequestClose')}\n                    actions={[\n                        <Button key=\"foo\">An action button</Button>\n                    ]}\n                    style=\"narrow\"\n                    >\n                    {text('Inner content', 'Hello world!')}\n                </Dialog>\n            </StoryWrapper>\n        ),\n        {inline: true, source: false}\n    );\n"}, {"instruction": "Generate the code snippet that renders the React application to the DOM, using the `ReactDOM` library. The application should be in the file `./dappreg/Application`, and the container should be in the DOM with the id \"container.\" Also, include CSS files for custom fonts and a style file in the correct order.", "output": "// Copyright 2015, 2016 Parity Technologies (UK) Ltd.\n// This file is part of Parity.\n\n// Parity is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Parity is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with Parity.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport injectTapEventPlugin from 'react-tap-event-plugin';\n\ninjectTapEventPlugin();\n\nimport Application from './dappreg/Application';\n\nimport '../../assets/fonts/Roboto/font.css';\nimport '../../assets/fonts/RobotoMono/font.css';\nimport './style.css';\n\nReactDOM.render(\n  <Application />,\n  document.querySelector('#container')\n);\n"}, {"instruction": "Generate a React component for an icon of a document with a video, following the existing pattern in the codebase. The icon should be named \"DocumentVideo\".", "output": "// (C) Copyright 2014-2015 Hewlett Packard Enterprise Development LP\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport CSSClassnames from '../../../utils/CSSClassnames';\nimport Intl from '../../../utils/Intl';\nimport Props from '../../../utils/Props';\n\nconst CLASS_ROOT = CSSClassnames.CONTROL_ICON;\nconst COLOR_INDEX = CSSClassnames.COLOR_INDEX;\n\nexport default class Icon extends Component {\n  render () {\n    const { className, colorIndex } = this.props;\n    let { a11yTitle, size, responsive } = this.props;\n    let { intl } = this.context;\n\n    const classes = classnames(\n      CLASS_ROOT,\n      `${CLASS_ROOT}-document-video`,\n      className,\n      {\n        [`${CLASS_ROOT}--${size}`]: size,\n        [`${CLASS_ROOT}--responsive`]: responsive,\n        [`${COLOR_INDEX}-${colorIndex}`]: colorIndex\n      }\n    );\n\n    a11yTitle = a11yTitle || Intl.getMessage(intl, 'document-video');\n\n    const restProps = Props.omit(this.props, Object.keys(Icon.propTypes));\n    return <svg {...restProps} version=\"1.1\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" role=\"img\" className={classes} aria-label={a11yTitle}><path fill=\"none\" stroke=\"#000\" strokeWidth=\"2\" d=\"M4.99787498,6.99999999 L4.99787498,0.999999992 L19.4999998,0.999999992 L22.9999998,4.50000005 L22.9999998,23 L4,23 M18,1 L18,6 L23,6 M3,10 L12,10 L12,19 L3,19 L3,10 Z M12,13 L17,10.5 L17,18.5 L12,16 L12,13 Z\"/></svg>;\n  }\n};\n\nIcon.contextTypes = {\n  intl: PropTypes.object\n};\n\nIcon.defaultProps = {\n  responsive: true\n};\n\nIcon.displayName = 'DocumentVideo';\n\nIcon.icon = true;\n\nIcon.propTypes = {\n  a11yTitle: PropTypes.string,\n  colorIndex: PropTypes.string,\n  size: PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'huge']),\n  responsive: PropTypes.bool\n};\n\n"}, {"instruction": "Provide an example of a React Native function named `ConnectDetailTagBox` that dynamically displays a list of tags based on the contact's ID. Each tag should be formatted as a list item with a description on the left and text on the right. The data for the tags should come from a list of predefined contacts and the user's personal data.", "output": "\nimport React, { Component } from 'react';\nimport { Container,List, Header, Title, Content, Button, Icon, IconNB, Card, CardItem, Text, Left, Right, Body, ListItem } from 'native-base';\nimport { View } from 'react-native'\n\nimport styles from '../../styles/socialBox';\n\nimport contacts from '../../../../mock/contacts'\n\nimport realm from '../../db_ini'\n\nconst _getContact = (contactId) => {\n\n  const contacts = realm.objects('User')\n  const searchResult = contacts.filtered(`userId = \"${contactId}\"`)\n  const recent_contact = searchResult[0]\n  return recent_contact\n\n}\n\nconst _getMatchingData = (arr1,arr2) => {\n  arr1.prototype.diff = function(arr2) {\n      var ret = [];\n      for(var i in this) {\n          if(arr2.indexOf( this[i] ) > -1){\n              ret.push( this[i] );\n          }\n      }\n      return ret;\n  };\n}\n\nconst renderData = (contactId) => {\n  const datas = contacts\n  const contact = _getContact(contactId)\n  return (\n      <View>\n      <List\n          dataArray={contact.publicSharedData[0].hashTagData} renderRow={data =>\n            <ListItem style={{backgroundColor:'white'}}>\n              <Text>{data.tagDescription}</Text>\n              <Right>\n                <Text>{data.tagText}</Text>\n              </Right>\n            </ListItem>\n        }\n        />\n      </View>\n      )\n}\n\nconst ConnectDetailTagBox = (props) => {\n  const datas = contacts\n  const {children} = props\n    return (\n      <View>\n        {renderData(children)}\n      </View>\n    )\n}\n\nexport default ConnectDetailTagBox\n"}, {"instruction": "Provide a JavaScript function component that takes children and a custom component class as props and returns the JSX for a block-level component with the `jumbotron` class name wrapped around the children.", "output": "import React from 'react';\nimport classNames from 'classnames';\nimport elementType from 'react-prop-types/lib/elementType';\n\nconst Jumbotron = React.createClass({\n  propTypes: {\n    /**\n     * You can use a custom element for this component\n     */\n    componentClass: elementType\n  },\n\n  getDefaultProps() {\n    return { componentClass: 'div' };\n  },\n\n  render() {\n    const ComponentClass = this.props.componentClass;\n\n    return (\n      <ComponentClass {...this.props} className={classNames(this.props.className, 'jumbotron')}>\n        {this.props.children}\n      </ComponentClass>\n    );\n  }\n});\n\nexport default Jumbotron;\n"}, {"instruction": "Create a React component for a check box icon using SVG with a size of 48x48 pixels, with a path that draws the outline and checkmark.", "output": "import React from 'react';\nimport Icon from '../Icon';\n\nexport default class CheckBoxIcon extends Icon {\n  getSVG(){return <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\"><path d=\"M38 6H10c-2.21 0-4 1.79-4 4v28c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4zM20 34L10 24l2.83-2.83L20 28.34l15.17-15.17L38 16 20 34z\"/></svg>;}\n};"}, {"instruction": "Generate a table component in React that accepts headings, rows, and totals as props and renders a table with headings, rows, and totals. The component should support the addition of custom classes and styles.", "output": "import React from 'react';\n\nexport default ({headings, rows, totals, className, style})=> (\n\t<table className={className} style={style}>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t{headings.map((d,i)=><th key={i}>{d}</th>)}\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{rows.map((row,index)=>(\n\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t{row.map((d,i)=><td key={i}>{d.toLocaleString()}</td>)}\n\t\t\t\t\t</tr>)\n\t\t\t\t)\n\t\t\t}\n\t\t</tbody>\n\t\t<tfoot>\n\t\t\t<tr>\n\t\t\t\t{totals.map((d,i)=><td key={i}>{d.toLocaleString()}</td>)}\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n);\n"}, {"instruction": "Create a React component for creating a new post including title, categories, and content, with form validation for each field.", "output": "import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createPost } from '../actions';\n\nclass PostsNew extends React.Component {\n  renderField(field) {\n    const className = `form-group ${field.meta.touched && field.meta.error ? 'has-danger' : ''}`\n\n    return (\n      <div className={className}>\n        <label>{field.label}</label>\n        <input\n          className='form-control'\n          type='text'\n          {...field.input}\n        />\n        <div className='text-help'>\n          {field.meta.touched ? field.meta.error : ''}\n        </div>\n      </div>\n    );\n  }\n\n  onSubmit(values) {\n    this.props.createPost(values, () => {\n      this.props.history.push('/');\n    });\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit.bind(this))} className='posts-new'>\n        <Field\n          label='Title'\n          name='title'\n          component={this.renderField}\n        />\n        <Field\n          label='Categories'\n          name='categories'\n          component={this.renderField}\n        />\n        <Field\n          label='Post Content'\n          name='content'\n          component={this.renderField}\n        />\n        <button type='submit' className='btn btn-primary'>Submit</button>\n        <Link to='/' className='btn btn-danger'>Cancel</Link>\n      </form>\n    );\n  }\n}\n\nfunction validate(values) {\n  const errors = {};\n\n  if (!values.title) {\n    errors.title = \"Enter a title\";\n  }\n\n  if (!values.categories) {\n    errors.categories = \"Enter categories\";\n  }\n\n  if (!values.content) {\n    errors.content = \"Enter content\";\n  }\n\n  return errors;\n}\n\nexport default reduxForm({\n  validate: validate,\n  form: 'PostsNewForm'\n})(\n  connect(null, { createPost })(PostsNew)\n);\n"}, {"instruction": "Generate the text content of an About page for a React web application that provides live search functionality for Path of Exile items. Include information about the inspiration behind the project, its features, potential future improvements, and contact details for the developer.", "output": "/**\n * Created by Anthony Lord on 2017-05-02.\n */\nimport React, { Component } from 'react';\nimport Header from \"./header\";\nclass About extends Component{\n    render(){\n        return (\n        <div>\n        <Header league={\"\"} onLeagueChange={null}/>\n            <div className=\"container main\">\n                <h3><p>This website is a small project inspired by github.com/ccbrown who made a simple indexer that listens to the PoE item river. The main issue was that any user using the app has to download the whole river (over 1mb/s of data)</p><br />\n                <p>Instead, I made a backend api that listens to the river. The clients can thus subscribe to the API with a search request and only recieve the items that they searched for.</p><br />\n                <p>Since there's no indexing, items should show up on here faster than other sites that process and index items before making them available.</p><br />\n                <p>All of the code is open source so I recommend those interested to contribute. I used this project to learn new techs and I recommend other enthusiasts to do the same.</p><br />\n                <p>I plan to add support to search for mods but not much else.</p>\n                </h3>\n                <h2>contact : antholord@hotmail.com</h2>\n                <h2>Source code : <a href=\"https://github.com/antholord/poe-livesearch\">Front end</a> | <a href=\"https://github.com/antholord/poe-livesearch-api\">Back end</a></h2>\n\n            </div>\n        </div>\n        );\n\n    }\n}\n\nexport default About;"}, {"instruction": "Create a React functional component that displays a comment with its index, author, date, content, and delete and edit buttons if the user is authenticated and an admin.", "output": "import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Auth from '../users/Auth'\r\nconst ListCommentPage = (props) => (\r\n  <div className='comments'>\r\n    <div className='comment-box'>\r\n      <span className='comment-count'>#{props.index}</span>\r\n      <span>{props.author} says:</span>\r\n      <p>{props.date}</p>\r\n      <p>Content: {props.content}</p>\r\n      {(Auth.isUserAuthenticated() && Auth.isUserAdmin()) ? (\r\n        <div className='list-comments'>\r\n          <Link to={`/gadgets/details/delete/comment/${props.commentId}`} className='btn btn-sm btn-danger btn-block' >Delete</Link>\r\n          <Link to={`/gadgets/details/edit/comment/${props.commentId}`} className='btn btn-sm btn-info btn-block'>Edit</Link>\r\n        </div>\r\n      ) : '' }\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default ListCommentPage\r\n"}, {"instruction": "Generate the code for an email input field component that uses Elemental's `FormInput` component and has both a renderField and renderValue method. The renderField method should have an input type of email and the renderValue method should return either an email address if one is provided or the text \"(not set)\".", "output": "import Field from '../Field';\nimport React from 'react';\nimport { FormInput } from 'elemental';\n\n/*\n\tTODO:\n\t- gravatar\n\t- validate email address\n */\n\nmodule.exports = Field.create({\n\tdisplayName: 'EmailField',\n\trenderField () {\n\t\treturn (\n\t\t\t<FormInput\n\t\t\t\tname={this.props.path}\n\t\t\t\tref=\"focusTarget\"\n\t\t\t\tvalue={this.props.value}\n\t\t\t\tonChange={this.valueChanged}\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\ttype=\"email\"\n\t\t\t/>\n\t\t);\n\t},\n\trenderValue () {\n\t\treturn this.props.value ? (\n\t\t\t<FormInput noedit href={'mailto:' + this.props.value}>{this.props.value}</FormInput>\n\t\t) : (\n\t\t\t<FormInput noedit>(not set)</FormInput>\n\t\t);\n\t},\n});\n"}, {"instruction": "Generate a React component which takes in a media prop of type Immutable Map and displays a preview of the media. The preview should be a background image of the media's preview URL. If the media is a GIF, display a \"GIF\" label. If the media is sensitive, do not display the preview. The component should also include a Permalink to the status that the media belongs to.", "output": "import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Permalink from '../../../components/permalink';\n\nexport default class MediaItem extends ImmutablePureComponent {\n\n  static propTypes = {\n    media: ImmutablePropTypes.map.isRequired,\n  };\n\n  render () {\n    const { media } = this.props;\n    const status = media.get('status');\n\n    let content, style;\n\n    if (media.get('type') === 'gifv') {\n      content = <span className='media-gallery__gifv__label'>GIF</span>;\n    }\n\n    if (!status.get('sensitive')) {\n      style = { backgroundImage: `url(${media.get('preview_url')})` };\n    }\n\n    return (\n      <div className='account-gallery__item'>\n        <Permalink\n          to={`/statuses/${status.get('id')}`}\n          href={status.get('url')}\n          style={style}\n        >\n          {content}\n        </Permalink>\n      </div>\n    );\n  }\n\n}\n"}, {"instruction": "Create a custom React component that wraps the TagCloud component to fix a bug where the default TagCloud component refreshes anytime the page state changes. The custom component should only update when the tags themselves have actually updated.", "output": "// Import dependencies and components.\nimport React from 'react';\nimport {TagCloud} from 'react-tagcloud';\n\n// Create and export component class.\n// I created this custom component because the default TagCloud refreshed anytime the page state changed.\nexport default class CustomTagCloud extends TagCloud {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    // This method was the main purpose/fix. It checks whether the tags themselves have actually updated.\n    shouldComponentUpdate(nextProps) {\n        return this.props.tags !== nextProps.tags;\n    }\n\n    render() {\n        return (\n            <TagCloud\n                tags={this.props.tags}\n                maxSize={this.props.maxSize}\n                minSize={this.props.minSize}\n                colorOptions={this.props.colorOptions}\n                onClick={this.props.onClick}\n            />\n        )\n    }\n\n}"}, {"instruction": "Design a React component that renders an SVG icon representing a speaker notes outline.", "output": "import React from 'react';\nimport SvgIcon from '../../SvgIcon';\n\nconst ActionSpeakerNotes = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 14H6v-2h2v2zm0-3H6V9h2v2zm0-3H6V6h2v2zm7 6h-5v-2h5v2zm3-3h-8V9h8v2zm0-3h-8V6h8v2z\"/>\n  </SvgIcon>\n);\nActionSpeakerNotes.displayName = 'ActionSpeakerNotes';\nActionSpeakerNotes.muiName = 'SvgIcon';\n\nexport default ActionSpeakerNotes;\n"}, {"instruction": "Design a React component for an SVG icon of a pizza takeout box.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet MapsLocalPizza = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 2C8.43 2 5.23 3.54 3.01 6L12 22l8.99-16C18.78 3.55 15.57 2 12 2zM7 7c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm5 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z\"/>\n  </SvgIcon>\n);\nMapsLocalPizza = pure(MapsLocalPizza);\nMapsLocalPizza.displayName = 'MapsLocalPizza';\nMapsLocalPizza.muiName = 'SvgIcon';\n\nexport default MapsLocalPizza;\n"}, {"instruction": "Generate a React component that renders a Material Design icon for vertical top text alignment. The icon should be pure and have a display name of 'EditorVerticalAlignTop'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet EditorVerticalAlignTop = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M8 11h3v10h2V11h3l-4-4-4 4zM4 3v2h16V3H4z\"/>\n  </SvgIcon>\n);\nEditorVerticalAlignTop = pure(EditorVerticalAlignTop);\nEditorVerticalAlignTop.displayName = 'EditorVerticalAlignTop';\nEditorVerticalAlignTop.muiName = 'SvgIcon';\n\nexport default EditorVerticalAlignTop;\n"}, {"instruction": "Design a form with a label and input field. Add a submit button that uses a function to submit the form programmatically.", "output": "import React from 'react'\n\nimport { Label } from 'reactstrap'\n\nimport Form from './components/Form'\nimport Input from './components/Input'\nimport Group from './components/Group'\n\nclass MyForm extends React.Component {\n  handleSubmit = () => {\n    // eslint-disable-next-line\n    console.log('Programmatic submission')\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Form to submit</p>\n        <Form onSubmit={this.handleSubmit} ref={(ref) => { this.form = ref }}>\n          <Group>\n            <Label htmlFor=\"name\">\n              Your name <sup>&lowast;</sup>\n            </Label>\n            <Input\n              name=\"name\"\n              required\n            />\n          </Group>\n        </Form>\n        <div>\n          <p>External button</p>\n          <button onClick={() => this.form.submit()}>Programmatic submission</button>\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default MyForm\n"}, {"instruction": "Create a React application setup with Redux, Thunk, Logger, and Hot Module Replacement, targeting a specific HTML element with the class name \"react-app\".", "output": "import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport { AppContainer } from 'react-hot-loader';\nimport App from './components/App';\nimport rootReducer from './store/root/reducers';\n\nconst storeParams = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nlet middleware;\n\nif (process.env.NODE_ENV !== 'production') {\n  middleware = applyMiddleware(thunk, logger);\n} else {\n  middleware = applyMiddleware(thunk);\n}\n\nconst store = createStore(\n  rootReducer,\n  storeParams,\n  middleware,\n);\n\nconst appProvider = (\n  <AppContainer>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </AppContainer>\n);\n\nReactDOM.render(appProvider, document.querySelector('.react-app'));\n\nif (module.hot) {\n  module.hot.accept('./components/App', () => {\n    ReactDOM.render(\n      <AppContainer>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </AppContainer>, document.querySelector('.app'),\n    );\n  });\n}\n"}, {"instruction": "Generate a React component called NavLink that extends the Link component and adds features such as active and inactive states, custom class names, styles for both active and inactive states, and a custom function to determine if the link is active.", "output": "import React from 'react'\nimport classnames from 'classnames'\nimport connect from '../hoc/connect'\nimport Link from './Link'\n\nconst withLocation = connect(({ state }) => {\n  return {\n    location: state.location\n  }\n})\n\nexport default withLocation(NavLink)\n\nfunction NavLink({\n  isActive: getIsActive,\n  location,\n  className,\n  activeClassName,\n  style,\n  activeStyle,\n  to,\n  ...rest\n}) {\n  let isActive = checkActive(getIsActive, to, location)\n  let finalClassName = classnames(className, isActive && activeClassName)\n  let finalStyle = isActive ? { ...style, ...activeStyle } : style\n  return <Link to={to} className={finalClassName} style={finalStyle} {...rest} />\n}\n\nfunction checkActive(getIsActive, path, location) {\n  return getIsActive\n    ? !!getIsActive(path, location)\n    : path === location.raw\n}\n"}, {"instruction": "Create a set of helper functions for testing React components, including a function to render a component with Redux state, a function to simulate DOM events on a jQuery element, and functions to import and mock dependencies.", "output": "import _$ from 'jquery';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestUtils from 'react-addons-test-utils';\nimport jsdom from 'jsdom';\nimport chai, { expect } from 'chai';\nimport chaiJquery from 'chai-jquery';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from '../src/reducers';\n\nglobal.document = jsdom.jsdom('<!doctype html><html><body></body></html>');\nglobal.window = global.document.defaultView;\nglobal.navigator = global.window.navigator;\nconst $ = _$(window);\n\nchaiJquery(chai, chai.util, $);\n\nfunction renderComponent(ComponentClass, props = {}, state = {}) {\n  const componentInstance =  TestUtils.renderIntoDocument(\n    <Provider store={createStore(reducers, state)}>\n      <ComponentClass {...props} />\n    </Provider>\n  );\n\n  return $(ReactDOM.findDOMNode(componentInstance));\n}\n\n$.fn.simulate = function(eventName, value) {\n  if (value) {\n    this.val(value);\n  }\n  TestUtils.Simulate[eventName](this[0]);\n};\n\nexport {renderComponent, expect};\n"}, {"instruction": "Create a React component that fetches an async collection of postcards and displays them in a grid using a child component, PostcardBox.", "output": "import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport postcardsActions from 'redux/modules/postcards/actions';\nimport PostcardBox from 'components/PostcardBox/PostcardBox';\n\nconst mapStateToProps = (state) => ({\n    postcards: state.postcards\n});\n\nexport class HomeView extends React.Component {\n    constructor (props) {\n        super(props);\n    }\n\n    componentDidMount () {\n        const { dispatch } = this.props;\n        dispatch(postcardsActions.fetch());\n    }\n\n    render () {\n        let { postcards } = this.props;\n\n        return (\n            <div className='container text-center'>\n                <div className='row'>\n                    <div className='col-xs-2 col-xs-offset-5'>\n                        { _.map(postcards.items, postcard => <PostcardBox key={postcard.id} postcard={postcard} />) }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nHomeView.propTypes = {\n    dispatch: React.PropTypes.func.isRequired,\n    postcards: React.PropTypes.object.isRequired\n};\n\nexport default connect(mapStateToProps)(HomeView);\n"}, {"instruction": "Develop a React component named AddPoo that allows users to report poo sightings. The component should feature:\n* A Google Map for location selection\n* An image uploader for capturing a photo of the sighting\n* A submit button to save the sighting", "output": "import React from 'react'\nimport ImgUploader from './img-uploader'\nimport GoogleMap from './google-map'\n\nimport {photo} from '../services/moonridge'\nimport backend from '../services/moonridge'\n\nexport default class AddPoo extends React.Component {\n  constructor(...props) {\n    super(...props)\n    this.state = {}\n  }\n\n  addImage = (imageData) => {\n    this.setState({error: null, image: imageData})\n  }\n  submit = () => {\n    console.log('submit', this)\n    this.setState({inProgress: true})\n    var imgBase64 = this.state.image\n    var image = imgBase64.substr(imgBase64.indexOf(',') + 1)\n    backend.rpc('savePhoto')(image).then(photoId => {\n      const GPS = this.state.loc\n      var toCreate = {\n        loc: [GPS.lat, GPS.lng],\n        photoIds: [photoId],\n        type: 'poo'\n      }\n      return photo.create(toCreate).then(created => {\n        location.hash = `/poo/${created._id}`\n      })\n    }, err => {\n      this.setState({error: err})\n      console.log('err', err)\n    })\n  }\n  addLoc = (GPS) => {\n    this.setState({loc: GPS})\n  }\n  render() {\n\n    var submitBtn\n    var state = this.state\n    if (state.loc && state.image && !state.inProgress) {\n      submitBtn = <div className='post button ok clickable' onClick={this.submit}>\n        <span className='glyphicon glyphicon-ok'/>\n      </div>\n    }\n    var alert\n    if (state.error) {\n      alert = <div className='alert'>\n        {state.error}\n      </div>\n    }\n    var map\n    if (state.loc) {\n      map = <GoogleMap center={state.loc} zoom={17} containerClass='small-map'></GoogleMap>\n    }\n    return <div className='container add-form'>\n      <div className='post item'>\n        {map}\n      </div>\n      <ImgUploader onGPSRead={this.addLoc} onImageRead={this.addImage}\n                   icon={'img/poo-plain.svg'}/>\n      {submitBtn}\n      {alert}\n    </div>\n  }\n}\n\nAddPoo.defaultProps = {\n  zoom: 9\n}\n"}, {"instruction": "Generate the code for a React component that renders an \"Editor Border Outer\" icon for Material Design. The icon should be a square with a border around it, with two small squares inside.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet EditorBorderOuter = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M13 7h-2v2h2V7zm0 4h-2v2h2v-2zm4 0h-2v2h2v-2zM3 3v18h18V3H3zm16 16H5V5h14v14zm-6-4h-2v2h2v-2zm-4-4H7v2h2v-2z\"/>\n  </SvgIcon>\n);\nEditorBorderOuter = pure(EditorBorderOuter);\nEditorBorderOuter.displayName = 'EditorBorderOuter';\nEditorBorderOuter.muiName = 'SvgIcon';\n\nexport default EditorBorderOuter;\n"}, {"instruction": "Create a React function component that displays a player bar with the player's name and current position. The position should be clickable and open a modal to select a new position.", "output": "// @flow\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport type { Dispatch } from 'redux';\n\nimport { updateModalType } from '../redux/actions';\n\nimport type { Action } from '../redux/actions';\nimport type { Position } from '../types/domain';\nimport type { PlayerPageState } from '../types/state';\n\ntype Props = {\n  selectedPlayerName: string,\n  selectedPosition: Position,\n  openPositionSelector: () => void,\n};\n\nconst PlayerBar = ({ selectedPlayerName, selectedPosition, openPositionSelector }: Props) => (\n  <div className=\"row fixed-top p-2 pl-3 pr-3 mb-2 playerbar\">\n    <div className=\"col-12 d-flex ml-auto mr-auto col-lg-10\">\n      <div className=\"mb-0 mt-1 h3 align-bottom playerbar-name\">\n        {selectedPlayerName}\n      </div>\n      <div className=\"ml-auto\">\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={() => openPositionSelector()}\n          style={{\n            backgroundColor: selectedPosition.color,\n            color: '#fff',\n          }}\n        >\n          {selectedPosition.abbreviation}\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default connect(\n  (state: PlayerPageState) => ({\n    selectedPlayerName: state.players[state.selectedPlayerId].name,\n    selectedPosition: state.positions[state.selectedPositionId],\n  }),\n  (dispatch: Dispatch<Action>) => ({\n    openPositionSelector: () => dispatch(updateModalType('PositionSelector')),\n  }),\n)(PlayerBar);\n"}, {"instruction": "Design a layout system in React using CSS Modules that includes HorizontalLayout, VerticalLayout, Row, and Column components. The HorizontalLayout and VerticalLayout should take a `equalWidths` prop that, when true, will make all of the children have equal widths. The Row component should take a `gutter` prop that will add space between the children. The Column and Row components should take a `className` prop for adding custom classes.", "output": "import React from 'react'\n\nimport './layout.less'\n\nclass HorizontalLayout extends React.Component {\n  static get defaultProps() {return{\n    equalWidths: false,\n    className: ''\n  }}\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let className = \"horizontal-layout \" + this.props.className\n    if (this.props.equalWidths) {\n      className = className + \" equal\" + this.props.children.length\n    }\n    return (\n      <div className={className}>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nclass Column extends React.Component {\n  static get defaultProps() {return{\n    className: ''\n  }}\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let className = \"layout-column \" + this.props.className\n    return (\n      <div className={className}>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nclass VerticalLayout extends React.Component {\n  static get defaultProps() {return{\n    equalWidths: false,\n    className: ''\n  }}\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let className = \"vertical-layout \" + this.props.className\n    if (this.props.equalWidths) {\n      className = className + \" equal\" + this.props.children.length\n    }\n    return (\n      <div className={className}>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nclass Row extends React.Component {\n  static get defaultProps() {return{\n    className: '',\n    size: 'expand',\n    gutter: ''\n  }}\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    let style = {}\n    if (this.props.gutter) {\n      style = {marginBottom: this.props.gutter}\n    }\n    let className = [\"layout-row\", this.props.className, this.props.size].join(\" \")\n    return (\n      <div style={style} className={className}>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport {HorizontalLayout, VerticalLayout, Column, Row}"}, {"instruction": "Create a React component representing a login page. The page should have a login button which, when clicked, sets a token in local storage and redirects the user to the home page.", "output": "import React from 'react';\nimport {Btn} from '../../components/Controls/Button/Button';\nimport History from '../../routes/History';\nclass Login extends React.Component {\n\n    // this method is only to trigger route guards , remove and use your own logic\n    handleLogin = () => {\n        localStorage.setItem('token','token');\n        History.push('/')\n    }\n\n    render(){\n        return(\n            <div className=\"container my-5\">\n                <h1>Login Page</h1>\n                <Btn text='Login' handleClick={this.handleLogin}/>\n            </div>\n        )\n    }\n}\n\n\nexport default Login;"}, {"instruction": "Create a React.js application that can read NASA FITS images through an API and display them on a page.", "output": "// @flow\nimport React, { Component } from 'react';\nimport { Link } from 'react-router';\nimport s from './ItemThumbnail.css';\n\n\n\nexport default class ItemThumbnail extends Component {\n  static contextTypes = {\n    router: React.PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    const { FITS } = window.astro\n    const { item } = this.props\n\n    new FITS(item.path, response => {\n      console.log(response)\n      const { hdus } = response\n\n      const FIST_DATA = hdus[0]\n\n      const bitpix = FIST_DATA.header.get('BITPIX')\n      const bzero = FIST_DATA.header.get('BZERO')\n      const bscale = FIST_DATA.header.get('BSCALE')\n      const { buffer } = FIST_DATA.data\n\n      console.log(\n        FIST_DATA,\n        FIST_DATA.header.get('BITPIX'),\n        FIST_DATA.header.get('BZERO'),\n        FIST_DATA.header.get('BSCALE'),\n        FIST_DATA.data._getFrame(buffer, bitpix, bzero, bscale)\n      )\n\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className={s.container}>\n          <h2>Solar Data Application</h2>\n        </div>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component that displays a vertical menu, with the first and third menu items being simple text labels and the second menu item being a dropdown with five options and a divider plus two additional options.", "output": "import React from 'react'\nimport { Dropdown, Menu } from 'semantic-ui-react'\n\nconst DropdownExamplePointingTwo = () => (\n  <Menu vertical>\n    <Menu.Item>\n      Home\n    </Menu.Item>\n    <Dropdown text='Messages' pointing='left' className='link item'>\n      <Dropdown.Menu>\n        <Dropdown.Item>Inbox</Dropdown.Item>\n        <Dropdown.Item>Starred</Dropdown.Item>\n        <Dropdown.Item>Sent Mail</Dropdown.Item>\n        <Dropdown.Item>Drafts (143)</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item>Spam (1009)</Dropdown.Item>\n        <Dropdown.Item>Trash</Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n    <Menu.Item>\n      Browse\n    </Menu.Item>\n    <Menu.Item>\n      Help\n    </Menu.Item>\n  </Menu>\n)\n\nexport default DropdownExamplePointingTwo\n"}, {"instruction": "Create a React component that displays the Play For Work icon from the Material Design icon set. The component should be pure and have the display name \"ActionPlayForWork\".", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionPlayForWork = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"/>\n  </SvgIcon>\n);\nActionPlayForWork = pure(ActionPlayForWork);\nActionPlayForWork.displayName = 'ActionPlayForWork';\nActionPlayForWork.muiName = 'SvgIcon';\n\nexport default ActionPlayForWork;\n"}, {"instruction": "Create a React log in form that takes a username and password, with message notifications for error conditions.\nThe form should use the provided 'redux-form' package and the CSS modules provided in the 'style' variable.\nThe form should use Font Awesome icons for the username and password fields, and contain a submit button labelled 'sign in'.\nAdditionally, the form should include a link to a sign up page if there are any errors.", "output": "import React from 'react';\nimport classNames from 'classnames';\nimport { Field } from 'redux-form/immutable';\nimport { Link } from 'react-router';\nimport FaUser from 'react-icons/lib/fa/user';\nimport FaLock from 'react-icons/lib/fa/lock';\nimport Button from '../Common/Button';\nimport ErrorMessages from '../Common/ErrorMessages';\nimport { injectProps } from '../../helpers/decorators';\n\nimport style from './LogIn.css';\n\nfunction Form({ hasErrors, handleSubmit }) {\n  return (\n    <form onSubmit={handleSubmit}>\n\n      <div className={style.fieldArea}>\n        <label className={style.label}>\n          <FaUser className=\"icon\"/>\n          <Field\n            className=\"input\"\n            name=\"username\"\n            component=\"input\"\n            placeholder=\"Username\"/>\n        </label>\n\n        <label className={style.label}>\n          <FaLock className=\"icon\"/>\n          <Field\n            className=\"input\"\n            name=\"password\"\n            component=\"input\"\n            type=\"password\"\n            placeholder=\"Password\"/>\n        </label>\n      </div>\n\n      <Button\n        className={classNames({ error: hasErrors })}\n        type=\"submit\">\n        Sign In\n      </Button>\n    </form>\n  );\n}\n\nexport default class LogIn extends React.Component {\n\n  @injectProps\n  render({ errors, handleSubmit }) {\n    const hasErrors = !!(errors && errors.size);\n    let errorMessages = hasErrors ?\n      <ErrorMessages errors={errors}/> :\n      null;\n\n    return (\n      <div className={style.main}>\n        {errorMessages}\n        <Form\n          hasErrors={hasErrors}\n          handleSubmit={handleSubmit}/>\n        <div className={style.links}>\n          <Link className=\"link\" to=\"/signup\">Sign up</Link>\n        </div>\n      </div>\n    );\n  }\n\n}\n"}, {"instruction": "Describe the layout for a React component that displays an error message when a user fails to sign in using a social account.", "output": "/*\n * Copyright (C) Pootle contributors.\n *\n * This file is a part of the Pootle project. It is distributed under the GPL3\n * or later license. See the LICENSE file for a copy of the license and the\n * AUTHORS file for copyright and authorship information.\n */\n\n'use strict';\n\nimport React from 'react';\nimport { PureRenderMixin } from 'react/addons';\n\nimport AuthContent from './AuthContent';\n\n\nlet SocialAuthError = React.createClass({\n  mixins: [PureRenderMixin],\n\n  propTypes: {\n    socialError: React.PropTypes.object,\n  },\n\n\n  /* Layout */\n\n  render() {\n    let errorMsg;\n    if (this.props.socialError) {\n      errorMsg = interpolate(\n        gettext('An error occurred while attempting to sign in via %s.'),\n        [this.props.socialError.provider]\n      );\n    } else {\n      errorMsg = gettext('An error occurred while attempting to sign in via your social account.');\n    }\n\n    let errorFace = {\n      fontSize: '400%',\n      marginBottom: '0.5em',\n    };\n    return (\n      <AuthContent>\n        <h2 style={errorFace}>{`{\u00f5_\u00f5}`}</h2>\n        <p>{errorMsg}</p>\n      {this.props.socialError &&\n        <p>{`${this.props.socialError.exception.name}: ${this.props.socialError.exception.msg} `}</p>\n      }\n      {this.props.socialError &&\n        <a href={this.props.socialError.retry_url}>\n          {gettext('Try again')}\n        </a>\n      }\n      </AuthContent>\n    );\n  }\n\n});\n\n\nexport default SocialAuthError;\n"}, {"instruction": "Create a React application with routing using the HashRouter and render an App component as the root component.", "output": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history';\n\nimport {\n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport App from './containers/App/App.jsx';\n\nimport './assets/css/bootstrap.min.css';\nimport './assets/css/animate.min.css';\nimport './assets/sass/light-bootstrap-dashboard.css';\nimport './assets/css/demo.css';\nimport './assets/css/pe-icon-7-stroke.css';\n\n\n\nconst history = createBrowserHistory();\n\nReactDOM.render((\n    <HashRouter history={history}>\n        <Switch>\n            <Route path=\"/\" name=\"Home\" component={App}/>\n        </Switch>\n    </HashRouter>\n),document.getElementById('root'));\n"}, {"instruction": "Create a React component called BannerNavigationWithContent that renders a banner navigation bar with a list of links. The component should have the following props:\n\n- className: The CSS class name to be placed on the wrapping element.\n- pageWidth: Specify the max-width on desktop devices.\n- search: Allows to disable the search input.\n- searchOnChange: A onChange Function for the search.", "output": "import PropTypes from 'prop-types';\nimport React from 'react';\nimport { BannerNavigation, BannerNavigationItem } from './BannerNavigation';\nimport Search from '../Search';\nimport Link from '../Link';\n\nconst linkList = [\n  { name: 'WFPgo', link: 'https://go.wfp.org/' },\n  { name: 'Communities', link: 'https://communities.wfp.org/' },\n  { name: 'Manuals', link: 'https://manuals.wfp.org/' },\n  { name: 'GoDocs', link: 'https://godocs.wfp.org/' },\n  { name: 'WeLearn', link: 'https://welearn.wfp.org/' },\n  { name: 'Dashboard', link: 'https://dashboard.wfp.org/' },\n  { name: 'OPweb', link: 'https://opweb.wfp.org/' },\n  { name: 'Self-Service', link: 'https://selfservice.go.wfp.org/' },\n  { name: 'UN Booking Hub', link: 'https://humanitarianbooking.wfp.org/' },\n  { name: 'WFP.org', link: 'https://wfp.org/' },\n];\n\nconst BannerNavigationWithContent = ({ searchOnChange, search, ...other }) => (\n  <BannerNavigation {...other}>\n    {linkList.map((e) => (\n      <BannerNavigationItem>\n        <Link href={e.link} target=\"_blank\">\n          {e.name}\n        </Link>\n      </BannerNavigationItem>\n    ))}\n  </BannerNavigation>\n);\n\nBannerNavigationWithContent.propTypes = {\n  /**\n   * The CSS class name to be placed on the wrapping element.\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the max-width on desktop devices (same as \\`Wrapper\\` component)\n   */\n  pageWidth: PropTypes.oneOf(['sm', 'md', 'lg', 'full']),\n  /**\n   * Allows to disable the search input\n   */\n  search: PropTypes.bool,\n  /**\n   * A onChange Function for the search\n   */\n  searchOnChange: PropTypes.func,\n};\n\nBannerNavigationWithContent.defaultProps = {\n  search: false,\n  searchOnChange: () => {},\n};\n\nexport { BannerNavigationWithContent };\n"}, {"instruction": "Create a React component called Toggle that takes in three props: values, value, and messages. \nThe values prop should be an array of strings representing the options for the toggle, the value prop should be the currently selected value, and the messages prop should be an object containing the messages to display for each option.\n\nThe Toggle component should render a select element with the options specified by the values prop. The selected option should be the one specified by the value prop. When the user selects a new option, the onToggle prop should be called with the new value.", "output": "/**\n*\n* LocaleToggle\n*\n*/\n\nimport React from 'react';\n\nimport Select from './Select';\nimport ToggleOption from '../ToggleOption';\n\nfunction Toggle(props) {\n  let content = (<option>--</option>);\n\n  // If we have items, render them\n  if (props.values) {\n    content = props.values.map((value) => (\n      <ToggleOption key={value} value={value} message={props.messages[value]} />\n    ));\n  }\n\n  return (\n    <Select value={props.value} onChange={props.onToggle}>\n      {content}\n    </Select>\n  );\n}\n\nToggle.propTypes = {\n  onToggle: React.PropTypes.func,\n  values: React.PropTypes.array,\n  value: React.PropTypes.string,\n  messages: React.PropTypes.object,\n};\n\nexport default Toggle;\n"}, {"instruction": "Generate a React component called ActionZoomIn that renders an SVG icon representing the zoom in action. The icon should be a magnifying glass with a plus sign inside. The component should be pure and have a display name of 'ActionZoomIn'.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet ActionZoomIn = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zm2.5-4h-2v2H9v-2H7V9h2V7h1v2h2v1z\"/>\n  </SvgIcon>\n);\nActionZoomIn = pure(ActionZoomIn);\nActionZoomIn.displayName = 'ActionZoomIn';\nActionZoomIn.muiName = 'SvgIcon';\n\nexport default ActionZoomIn;\n"}, {"instruction": "Create a React app with basic routing, redux store with Saga middleware, and a layout component for managing sub-routes. Include the initial entry point and necessary imports.", "output": "import 'babel-polyfill'; // for redux-saga\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Router,\n  Route,\n  hashHistory\n} from 'react-router';\n\nimport {\n  createStore,\n  applyMiddleware,\n  compose\n} from 'redux';\n\nimport reducer from './reducer';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\n// our components\nimport Layout from './components/layout';\nimport { HomeContainer } from './components/home';\nimport { DetailContainer } from './components/detail';\nimport { AddContainer } from './components/add';\n// app css\nimport '../dist/css/style.css';\n\n// Filestack API requires to set a key\nfilepicker.setKey(\"YOUR_API_KEY\");\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducer,\n  compose(\n    applyMiddleware(sagaMiddleware),\n    window.devToolsExtension ? window.devToolsExtension() : f => f // connect to redux devtools\n  )\n);\nsagaMiddleware.run(rootSaga);\n\n// the 3 paths of the app\nconst routes = <Route component={Layout}>\n  <Route path=\"/\" component={HomeContainer} />\n  <Route path=\"/detail/:id\" component={DetailContainer} />\n  <Route path=\"/add\" component={AddContainer} />\n</Route>;\n\n// add provider as first component and connect the store to it\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Router history={hashHistory}>{routes}</Router>\n\t</Provider>,\n\tdocument.getElementById('app')\n);\n"}, {"instruction": "Create a React component that displays a section with activity updates. The section should be hidden initially and only become visible when an activity event is triggered. The activity section should be able to display user profiles or group profiles based on the type of activity.", "output": "import React from 'react';\nimport classNames from 'classnames';\nimport { ActivityTypes } from 'constants/ActorAppConstants';\n\n//import ActivityActionCreators from 'actions/ActivityActionCreators';\n\nimport ActivityStore from 'stores/ActivityStore';\n\nimport UserProfile from 'components/activity/UserProfile.react';\nimport GroupProfile from 'components/activity/GroupProfile.react';\n\nconst getStateFromStores = () => {\n  return {\n    activity: ActivityStore.getActivity(),\n    isOpen: ActivityStore.isOpen()\n  };\n};\n\nclass ActivitySection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = getStateFromStores();\n\n    ActivityStore.addChangeListener(this.onChange);\n  }\n\n  componentWillUnmount() {\n    ActivityStore.removeChangeListener(this.onChange);\n  }\n\n  render() {\n    const activity = this.state.activity;\n\n    if (activity !== null) {\n      const activityClassName = classNames('activity', {\n        'activity--shown': this.state.isOpen\n      });\n      let activityBody;\n\n      switch (activity.type) {\n        case ActivityTypes.USER_PROFILE:\n          activityBody = <UserProfile user={activity.user}/>;\n          break;\n        case ActivityTypes.GROUP_PROFILE:\n          activityBody = <GroupProfile group={activity.group}/>;\n          break;\n        default:\n      }\n\n      return (\n        <section className={activityClassName}>\n          {activityBody}\n        </section>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  onChange = () => {\n    this.setState(getStateFromStores());\n  };\n}\n\nexport default ActivitySection;\n"}, {"instruction": "Generate the code snippet for a React Native component that displays a welcome message and instructions on how to get started. The component should have a container with styles for flex, justification, alignment, and background color. It should also include text elements for the welcome message and instructions. The component should be registered with AppRegistry.", "output": "/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n\nexport default class ScrollableTabView extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>\n          Welcome to React Native!\n        </Text>\n        <Text style={styles.instructions}>\n          To get started, edit index.android.js\n        </Text>\n        <Text style={styles.instructions}>\n          Double tap R on your keyboard to reload,{'\\n'}\n          Shake or press menu button for dev menu\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n\nAppRegistry.registerComponent('ScrollableTabView', () => ScrollableTabView);\n"}, {"instruction": "Create a React class component with these properties and methods:\n- name: NodeInputListItem\n- a constructor that sets the initial state to `{ hover: false }`\n- method `onMouseUp` that calls `this.props.onMouseUp(this.props.index)`\n- method `onMouseOver` that sets the state `hover` to `true`\n- method `onMouseOut` that sets the state `hover` to `false`\n- method `noop` that stops event propagation and prevents the default behavior\n- a render method that returns an `li` element with an `a` tag inside, containing an `<i>` element with the class name `'fa fa-circle-o'` or `'fa fa-circle-o hover'` based on the state of `hover`", "output": "import React from 'react';\n\nexport default class NodeInputListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hover: false\n    };\n  }\n\n  onMouseUp(e) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    this.props.onMouseUp(this.props.index);\n  }\n\n  onMouseOver() {\n    this.setState({ hover: true });\n  }\n\n  onMouseOut() {\n    this.setState({ hover: false });\n  }\n\n  noop(e) {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  render() {\n    const { name } = this.props.item;\n    const { hover } = this.state;\n\n    return (\n      <li>\n        <a\n          onClick={e => this.noop(e)}\n          onMouseUp={e => this.onMouseUp(e)}\n          href=\"#\"\n        >\n          <i\n            className={hover ? 'fa fa-circle-o hover' : 'fa fa-circle-o'}\n            onMouseOver={() => {\n              this.onMouseOver();\n            }}\n            onMouseOut={() => {\n              this.onMouseOut();\n            }}\n          />\n          {name}\n        </a>\n      </li>\n    );\n  }\n}\n"}, {"instruction": "Generate the React component code snippet for a bookshelf that displays a collection of books, with an optional title. Include styling and event handling for when the shelf is clicked.", "output": "import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport SectionHeader from 'components/common/typography/SectionHeader';\n\nimport BookGrid from './BookGrid';\n\n/**\n * Render a single bookshelf containing a collection of books\n * @param  {Array}    options.booksList     The list of books\n * @param  {Function} options.onShelfChange The callback for shelf change event\n * @param  {string}   options.title         The title of the bookshelf\n * @param  {Object}   options               The props for the BookShelf component\n * @return {JSX}\n */\nconst BookShelf = ({ booksList, onShelfChange, title, }) => (\n  <div className=\"bookshelf\">\n    {\n      title &&\n      <SectionHeader\n        className=\"bookshelf-title\"\n        title={title}\n      />\n    }\n    <div className=\"bookshelf-books\">\n      {\n        booksList &&\n        <BookGrid\n          booksList={booksList}\n          onShelfChange={onShelfChange}\n          viewDetailsLink\n        />\n      }\n    </div>\n  </div>\n);\n\nBookShelf.propTypes = {\n  booksList: PropTypes.array.isRequired,\n  onShelfChange: PropTypes.func,\n  title: PropTypes.string.isRequired,\n};\n\nBookShelf.defaultProps = {\n  onShelfChange: () => {},\n};\n\nexport default BookShelf;\n"}, {"instruction": "Create a component that handles drag and drop file upload. When the component is active, it should display a drop zone with a title. The drop zone should have a background that scales up when the component is active and fades in and out. When the escape key is pressed while the component is active, it should close.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport Motion from '../../ui/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\nimport { FormattedMessage } from 'react-intl';\n\nexport default class UploadArea extends React.PureComponent {\n\n  static propTypes = {\n    active: PropTypes.bool,\n    onClose: PropTypes.func,\n  };\n\n  handleKeyUp = (e) => {\n    const keyCode = e.keyCode;\n    if (this.props.active) {\n      switch(keyCode) {\n      case 27:\n        e.preventDefault();\n        e.stopPropagation();\n        this.props.onClose();\n        break;\n      }\n    }\n  }\n\n  componentDidMount () {\n    window.addEventListener('keyup', this.handleKeyUp, false);\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('keyup', this.handleKeyUp);\n  }\n\n  render () {\n    const { active } = this.props;\n\n    return (\n      <Motion defaultStyle={{ backgroundOpacity: 0, backgroundScale: 0.95 }} style={{ backgroundOpacity: spring(active ? 1 : 0, { stiffness: 150, damping: 15 }), backgroundScale: spring(active ? 1 : 0.95, { stiffness: 200, damping: 3 }) }}>\n        {({ backgroundOpacity, backgroundScale }) => (\n          <div className='upload-area' style={{ visibility: active ? 'visible' : 'hidden', opacity: backgroundOpacity }}>\n            <div className='upload-area__drop'>\n              <div className='upload-area__background' style={{ transform: `scale(${backgroundScale})` }} />\n              <div className='upload-area__content'><FormattedMessage id='upload_area.title' defaultMessage='Drag & drop to upload' /></div>\n            </div>\n          </div>\n        )}\n      </Motion>\n    );\n  }\n\n}\n"}, {"instruction": "Create a DatePicker component that displays an inline date picker, rather than as a modal dialog. There should be one date picker with a portrait orientation and one with a landscape orientation.", "output": "import React from 'react';\nimport DatePicker from 'material-ui/DatePicker';\n\n/**\n * Inline Date Pickers are displayed below the input, rather than as a modal dialog.\n */\nconst DatePickerExampleInline = () => (\n  <div>\n    <DatePicker hintText=\"Portrait Inline Dialog\" container=\"inline\" />\n    <DatePicker hintText=\"Landscape Inline Dialog\" container=\"inline\" mode=\"landscape\" />\n  </div>\n);\n\nexport default DatePickerExampleInline;\n"}, {"instruction": "Generate a React component that renders an anchor tag with a specified 'to' prop and an 'onClick' event handler. Ensure the 'onClick' handler prevents the default action and pushes the 'to' prop value to the history stack. Allow for custom onClick behavior and gracefully handle modified events (metaKey, altKey, ctrlKey, shiftKey) and non-left-click events.", "output": "/**\n * React Starter Kit (https://www.reactstarterkit.com/)\n *\n * Copyright \u00a9 2014-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport history from '../../history';\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nclass Link extends React.Component {\n  static propTypes = {\n    to: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n    onClick: PropTypes.func,\n  };\n\n  static defaultProps = {\n    onClick: null,\n  };\n\n  handleClick = event => {\n    if (this.props.onClick) {\n      this.props.onClick(event);\n    }\n\n    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n      return;\n    }\n\n    if (event.defaultPrevented === true) {\n      return;\n    }\n\n    event.preventDefault();\n    history.push(this.props.to);\n  };\n\n  render() {\n    const { to, children, ...props } = this.props;\n    return (\n      <a href={to} {...props} onClick={this.handleClick}>\n        {children}\n      </a>\n    );\n  }\n}\n\nexport default Link;\n"}, {"instruction": "Create a React component using Material UI's SvgIcon component that renders an SVG icon of a battery charging at 60%.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet DeviceBatteryCharging60 = (props) => (\n  <SvgIcon {...props}>\n    <path fillOpacity=\".3\" d=\"M15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V11h3.87L13 7v4h4V5.33C17 4.6 16.4 4 15.67 4z\"/><path d=\"M13 12.5h2L11 20v-5.5H9l1.87-3.5H7v9.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V11h-4v1.5z\"/>\n  </SvgIcon>\n);\nDeviceBatteryCharging60 = pure(DeviceBatteryCharging60);\nDeviceBatteryCharging60.displayName = 'DeviceBatteryCharging60';\nDeviceBatteryCharging60.muiName = 'SvgIcon';\n\nexport default DeviceBatteryCharging60;\n"}, {"instruction": "Create a simple React component that displays a message stating that the music library is empty and includes a button that, when clicked, triggers a function to search for songs.", "output": "import PropTypes from 'prop-types'\nimport React from 'react'\n\nexport default function FindSongs (props) {\n  return (\n    <div className=\"text-center\">\n      <h1>Your library is empty!</h1>\n      <button className=\"btn-default\" onClick={props.showSettings}>\n        Start looking for songs\n      </button>\n    </div>\n  )\n}\n\nFindSongs.propTypes = {\n  showSettings: PropTypes.func.isRequired\n}\n"}, {"instruction": "Create an SVG icon that uses the Material Design icon set. The icon should represent a person with a plus sign on their chest. The icon should be 16x16 pixels in size and have a black fill.", "output": "import React from 'react';\n\nexport default ({ ...props }) => {\n    return (\n        <svg {...props} width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n            <g>\n                <path\n                    d=\"M14.39,2.31H1.61c-0.83,0-1.5,0.68-1.5,1.5v8.41c0,0.83,0.67,1.5,1.5,1.5h12.78c0.49,0,0.93-0.23,1.19-0.6\n                    c0.08-0.09,0.14-0.19,0.18-0.3c0.09-0.18,0.13-0.39,0.13-0.6V3.81C15.89,2.99,15.22,2.31,14.39,2.31z M1.11,3.81\n                    c0-0.27,0.22-0.5,0.5-0.5h12.78c0.28,0,0.5,0.23,0.5,0.5v7.96l-4.01-4.02c-0.14-0.14-0.36-0.15-0.51-0.02L7.96,9.77L5.25,7.08\n                    C5.12,6.95,4.91,6.93,4.76,7.04L1.11,9.8V3.81z M1.61,12.72c-0.28,0-0.5-0.23-0.5-0.5v-1.47l3.84-2.91l2.7,2.68l2.21,2.2H1.61z\n                    M14.39,12.72h-3.46L8.49,10.3l2.1-1.78l4.09,4.1C14.6,12.68,14.5,12.72,14.39,12.72z\"\n                />\n            </g>\n            <g>\n                <path d=\"M15.76,12.82c0,0.09-0.03,0.18-0.1,0.25c-0.02,0.02-0.05,0.04-0.08,0.05C15.66,13.03,15.72,12.93,15.76,12.82z\" />\n            </g>\n            <g>\n                <path\n                    d=\"M12.718,7.153c-0.872,0-1.582-0.71-1.582-1.583c0-0.873,0.71-1.583,1.582-1.583c0.873,0,1.583,0.71,1.583,1.583\n                    C14.301,6.443,13.591,7.153,12.718,7.153z M12.718,4.738c-0.459,0-0.832,0.374-0.832,0.833c0,0.459,0.373,0.833,0.832,0.833\n                    s0.833-0.374,0.833-0.833C13.551,5.111,13.177,4.738,12.718,4.738z\"\n                />\n            </g>\n        </svg>\n    );\n};\n"}, {"instruction": "Create a React component that renders a header for a post. The header should include the post's title, subtitle, a link to the author's profile, and the date and time the post was published.", "output": "import React, { Component } from 'react';\nimport { postsData } from '../sample-data.js';\n\nclass PostHeader extends Component {\n\n  state = {\n    posts: postsData\n  }\n\n  render() {\n\n    return (\n      <header className=\"intro-header post\">\n          <div className=\"container\">\n              <div className=\"row\">\n                  <div className=\"col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1\">\n                      <div className=\"post-heading\">\n                          <h1>{this.state.posts[0].title}</h1>\n                          <h2 className=\"subheading\">{this.state.posts[0].subtitle}</h2>\n                          <span className=\"meta\">Posted by <a href=\"#\">{this.state.posts[0].username}</a> on {this.state.posts[0].datetime}</span>\n                      </div>\n                  </div>\n              </div>\n          </div>\n      </header>\n    );\n  }\n}\n\nexport default PostHeader;\n"}, {"instruction": "Create a React application using isomorphic-fetch, es6-promise, react, react-dom, react-router, and history.", "output": "require('isomorphic-fetch');\nrequire('es6-promise').polyfill();\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Router } from 'react-router';\nimport { createHistory } from 'history';\nimport routes from '../routes';\n\nconst history = createHistory();\n\nrender(\n  <Router children={routes} history={history} />,\n  document.getElementById('app')\n);\n"}, {"instruction": "Create a Storybook story for a React component named FlexCenter that renders a pink box with text inside and a background color of \"papayawhip.\" The box should be 200 pixels wide and 100 pixels tall. The text inside the box should read \"2:1.\"", "output": "/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport FlexCenter from './FlexCenter';\nimport { specs, urls } from './LiveView.stories';\nimport { ignoredRegions } from './IgnoredRegions.stories';\n\nexport { specs, urls, ignoredRegions };\n\nstoriesOf('FlexCenter', module).add('2:1', () => (\n  <FlexCenter width={200} height={100} style={{ background: 'papayawhip' }}>\n    <div style={{ padding: 30, background: 'hotpink' }}>2:1</div>\n  </FlexCenter>\n));\n"}, {"instruction": "Create a React component that uses the Select component to display a list of customer support options. The options should include Basic, Premium, and Pro. Pro should be disabled and should have a link to an upgrade page. The component should also include custom render methods for the options and value.", "output": "import React from 'react';\nimport Select from 'react-select';\n\nvar DisabledUpsellOptions = React.createClass({\n\tdisplayName: 'DisabledUpsellOptions',\n\tpropTypes: {\n\t\tlabel: React.PropTypes.string,\n\t},\n\tgetInitialState () {\n\t\treturn {};\n\t},\n\tsetValue (value) {\n\t\tthis.setState({ value });\n\t\tconsole.log('Support level selected:', value.label);\n\t},\n\trenderLink: function() {\n\t\treturn <a style={{ marginLeft: 5 }} href=\"/upgrade\" target=\"_blank\">Upgrade here!</a>;\n\t},\n\trenderOption: function(option) {\n\t\treturn <span style={{ color: option.color }}>{option.label} {option.link}</span>;\n\t},\n\trenderValue: function(option) {\n\t\treturn <strong style={{ color: option.color }}>{option.label}</strong>;\n\t},\n\trender: function() {\n\t\tvar options = [\n\t\t\t{ label: 'Basic customer support', value: 'basic', color: '#E31864' },\n\t\t\t{ label: 'Premium customer support', value: 'premium', color: '#6216A3' },\n\t\t\t{ label: 'Pro customer support', value: 'pro', disabled: true, link: this.renderLink() },\n\t\t];\n\t\treturn (\n\t\t\t<div className=\"section\">\n\t\t\t\t<h3 className=\"section-heading\">{this.props.label}</h3>\n\t\t\t\t<Select\n\t\t\t\t\tplaceholder=\"Select your support level\"\n\t\t\t\t\toptions={options}\n\t\t\t\t\toptionRenderer={this.renderOption}\n\t\t\t\t\tonChange={this.setValue}\n\t\t\t\t\tvalue={this.state.value}\n\t\t\t\t\tvalueRenderer={this.renderValue}\n\t\t\t\t\t/>\n\t\t\t\t<div className=\"hint\">This demonstates custom render methods and links in disabled options</div>\n\t\t\t</div>\n\t\t);\n\t}\n});\nmodule.exports = DisabledUpsellOptions;\n"}, {"instruction": "Generate React code for a component called MenuAside that renders a menu with multiple buttons. Each button should have a unique index, name, icon (e.g., glyphicon-th-list), and Chinese label. The component should also have a prop called \"menuAside\" that contains a \"buttonActiveIndex\" property to indicate the currently active button.", "output": "import React, { Component } from 'react';\n\nclass MenuAside extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  isActiveButton(index) {\n    if (index === this.props.menuAside.buttonActiveIndex) {\n      return 'item-active';\n    }\n    return '';\n  }\n\n  render() {\n    const lists = [\n      {\n        index: 0,\n        name: 'all',\n        icon: 'glyphicon-th-list',\n        'chinese': '\u5168\u90e8',\n      },\n      {\n        index: 1,\n        name: 'image',\n        icon: 'glyphicon-picture',\n        'chinese': '\u56fe\u7247',\n      },\n      {\n        index: 2,\n        name: 'doc',\n        icon: 'glyphicon-file',\n        'chinese': '\u6587\u6863',\n      },\n      {\n        index: 3,\n        name: 'video',\n        icon: 'glyphicon-facetime-video',\n        'chinese': '\u89c6\u9891',\n      },\n      {\n        index: 4,\n        name: 'music',\n        icon: 'glyphicon-music',\n        'chinese': '\u97f3\u4e50',\n      },\n      {\n        index: 5,\n        name: 'trash',\n        icon: 'glyphicon-trash',\n        'chinese': '\u56de\u6536\u7ad9',\n      }\n    ];\n\n    const menuLists = lists.map((obj) =>\n      <button\n        key={obj.name}\n        name={obj.name}\n        type=\"button\"\n        className={'list-group-item list-item ' + this.isActiveButton(obj.index)}\n        onClick={this.props.onMenuAsideButtonClick}>\n          <span className={'glyphicon ' + obj.icon} aria-hidden=\"true\"></span>\n          {obj.chinese}\n        </button>\n    );\n\n    return (\n      <div className=\"menu-aside-wrapper\">\n        <div className=\"list-group menu-list\" data-active-index={this.props.menuAside.buttonActiveIndex}>\n          {menuLists}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MenuAside;\n"}, {"instruction": "Create a React Native component called LoginForm that uses Redux to manage its state and connect to the store. It should have fields for email and password, as well as a button to log the user in. When the user types in the email or password fields, the state should be updated. When the button is pressed, the form should be submitted and the login action should be dispatched. If the login is successful, the user should be redirected to the home screen. If the login is unsuccessful, an error message should be displayed.", "output": "import React, { Component } from 'react';\nimport { Text } from 'react-native';\nimport { connect } from 'react-redux';\nimport { emailChanged, passwordChanged, loginUser } from '../actions';\nimport { Card, CardSection, Button, Input, Spinner } from './common';\n\nclass LoginForm extends Component {\n  onEmailChange(text) {\n    this.props.emailChanged(text);\n  }\n\n  onPasswordChange(text) {\n    this.props.passwordChanged(text);\n  }\n\n  onButtonPress() {\n    const { email, password } = this.props;\n\n    this.props.loginUser({ email, password });\n  }\n\n  renderButton() {\n    if (this.props.loading) {\n      return <Spinner size=\"large\" />;\n    }\n    return (\n      <Button onPress={this.onButtonPress.bind(this)}>\n      Login\n      </Button>\n    );\n  }\n\n  render() {\n    return (\n      <Card>\n        <CardSection>\n          <Input\n            label=\"Email\"\n            placeholder=\"email@gmail.com\"\n            onChangeText={this.onEmailChange.bind(this)}\n            value={this.props.email}\n          />\n        </CardSection>\n        <CardSection>\n          <Input\n            secureTextEntry\n            label=\"Password\"\n            placeholder=\"password\"\n            onChangeText={this.onPasswordChange.bind(this)}\n            value={this.props.password}\n          />\n        </CardSection>\n\n        <Text style={styles.errorTextStyle}>\n        {this.props.error}\n        </Text>\n\n        <CardSection>\n          {this.renderButton()}\n        </CardSection>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    email: state.auth.email,\n    password: state.auth.password,\n    error: state.auth.error,\n    loading: state.auth.loading\n  };\n};\n\nconst styles = {\n  errorTextStyle: {\n    fontSize: 20,\n    alignSelf: 'center',\n    color: 'red'\n  }\n};\n\nexport default connect(mapStateToProps, {\n  emailChanged,\n  passwordChanged,\n  loginUser\n})(LoginForm);\n"}, {"instruction": "Generate the code to render the sidebar for a course which displays a title, all the assignments under the course, and allows for each assignment to be clicked and redirect to the assignment specific page.", "output": "import React from 'react';\nimport { Link } from 'react-router';\n\nclass Sidebar extends React.Component {\n\n  render () {\n    var assignments = COURSES[this.props.params.courseId].assignments\n\n    return (\n      <div>\n        <h3>Sidebar Assignments</h3>\n        <ul>\n          {assignments.map(assignment => (\n            <li key={assignment.id}>\n              <Link to={`/course/${this.props.params.courseId}/assignments/${assignment.id}`}>\n                {assignment.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n}\n\nexport default Sidebar;\n\n"}, {"instruction": "Generate a React component for a Boolean field. The field should include a checkbox for user interaction and a hidden input element for submitting the field value in a form. The checkbox should be disabled if the field is not editable.", "output": "import React from 'react';\nimport Field from '../Field';\nimport Checkbox from '../../components/Checkbox';\nimport { FormField } from '../../../admin/client/App/elemental';\n\nconst NOOP = () => {};\n\nmodule.exports = Field.create({\n\tdisplayName: 'BooleanField',\n\tstatics: {\n\t\ttype: 'Boolean',\n\t},\n\tpropTypes: {\n\t\tindent: React.PropTypes.bool,\n\t\tlabel: React.PropTypes.string,\n\t\tonChange: React.PropTypes.func.isRequired,\n\t\tpath: React.PropTypes.string.isRequired,\n\t\tvalue: React.PropTypes.bool,\n\t},\n\n\tvalueChanged (value) {\n\t\tthis.props.onChange({\n\t\t\tpath: this.props.path,\n\t\t\tvalue: value,\n\t\t});\n\t},\n\trenderFormInput () {\n\t\tif (!this.shouldRenderField()) return;\n\n\t\treturn (\n\t\t\t<input\n\t\t\t\tname={this.getInputName(this.props.path)}\n\t\t\t\ttype=\"hidden\"\n\t\t\t\tvalue={!!this.props.value}\n\t\t\t/>\n\t\t);\n\t},\n\trenderUI () {\n\t\tconst { indent, value, label, path } = this.props;\n\n\t\treturn (\n\t\t\t<div data-field-name={path} data-field-type=\"boolean\">\n\t\t\t\t<FormField offsetAbsentLabel={indent}>\n\t\t\t\t\t<label style={{ height: '2.3em' }}>\n\t\t\t\t\t\t{this.renderFormInput()}\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tchecked={value}\n\t\t\t\t\t\t\tonChange={(this.shouldRenderField() && this.valueChanged) || NOOP}\n\t\t\t\t\t\t\treadonly={!this.shouldRenderField()}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span style={{ marginLeft: '.75em' }}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</label>\n\t\t\t\t\t{this.renderNote()}\n\t\t\t\t</FormField>\n\t\t\t</div>\n\t\t);\n\t},\n});\n"}, {"instruction": "Generate a React code snippet that uses `material-ui` to create a 3-step stepper with custom warning icons.", "output": "import React from 'react';\nimport {\n  Step,\n  Stepper,\n  StepLabel,\n} from 'material-ui/Stepper';\nimport WarningIcon from 'material-ui/svg-icons/alert/warning';\nimport {red500} from 'material-ui/styles/colors';\n\n/**\n * Custom icons can be used to create different visual states.\n */\nclass CustomIcon extends React.Component {\n\n  state = {\n    stepIndex: 0,\n  };\n\n  handleNext = () => {\n    const {stepIndex} = this.state;\n    if (stepIndex < 2) {\n      this.setState({stepIndex: stepIndex + 1});\n    }\n  };\n\n  handlePrev = () => {\n    const {stepIndex} = this.state;\n    if (stepIndex > 0) {\n      this.setState({stepIndex: stepIndex - 1});\n    }\n  };\n\n  getStepContent(stepIndex) {\n    switch (stepIndex) {\n      case 0:\n        return 'Select campaign settings...';\n      case 1:\n        return 'What is an ad group anyways?';\n      case 2:\n        return 'This is the bit I really care about!';\n      default:\n        return 'You\\'re a long way from home sonny jim!';\n    }\n  }\n\n  render() {\n    return (\n      <div style={{width: '100%', maxWidth: 700, margin: 'auto'}}>\n        <Stepper linear={false}>\n          <Step completed={false}>\n            <StepLabel>\n              Select campaign settings\n            </StepLabel>\n          </Step>\n          <Step completed={false}>\n            <StepLabel\n              icon={<WarningIcon color={red500} />}\n              style={{color: red500}}\n            >\n              Create an ad group\n            </StepLabel>\n          </Step>\n          <Step completed={false}>\n            <StepLabel>\n              Create an ad\n            </StepLabel>\n          </Step>\n        </Stepper>\n      </div>\n    );\n  }\n}\n\nexport default CustomIcon;\n"}, {"instruction": "Generate React code for an SVG icon that visually represents no signal, consisting of an empty square inside a square frame.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet DeviceSignalCellularNull = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M20 6.83V20H6.83L20 6.83M22 2L2 22h20V2z\"/>\n  </SvgIcon>\n);\nDeviceSignalCellularNull = pure(DeviceSignalCellularNull);\nDeviceSignalCellularNull.displayName = 'DeviceSignalCellularNull';\n\nexport default DeviceSignalCellularNull;\n"}, {"instruction": "Create React Native code that displays a list screen with the title \"Beacons.\" Include a button to create a new beacon and buttons for each beacon in the list that navigate to a \"Beacon\" screen when pressed.", "output": "import React from 'react';\nimport { Text, View, Button, StyleSheet, ScrollView } from 'react-native';\nimport Components from './../../components';\n\nconst styles = StyleSheet.create({\n  base: {\n    padding: 24,\n    flex: 1\n  },\n  name: {\n    fontSize: 24\n  },\n  header: {\n    flexWrap: 'wrap',\n    flexDirection: 'row'\n  }\n});\n\nclass ListBeaconsScreen extends Components.PyxisComponent {\n  static navigationOptions = {\n    title: 'Beacons'\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      beacons: []\n    };\n  }\n\n  createBeacon() {\n    this.navigate('NewBeacon');\n  }\n\n  goToBeacon(beacon) {\n    this.navigate('Beacon', {\n      beacon\n    });\n  }\n\n  async componentWillMount() {\n    const beacons = await this.services.beaconsRepository.all();\n\n    this.setState({ beacons })\n  }\n\n  render() {\n    return (\n      <View style={styles.base}>\n        <View>\n          <Text style={styles.name}>Beacons</Text>\n          <View style={styles.header}>\n            {\n              //<Components.PButton title=\"Excluir\" onPress={() => this.remove()}></Components.PButton>\n            }\n          </View>\n        </View>\n        <ScrollView>\n          {\n            this.isMaintainer() && <Components.PButton title=\"Novo beacon\" onPress={() => this.createBeacon()}></Components.PButton>\n          }\n          {\n            this.state.beacons.map((beacon, idx) => {\n              return <Components.PButton key={`${idx}_${beacon.name}`} title={beacon.name} onPress={() => this.goToBeacon(beacon)}></Components.PButton>\n            })\n          }\n        </ScrollView>\n        <Components.BackButton onPress={() => this.goBack()}></Components.BackButton>\n      </View>\n    );\n  }\n}\n\nexport default ListBeaconsScreen;\n"}, {"instruction": "Generate the React code for displaying won players in a table with player names, multiple positions, and cost.", "output": "import React from 'react';\n\nexport default class WonPlayer extends React.Component {\n\n    render() {\n\n        var player = this.props.rosterEntry.player;\n        var cost = this.props.rosterEntry.cost;\n\n        var positions = player.positions\n            .map(function(pos) { return pos.name; })\n            .join(', ');\n\n        return (\n            <tr>\n                <td>{player.name} - <span className=\"text-muted small\">{positions}</span></td>\n                <td>${cost}</td>\n            </tr>\n        );\n    }\n}"}, {"instruction": "Generate a React component that displays a 'Page Not Found' error message when the user attempts to visit a URL without a corresponding route. Note that the component should be a class-based component due to its usage of hot reloading.", "output": "/**\n * NotFoundPage\n *\n * This is the page we show when the user visits a url that doesn't have a route\n *\n * NOTE: while this component should technically be a stateless functional\n * component (SFC), hot reloading does not currently support SFCs. If hot\n * reloading is not a neccessity for you then you can refactor it and remove\n * the linting exception.\n */\n\nimport React from 'react';\n\n/* eslint-disable react/prefer-stateless-function */\nexport default class NotFound extends React.Component {\n\n  render() {\n    return (\n      <h1>Page Not Found</h1>\n    );\n  }\n}\n"}, {"instruction": "Generate a class based React component with the following specifications:\n- Name: ClickCounter\n- Component should maintain an internal state variable called count, initialized to 0.\n- Component should define an onClick handler that increments the count by 1 when the button is clicked.\n- Component should render a button with the following attributes:\n  - className: 'foo bar'\n  - User-provided className as an optional prop\n  - Display text: 'Clicked {count} times'", "output": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ClickCounter extends Component {\n  \n  constructor() {\n    super();\n    this.state = { count: 0 };\n    this.onClick = this.onClick.bind(this);\n  }\n  \n  onClick() {\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n  \n  render() {\n    return (\n        <button className={'foo bar' + (this.props.className || '')} onClick={this.onClick}>Clicked {this.state.count} times</button>\n    );\n  }\n}\n\nClickCounter.propTypes = {\n  className: PropTypes.string\n};\n"}, {"instruction": "Design a React component that renders a button with a rotating label. The button should cycle through a list of possible labels with each click. Include CSS styling for the button.", "output": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport sample from 'lodash/sample';\n\nimport './RandomButton.css';\n\n/**\n * Button that changes label on every click.\n */\nexport default class RandomButton extends Component {\n\tstatic propTypes = {\n\t\t/**\n\t\t * List of possible labels.\n\t\t */\n\t\tvariants: PropTypes.array.isRequired,\n\t};\n\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tlabel: sample(props.variants),\n\t\t};\n\t}\n\n\thandleClick = () => {\n\t\tthis.setState({\n\t\t\tlabel: sample(this.props.variants),\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<button className=\"random-button\" onClick={this.handleClick}>\n\t\t\t\t{this.state.label}\n\t\t\t</button>\n\t\t);\n\t}\n}\n"}, {"instruction": "Create an SVG icon of a healing stick.", "output": "/* @flow */\nimport React from 'react';\nimport Icon from 'mineral-ui/Icon';\n\nimport type { IconProps } from 'mineral-ui/Icon/types';\n\n/* eslint-disable prettier/prettier */\nexport default function IconHealing(props: IconProps) {\n  const iconProps = {\n    rtl: false,\n    ...props\n  };\n\n  return (\n    <Icon {...iconProps}>\n      <g>\n        <path d=\"M17.73 12.02l3.98-3.98a.996.996 0 0 0 0-1.41l-4.34-4.34a.996.996 0 0 0-1.41 0l-3.98 3.98L8 2.29a1.001 1.001 0 0 0-1.41 0L2.25 6.63a.996.996 0 0 0 0 1.41l3.98 3.98L2.25 16a.996.996 0 0 0 0 1.41l4.34 4.34c.39.39 1.02.39 1.41 0l3.98-3.98 3.98 3.98c.2.2.45.29.71.29.26 0 .51-.1.71-.29l4.34-4.34a.996.996 0 0 0 0-1.41l-3.99-3.98zM12 9c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-4.71 1.96L3.66 7.34l3.63-3.63 3.62 3.62-3.62 3.63zM10 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2 2c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm2-4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2.66 9.34l-3.63-3.62 3.63-3.63 3.62 3.62-3.62 3.63z\"/>\n      </g>\n    </Icon>\n  );\n}\n\nIconHealing.displayName = 'IconHealing';\nIconHealing.category = 'image';\n"}, {"instruction": "Create a React component that displays three labeled buttons. The first button should have the label on the right, the second button should have the label on the left, and the third button should have the label on the left and include an icon.", "output": "import React from 'react'\nimport { Button } from 'semantic-ui-react'\n\nconst ButtonExampleLabeled = () => (\n  <div>\n    <Button\n      content='Like'\n      icon='heart'\n      label={{ as: 'a', basic: true, content: '2,048' }}\n      labelPosition='right'\n    />\n\n    <Button\n      content='Like'\n      icon='heart'\n      label={{ as: 'a', basic: true, pointing: 'right', content: '2,048' }}\n      labelPosition='left'\n    />\n\n    <Button\n      icon='fork'\n      label={{ as: 'a', basic: true, content: '2,048' }}\n      labelPosition='left'\n    />\n  </div>\n)\n\nexport default ButtonExampleLabeled\n"}, {"instruction": "Create a React component for rendering a todo item that includes a label with the todo title and a button for deleting the todo.", "output": "import PureComponent from '../../../lib/purecomponent';\nimport React from 'react';\nimport classnames from 'classnames';\nimport immutable from 'immutable';\nimport {deleteTodo} from '../../todos/actions';\n\nexport default class TodoItem extends PureComponent {\n\n  render() {\n    const todo = this.props.todo;\n\n    return (\n      <li className={classnames({editing: false})}>\n        <label>{todo.get('title')}</label>\n        <button onClick={() => deleteTodo(todo)}>x</button>\n      </li>\n    );\n  }\n\n}\n\nTodoItem.propTypes = {\n  todo: React.PropTypes.instanceOf(immutable.Map)\n};\n"}, {"instruction": "Create a React component named CustomLayout that wraps the child components within a Layout component using the MenuLeft and Footer components as props. Include a conditional rendering of the DevTools component if the environment is development.", "output": "import React from 'react';\nimport Layout from 'focus-components/components/layout';\n\nimport MenuLeft from '../views/menu/menu-left';\nimport Footer from '../views/footer';\nimport DevTools from './dev-tools';\n\nconst CustomLayout = (props) => (\n    <div>\n        <Layout\n            Footer={Footer}\n            MenuLeft={MenuLeft}\n        >\n            {props.children}\n        </Layout>\n        {__DEV__ && <DevTools />}\n    </div >\n);\nCustomLayout.displayName = 'CustomAppLayout';\n\nexport default CustomLayout;"}, {"instruction": "Create a React component to render a radio button question with multiple options and optional text input for each option.", "output": "\nimport React, { Component } from 'react';\n\nimport Question from '../Question';\n\nclass Radio extends Component {\n\n    render() {\n        const { data, onClick } = this.props;\n        return (\n            <div\n                className=\"question\"\n                onClick={onClick}\n            >\n                <Question\n                    id={data.order}\n                    text={data.label}\n                    required={data.required}\n                />\n                <div className=\"radioGrp\">\n                    {this._renderRadioItem()}\n                </div>\n            </div>\n        );\n    }\n\n    _renderRadioItem() {\n        const { data } = this.props;\n        const items = data.data.map((itm, idx) => {\n            const label = itm.label;\n            const input = itm.input;\n            return (\n                <div\n                    className=\"radioItem ut-radio\"\n                    key={idx}\n                >\n                    <input type=\"radio\" />\n                    <label>\n                        {label}\n                    </label>\n                    {\n                        itm.hasOwnProperty('input') ?\n                            <input\n                                type=\"text\"\n                                className=\"input input--medium ut-input\"\n                                placeholder={input}\n                            /> :\n                            ''\n                    }\n                    <div className=\"subdescription\">{itm.example || ''}</div>\n                </div>\n            );\n        });\n        return items;\n    }\n}\n\nexport default Radio;\n"}, {"instruction": "Generate a React functional component called CoreLayout that wraps its children in a container with a centrally aligned text and a header and main container.", "output": "import React from 'react'\nimport Header from '../../components/Header'\nimport classes from './CoreLayout.scss'\nimport '../../styles/core.scss'\n\nexport const CoreLayout = ({ children }) => (\n  <div className='container text-center'>\n    <Header />\n    <div className={classes.mainContainer}>\n      {children}\n    </div>\n  </div>\n)\n\nCoreLayout.propTypes = {\n  children: React.PropTypes.element.isRequired\n}\n\nexport default CoreLayout\n"}, {"instruction": "Create the ModalBody React component. It should accept a `componentClass` prop that defaults to 'div' and be used to render the body of a modal.", "output": "import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport classNames from 'classnames';\nimport React from 'react';\nimport elementType from 'react-prop-types/lib/elementType';\n\nimport { bsClass, getClassSet, splitBsProps } from './utils/bootstrapUtils';\n\nvar propTypes = {\n  componentClass: elementType\n};\n\nvar defaultProps = {\n  componentClass: 'div'\n};\n\nvar ModalBody = function (_React$Component) {\n  _inherits(ModalBody, _React$Component);\n\n  function ModalBody() {\n    _classCallCheck(this, ModalBody);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  ModalBody.prototype.render = function render() {\n    var _props = this.props,\n        Component = _props.componentClass,\n        className = _props.className,\n        props = _objectWithoutProperties(_props, ['componentClass', 'className']);\n\n    var _splitBsProps = splitBsProps(props),\n        bsProps = _splitBsProps[0],\n        elementProps = _splitBsProps[1];\n\n    var classes = getClassSet(bsProps);\n\n    return React.createElement(Component, _extends({}, elementProps, {\n      className: classNames(className, classes)\n    }));\n  };\n\n  return ModalBody;\n}(React.Component);\n\nModalBody.propTypes = propTypes;\nModalBody.defaultProps = defaultProps;\n\nexport default bsClass('modal-body', ModalBody);"}, {"instruction": "Create a React component that renders a button that, when clicked, calls a prop function with the `id` prop as an argument. The button should have a `REMOVE SECTION` label and be styled using inline CSS.", "output": "import React from 'react';\n\nexport default class RemoveSectionButton extends React.Component {\n\n\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault()\n    this.props.removeSection(this.props.id);\n  }\n\n  render() {\n    return (\n      <div style={{\n        display: 'inline-block'\n      }}>\n        <button className={'remove-section-button'}onClick={this.handleClick} >\n          <p style={{\n            position: 'absolute',\n            top: '20%',\n            left: '52%',\n            width: '100%',\n            transform: 'translate(-50%, -50%)'\n          }}>REMOVE SECTION</p>\n        </button>\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Display a Channel Switcher component with navigation for \"Home\" and \"Search\" channels.", "output": "import List from './list';\nimport React from 'react';\nimport viewEventPublisher from '../singletons/view-event-publisher'\n\nexport default class ChannelSwitcher extends React.Component {\n  getHomeChannelClassName() {\n    return `account-channel ${this.getHomeChannelSelected() ? ' account-channel-selected' : ''}`;\n  }\n\n  getHomeChannelSelected() {\n    return this.props.channelId === 'HOME_TIMELINE_CHANNEL';\n  }\n\n  getSearchChannelClassName() {\n    return `account-channel ${this.getSearchChannelSelected() ? ' account-channel-selected' : ''}`;\n  }\n\n  getSearchChannelSelected() {\n    return this.props.channelId === 'SEARCH_CHANNEL';\n  }\n\n  onHomeChannelClicked(event) {\n    viewEventPublisher.emit('channel-clicked', 'HOME_TIMELINE_CHANNEL');\n  }\n\n  onSearchChannelClicked(event) {\n    viewEventPublisher.emit('channel-clicked', 'SEARCH_CHANNEL');\n  }\n\n  render() {\n    return(\n      <div className=\"channel-switcher\">\n        <div className=\"account-screen-name\">\n          @{this.props.account.screen_name}\n        </div>\n        <div className=\"account-section\">\n          <h3 className=\"account-section-heading\">\n            TIMELINES\n          </h3>\n          <ul>\n            <li className={this.getHomeChannelClassName()} onClick={this.onHomeChannelClicked.bind(this)}>\n              Home\n            </li>\n            <li className={this.getSearchChannelClassName()} onClick={this.onSearchChannelClicked.bind(this)}>\n              Search\n            </li>\n          </ul>\n        </div>\n        <div className=\"account-section\">\n          <h3 className=\"account-section-heading\">\n            LISTS\n          </h3>\n          <ul>\n            {this.renderLists()}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  renderLists() {\n    return this.props.lists.map((list) => {\n      return <List channelId={this.props.channelId} key={list.id_str} list={list} />;\n    });\n  }\n}\n"}, {"instruction": "Design a React component that displays a circular image inside a dark blue panel with the CSS class `pn` and an `id` of `profile-program`.", "output": "import React from 'react';\n\nclass ProgramLogo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayName = 'ProgramLogo';\n    }\n    render() {\n        return (\n        \t<div className=\"col-lg-4 col-md-4 col-sm-4 mb\">\n              <div className=\"darkblue-panel pn\">\n                <div id=\"profile-program\">\n                  <div className=\"user\">\n                    <img className=\"img-circle\" width=\"200\" src=\"../public/assets/img/gt-logo.png\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default ProgramLogo;\n"}, {"instruction": "Create a function component wrapped around a modal that takes in a prop for whether it's open or not, and another function prop to close the modal. It should contain another component that is passed the same props as the parent.", "output": "import PropTypes from 'prop-types';\nimport React from 'react';\nimport Modal from 'Components/Modal/Modal';\nimport AddIndexerModalContentConnector from './AddIndexerModalContentConnector';\n\nfunction AddIndexerModal({ isOpen, onModalClose, ...otherProps }) {\n  return (\n    <Modal\n      isOpen={isOpen}\n      onModalClose={onModalClose}\n    >\n      <AddIndexerModalContentConnector\n        {...otherProps}\n        onModalClose={onModalClose}\n      />\n    </Modal>\n  );\n}\n\nAddIndexerModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onModalClose: PropTypes.func.isRequired\n};\n\nexport default AddIndexerModal;\n"}, {"instruction": "Create the React.js code for a `NavItem` component utilizing Bootstrap styles and an anchor tag. Emphasize customizing the `className` and `linkProps` based on various provided props, namely: `role`, `linkId`, `disabled`, `active`, `href`, `title`, `target`, `children`, and `aria-controls`.", "output": "import React from 'react';\nimport classNames from 'classnames';\nimport BootstrapMixin from './BootstrapMixin';\nimport SafeAnchor from './SafeAnchor';\n\nconst NavItem = React.createClass({\n  mixins: [BootstrapMixin],\n\n  propTypes: {\n    linkId: React.PropTypes.string,\n    onSelect: React.PropTypes.func,\n    active: React.PropTypes.bool,\n    disabled: React.PropTypes.bool,\n    href: React.PropTypes.string,\n    role: React.PropTypes.string,\n    title: React.PropTypes.node,\n    eventKey: React.PropTypes.any,\n    target: React.PropTypes.string,\n    'aria-controls': React.PropTypes.string\n  },\n\n  render() {\n    let {\n        role,\n        linkId,\n        disabled,\n        active,\n        href,\n        title,\n        target,\n        children,\n        'aria-controls': ariaControls,\n        ...props } = this.props;\n    let classes = {\n          active,\n          disabled\n        };\n    let linkProps = {\n          role,\n          href,\n          title,\n          target,\n          id: linkId,\n          onClick: this.handleClick\n        };\n\n    if (!role && href === '#') {\n      linkProps.role = 'button';\n    }\n\n    return (\n      <li {...props} role='presentation' className={classNames(props.className, classes)}>\n        <SafeAnchor {...linkProps} aria-selected={active} aria-controls={ariaControls}>\n          { children }\n        </SafeAnchor>\n      </li>\n    );\n  },\n\n  handleClick(e) {\n    if (this.props.onSelect) {\n      e.preventDefault();\n\n      if (!this.props.disabled) {\n        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);\n      }\n    }\n  }\n});\n\nexport default NavItem;\n"}, {"instruction": "Create a concise React component called \"Navigation\" that generates an unordered list of links based on an array of component names passed as a prop. Each link should have a unique key derived from the component name and direct to an element with the corresponding ID.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({components}) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map( name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;"}, {"instruction": "Create a resume icon using React SVG that has a modern feel. The icon should be colored red (#E06D70) and green (#72C472).", "output": "import React from 'react';\n\nfunction Resume() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      width=\"48\"\n      height=\"48\"\n      className=\"font-sans\"\n    >\n      <defs>\n        <path id=\"a\" d=\"M0 0H48V48H0z\" opacity=\"1\"></path>\n        <mask id=\"c\" maskContentUnits=\"userSpaceOnUse\" maskUnits=\"userSpaceOnUse\">\n          <path d=\"M0 0H48V48H0z\"></path>\n          <use fill=\"#fff\" xlinkHref=\"#a\"></use>\n        </mask>\n        <mask id=\"d\" maskContentUnits=\"userSpaceOnUse\" maskUnits=\"userSpaceOnUse\">\n          <path d=\"M0 0H48V48H0z\"></path>\n          <use fill=\"#fff\" xlinkHref=\"#b\"></use>\n        </mask>\n      </defs>\n      <g mask=\"url(#c)\">\n        <path fill=\"#E06D70\" fillRule=\"evenodd\" d=\"M44 27H4l-3-4 4-4h38l4 4-3 4z\"></path>\n        <path\n          fill=\"#E6E6E6\"\n          fillRule=\"evenodd\"\n          d=\"M41 47H7a2 2 0 01-2-2V3a2 2 0 012-2h24l12 12v32a2 2 0 01-2 2z\"\n        ></path>\n        <path fill=\"#B3B3B3\" fillRule=\"evenodd\" d=\"M31 1v10a2 2 0 002 2h10L31 1z\"></path>\n        <path\n          fill=\"#E06D70\"\n          fillRule=\"evenodd\"\n          d=\"M45 41H3a2 2 0 01-2-2V23h46v16a2 2 0 01-2 2z\"\n        ></path>\n      </g>\n      <text fontSize=\"0\" transform=\"translate(7 28)\">\n        <tspan\n          x=\"0\"\n          y=\"8\"\n          fill=\"#FFF\"\n          fontSize=\"8\"\n          fontWeight=\"700\"\n          style={{\n            whiteSpace: 'pre',\n            WebkitTextTransform: 'none',\n            textTransform: 'none'\n          }}\n        >\n          RESUME\n        </tspan>\n      </text>\n      <g mask=\"url(#d)\">\n        <path\n          fill=\"#72C472\"\n          fillRule=\"evenodd\"\n          d=\"M28.125 12.625H24.75V4.75a.375.375 0 00-.375-.375h-.75a.375.375 0 00-.375.375v7.875h-3.375a.375.375 0 00-.295.607l4.125 5.25a.375.375 0 00.59 0l4.125-5.25a.375.375 0 00-.295-.607z\"\n        ></path>\n      </g>\n    </svg>\n  );\n}\n\nexport default Resume;\n"}, {"instruction": "Generate the React code for the main application template. Include navigation, a main content area, toasts, modals, and styles. Use Semantic UI for styling.", "output": "// React\nimport React from 'react';\n\n// Components\nimport NavBar from './navBar.component.js';\nimport Footer from './footer.component.js';\nimport Toasts from '../toasts/toasts.component.js';\nimport Modal from '../modal/modal.component.js';\n\n// JS dependancies\nimport 'jquery';\nimport form from 'semantic/dist/semantic.js';\n$.form = form;\n\n// Style\nimport 'semantic/dist/semantic.css';\nimport './common.scss';\nimport './flex.scss';\n\n// App Component\nclass App extends React.Component {\n  render() {\n    return (\n      <div className='layout vertical start-justified fill'>\n        <NavBar />\n        <div className='flex main layout vertical'>\n          {this.props.children}\n        </div>\n         <Toasts />\n        <Modal />\n      </div>\n    );\n  }\n}\nApp.propTypes = { children: React.PropTypes.object };\n\nexport default App;\n"}, {"instruction": "Design a React component that renders a flexible card container with customizable layout and styling. The component should support both vertical and horizontal orientations and allow for the inclusion of arbitrary content. Ensure that the component utilizes CSS styling for visual presentation.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  background-color: #ffffff;\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: ${props => props.direction};\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Card = ({ children, direction }) => {\n  return (\n    <Wrapper direction={direction}>\n      {children}\n    </Wrapper>\n  );\n};\n\nCard.propTypes = {\n  children: PropTypes.node,\n  direction: PropTypes.oneOf(['column', 'row']),\n};\n\nCard.defaultProps = {\n  direction: 'column',\n};\n\nexport default Card;\n"}, {"instruction": "Set up a React application with React Router and its BrowserHistory type. Build a Redux store using the provided createRedux function and pass it and the API client to the Provider component. Then, render the App component, which uses React Router for routing, and optionally enable React debugger if in development mode.", "output": "import React from 'react';\nimport Router from 'react-router';\nimport BrowserHistory from 'react-router/lib/BrowserHistory';\nimport routes from './views/routes';\nimport createRedux from './redux/create';\nimport { Provider } from 'redux/react';\nimport ApiClient from './ApiClient';\nconst history = new BrowserHistory();\nconst client = new ApiClient();\n\nconst dest = document.getElementById('content');\nconst redux = createRedux(client, window.__data);\nconst element = (<Provider redux={redux}>\n  {() => <Router history={history} children={routes}/> }\n</Provider>);\nReact.render(element, dest);\n\nif (process.env.NODE_ENV !== 'production') {\n  window.React = React; // enable debugger\n  const reactRoot = window.document.getElementById('content');\n\n  if (!reactRoot || !reactRoot.firstChild || !reactRoot.firstChild.attributes || !reactRoot.firstChild.attributes['data-react-checksum']) {\n    console.error('Server-side React render was discarded. Make sure that your initial render does not contain any client-side code.');\n  }\n}\n"}, {"instruction": "Generate the React code for a List Panel component that displays a list of up to 4 lists in the user's account, sorted alphabetically by title. The component should fetch the list of lists on mount and render a link to each list using the NavLink component. If there are no lists, the component should not render anything.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { fetchLists } from 'mastodon/actions/lists';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport Icon from 'mastodon/components/icon';\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title'))).take(4);\n});\n\nconst mapStateToProps = state => ({\n  lists: getOrderedLists(state),\n});\n\nexport default @withRouter\n@connect(mapStateToProps)\nclass ListPanel extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    lists: ImmutablePropTypes.list,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchLists());\n  }\n\n  render () {\n    const { lists } = this.props;\n\n    if (!lists || lists.isEmpty()) {\n      return null;\n    }\n\n    return (\n      <div>\n        <hr />\n\n        {lists.map(list => (\n          <NavLink key={list.get('id')} className='column-link column-link--transparent' strict to={`/timelines/list/${list.get('id')}`}><Icon className='column-link__icon' id='list-ul' fixedWidth />{list.get('title')}</NavLink>\n        ))}\n      </div>\n    );\n  }\n\n}\n"}, {"instruction": "Create a main function for a React application that renders the Mastodon component, sets up browser notifications, and conditionally registers push notifications if the environment is in production mode.", "output": "import * as registerPushNotifications from './actions/push_notifications';\nimport { setupBrowserNotifications } from './actions/notifications';\nimport { default as Mastodon, store } from './containers/mastodon';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ready from './ready';\n\nconst perf = require('./performance');\n\nfunction main() {\n  perf.start('main()');\n\n  if (window.history && history.replaceState) {\n    const { pathname, search, hash } = window.location;\n    const path = pathname + search + hash;\n    if (!(/^\\/web($|\\/)/).test(path)) {\n      history.replaceState(null, document.title, `/web${path}`);\n    }\n  }\n\n  ready(() => {\n    const mountNode = document.getElementById('mastodon');\n    const props = JSON.parse(mountNode.getAttribute('data-props'));\n\n    ReactDOM.render(<Mastodon {...props} />, mountNode);\n    store.dispatch(setupBrowserNotifications());\n    if (process.env.NODE_ENV === 'production') {\n      // avoid offline in dev mode because it's harder to debug\n      require('offline-plugin/runtime').install();\n      store.dispatch(registerPushNotifications.register());\n    }\n    perf.stop('main()');\n  });\n}\n\nexport default main;\n"}, {"instruction": "Prompt a React component to render a swipe-able card that, when swiped right, triggers a callback and makes the card disappear. The card should contain an image and text.", "output": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Title.css';\nimport logoSrc from './img/swipe.gif';\nimport {Interactions} from './shared/data.js';\nimport Swipeable from './components/Swipeable.js';\nimport Delay from './components/Delay.js';\nimport SwipeCue from './components/SwipeCue.js';\n\nclass Title extends Component {\n  constructor(props) {\n    super(props);\n    this.onSwipeRight = this.onSwipeRight.bind(this);\n  }\n\n  // prefetch image before animation starts\n  componentDidMount() {\n    const image = new Image();\n    image.src = logoSrc;\n  }\n\n  onSwipeRight() {\n    const {onInteraction, onDone} = this.props;\n    onInteraction(Interactions.play());\n    onDone();\n  }\n\n  render() {\n    const swipeHeight = 128;\n    return (\n      <div className=\"Title\">\n        <p className=\"Title-intro\">\n          Swipe Right for CS!    \n        </p>\n        <Delay wait={250}>\n          <Swipeable\n            style={{width: '100%'}}\n            height={swipeHeight}\n            onSwipeRight={this.onSwipeRight}>\n            <div className=\"Title-swipe\">\n              <SwipeCue style={{position: 'absolute', top: (swipeHeight/2)}} />\n              <img\n                className=\"Title-logo\"\n                alt=\"Logo\"\n                src={logoSrc}\n                height={128}\n                width={128} />\n              <div>Swipe right to play!</div>\n            </div>\n          </Swipeable>\n        </Delay>\n      </div>\n    );\n  }\n} \n\nTitle.propTypes = {\n  onInteraction: PropTypes.func.isRequired,\n  onDone: PropTypes.func.isRequired\n};\n\nexport default Title;"}, {"instruction": "Draft a React component that renders a page layout with text, an image, and an icon button.", "output": "import React from 'react'\nimport styled from 'styled-components'\nimport { palette } from 'styled-theme'\n\nimport { Block, Paragraph, IconLink, IconButton, LogoImage, Tooltip } from 'components'\n\nconst Wrapper = styled(Block)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: calc(100vh - 3.75rem);\n  max-height: 700px;\n  padding: 2rem 6rem;\n  box-sizing: border-box;\n  text-align: center;\n  @media screen and (max-width: 640px) {\n    padding: 1rem;\n  }\n`\n\nconst Text = styled(Paragraph)`\n  color: ${palette('grayscale', 3)}\n  margin: 3rem auto;\n  max-width: 800px;\n  font-weight: 300;\n  font-size: 1.35rem;\n  line-height: 1.35em;\n  letter-spacing: 0.07em;\n  @media screen and (max-width: 640px) {\n    font-size: 1rem;\n  }\n`\n\nconst Logo = styled(LogoImage)`\n  flex: 1;\n  width: 100%;\n  min-height: 1px;\n`\n\nconst StyledIconButton = styled(IconButton)`\n  flex: none;\n`\n\nconst Hero = (props) => {\n  return (\n    <Wrapper opaque reverse {...props}>\n      <Logo />\n      <Text>\n        <strong>ARc</strong> is a <IconLink reverse icon=\"react\" href=\"https://facebook.github.io/react/\">React</IconLink> starter kit based on the <IconLink reverse icon=\"atomic-design\" href=\"http://bradfrost.com/blog/post/atomic-web-design/\">Atomic Design</IconLink> methodology. It&apos;s <strong>progressive</strong>, which means that you can start with the basic boilerplate and try the other features when you are comfortable.\n      </Text>\n      <Tooltip data-title=\"Just a fancy tooltip \ud83d\ude0a\" reverse>\n        <StyledIconButton\n          icon=\"github\"\n          href=\"https://github.com/diegohaz/arc\"\n          height={50}\n          transparent\n          reverse\n        >\n          View on GitHub\n        </StyledIconButton>\n      </Tooltip>\n    </Wrapper>\n  )\n}\n\nexport default Hero\n"}, {"instruction": "Create a React component that displays a grid of paper elements with text indicating which breakpoints they are currently hidden for.", "output": "// @flow weak\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport compose from 'recompose/compose';\nimport { withStyles } from 'material-ui/styles';\nimport Paper from 'material-ui/Paper';\nimport Grid from 'material-ui/Grid';\nimport withWidth from 'material-ui/utils/withWidth';\nimport Typography from 'material-ui/Typography';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    paddingTop: 42,\n    position: 'relative',\n  },\n  paper: {\n    padding: 16,\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    minHeight: 54,\n  },\n  typography: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    padding: 5,\n  },\n});\n\nfunction GridIntegration(props) {\n  const classes = props.classes;\n\n  return (\n    <div className={classes.root}>\n      <Typography type=\"subheading\" className={classes.typography}>\n        Current width: {props.width}\n      </Typography>\n      <Grid container spacing={24}>\n        <Grid item xs hidden={{ xsUp: true }}>\n          <Paper className={classes.paper}>xsUp</Paper>\n        </Grid>\n        <Grid item xs hidden={{ smUp: true }}>\n          <Paper className={classes.paper}>smUp</Paper>\n        </Grid>\n        <Grid item xs hidden={{ mdUp: true }}>\n          <Paper className={classes.paper}>mdUp</Paper>\n        </Grid>\n        <Grid item xs hidden={{ lgUp: true }}>\n          <Paper className={classes.paper}>lgUp</Paper>\n        </Grid>\n        <Grid item xs hidden={{ xlUp: true }}>\n          <Paper className={classes.paper}>xlUp</Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nGridIntegration.propTypes = {\n  classes: PropTypes.object.isRequired,\n  width: PropTypes.string,\n};\n\nexport default compose(withStyles(styles), withWidth())(GridIntegration);\n"}, {"instruction": "Create a React component that displays a blank page with a header containing a title and a breadcrumb trail. The page should also have a content section with a box containing a title, body, and footer.", "output": "import React from 'react';\nimport PageWrapper from '../../../lib/page/PageWrapper';\nimport PageHeader from '../../../lib/page/PageHeader';\nimport Breadcrumb from '../../../lib/page/Breadcrumb';\nimport PageContent from '../../../lib/page/PageContent';\n\nexport default function BlankPage() {\n  return (\n    <PageWrapper>\n      <PageHeader\n        title=\"Blank page\"\n        description=\"it all starts here\"\n      >\n        <Breadcrumb\n          items={[\n            { key: 1, icon: 'fa fa-dashboard', title: 'Home', url: '/' },\n            { key: 2, title: 'Examples' },\n            { key: 3, title: 'Blank page' },\n          ]}\n        />\n      </PageHeader>\n      <PageContent>\n        <div className=\"box\">\n          <div className=\"box-header with-border\">\n            <h3 className=\"box-title\">Title</h3>\n            <div className=\"box-tools pull-right\">\n              <button type=\"button\" className=\"btn btn-box-tool\">\n                <i className=\"fa fa-minus\"></i>\n              </button>\n              <button type=\"button\" className=\"btn btn-box-tool\">\n                <i className=\"fa fa-times\"></i>\n              </button>\n            </div>\n          </div>\n          <div className=\"box-body\">\n            Start creating your amazing application!\n          </div>\n          <div className=\"box-footer\">\n            Footer\n          </div>\n        </div>\n      </PageContent>\n    </PageWrapper>\n  );\n}\n"}, {"instruction": "Generate a simple React component called HomePage that renders a welcome message and links to documentation and the GitHub repository for the code.", "output": "import React from 'react';\n \nclass HomePage extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Welcome to this react router example!</h1>\n        <p>You can read about it <a href='https://medium.com/@arpith/using-react-router-1f96209fe557#.92v3xhq7l'>here</a></p>\n        <p>The code is <a href='https://github.com/arpith/react-router-example'>on Github</a></p>\n      </div>\n    );\n  }\n}\nexport default HomePage;\n"}, {"instruction": "Create a React application that uses a JSON file to define routes and a router to render matching components, handles client-side navigation using the HTML5 History API, includes FastClick to improve mobile touch performance, and enables Hot Module Replacement (HMR) for development.", "output": "import 'babel-polyfill';\nimport 'whatwg-fetch';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport FastClick from 'fastclick';\nimport { Provider } from 'react-redux';\n\nimport store from './core/store';\nimport router from './core/router';\nimport history from './core/history';\n\nlet routes = require('./routes.json'); // Loaded with utils/routes-loader.js\nconst container = document.getElementById('container');\n\nfunction renderComponent(component) {\n  ReactDOM.render(<Provider store={store}>{component}</Provider>, container);\n}\n\n// Find and render a web page matching the current URL path,\n// if such page is not found then render an error page (see routes.json, core/router.js)\nfunction render(location) {\n  router.resolve(routes, location)\n    .then(renderComponent)\n    .catch(error => router.resolve(routes, { ...location, error }).then(renderComponent));\n}\n\n// Handle client-side navigation by using HTML5 History API\n// For more information visit https://github.com/ReactJSTraining/history/tree/master/docs#readme\nhistory.listen(render);\nrender(history.getCurrentLocation());\n\n// Eliminates the 300ms delay between a physical tap\n// and the firing of a click event on mobile browsers\n// https://github.com/ftlabs/fastclick\nFastClick.attach(document.body);\n\n// Enable Hot Module Replacement (HMR)\nif (module.hot) {\n  module.hot.accept('./routes.json', () => {\n    routes = require('./routes.json'); // eslint-disable-line global-require\n    render(history.getCurrentLocation());\n  });\n}\n"}, {"instruction": "Create a React component with a people icon. The icon should consist of two stick figures representing people, with one figure on the left and the other figure on the right.", "output": "import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(\n  <g><path d=\"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z\" /></g>\n, 'People');\n"}, {"instruction": "Generate the React component code for an SVG icon with the following design: a square with three smaller squares inside arranged in a vertical line.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet EditorBorderOuter = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M13 7h-2v2h2V7zm0 4h-2v2h2v-2zm4 0h-2v2h2v-2zM3 3v18h18V3H3zm16 16H5V5h14v14zm-6-4h-2v2h2v-2zm-4-4H7v2h2v-2z\"/>\n  </SvgIcon>\n);\nEditorBorderOuter = pure(EditorBorderOuter);\nEditorBorderOuter.displayName = 'EditorBorderOuter';\nEditorBorderOuter.muiName = 'SvgIcon';\n\nexport default EditorBorderOuter;\n"}, {"instruction": "Generate code for a React component that displays pagination dots for a carousel, with the following specifications:\n\n* The component should take props for the total number of slides, the number of slides to scroll per click, the current slide index, and a custom paging function to customize the appearance of each dot.\n* The component should calculate the number of dots based on the total number of slides and the number of slides to scroll per click.\n* Each dot should be rendered as a `<li>` element with a `className` that includes the `slick-active` class if the current slide index is within the range of slides represented by that dot.\n* When a dot is clicked, the component should call the `clickHandler` prop function with the dot's index, the number of slides to scroll per click, and the current slide index.", "output": "'use strict';\n\nimport React from 'react';\nimport classnames from 'classnames';\n\nvar getDotCount = function (spec) {\n  var dots;\n  dots = Math.ceil(spec.slideCount / spec.slidesToScroll);\n  return dots;\n};\n\n\nexport var Dots = React.createClass({\n\n  clickHandler: function (options, e) {\n    // In Autoplay the focus stays on clicked button even after transition\n    // to next slide. That only goes away by click somewhere outside\n    e.preventDefault();\n    this.props.clickHandler(options);\n  },\n  render: function () {\n\n    var dotCount = getDotCount({\n      slideCount: this.props.slideCount,\n      slidesToScroll: this.props.slidesToScroll\n    });\n\n    // Apply join & split to Array to pre-fill it for IE8\n    //\n    // Credit: http://stackoverflow.com/a/13735425/1849458\n    var dots = Array.apply(null, Array(dotCount + 1).join('0').split('')).map((x, i) => {\n\n      var leftBound = (i * this.props.slidesToScroll);\n      var rightBound = (i * this.props.slidesToScroll) + (this.props.slidesToScroll - 1);\n      var className = classnames({\n        'slick-active': (this.props.currentSlide >= leftBound) && (this.props.currentSlide <= rightBound)\n      });\n\n      var dotOptions = {\n        message: 'dots',\n        index: i,\n        slidesToScroll: this.props.slidesToScroll,\n        currentSlide: this.props.currentSlide\n      };\n\n      var onClick = this.clickHandler.bind(this, dotOptions);\n\n      return (\n        <li key={i} className={className}>\n          {React.cloneElement(this.props.customPaging(i), {onClick})}\n        </li>\n      );\n    });\n\n    return (\n      <ul className={this.props.dotsClass} style={{display: 'block'}}>\n        {dots}\n      </ul>\n    );\n\n  }\n});\n"}, {"instruction": "Create a React component that displays a YouTube video based on a provided video prop. Handle the case where the video prop is not available and display a \"Loading...\" message. Extract the video ID from the video prop and construct the YouTube embed URL. Use a responsive embed container and provide a title and description for the video below the embed.", "output": "import React from 'react';\n\nconst VideoDetail = ({video}) => {\n    if (!video) {\n        return <div>Loading...</div>;    \n    }\n\n    const videoId = video.id.videoId;\n    const url = `https://www.youtube.com/embed/${videoId}`;\n\n    return (\n        <div className=\"video-detail col-md-8\">\n            <div className=\"embed-responsive embed-responsive-16by9\">\n                <iframe className=\"embed-responsive-item\" src={url}></iframe>\n            </div>\n            <div className=\"details\">\n                <div>{video.snippet.title}</div>\n                <div>{video.snippet.description}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default VideoDetail;"}, {"instruction": "An input where the user can select a downloadable file from a list of downloadable files. The list is populated by fetching the available downloads from WordPress.", "output": "const {Component} = wp.element;\n\nimport apiFetch from '@wordpress/api-fetch';\nimport React from 'react';\nimport Select from 'react-select';\n\nexport default class DownloadInput extends Component {\n\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = { downloads: [] };\n\t}\n\n\tcomponentDidMount() {\n\t\tapiFetch( { url: dlmBlocks.ajax_getDownloads } ).then( results => {\n\t\t\tthis.setState({downloads: results });\n\t\t} );\n\t}\n\n\trender() {\n\t\tconst valueFromId = (opts, id) => opts.find(o => o.value === id);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Select\n\t\t\t\t\tvalue={valueFromId( this.state.downloads, this.props.selectedDownloadId )}\n\t\t\t\t\tonChange={(selectedOption) =>  this.props.onChange(selectedOption.value)}\n\t\t\t\t\toptions={this.state.downloads}\n\t\t\t\t\tisSearchable=\"true\"\n\t\t\t\t />\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n"}, {"instruction": "Create a React component using the `SvgIcon` component that renders an SVG icon of a battery with 50% charge. The SVG should use a fill opacity of 0.3 for the lighter part of the battery and a fill of black for the darker part. The component should be pure and have a display name of `DeviceBattery50`. It should also have a `muiName` property set to `SvgIcon`.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet DeviceBattery50 = (props) => (\n  <SvgIcon {...props}>\n    <path fillOpacity=\".3\" d=\"M17 5.33C17 4.6 16.4 4 15.67 4H14V2h-4v2H8.33C7.6 4 7 4.6 7 5.33V13h10V5.33z\"/><path d=\"M7 13v7.67C7 21.4 7.6 22 8.33 22h7.33c.74 0 1.34-.6 1.34-1.33V13H7z\"/>\n  </SvgIcon>\n);\nDeviceBattery50 = pure(DeviceBattery50);\nDeviceBattery50.displayName = 'DeviceBattery50';\nDeviceBattery50.muiName = 'SvgIcon';\n\nexport default DeviceBattery50;\n"}, {"instruction": "Generate the React code for a component that can be used to create an instance of the CKEditor WYSIWYG text editor with optional callbacks for being notified when changes to the editor are made.", "output": "//! Creates a ckeditor instance.  Contains options for taking callbacks involved with saving changes.\n/* global CKEDITOR */\n\nimport React from 'react';\nimport { connect } from 'dva';\n\n/**\n * After the CKEditor plugin has loaded, initialize the editor\n */\nfunction awaitCk(rand) {\n  setTimeout(() => {\n    let ckeditorLoaded = true;\n    try{ CKEDITOR; }\n    catch(e) {\n      if(e.name == 'ReferenceError') {\n        ckeditorLoaded = false;\n      }\n    }\n\n    if(ckeditorLoaded) {\n      CKEDITOR.replace( `ckeditor-${rand}` );\n    } else {\n      awaitCk(rand);\n    }\n  }, 50);\n}\n\nclass CKEditor extends React.Component {\n  componentDidMount() {\n    // add a script tag onto the document that loads the CKEditor script\n    let ckeditor_src = document.createElement('script');\n    ckeditor_src.type = 'text/javascript';\n    ckeditor_src.async = true;\n    ckeditor_src.src='/ckeditor/ckeditor.js';\n    document.getElementById('ckeditor-' + this.props.rand).appendChild(ckeditor_src);\n\n    // wait for the CKEditor script to load and then initialize the editor\n    awaitCk(this.props.rand);\n\n    // register our id as the active editor instance\n    this.props.dispatch({type: 'documents/setEditorId', id: this.props.rand});\n  }\n\n  shouldComponentUpdate(...args) {\n    return false;\n  }\n\n  render() {\n    return (\n      <textarea id={'ckeditor-' + this.props.rand} />\n    );\n  }\n}\n\nCKEditor.propTypes = {\n  rand: React.PropTypes.number.isRequired,\n};\n\nexport default connect()(CKEditor);\n"}, {"instruction": "Create a React component called NotFoundPage that displays a <h1> with the text \"Page Not Found\".", "output": "/**\n * NotFoundPage\n *\n * This is the page we show when the user visits a url that doesn't have a route\n *\n * NOTE: while this component should technically be a stateless functional\n * component (SFC), hot reloading does not currently support SFCs. If hot\n * reloading is not a necessity for you then you can refactor it and remove\n * the linting exception.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from './messages';\n\nexport default class NotFound extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function\n  render() {\n    return (\n      <h1>\n        <FormattedMessage {...messages.header} />\n      </h1>\n    );\n  }\n}\n"}, {"instruction": "Provide a React component that displays a table of greetings and includes a button for adding new greetings.", "output": "import React from 'react';\n\nconst GreetingMaster = (props) => {\n    const {greetings, onAdd} = props;\n    const body = greetings.map(greeting => <tr key={greeting.id}><td>{greeting.name}</td><td>{greeting.greeting}</td></tr>);\n    return (\n        <div>\n            <table>\n                <thead>\n                <tr><th>Name</th><th>Greeting</th></tr>\n                </thead>\n                <tbody>\n                {body}\n                </tbody>\n            </table>\n            <button\n                onClick={onAdd}>\n                Add\n            </button>\n        </div>\n    );\n};\n\nexport default GreetingMaster;"}, {"instruction": "Create a React component called `AvAlbum` that represents the Material Design album icon.", "output": "import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n\nlet AvAlbum = (props) => (\n  <SvgIcon {...props}>\n    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 14.5c-2.49 0-4.5-2.01-4.5-4.5S9.51 7.5 12 7.5s4.5 2.01 4.5 4.5-2.01 4.5-4.5 4.5zm0-5.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z\"/>\n  </SvgIcon>\n);\nAvAlbum = pure(AvAlbum);\nAvAlbum.displayName = 'AvAlbum';\nAvAlbum.muiName = 'SvgIcon';\n\nexport default AvAlbum;\n"}, {"instruction": "Create a React functional component that renders a page layout. The component should accept props for:\n- `id`: A unique identifier for the page.\n- `title`: The page title.\n- `isFetching`: A flag indicating whether the page is currently fetching data.\n- `children`: The page content.\n- `className`: A CSS class name to apply to the page container.\n- `meta_description`: The page meta description.\n- `meta_url`: The page meta URL.\n- `meta_title`: The page meta title.\n- `meta_preview`: The page meta preview image URL.\n- `meta_audio`: The page meta audio URL.\n\nThe component should render a loading indicator if `isFetching` is true, and the page content otherwise. The page content should include the page title, if present, and an ID component with the `id` prop.\n\nThe component should also render a `<Helmet>` component with the following meta tags:\n- `og:title` with the value of `meta_title`.\n- `twitter:title` with the value of `meta_title`.\n- `og:url` with the value of `meta_url`.\n- `twitter:url` with the value of `meta_url`.\n- `og:image` with the value of `meta_preview`.\n- `twitter:image` with the value of `meta_preview`.\n- `description` with the value of `meta_description`.\n- `og:description` with the value of `meta_description`.\n- `twitter:description` with the value of `meta_description`.\n- `og:audio` with the value of `meta_audio`, if present.", "output": "import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport Loading from '../loading';\nimport Id from '../id';\n\nconst Page = ({\n  id,\n  title,\n  isFetching,\n  children,\n  className,\n\n  meta_url,\n  meta_title,\n  meta_description,\n  meta_preview,\n  meta_audio,\n}) => {\n  let child;\n\n  if (isFetching) {\n    child = (\n      <div>\n        <Loading />\n        <Id index={id} />\n      </div>\n    );\n  } else {\n    child = (\n      <div className={className}>\n        {title != null && <h1 className=\"title-text box shadow\">{title}</h1>}\n        {children}\n        <Id index={id} />\n      </div>\n    );\n  }\n\n  let description = meta_description;\n  if (meta_description.length > 140)\n    description = `${description.substring(0, 140)} ...`;\n\n  let meta = [\n    { property: 'og:title', content: meta_title },\n    { name: 'twitter:title', content: meta_title },\n\n    { property: 'og:url', content: meta_url },\n    { name: 'twitter:url', content: meta_url },\n\n    { property: 'og:image', content: meta_preview },\n    { name: 'twitter:image', content: meta_preview },\n\n    { name: 'description', content: description },\n    { property: 'og:description', content: description },\n    { name: 'twitter:description', content: description },\n  ];\n\n  if (meta_audio) meta.push({ property: 'og:audio', content: meta_audio });\n\n  return (\n    <div>\n      <Helmet title={meta_title} meta={meta} />\n      {child}\n    </div>\n  );\n};\n\nPage.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  isFetching: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n\n  meta_description: PropTypes.string.isRequired,\n  meta_url: PropTypes.string.isRequired,\n  meta_title: PropTypes.string.isRequired,\n  meta_preview: PropTypes.string.isRequired,\n  meta_audio: PropTypes.string,\n};\n\nexport default Page;\n"}, {"instruction": "Provide a definition of `TextStylePropTypes` for React Native as a JavaScript object, including all the supported properties for styling text.", "output": "/**\n * https://github.com/facebook/react-native/blob/master/Libraries/Text/TextStylePropTypes.js\n */\nimport React from 'react';\nimport ColorPropType from './ColorPropType';\nimport ViewStylePropTypes from './ViewStylePropTypes';\n\nconst { PropTypes } = React;\n\n// TODO: use spread instead of Object.assign/create after #6560135 is fixed\nconst TextStylePropTypes = Object.assign(Object.create(ViewStylePropTypes), {\n  color: ColorPropType,\n  fontFamily: PropTypes.string,\n  fontSize: PropTypes.number,\n  fontStyle: PropTypes.oneOf(['normal', 'italic']),\n  /**\n   * Specifies font weight. The values 'normal' and 'bold' are supported for\n   * most fonts. Not all fonts have a variant for each of the numeric values,\n   * in that case the closest one is chosen.\n   */\n  fontWeight: PropTypes.oneOf(\n    ['normal', 'bold',\n     '100', '200', '300', '400', '500', '600', '700', '800', '900']\n  ),\n  textShadowOffset: PropTypes.shape(\n    {\n      width: PropTypes.number,\n      height: PropTypes.number\n    }\n  ),\n  textShadowRadius: PropTypes.number,\n  textShadowColor: ColorPropType,\n  /**\n   * @platform ios\n   */\n  letterSpacing: PropTypes.number,\n  lineHeight: PropTypes.number,\n  /**\n   * Specifies text alignment. The value 'justify' is only supported on iOS.\n   */\n  textAlign: PropTypes.oneOf(\n    ['auto', 'left', 'right', 'center', 'justify']\n  ),\n  /**\n   * @platform android\n   */\n  textAlignVertical: PropTypes.oneOf(\n    ['auto', 'top', 'bottom', 'center']\n  ),\n  /**\n   * @platform ios\n   */\n  textDecorationLine: PropTypes.oneOf(\n    ['none', 'underline', 'line-through', 'underline line-through']\n  ),\n  /**\n   * @platform ios\n   */\n  textDecorationStyle: PropTypes.oneOf(\n    ['solid', 'double', 'dotted', 'dashed']\n  ),\n  /**\n   * @platform ios\n   */\n  textDecorationColor: ColorPropType,\n  /**\n   * @platform ios\n   */\n  writingDirection: PropTypes.oneOf(\n    ['auto', 'ltr', 'rtl']\n  ),\n});\n\nmodule.exports = TextStylePropTypes;\n"}, {"instruction": "Write the component for the Mt2Mobile page with the title \"Mt2Mobile\". Add a meta description with the content \"Description of Mt2Mobile\".", "output": "/*\n *\n * Mt2Mobile\n *\n */\n\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nexport default class Mt2Mobile extends React.PureComponent {\n  render() {\n    return (\n      <div>\n        <Helmet title=\"Mt2Mobile\" meta={[ { name: 'description', content: 'Description of Mt2Mobile' }]}/>\n\n      //Remove this line and you can start writing your code here.\n      </div>\n    );\n  }\n}\n"}, {"instruction": "Create a React component that represents toolbox icons on a drag-and-drop interactive canvas. The component adds a new resource to the canvas when you drag and drop it onto the appropriate drop zone. Each icon should include an image mini preview of the resource it represents.", "output": "// @flow\nimport React, { Component } from 'react';\nimport { Image, Icon } from 'semantic-ui-react';\nimport { DragSource } from 'react-dnd';\nimport ImageGenerator from '../resources/imageGenerator';\nimport styles from './ToolboxComponent.css'; // eslint-disable-line flowtype-errors/show-errors\n\nconst componentSource = {\n  beginDrag(props) {\n    return {\n      name: props.name,\n    };\n  },\n\n  endDrag(props, monitor) {\n    const dropResult = monitor.getDropResult();\n\n    if (dropResult) {\n      try {\n        props.addResource(props.resourceType);\n      } catch (ex) {\n        props.error(ex.toString());\n      }\n    }\n  },\n};\n\nclass ToolboxComponent extends Component {\n  props: {\n    addResource: (resourceType: string) => void, // eslint-disable-line react/no-unused-prop-types\n    error: (errorMessage: string) => void, // eslint-disable-line react/no-unused-prop-types\n    resourceType: string\n  }\n\n  render() {\n    return this.props.connectDragSource(<div><Icon circular className={styles.toolboxIcon} size=\"big\"><Image src={ImageGenerator.findImage(this.props.resourceType)} size=\"mini\" centered /></Icon></div>); // eslint-disable-line react/prop-types\n  }\n}\n\nexport default DragSource('Component', componentSource, (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging(),\n}))(ToolboxComponent);\n"}, {"instruction": "Generate two small React components for routing:\n\n- The first one is a wrapper for the Switch component, it should pass a prop called `multiColumn` to the child components of the Switch.\n- The second one is a wrapper for the Route component, it should extract the params from the route and pass them to the rendered component, together with the content to be rendered inside (the children) and a prop called `multiColumn`.\n- The second one should also render a loading component when the component is fetching and an error component when there is an error.", "output": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Switch, Route } from 'react-router-dom';\n\nimport ColumnLoading from '../components/column_loading';\nimport BundleColumnError from '../components/bundle_column_error';\nimport BundleContainer from '../containers/bundle_container';\n\n// Small wrapper to pass multiColumn to the route components\nexport class WrappedSwitch extends React.PureComponent {\n\n  render () {\n    const { multiColumn, children } = this.props;\n\n    return (\n      <Switch>\n        {React.Children.map(children, child => React.cloneElement(child, { multiColumn }))}\n      </Switch>\n    );\n  }\n\n}\n\nWrappedSwitch.propTypes = {\n  multiColumn: PropTypes.bool,\n  children: PropTypes.node,\n};\n\n// Small Wrapper to extract the params from the route and pass\n// them to the rendered component, together with the content to\n// be rendered inside (the children)\nexport class WrappedRoute extends React.Component {\n\n  static propTypes = {\n    component: PropTypes.func.isRequired,\n    content: PropTypes.node,\n    multiColumn: PropTypes.bool,\n    componentParams: PropTypes.object,\n  };\n\n  static defaultProps = {\n    componentParams: {},\n  };\n\n  renderComponent = ({ match }) => {\n    const { component, content, multiColumn, componentParams } = this.props;\n\n    return (\n      <BundleContainer fetchComponent={component} loading={this.renderLoading} error={this.renderError}>\n        {Component => <Component params={match.params} multiColumn={multiColumn} {...componentParams}>{content}</Component>}\n      </BundleContainer>\n    );\n  }\n\n  renderLoading = () => {\n    return <ColumnLoading />;\n  }\n\n  renderError = (props) => {\n    return <BundleColumnError {...props} />;\n  }\n\n  render () {\n    const { component: Component, content, ...rest } = this.props;\n\n    return <Route {...rest} render={this.renderComponent} />;\n  }\n\n}\n"}, {"instruction": "Write a description for React code that showcases different variations of a Progress component, including inverted, attached, varying sizes, colors, and inverted colors for high contrast on dark backgrounds.", "output": "import React from 'react'\nimport ComponentExample from 'docs/app/Components/ComponentDoc/ComponentExample'\nimport ExampleSection from 'docs/app/Components/ComponentDoc/ExampleSection'\n\nconst ProgressVariationsExamples = () => (\n  <ExampleSection title='Variations'>\n    <ComponentExample\n      title='Inverted'\n      description='A progress bar can have its colors inverted.'\n      examplePath='modules/Progress/Variations/ProgressExampleInverted'\n    />\n    <ComponentExample\n      title='Attached'\n      description='A progress bar can show progress of an element.'\n      examplePath='modules/Progress/Variations/ProgressExampleAttached'\n    />\n    <ComponentExample\n      title='Size'\n      description='A progress bar can vary in size.'\n      examplePath='modules/Progress/Variations/ProgressExampleSize'\n    />\n    <ComponentExample\n      title='Color'\n      description='A progress bar can have different colors.'\n      examplePath='modules/Progress/Variations/ProgressExampleColor'\n    />\n    <ComponentExample\n      title='Inverted Color'\n      description='These colors can also be inverted for improved contrast on dark backgrounds.'\n      examplePath='modules/Progress/Variations/ProgressExampleInvertedColor'\n    />\n  </ExampleSection>\n)\n\nexport default ProgressVariationsExamples\n"}, {"instruction": "Generate the code for a basic React Native application that displays \"Welcome to React Native!\" in the center of the screen.", "output": "/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\nimport React, { Component } from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native';\n\nconst instructions = Platform.select({\n  ios: 'Press Cmd+R to reload,\\n' +\n    'Cmd+D or shake for dev menu',\n  android: 'Double tap R on your keyboard to reload,\\n' +\n    'Shake or press menu button for dev menu',\n});\n\ntype Props = {};\nexport default class App extends Component<Props> {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>\n          Welcome to React Native!\n        </Text>\n        <Text style={styles.instructions}>\n          To get started, edit App.js\n        </Text>\n        <Text style={styles.instructions}>\n          {instructions}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n"}, {"instruction": "Generate the React component code for a tabbed navigation bar with the tabs \"Overview\", \"Scenario\", \"Reports\", and \"Logs\". The navigation bar should be active on the selected tab and should include links to the corresponding sections.", "output": "import React from 'react';\n\nclass BenchNav extends React.Component {\n    render() {\n        const tabs = {\n            overview: \"Overview\",\n            scenario: \"Scenario\",\n            reports:  \"Reports\",\n            logs:     \"Logs\"\n        };\n\n        return (\n            <ul className=\"nav nav-tabs bench-nav\">\n                {Object.keys(tabs).map(function (tab) {\n                    let name = tabs[tab];\n                    let cssClass =  (this.props.selectedTab == tab) ? \"active\" : \"\";\n                    let link = `#/bench/${this.props.bench.id}/${tab}`;\n                    return (<li role=\"presentation\" key={tab} className={cssClass}><a href={link}>{name}</a></li>);\n                }.bind(this))}\n            </ul>\n        );\n    }\n};\n\nBenchNav.propTypes = {\n    bench: React.PropTypes.object.isRequired,\n    selectedTab: React.PropTypes.string\n};\n\nBenchNav.defaultProps = {\n    selectedTab: \"overview\"\n};\n\nexport default BenchNav;\n"}, {"instruction": "Create a simple Draft.js (a Javascript framework for creating rich text editors) editor with an image plugin.", "output": "// It is important to import the Editor which accepts plugins.\n\nimport Editor from '@draft-js-plugins/editor';\n\nimport createImagePlugin from '@draft-js-plugins/image';\nimport React from 'react';\n\nconst imagePlugin = createImagePlugin();\n\n// The Editor accepts an array of plugins. In this case, only the imagePlugin\n// is passed in, although it is possible to pass in multiple plugins.\nconst MyEditor = ({ editorState, onChange }) => (\n  <Editor\n    editorState={editorState}\n    onChange={onChange}\n    plugins={[imagePlugin]}\n  />\n);\n\nexport default MyEditor;\n"}, {"instruction": "Create a React component that displays a navigation bar with different links depending on whether a user is logged in or not. When a user is not logged in, the navigation bar should display links to the home page, a login page, and a registration page. When a user is logged in, the navigation bar should display links to the home page, a new post page, a settings page, and a profile page. The navigation bar should also display the user's profile picture and username if they are logged in.", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\n\nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;"}, {"instruction": "\n        Update the App component to integrate the new \"Header\" component. The Header component should display the application name and provide navigation links based on the current user's login status. When the user is logged in, display links to the home page, new post page, settings page, and the user's profile page. When the user is logged out, display links to the home page, sign in page, and sign up page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import agent from '../agent';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { APP_LOAD, REDIRECT } from '../constants/actionTypes';\nimport { Route, Switch } from 'react-router-dom';\nimport Article from '../components/Article';\nimport Editor from '../components/Editor';\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Profile from '../components/Profile';\nimport ProfileFavorites from '../components/ProfileFavorites';\nimport Register from '../components/Register';\nimport Settings from '../components/Settings';\nimport { store } from '../store';\nimport { push } from 'react-router-redux';\n\nconst mapStateToProps = state => {\n  return {\n    appLoaded: state.common.appLoaded,\n    appName: state.common.appName,\n    currentUser: state.common.currentUser,\n    redirectTo: state.common.redirectTo\n  }};\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: (payload, token) =>\n    dispatch({ type: APP_LOAD, payload, token, skipTracking: true }),\n  onRedirect: () =>\n    dispatch({ type: REDIRECT })\n});\n\nclass App extends React.Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.redirectTo) {\n      // this.context.router.replace(nextProps.redirectTo);\n      store.dispatch(push(nextProps.redirectTo));\n      this.props.onRedirect();\n    }\n  }\n\n  componentWillMount() {\n    const token = window.localStorage.getItem('jwt');\n    if (token) {\n      agent.setToken(token);\n    }\n\n    this.props.onLoad(token ? agent.Auth.current() : null, token);\n  }\n\n  render() {\n    if (this.props.appLoaded) {\n      return (\n        <div>\n            <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/editor/:slug\" component={Editor} />\n            <Route path=\"/editor\" component={Editor} />\n            <Route path=\"/article/:id\" component={Article} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/@:username/favorites\" component={ProfileFavorites} />\n            <Route path=\"/@:username\" component={Profile} />\n            </Switch>\n        </div>\n      );\n    }\n    return (\n      <div>\n      </div>\n    );\n  }\n}\n\n// App.contextTypes = {\n//   router: PropTypes.object.isRequired\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\"\n\n        Header Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\n\nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\"\n        ", "output": "import agent from '../agent';\nimport Header from './Header';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { APP_LOAD, REDIRECT } from '../constants/actionTypes';\nimport { Route, Switch } from 'react-router-dom';\nimport Article from '../components/Article';\nimport Editor from '../components/Editor';\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Profile from '../components/Profile';\nimport ProfileFavorites from '../components/ProfileFavorites';\nimport Register from '../components/Register';\nimport Settings from '../components/Settings';\nimport { store } from '../store';\nimport { push } from 'react-router-redux';\n\nconst mapStateToProps = state => {\n  return {\n    appLoaded: state.common.appLoaded,\n    appName: state.common.appName,\n    currentUser: state.common.currentUser,\n    redirectTo: state.common.redirectTo\n  }};\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: (payload, token) =>\n    dispatch({ type: APP_LOAD, payload, token, skipTracking: true }),\n  onRedirect: () =>\n    dispatch({ type: REDIRECT })\n});\n\nclass App extends React.Component {\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.redirectTo) {\n      // this.context.router.replace(nextProps.redirectTo);\n      store.dispatch(push(nextProps.redirectTo));\n      this.props.onRedirect();\n    }\n  }\n\n  componentWillMount() {\n    const token = window.localStorage.getItem('jwt');\n    if (token) {\n      agent.setToken(token);\n    }\n\n    this.props.onLoad(token ? agent.Auth.current() : null, token);\n  }\n\n  render() {\n    if (this.props.appLoaded) {\n      return (\n        <div>\n          <Header\n            appName={this.props.appName}\n            currentUser={this.props.currentUser} />\n            <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/editor/:slug\" component={Editor} />\n            <Route path=\"/editor\" component={Editor} />\n            <Route path=\"/article/:id\" component={Article} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/@:username/favorites\" component={ProfileFavorites} />\n            <Route path=\"/@:username\" component={Profile} />\n            </Switch>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <Header\n          appName={this.props.appName}\n          currentUser={this.props.currentUser} />\n      </div>\n    );\n  }\n}\n\n// App.contextTypes = {\n//   router: PropTypes.object.isRequired\n// };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);"}, {"instruction": "Generate the code for a React component that displays a navigation bar with links to the home page, sign in page, and sign up page. The component should only be displayed if the user is not currently logged in.", "output": "import React from 'react'; \nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\nexport default LoggedOutView;"}, {"instruction": "\n        When the user is not logged in, display a navigation bar with links to the home page, sign in page, and sign up page. When the user is logged in, display a navigation bar with links to the home page, new post page, settings page, and the user's profile page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n\"\n\n        LoggedOutView Component:\n        \"import React from 'react'; \nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\nexport default LoggedOutView;\"\n        ", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LoggedOutView from './LoggedOutView';\n\nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;"}, {"instruction": "Create a React component that displays a navigation bar for a logged-in user. The navigation bar should include links to the home page, a page for creating a new post, a settings page, and a profile page for the current user. The profile page link should display the user's username and profile picture. If the user is not logged in, the component should not display anything.", "output": "import React from 'react'; \nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\nexport default LoggedInView;\n"}, {"instruction": "\n        Integrate the new LoggedInView component into the Header component. When the user is logged in, display the LoggedInView component, which should include links to the home page, the new post page, the settings page, and the user's profile page. When the user is not logged in, display the LoggedOutView component, which should include links to the home page, the login page, and the sign up page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n\"\n\n        LoggedInView Component:\n        \"import React from 'react'; \nconst LoggedInView = props => {\n  if (props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/editor\" className=\"nav-link\">\n            <i className=\"ion-compose\"></i>&nbsp;New Post\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/settings\" className=\"nav-link\">\n            <i className=\"ion-gear-a\"></i>&nbsp;Settings\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            to={`/@${props.currentUser.username}`}\n            className=\"nav-link\">\n            <img src={props.currentUser.image} className=\"user-pic\" alt={props.currentUser.username} />\n            {props.currentUser.username}\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n\n  return null;\n};\nexport default LoggedInView;\n\"\n        ", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LoggedInView from './LoggedInView';\n\nconst LoggedOutView = props => {\n  if (!props.currentUser) {\n    return (\n      <ul className=\"nav navbar-nav pull-xs-right\">\n\n        <li className=\"nav-item\">\n          <Link to=\"/\" className=\"nav-link\">\n            Home\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign in\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign up\n          </Link>\n        </li>\n\n      </ul>\n    );\n  }\n  return null;\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n\n          <Link to=\"/\" className=\"navbar-brand\">\n            {this.props.appName.toLowerCase()}\n          </Link>\n\n          <LoggedOutView currentUser={this.props.currentUser} />\n\n          <LoggedInView currentUser={this.props.currentUser} />\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Header;"}, {"instruction": "Create a React component that displays a preview of an article, including its title, description, author, date, and number of favorites. Allow users to favorite and unfavorite the article by clicking a button. The button should change its appearance depending on whether the article is favorited or not.", "output": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport { ARTICLE_FAVORITED, ARTICLE_UNFAVORITED } from '../constants/actionTypes';\n\nconst FAVORITED_CLASS = 'btn btn-sm btn-primary';\nconst NOT_FAVORITED_CLASS = 'btn btn-sm btn-outline-primary';\n\nconst mapDispatchToProps = dispatch => ({\n  favorite: slug => dispatch({\n    type: ARTICLE_FAVORITED,\n    payload: agent.Articles.favorite(slug)\n  }),\n  unfavorite: slug => dispatch({\n    type: ARTICLE_UNFAVORITED,\n    payload: agent.Articles.unfavorite(slug)\n  })\n});\n\nconst ArticlePreview = props => {\n  const article = props.article;\n  const favoriteButtonClass = article.favorited ?\n    FAVORITED_CLASS :\n    NOT_FAVORITED_CLASS;\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (article.favorited) {\n      props.unfavorite(article.slug);\n    } else {\n      props.favorite(article.slug);\n    }\n  };\n\n  return (\n    <div className=\"article-preview\">\n      <div className=\"article-meta\">\n        <Link to={`/@${article.author.username}`}>\n          <img src={article.author.image} alt={article.author.username} />\n        </Link>\n\n        <div className=\"info\">\n          <Link className=\"author\" to={`/@${article.author.username}`}>\n            {article.author.username}\n          </Link>\n          <span className=\"date\">\n            {new Date(article.createdAt).toDateString()}\n          </span>\n        </div>\n\n        <div className=\"pull-xs-right\">\n          <button className={favoriteButtonClass} onClick={handleClick}>\n            <i className=\"ion-heart\"></i> {article.favoritesCount}\n          </button>\n        </div>\n      </div>\n\n      <Link to={`/article/${article.slug}`} className=\"preview-link\">\n        <h1>{article.title}</h1>\n        <p>{article.description}</p>\n        <span>Read more...</span>\n        <ul className=\"tag-list\">\n          {\n            article.tagList.map(tag => {\n              return (\n                <li className=\"tag-default tag-pill tag-outline\" key={tag}>\n                  {tag}\n                </li>\n              )\n            })\n          }\n        </ul>\n      </Link>\n    </div>\n  );\n}\n\nexport default connect(() => ({}), mapDispatchToProps)(ArticlePreview);"}, {"instruction": "\n        In the ArticleList component, replace the placeholder `<div>` elements with instances of the ArticlePreview component, passing in each article as a prop. Ensure that each ArticlePreview component has a unique key prop set to the article's slug.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <div key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;\n\"\n\n        ArticlePreview Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport { ARTICLE_FAVORITED, ARTICLE_UNFAVORITED } from '../constants/actionTypes';\n\nconst FAVORITED_CLASS = 'btn btn-sm btn-primary';\nconst NOT_FAVORITED_CLASS = 'btn btn-sm btn-outline-primary';\n\nconst mapDispatchToProps = dispatch => ({\n  favorite: slug => dispatch({\n    type: ARTICLE_FAVORITED,\n    payload: agent.Articles.favorite(slug)\n  }),\n  unfavorite: slug => dispatch({\n    type: ARTICLE_UNFAVORITED,\n    payload: agent.Articles.unfavorite(slug)\n  })\n});\n\nconst ArticlePreview = props => {\n  const article = props.article;\n  const favoriteButtonClass = article.favorited ?\n    FAVORITED_CLASS :\n    NOT_FAVORITED_CLASS;\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (article.favorited) {\n      props.unfavorite(article.slug);\n    } else {\n      props.favorite(article.slug);\n    }\n  };\n\n  return (\n    <div className=\"article-preview\">\n      <div className=\"article-meta\">\n        <Link to={`/@${article.author.username}`}>\n          <img src={article.author.image} alt={article.author.username} />\n        </Link>\n\n        <div className=\"info\">\n          <Link className=\"author\" to={`/@${article.author.username}`}>\n            {article.author.username}\n          </Link>\n          <span className=\"date\">\n            {new Date(article.createdAt).toDateString()}\n          </span>\n        </div>\n\n        <div className=\"pull-xs-right\">\n          <button className={favoriteButtonClass} onClick={handleClick}>\n            <i className=\"ion-heart\"></i> {article.favoritesCount}\n          </button>\n        </div>\n      </div>\n\n      <Link to={`/article/${article.slug}`} className=\"preview-link\">\n        <h1>{article.title}</h1>\n        <p>{article.description}</p>\n        <span>Read more...</span>\n        <ul className=\"tag-list\">\n          {\n            article.tagList.map(tag => {\n              return (\n                <li className=\"tag-default tag-pill tag-outline\" key={tag}>\n                  {tag}\n                </li>\n              )\n            })\n          }\n        </ul>\n      </Link>\n    </div>\n  );\n}\n\nexport default connect(() => ({}), mapDispatchToProps)(ArticlePreview);\"\n        ", "output": "import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;"}, {"instruction": "Create a React component that displays a pagination bar for a list of items. The component should only be visible if there are more than 10 items in the list. The pagination bar should display page numbers and allow the user to click on a page number to navigate to that page. When a page number is clicked, the component should call a function that sets the current page and fetches the data for that page. The component should not be concerned with the specific implementation of the data fetching function, but should simply call the function that is passed to it as a prop.", "output": "import React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport { SET_PAGE } from '../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onSetPage: (page, payload) =>\n    dispatch({ type: SET_PAGE, page, payload })\n});\n\nconst ListPagination = props => {\n  if (props.articlesCount <= 10) {\n    return null;\n  }\n\n  const range = [];\n  for (let i = 0; i < Math.ceil(props.articlesCount / 10); ++i) {\n    range.push(i);\n  }\n\n  const setPage = page => {\n    if(props.pager) {\n      props.onSetPage(page, props.pager(page));\n    }else {\n      props.onSetPage(page, agent.Articles.all(page))\n    }\n  };\n\n  return (\n    <nav>\n      <ul className=\"pagination\">\n\n        {\n          range.map(v => {\n            const isCurrent = v === props.currentPage;\n            const onClick = ev => {\n              ev.preventDefault();\n              setPage(v);\n            };\n            return (\n              <li\n                className={ isCurrent ? 'page-item active' : 'page-item' }\n                onClick={onClick}\n                key={v.toString()}>\n\n                <a className=\"page-link\" href=\"\">{v + 1}</a>\n\n              </li>\n            );\n          })\n        }\n\n      </ul>\n    </nav>\n  );\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(ListPagination);"}, {"instruction": "\n        In the ArticleList component, add a ListPagination component below the list of articles. The ListPagination component should display a pagination control that allows the user to navigate through the pages of articles. The pagination control should display the current page number and the total number of pages. When the user clicks on a page number, the ListPagination component should fetch the articles for that page and update the state of the ArticleList component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticlePreview from './ArticlePreview';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default ArticleList;\n\"\n\n        ListPagination Component:\n        \"import React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport { SET_PAGE } from '../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onSetPage: (page, payload) =>\n    dispatch({ type: SET_PAGE, page, payload })\n});\n\nconst ListPagination = props => {\n  if (props.articlesCount <= 10) {\n    return null;\n  }\n\n  const range = [];\n  for (let i = 0; i < Math.ceil(props.articlesCount / 10); ++i) {\n    range.push(i);\n  }\n\n  const setPage = page => {\n    if(props.pager) {\n      props.onSetPage(page, props.pager(page));\n    }else {\n      props.onSetPage(page, agent.Articles.all(page))\n    }\n  };\n\n  return (\n    <nav>\n      <ul className=\"pagination\">\n\n        {\n          range.map(v => {\n            const isCurrent = v === props.currentPage;\n            const onClick = ev => {\n              ev.preventDefault();\n              setPage(v);\n            };\n            return (\n              <li\n                className={ isCurrent ? 'page-item active' : 'page-item' }\n                onClick={onClick}\n                key={v.toString()}>\n\n                <a className=\"page-link\" href=\"\">{v + 1}</a>\n\n              </li>\n            );\n          })\n        }\n\n      </ul>\n    </nav>\n  );\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(ListPagination);\"\n        ", "output": "import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;"}, {"instruction": "Create a React component that displays a list of errors. The component should accept an object of errors as a prop. If there are any errors, the component should render a list of error messages. Each error message should include the error key and the error message. If there are no errors, the component should not render anything.", "output": "import React from 'react';\n\nclass ListErrors extends React.Component {\n  render() {\n    const errors = this.props.errors;\n    if (errors) {\n      return (\n        <ul className=\"error-messages\">\n          {\n            Object.keys(errors).map(key => {\n              return (\n                <li key={key}>\n                  {key} {errors[key]}\n                </li>\n              );\n            })\n          }\n        </ul>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ListErrors;"}, {"instruction": "\n        Integrate the ListErrors component into the Editor component. The ListErrors component should display any errors that are passed to it as props. The ListErrors component should be placed within the Editor component, above the form.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  ADD_TAG,\n  EDITOR_PAGE_LOADED,\n  REMOVE_TAG,\n  ARTICLE_SUBMITTED,\n  EDITOR_PAGE_UNLOADED,\n  UPDATE_FIELD_EDITOR\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.editor\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddTag: () =>\n    dispatch({ type: ADD_TAG }),\n  onLoad: payload =>\n    dispatch({ type: EDITOR_PAGE_LOADED, payload }),\n  onRemoveTag: tag =>\n    dispatch({ type: REMOVE_TAG, tag }),\n  onSubmit: payload =>\n    dispatch({ type: ARTICLE_SUBMITTED, payload }),\n  onUnload: payload =>\n    dispatch({ type: EDITOR_PAGE_UNLOADED }),\n  onUpdateField: (key, value) =>\n    dispatch({ type: UPDATE_FIELD_EDITOR, key, value })\n});\n\nclass Editor extends React.Component {\n  constructor() {\n    super();\n\n    const updateFieldEvent =\n      key => ev => this.props.onUpdateField(key, ev.target.value);\n    this.changeTitle = updateFieldEvent('title');\n    this.changeDescription = updateFieldEvent('description');\n    this.changeBody = updateFieldEvent('body');\n    this.changeTagInput = updateFieldEvent('tagInput');\n\n    this.watchForEnter = ev => {\n      if (ev.keyCode === 13) {\n        ev.preventDefault();\n        this.props.onAddTag();\n      }\n    };\n\n    this.removeTagHandler = tag => () => {\n      this.props.onRemoveTag(tag);\n    };\n\n    this.submitForm = ev => {\n      ev.preventDefault();\n      const article = {\n        title: this.props.title,\n        description: this.props.description,\n        body: this.props.body,\n        tagList: this.props.tagList\n      };\n\n      const slug = { slug: this.props.articleSlug };\n      const promise = this.props.articleSlug ?\n        agent.Articles.update(Object.assign(article, slug)) :\n        agent.Articles.create(article);\n\n      this.props.onSubmit(promise);\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.match.params.slug !== nextProps.match.params.slug) {\n      if (nextProps.match.params.slug) {\n        this.props.onUnload();\n        return this.props.onLoad(agent.Articles.get(this.props.match.params.slug));\n      }\n      this.props.onLoad(null);\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.match.params.slug) {\n      return this.props.onLoad(agent.Articles.get(this.props.match.params.slug));\n    }\n    this.props.onLoad(null);\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"editor-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-10 offset-md-1 col-xs-12\">\n\n              <form>\n                <fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"text\"\n                      placeholder=\"Article Title\"\n                      value={this.props.title}\n                      onChange={this.changeTitle} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"What's this article about?\"\n                      value={this.props.description}\n                      onChange={this.changeDescription} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <textarea\n                      className=\"form-control\"\n                      rows=\"8\"\n                      placeholder=\"Write your article (in markdown)\"\n                      value={this.props.body}\n                      onChange={this.changeBody}>\n                    </textarea>\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"Enter tags\"\n                      value={this.props.tagInput}\n                      onChange={this.changeTagInput}\n                      onKeyUp={this.watchForEnter} />\n\n                    <div className=\"tag-list\">\n                      {\n                        (this.props.tagList || []).map(tag => {\n                          return (\n                            <span className=\"tag-default tag-pill\" key={tag}>\n                              <i  className=\"ion-close-round\"\n                                  onClick={this.removeTagHandler(tag)}>\n                              </i>\n                              {tag}\n                            </span>\n                          );\n                        })\n                      }\n                    </div>\n                  </fieldset>\n\n                  <button\n                    className=\"btn btn-lg pull-xs-right btn-primary\"\n                    type=\"button\"\n                    disabled={this.props.inProgress}\n                    onClick={this.submitForm}>\n                    Publish Article\n                  </button>\n\n                </fieldset>\n              </form>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);\n\"\n\n        ListErrors Component:\n        \"import React from 'react';\n\nclass ListErrors extends React.Component {\n  render() {\n    const errors = this.props.errors;\n    if (errors) {\n      return (\n        <ul className=\"error-messages\">\n          {\n            Object.keys(errors).map(key => {\n              return (\n                <li key={key}>\n                  {key} {errors[key]}\n                </li>\n              );\n            })\n          }\n        </ul>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ListErrors;\"\n        ", "output": "import ListErrors from './ListErrors';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  ADD_TAG,\n  EDITOR_PAGE_LOADED,\n  REMOVE_TAG,\n  ARTICLE_SUBMITTED,\n  EDITOR_PAGE_UNLOADED,\n  UPDATE_FIELD_EDITOR\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.editor\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddTag: () =>\n    dispatch({ type: ADD_TAG }),\n  onLoad: payload =>\n    dispatch({ type: EDITOR_PAGE_LOADED, payload }),\n  onRemoveTag: tag =>\n    dispatch({ type: REMOVE_TAG, tag }),\n  onSubmit: payload =>\n    dispatch({ type: ARTICLE_SUBMITTED, payload }),\n  onUnload: payload =>\n    dispatch({ type: EDITOR_PAGE_UNLOADED }),\n  onUpdateField: (key, value) =>\n    dispatch({ type: UPDATE_FIELD_EDITOR, key, value })\n});\n\nclass Editor extends React.Component {\n  constructor() {\n    super();\n\n    const updateFieldEvent =\n      key => ev => this.props.onUpdateField(key, ev.target.value);\n    this.changeTitle = updateFieldEvent('title');\n    this.changeDescription = updateFieldEvent('description');\n    this.changeBody = updateFieldEvent('body');\n    this.changeTagInput = updateFieldEvent('tagInput');\n\n    this.watchForEnter = ev => {\n      if (ev.keyCode === 13) {\n        ev.preventDefault();\n        this.props.onAddTag();\n      }\n    };\n\n    this.removeTagHandler = tag => () => {\n      this.props.onRemoveTag(tag);\n    };\n\n    this.submitForm = ev => {\n      ev.preventDefault();\n      const article = {\n        title: this.props.title,\n        description: this.props.description,\n        body: this.props.body,\n        tagList: this.props.tagList\n      };\n\n      const slug = { slug: this.props.articleSlug };\n      const promise = this.props.articleSlug ?\n        agent.Articles.update(Object.assign(article, slug)) :\n        agent.Articles.create(article);\n\n      this.props.onSubmit(promise);\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.match.params.slug !== nextProps.match.params.slug) {\n      if (nextProps.match.params.slug) {\n        this.props.onUnload();\n        return this.props.onLoad(agent.Articles.get(this.props.match.params.slug));\n      }\n      this.props.onLoad(null);\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.match.params.slug) {\n      return this.props.onLoad(agent.Articles.get(this.props.match.params.slug));\n    }\n    this.props.onLoad(null);\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"editor-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-10 offset-md-1 col-xs-12\">\n\n              <ListErrors errors={this.props.errors}></ListErrors>\n\n              <form>\n                <fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"text\"\n                      placeholder=\"Article Title\"\n                      value={this.props.title}\n                      onChange={this.changeTitle} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"What's this article about?\"\n                      value={this.props.description}\n                      onChange={this.changeDescription} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <textarea\n                      className=\"form-control\"\n                      rows=\"8\"\n                      placeholder=\"Write your article (in markdown)\"\n                      value={this.props.body}\n                      onChange={this.changeBody}>\n                    </textarea>\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      placeholder=\"Enter tags\"\n                      value={this.props.tagInput}\n                      onChange={this.changeTagInput}\n                      onKeyUp={this.watchForEnter} />\n\n                    <div className=\"tag-list\">\n                      {\n                        (this.props.tagList || []).map(tag => {\n                          return (\n                            <span className=\"tag-default tag-pill\" key={tag}>\n                              <i  className=\"ion-close-round\"\n                                  onClick={this.removeTagHandler(tag)}>\n                              </i>\n                              {tag}\n                            </span>\n                          );\n                        })\n                      }\n                    </div>\n                  </fieldset>\n\n                  <button\n                    className=\"btn btn-lg pull-xs-right btn-primary\"\n                    type=\"button\"\n                    disabled={this.props.inProgress}\n                    onClick={this.submitForm}>\n                    Publish Article\n                  </button>\n\n                </fieldset>\n              </form>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);"}, {"instruction": "Create a React component that displays a list of errors. The errors should be displayed in a bulleted list, with each error message appearing on its own line. If there are no errors, the component should not render anything.", "output": "import React from 'react';\n\nclass ListErrors extends React.Component {\n  render() {\n    const errors = this.props.errors;\n    if (errors) {\n      return (\n        <ul className=\"error-messages\">\n          {\n            Object.keys(errors).map(key => {\n              return (\n                <li key={key}>\n                  {key} {errors[key]}\n                </li>\n              );\n            })\n          }\n        </ul>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ListErrors;"}, {"instruction": "\n        Add a new component called \"ListErrors\" to the \"Login\" component. This component should display a list of errors that are passed to it as props. The \"ListErrors\" component should be placed below the \"Need an account?\" link and above the login form.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import { Link } from 'react-router-dom';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  UPDATE_FIELD_AUTH,\n  LOGIN,\n  LOGIN_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({ ...state.auth });\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeEmail: value =>\n    dispatch({ type: UPDATE_FIELD_AUTH, key: 'email', value }),\n  onChangePassword: value =>\n    dispatch({ type: UPDATE_FIELD_AUTH, key: 'password', value }),\n  onSubmit: (email, password) =>\n    dispatch({ type: LOGIN, payload: agent.Auth.login(email, password) }),\n  onUnload: () =>\n    dispatch({ type: LOGIN_PAGE_UNLOADED })\n});\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.changeEmail = ev => this.props.onChangeEmail(ev.target.value);\n    this.changePassword = ev => this.props.onChangePassword(ev.target.value);\n    this.submitForm = (email, password) => ev => {\n      ev.preventDefault();\n      this.props.onSubmit(email, password);\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    const email = this.props.email;\n    const password = this.props.password;\n    return (\n      <div className=\"auth-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n              <h1 className=\"text-xs-center\">Sign In</h1>\n              <p className=\"text-xs-center\">\n                <Link to=\"/register\">\n                  Need an account?\n                </Link>\n              </p>\n\n              <form onSubmit={this.submitForm(email, password)}>\n                <fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      value={email}\n                      onChange={this.changeEmail} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      value={password}\n                      onChange={this.changePassword} />\n                  </fieldset>\n\n                  <button\n                    className=\"btn btn-lg btn-primary pull-xs-right\"\n                    type=\"submit\"\n                    disabled={this.props.inProgress}>\n                    Sign in\n                  </button>\n\n                </fieldset>\n              </form>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\"\n\n        ListErrors Component:\n        \"import React from 'react';\n\nclass ListErrors extends React.Component {\n  render() {\n    const errors = this.props.errors;\n    if (errors) {\n      return (\n        <ul className=\"error-messages\">\n          {\n            Object.keys(errors).map(key => {\n              return (\n                <li key={key}>\n                  {key} {errors[key]}\n                </li>\n              );\n            })\n          }\n        </ul>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ListErrors;\"\n        ", "output": "import { Link } from 'react-router-dom';\nimport ListErrors from './ListErrors';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  UPDATE_FIELD_AUTH,\n  LOGIN,\n  LOGIN_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({ ...state.auth });\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeEmail: value =>\n    dispatch({ type: UPDATE_FIELD_AUTH, key: 'email', value }),\n  onChangePassword: value =>\n    dispatch({ type: UPDATE_FIELD_AUTH, key: 'password', value }),\n  onSubmit: (email, password) =>\n    dispatch({ type: LOGIN, payload: agent.Auth.login(email, password) }),\n  onUnload: () =>\n    dispatch({ type: LOGIN_PAGE_UNLOADED })\n});\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.changeEmail = ev => this.props.onChangeEmail(ev.target.value);\n    this.changePassword = ev => this.props.onChangePassword(ev.target.value);\n    this.submitForm = (email, password) => ev => {\n      ev.preventDefault();\n      this.props.onSubmit(email, password);\n    };\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    const email = this.props.email;\n    const password = this.props.password;\n    return (\n      <div className=\"auth-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n              <h1 className=\"text-xs-center\">Sign In</h1>\n              <p className=\"text-xs-center\">\n                <Link to=\"/register\">\n                  Need an account?\n                </Link>\n              </p>\n\n              <ListErrors errors={this.props.errors} />\n\n              <form onSubmit={this.submitForm(email, password)}>\n                <fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      value={email}\n                      onChange={this.changeEmail} />\n                  </fieldset>\n\n                  <fieldset className=\"form-group\">\n                    <input\n                      className=\"form-control form-control-lg\"\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      value={password}\n                      onChange={this.changePassword} />\n                  </fieldset>\n\n                  <button\n                    className=\"btn btn-lg btn-primary pull-xs-right\"\n                    type=\"submit\"\n                    disabled={this.props.inProgress}>\n                    Sign in\n                  </button>\n\n                </fieldset>\n              </form>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"}, {"instruction": "Create a React component that displays a button that links to a settings page when the user is logged in. The button should have the text \"Edit Profile Settings\" and the class names \"btn btn-sm btn-outline-secondary action-btn\". If the user is not logged in, the component should not render anything.", "output": "import React from 'react';\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\nexport default EditProfileSettings;"}, {"instruction": "\n        In the Profile page, when the user is viewing their own profile, add a link to the \"Edit Profile Settings\" page next to their username and profile picture. This link should only be visible when the user is viewing their own profile.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\n\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };\n\"\n\n        EditProfileSettings Component:\n        \"import React from 'react';\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\nexport default EditProfileSettings;\"\n        ", "output": "import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\nimport EditProfileSettings from './EditProfileSettings';\n\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\n\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };"}, {"instruction": "Create a button that allows a user to follow or unfollow another user. The button should display \"Follow\" when the user is not following the other user and \"Unfollow\" when the user is following the other user. When the button is clicked, it should trigger a function that either follows or unfollows the other user, depending on the current state. The button should be disabled if the user is the same as the one being followed.", "output": "import React from 'react';\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\nexport default FollowUserButton;\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};"}, {"instruction": "\n        In the Profile component, integrate the FollowUserButton component. The FollowUserButton should appear below the EditProfileSettings component and should allow users to follow or unfollow the profile owner. The button should be hidden if the profile owner is the current user.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };\n\"\n\n        FollowUserButton Component:\n        \"import React from 'react';\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\nexport default FollowUserButton;\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\"\n        ", "output": "import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\nimport FollowUserButton from './FollowUserButton';\n\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };"}, {"instruction": "Create a React component that displays a list of articles. If there are no articles, display a \"Loading...\" message. If there are no articles, display a \"No articles are here... yet.\" message. Otherwise, display a list of article previews and a pagination component.", "output": "import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;"}, {"instruction": "\n        Integrate the new \"ArticleList\" component into the \"Profile\" component.\n\nThe \"ArticleList\" component should display a list of articles. If there are no articles, it should display a message indicating that there are no articles. If the articles are still loading, it should display a loading message.\n\nThe \"Profile\" component should use the \"ArticleList\" component to display the user's articles. The \"ArticleList\" component should be placed within the \"articles-toggle\" div.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\n\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\n\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              \n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };\n\"\n\n        ArticleList Component:\n        \"import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;\"\n        ", "output": "import ArticleList from './ArticleList';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  FOLLOW_USER,\n  UNFOLLOW_USER,\n  PROFILE_PAGE_LOADED,\n  PROFILE_PAGE_UNLOADED\n} from '../constants/actionTypes';\n\nconst EditProfileSettings = props => {\n  if (props.isUser) {\n    return (\n      <Link\n        to=\"/settings\"\n        className=\"btn btn-sm btn-outline-secondary action-btn\">\n        <i className=\"ion-gear-a\"></i> Edit Profile Settings\n      </Link>\n    );\n  }\n  return null;\n};\n\nconst FollowUserButton = props => {\n  if (props.isUser) {\n    return null;\n  }\n\n  let classes = 'btn btn-sm action-btn';\n  if (props.user.following) {\n    classes += ' btn-secondary';\n  } else {\n    classes += ' btn-outline-secondary';\n  }\n\n  const handleClick = ev => {\n    ev.preventDefault();\n    if (props.user.following) {\n      props.unfollow(props.user.username)\n    } else {\n      props.follow(props.user.username)\n    }\n  };\n\n  return (\n    <button\n      className={classes}\n      onClick={handleClick}>\n      <i className=\"ion-plus-round\"></i>\n      &nbsp;\n      {props.user.following ? 'Unfollow' : 'Follow'} {props.user.username}\n    </button>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  currentUser: state.common.currentUser,\n  profile: state.profile\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFollow: username => dispatch({\n    type: FOLLOW_USER,\n    payload: agent.Profile.follow(username)\n  }),\n  onLoad: payload => dispatch({ type: PROFILE_PAGE_LOADED, payload }),\n  onUnfollow: username => dispatch({\n    type: UNFOLLOW_USER,\n    payload: agent.Profile.unfollow(username)\n  }),\n  onUnload: () => dispatch({ type: PROFILE_PAGE_UNLOADED })\n});\n\nclass Profile extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Profile.get(this.props.match.params.username),\n      agent.Articles.byAuthor(this.props.match.params.username)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  renderTabs() {\n    return (\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link active\"\n            to={`/@${this.props.profile.username}`}>\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className=\"nav-link\"\n            to={`/@${this.props.profile.username}/favorites`}>\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n\n  render() {\n    const profile = this.props.profile;\n    if (!profile) {\n      return null;\n    }\n\n    const isUser = this.props.currentUser &&\n      this.props.profile.username === this.props.currentUser.username;\n\n    return (\n      <div className=\"profile-page\">\n\n        <div className=\"user-info\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n                <img src={profile.image} className=\"user-img\" alt={profile.username} />\n                <h4>{profile.username}</h4>\n                <p>{profile.bio}</p>\n\n                <EditProfileSettings isUser={isUser} />\n                <FollowUserButton\n                  isUser={isUser}\n                  user={profile}\n                  follow={this.props.onFollow}\n                  unfollow={this.props.onUnfollow}\n                  />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"row\">\n\n            <div className=\"col-xs-12 col-md-10 offset-md-1\">\n\n              <div className=\"articles-toggle\">\n                {this.renderTabs()}\n              </div>\n\n              <ArticleList\n                pager={this.props.pager}\n                articles={this.props.articles}\n                articlesCount={this.props.articlesCount}\n                state={this.props.currentPage} />\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\nexport { Profile, mapStateToProps };"}, {"instruction": "Create a React component that displays a list of articles. If there are no articles, display a \"Loading...\" message. If there are no articles, display a \"No articles are here... yet.\" message. Otherwise, display a list of article previews and a pagination component.", "output": "import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;"}, {"instruction": "\n        Add the ArticleList component to the MainView component. The ArticleList component should display a list of articles and a pagination component below the list. The ArticleList component should only be displayed if the articles prop is not empty and is not loading. If the articles prop is empty, display a message indicating that there are no articles. If the articles prop is loading, display a loading message.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n\"\n\n        ArticleList Component:\n        \"import ArticlePreview from './ArticlePreview';\nimport ListPagination from './ListPagination';\nimport React from 'react';\n\nconst ArticleList = props => {\n  if (!props.articles) {\n    return (\n      <div className=\"article-preview\">Loading...</div>\n    );\n  }\n\n  if (props.articles.length === 0) {\n    return (\n      <div className=\"article-preview\">\n        No articles are here... yet.\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {\n        props.articles.map(article => {\n          return (\n            <ArticlePreview article={article} key={article.slug} />\n          );\n        })\n      }\n\n      <ListPagination\n        pager={props.pager}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default ArticleList;\"\n        ", "output": "import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);"}, {"instruction": "Create a React component that renders a navigation tab for a \"Your Feed\" page. When the tab is clicked, it should trigger a function that updates the current tab to \"feed\" and fetches and displays a feed of articles. The tab should be active when the current tab is \"feed\" and inactive otherwise.", "output": "import React from 'react';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\nexport default YourFeedTab;"}, {"instruction": "\n        Add a new tab to the MainView component that allows users to view their personalized feed of articles. The new tab should be labeled \"Your Feed\" and should only be visible to users who are logged in. When the user clicks on the \"Your Feed\" tab, they should be shown a list of articles that are relevant to their interests.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n\"\n\n        YourFeedTab Component:\n        \"import React from 'react';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\nexport default YourFeedTab;\"\n        ", "output": "import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\nimport YourFeedTab from './YourFeedTab';\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);"}, {"instruction": "Generate a React component that renders a navigation tab with the label \"Global Feed\". When the tab is clicked, it should trigger a callback function that updates the current tab to \"all\" and fetches and displays a list of articles. The tab should be active when the current tab is \"all\".", "output": "import React from 'react';\n\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\nexport default GlobalFeedTab;"}, {"instruction": "\n        In the MainView component, add a new tab to the navigation bar that displays \"Global Feed\". When the user clicks on this tab, it should load all articles from the server and display them in the ArticleList component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n\"\n\n        GlobalFeedTab Component:\n        \"import React from 'react';\n\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\nexport default GlobalFeedTab;\"\n        ", "output": "import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\nimport GlobalFeedTab from '../GlobalFeedTab';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);"}, {"instruction": "Create a React component that displays a navigation tab for filtering articles by a specific tag. The tab should only be visible if a tag is provided. The tab should include an icon and the tag name.", "output": "import React from 'react';\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\nexport default TagFilterTab;"}, {"instruction": "\n        In the MainView component, integrate the TagFilterTab component into the navigation bar. The TagFilterTab should only be displayed if a tag is provided. When a tag is provided, the TagFilterTab should display the tag name and an icon. The TagFilterTab should not be clickable.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);\n\"\n\n        TagFilterTab Component:\n        \"import React from 'react';\nconst TagFilterTab = props => {\n  if (!props.tag) {\n    return null;\n  }\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"\" className=\"nav-link active\">\n        <i className=\"ion-pound\"></i> {props.tag}\n      </a>\n    </li>\n  );\n};\n\nconst mapStateToProps = state => ({\n  ...state.articleList,\n  tags: state.home.tags,\n  token: state.common.token\n});\nexport default TagFilterTab;\"\n        ", "output": "import ArticleList from '../ArticleList';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { CHANGE_TAB } from '../../constants/actionTypes';\nimport TagFilterTab from './TagFilterTab';\n\nconst YourFeedTab = props => {\n  if (props.token) {\n    const clickHandler = ev => {\n      ev.preventDefault();\n      props.onTabClick('feed', agent.Articles.feed, agent.Articles.feed());\n    }\n\n    return (\n      <li className=\"nav-item\">\n        <a  href=\"\"\n            className={ props.tab === 'feed' ? 'nav-link active' : 'nav-link' }\n            onClick={clickHandler}>\n          Your Feed\n        </a>\n      </li>\n    );\n  }\n  return null;\n};\n\nconst GlobalFeedTab = props => {\n  const clickHandler = ev => {\n    ev.preventDefault();\n    props.onTabClick('all', agent.Articles.all, agent.Articles.all());\n  };\n  return (\n    <li className=\"nav-item\">\n      <a\n        href=\"\"\n        className={ props.tab === 'all' ? 'nav-link active' : 'nav-link' }\n        onClick={clickHandler}>\n        Global Feed\n      </a>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onTabClick: (tab, pager, payload) => dispatch({ type: CHANGE_TAB, tab, pager, payload })\n});\n\nconst MainView = props => {\n  return (\n    <div className=\"col-md-9\">\n      <div className=\"feed-toggle\">\n        <ul className=\"nav nav-pills outline-active\">\n\n          <YourFeedTab\n            token={props.token}\n            tab={props.tab}\n            onTabClick={props.onTabClick} />\n\n          <GlobalFeedTab tab={props.tab} onTabClick={props.onTabClick} />\n\n          <TagFilterTab tag={props.tag} />\n\n        </ul>\n      </div>\n\n      <ArticleList\n        pager={props.pager}\n        articles={props.articles}\n        loading={props.loading}\n        articlesCount={props.articlesCount}\n        currentPage={props.currentPage} />\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainView);"}, {"instruction": "Create a React component that displays a banner with the application name and a description. The banner should only be visible if the user is not logged in.", "output": "import React from 'react';\n\nconst Banner = ({ appName, token }) => {\n  if (token) {\n    return null;\n  }\n  return (\n    <div className=\"banner\">\n      <div className=\"container\">\n        <h1 className=\"logo-font\">\n          {appName.toLowerCase()}\n        </h1>\n        <p>A place to share your knowledge.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;"}, {"instruction": "\n        Integrate the new \"Banner\" component into the \"Home\" component. The \"Banner\" component should only be visible when the user is not logged in. When the user is logged in, the \"Banner\" component should not be displayed. The \"Banner\" component should be placed at the top of the \"Home\" component, above the \"MainView\" and \"Tags\" components.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import MainView from './MainView';\nimport React from 'react';\nimport Tags from './Tags';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport {\n  HOME_PAGE_LOADED,\n  HOME_PAGE_UNLOADED,\n  APPLY_TAG_FILTER\n} from '../../constants/actionTypes';\n\nconst Promise = global.Promise;\n\nconst mapStateToProps = state => ({\n  ...state.home,\n  appName: state.common.appName,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickTag: (tag, pager, payload) =>\n    dispatch({ type: APPLY_TAG_FILTER, tag, pager, payload }),\n  onLoad: (tab, pager, payload) =>\n    dispatch({ type: HOME_PAGE_LOADED, tab, pager, payload }),\n  onUnload: () =>\n    dispatch({  type: HOME_PAGE_UNLOADED })\n});\n\nclass Home extends React.Component {\n  componentWillMount() {\n    const tab = this.props.token ? 'feed' : 'all';\n    const articlesPromise = this.props.token ?\n      agent.Articles.feed :\n      agent.Articles.all;\n\n    this.props.onLoad(tab, articlesPromise, Promise.all([agent.Tags.getAll(), articlesPromise()]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n\n        <div className=\"container page\">\n          <div className=\"row\">\n            <MainView />\n\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n\n                <p>Popular Tags</p>\n\n                <Tags\n                  tags={this.props.tags}\n                  onClickTag={this.props.onClickTag} />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\"\n\n        Banner Component:\n        \"import React from 'react';\n\nconst Banner = ({ appName, token }) => {\n  if (token) {\n    return null;\n  }\n  return (\n    <div className=\"banner\">\n      <div className=\"container\">\n        <h1 className=\"logo-font\">\n          {appName.toLowerCase()}\n        </h1>\n        <p>A place to share your knowledge.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Banner;\"\n        ", "output": "import Banner from './Banner';\nimport MainView from './MainView';\nimport React from 'react';\nimport Tags from './Tags';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport {\n  HOME_PAGE_LOADED,\n  HOME_PAGE_UNLOADED,\n  APPLY_TAG_FILTER\n} from '../../constants/actionTypes';\n\nconst Promise = global.Promise;\n\nconst mapStateToProps = state => ({\n  ...state.home,\n  appName: state.common.appName,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickTag: (tag, pager, payload) =>\n    dispatch({ type: APPLY_TAG_FILTER, tag, pager, payload }),\n  onLoad: (tab, pager, payload) =>\n    dispatch({ type: HOME_PAGE_LOADED, tab, pager, payload }),\n  onUnload: () =>\n    dispatch({  type: HOME_PAGE_UNLOADED })\n});\n\nclass Home extends React.Component {\n  componentWillMount() {\n    const tab = this.props.token ? 'feed' : 'all';\n    const articlesPromise = this.props.token ?\n      agent.Articles.feed :\n      agent.Articles.all;\n\n    this.props.onLoad(tab, articlesPromise, Promise.all([agent.Tags.getAll(), articlesPromise()]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n\n        <Banner token={this.props.token} appName={this.props.appName} />\n\n        <div className=\"container page\">\n          <div className=\"row\">\n            <MainView />\n\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n\n                <p>Popular Tags</p>\n\n                <Tags\n                  tags={this.props.tags}\n                  onClickTag={this.props.onClickTag} />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"}, {"instruction": "Create a React component that displays a list of tags. When a tag is clicked, it should trigger a function that updates the page to show articles related to that tag. If no tags are provided, display a \"Loading Tags...\" message.", "output": "import React from 'react';\nimport agent from '../../agent';\n\nconst Tags = props => {\n  const tags = props.tags;\n  if (tags) {\n    return (\n      <div className=\"tag-list\">\n        {\n          tags.map(tag => {\n            const handleClick = ev => {\n              ev.preventDefault();\n              props.onClickTag(tag, page => agent.Articles.byTag(tag, page), agent.Articles.byTag(tag));\n            };\n\n            return (\n              <a\n                href=\"\"\n                className=\"tag-default tag-pill\"\n                key={tag}\n                onClick={handleClick}>\n                {tag}\n              </a>\n            );\n          })\n        }\n      </div>\n    );\n  } else {\n    return (\n      <div>Loading Tags...</div>\n    );\n  }\n};\n\nexport default Tags;"}, {"instruction": "\n        Integrate the new \"Tags\" component into the root component. When the user clicks on a tag, the root component should update the articles displayed based on the selected tag. The \"Tags\" component should display a list of tags, and when a tag is clicked, it should trigger an action in the root component that updates the articles displayed.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import Banner from './Banner';\nimport MainView from './MainView';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport {\n  HOME_PAGE_LOADED,\n  HOME_PAGE_UNLOADED,\n  APPLY_TAG_FILTER\n} from '../../constants/actionTypes';\n\nconst Promise = global.Promise;\n\nconst mapStateToProps = state => ({\n  ...state.home,\n  appName: state.common.appName,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickTag: (tag, pager, payload) =>\n    dispatch({ type: APPLY_TAG_FILTER, tag, pager, payload }),\n  onLoad: (tab, pager, payload) =>\n    dispatch({ type: HOME_PAGE_LOADED, tab, pager, payload }),\n  onUnload: () =>\n    dispatch({  type: HOME_PAGE_UNLOADED })\n});\n\nclass Home extends React.Component {\n  componentWillMount() {\n    const tab = this.props.token ? 'feed' : 'all';\n    const articlesPromise = this.props.token ?\n      agent.Articles.feed :\n      agent.Articles.all;\n\n    this.props.onLoad(tab, articlesPromise, Promise.all([agent.Tags.getAll(), articlesPromise()]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n\n        <Banner token={this.props.token} appName={this.props.appName} />\n\n        <div className=\"container page\">\n          <div className=\"row\">\n            <MainView />\n\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n\n                <p>Popular Tags</p>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\"\n\n        Tags Component:\n        \"import React from 'react';\nimport agent from '../../agent';\n\nconst Tags = props => {\n  const tags = props.tags;\n  if (tags) {\n    return (\n      <div className=\"tag-list\">\n        {\n          tags.map(tag => {\n            const handleClick = ev => {\n              ev.preventDefault();\n              props.onClickTag(tag, page => agent.Articles.byTag(tag, page), agent.Articles.byTag(tag));\n            };\n\n            return (\n              <a\n                href=\"\"\n                className=\"tag-default tag-pill\"\n                key={tag}\n                onClick={handleClick}>\n                {tag}\n              </a>\n            );\n          })\n        }\n      </div>\n    );\n  } else {\n    return (\n      <div>Loading Tags...</div>\n    );\n  }\n};\n\nexport default Tags;\"\n        ", "output": "import Banner from './Banner';\nimport MainView from './MainView';\nimport React from 'react';\nimport Tags from './Tags';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport {\n  HOME_PAGE_LOADED,\n  HOME_PAGE_UNLOADED,\n  APPLY_TAG_FILTER\n} from '../../constants/actionTypes';\n\nconst Promise = global.Promise;\n\nconst mapStateToProps = state => ({\n  ...state.home,\n  appName: state.common.appName,\n  token: state.common.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickTag: (tag, pager, payload) =>\n    dispatch({ type: APPLY_TAG_FILTER, tag, pager, payload }),\n  onLoad: (tab, pager, payload) =>\n    dispatch({ type: HOME_PAGE_LOADED, tab, pager, payload }),\n  onUnload: () =>\n    dispatch({  type: HOME_PAGE_UNLOADED })\n});\n\nclass Home extends React.Component {\n  componentWillMount() {\n    const tab = this.props.token ? 'feed' : 'all';\n    const articlesPromise = this.props.token ?\n      agent.Articles.feed :\n      agent.Articles.all;\n\n    this.props.onLoad(tab, articlesPromise, Promise.all([agent.Tags.getAll(), articlesPromise()]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n\n        <Banner token={this.props.token} appName={this.props.appName} />\n\n        <div className=\"container page\">\n          <div className=\"row\">\n            <MainView />\n\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n\n                <p>Popular Tags</p>\n\n                <Tags\n                  tags={this.props.tags}\n                  onClickTag={this.props.onClickTag} />\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"}, {"instruction": "Create a React component that displays an article's metadata, including the author's profile picture, username, the date the article was created, and any relevant actions that can be performed on the article. The component should allow users to click on the author's profile picture or username to navigate to their profile page.", "output": "import ArticleActions from './ArticleActions';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst ArticleMeta = props => {\n  const article = props.article;\n  return (\n    <div className=\"article-meta\">\n      <Link to={`/@${article.author.username}`}>\n        <img src={article.author.image} alt={article.author.username} />\n      </Link>\n\n      <div className=\"info\">\n        <Link to={`/@${article.author.username}`} className=\"author\">\n          {article.author.username}\n        </Link>\n        <span className=\"date\">\n          {new Date(article.createdAt).toDateString()}\n        </span>\n      </div>\n\n      <ArticleActions canModify={props.canModify} article={article} />\n    </div>\n  );\n};\n\nexport default ArticleMeta;"}, {"instruction": "\n        In the Article component, add the newly created ArticleMeta component below the article title, passing in the article data and a flag indicating whether the current user can modify the article.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import CommentContainer from './CommentContainer';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport { ARTICLE_PAGE_LOADED, ARTICLE_PAGE_UNLOADED } from '../../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.article,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: payload =>\n    dispatch({ type: ARTICLE_PAGE_LOADED, payload }),\n  onUnload: () =>\n    dispatch({ type: ARTICLE_PAGE_UNLOADED })\n});\n\nclass Article extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Articles.get(this.props.match.params.id),\n      agent.Comments.forArticle(this.props.match.params.id)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    if (!this.props.article) {\n      return null;\n    }\n\n    const markup = { __html: marked(this.props.article.body, { sanitize: true }) };\n    const canModify = this.props.currentUser &&\n      this.props.currentUser.username === this.props.article.author.username;\n    return (\n      <div className=\"article-page\">\n\n        <div className=\"banner\">\n          <div className=\"container\">\n\n            <h1>{this.props.article.title}</h1>\n\n          </div>\n        </div>\n\n        <div className=\"container page\">\n\n          <div className=\"row article-content\">\n            <div className=\"col-xs-12\">\n\n              <div dangerouslySetInnerHTML={markup}></div>\n\n              <ul className=\"tag-list\">\n                {\n                  this.props.article.tagList.map(tag => {\n                    return (\n                      <li\n                        className=\"tag-default tag-pill tag-outline\"\n                        key={tag}>\n                        {tag}\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"article-actions\">\n          </div>\n\n          <div className=\"row\">\n            <CommentContainer\n              comments={this.props.comments || []}\n              errors={this.props.commentErrors}\n              slug={this.props.match.params.id}\n              currentUser={this.props.currentUser} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);\n\"\n\n        ArticleMeta Component:\n        \"import ArticleActions from './ArticleActions';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst ArticleMeta = props => {\n  const article = props.article;\n  return (\n    <div className=\"article-meta\">\n      <Link to={`/@${article.author.username}`}>\n        <img src={article.author.image} alt={article.author.username} />\n      </Link>\n\n      <div className=\"info\">\n        <Link to={`/@${article.author.username}`} className=\"author\">\n          {article.author.username}\n        </Link>\n        <span className=\"date\">\n          {new Date(article.createdAt).toDateString()}\n        </span>\n      </div>\n\n      <ArticleActions canModify={props.canModify} article={article} />\n    </div>\n  );\n};\n\nexport default ArticleMeta;\"\n        ", "output": "import ArticleMeta from './ArticleMeta';\nimport CommentContainer from './CommentContainer';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport { ARTICLE_PAGE_LOADED, ARTICLE_PAGE_UNLOADED } from '../../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.article,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: payload =>\n    dispatch({ type: ARTICLE_PAGE_LOADED, payload }),\n  onUnload: () =>\n    dispatch({ type: ARTICLE_PAGE_UNLOADED })\n});\n\nclass Article extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Articles.get(this.props.match.params.id),\n      agent.Comments.forArticle(this.props.match.params.id)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    if (!this.props.article) {\n      return null;\n    }\n\n    const markup = { __html: marked(this.props.article.body, { sanitize: true }) };\n    const canModify = this.props.currentUser &&\n      this.props.currentUser.username === this.props.article.author.username;\n    return (\n      <div className=\"article-page\">\n\n        <div className=\"banner\">\n          <div className=\"container\">\n\n            <h1>{this.props.article.title}</h1>\n            <ArticleMeta\n              article={this.props.article}\n              canModify={canModify} />\n\n          </div>\n        </div>\n\n        <div className=\"container page\">\n\n          <div className=\"row article-content\">\n            <div className=\"col-xs-12\">\n\n              <div dangerouslySetInnerHTML={markup}></div>\n\n              <ul className=\"tag-list\">\n                {\n                  this.props.article.tagList.map(tag => {\n                    return (\n                      <li\n                        className=\"tag-default tag-pill tag-outline\"\n                        key={tag}>\n                        {tag}\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"article-actions\">\n          </div>\n\n          <div className=\"row\">\n            <CommentContainer\n              comments={this.props.comments || []}\n              errors={this.props.commentErrors}\n              slug={this.props.match.params.id}\n              currentUser={this.props.currentUser} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);"}, {"instruction": "Create a React component that displays a list of comments and a form for adding a new comment. If the user is not logged in, display a message prompting them to sign in or register to add comments.", "output": "import CommentInput from './CommentInput';\nimport CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;"}, {"instruction": "\n        Integrate the new \"CommentContainer\" component into the \"Article\" component. The \"CommentContainer\" component should appear below the article content and should display a list of comments and a form for adding new comments. If the user is not logged in, they should be prompted to sign in or register to add comments.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ArticleMeta from './ArticleMeta';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport { ARTICLE_PAGE_LOADED, ARTICLE_PAGE_UNLOADED } from '../../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.article,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: payload =>\n    dispatch({ type: ARTICLE_PAGE_LOADED, payload }),\n  onUnload: () =>\n    dispatch({ type: ARTICLE_PAGE_UNLOADED })\n});\n\nclass Article extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Articles.get(this.props.match.params.id),\n      agent.Comments.forArticle(this.props.match.params.id)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    if (!this.props.article) {\n      return null;\n    }\n\n    const markup = { __html: marked(this.props.article.body, { sanitize: true }) };\n    const canModify = this.props.currentUser &&\n      this.props.currentUser.username === this.props.article.author.username;\n    return (\n      <div className=\"article-page\">\n\n        <div className=\"banner\">\n          <div className=\"container\">\n\n            <h1>{this.props.article.title}</h1>\n            <ArticleMeta\n              article={this.props.article}\n              canModify={canModify} />\n\n          </div>\n        </div>\n\n        <div className=\"container page\">\n\n          <div className=\"row article-content\">\n            <div className=\"col-xs-12\">\n\n              <div dangerouslySetInnerHTML={markup}></div>\n\n              <ul className=\"tag-list\">\n                {\n                  this.props.article.tagList.map(tag => {\n                    return (\n                      <li\n                        className=\"tag-default tag-pill tag-outline\"\n                        key={tag}>\n                        {tag}\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"article-actions\">\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);\n\"\n\n        CommentContainer Component:\n        \"import CommentInput from './CommentInput';\nimport CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;\"\n        ", "output": "import ArticleMeta from './ArticleMeta';\nimport CommentContainer from './CommentContainer';\nimport React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport { ARTICLE_PAGE_LOADED, ARTICLE_PAGE_UNLOADED } from '../../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.article,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoad: payload =>\n    dispatch({ type: ARTICLE_PAGE_LOADED, payload }),\n  onUnload: () =>\n    dispatch({ type: ARTICLE_PAGE_UNLOADED })\n});\n\nclass Article extends React.Component {\n  componentWillMount() {\n    this.props.onLoad(Promise.all([\n      agent.Articles.get(this.props.match.params.id),\n      agent.Comments.forArticle(this.props.match.params.id)\n    ]));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnload();\n  }\n\n  render() {\n    if (!this.props.article) {\n      return null;\n    }\n\n    const markup = { __html: marked(this.props.article.body, { sanitize: true }) };\n    const canModify = this.props.currentUser &&\n      this.props.currentUser.username === this.props.article.author.username;\n    return (\n      <div className=\"article-page\">\n\n        <div className=\"banner\">\n          <div className=\"container\">\n\n            <h1>{this.props.article.title}</h1>\n            <ArticleMeta\n              article={this.props.article}\n              canModify={canModify} />\n\n          </div>\n        </div>\n\n        <div className=\"container page\">\n\n          <div className=\"row article-content\">\n            <div className=\"col-xs-12\">\n\n              <div dangerouslySetInnerHTML={markup}></div>\n\n              <ul className=\"tag-list\">\n                {\n                  this.props.article.tagList.map(tag => {\n                    return (\n                      <li\n                        className=\"tag-default tag-pill tag-outline\"\n                        key={tag}>\n                        {tag}\n                      </li>\n                    );\n                  })\n                }\n              </ul>\n\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"article-actions\">\n          </div>\n\n          <div className=\"row\">\n            <CommentContainer\n              comments={this.props.comments || []}\n              errors={this.props.commentErrors}\n              slug={this.props.match.params.id}\n              currentUser={this.props.currentUser} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);"}, {"instruction": "Create a React component that allows a user to submit a comment. The component should have a text area for the user to enter their comment, a button to submit the comment, and a profile picture of the current user. When the user submits the comment, the component should dispatch an action to add the comment to the store.", "output": "import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { ADD_COMMENT } from '../../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: payload =>\n    dispatch({ type: ADD_COMMENT, payload })\n});\n\nclass CommentInput extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      body: ''\n    };\n\n    this.setBody = ev => {\n      this.setState({ body: ev.target.value });\n    };\n\n    this.createComment = ev => {\n      ev.preventDefault();\n      const payload = agent.Comments.create(this.props.slug,\n        { body: this.state.body });\n      this.setState({ body: '' });\n      this.props.onSubmit(payload);\n    };\n  }\n\n  render() {\n    return (\n      <form className=\"card comment-form\" onSubmit={this.createComment}>\n        <div className=\"card-block\">\n          <textarea className=\"form-control\"\n            placeholder=\"Write a comment...\"\n            value={this.state.body}\n            onChange={this.setBody}\n            rows=\"3\">\n          </textarea>\n        </div>\n        <div className=\"card-footer\">\n          <img\n            src={this.props.currentUser.image}\n            className=\"comment-author-img\"\n            alt={this.props.currentUser.username} />\n          <button\n            className=\"btn btn-sm btn-primary\"\n            type=\"submit\">\n            Post Comment\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default connect(() => ({}), mapDispatchToProps)(CommentInput);"}, {"instruction": "\n        In the CommentContainer component, add the CommentInput component as a child of the div element with the class name \"col-xs-12 col-md-8 offset-md-2\". The CommentInput component should be placed before the CommentList component.\n\nThe CommentInput component should allow users to enter a comment and submit it. When the user submits the comment, the component should dispatch an action to add the comment to the store.\n\nThe CommentInput component should also receive the following props:\n\n* slug: The slug of the article that the comment is being added to.\n* currentUser: The current user object.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;\n\"\n\n        CommentInput Component:\n        \"import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { ADD_COMMENT } from '../../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: payload =>\n    dispatch({ type: ADD_COMMENT, payload })\n});\n\nclass CommentInput extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      body: ''\n    };\n\n    this.setBody = ev => {\n      this.setState({ body: ev.target.value });\n    };\n\n    this.createComment = ev => {\n      ev.preventDefault();\n      const payload = agent.Comments.create(this.props.slug,\n        { body: this.state.body });\n      this.setState({ body: '' });\n      this.props.onSubmit(payload);\n    };\n  }\n\n  render() {\n    return (\n      <form className=\"card comment-form\" onSubmit={this.createComment}>\n        <div className=\"card-block\">\n          <textarea className=\"form-control\"\n            placeholder=\"Write a comment...\"\n            value={this.state.body}\n            onChange={this.setBody}\n            rows=\"3\">\n          </textarea>\n        </div>\n        <div className=\"card-footer\">\n          <img\n            src={this.props.currentUser.image}\n            className=\"comment-author-img\"\n            alt={this.props.currentUser.username} />\n          <button\n            className=\"btn btn-sm btn-primary\"\n            type=\"submit\">\n            Post Comment\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default connect(() => ({}), mapDispatchToProps)(CommentInput);\"\n        ", "output": "import CommentInput from './CommentInput';\nimport CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;"}, {"instruction": "Create a React component that displays a list of comments. Each comment should be rendered as a separate component, and the list should be updated dynamically as new comments are added or removed.", "output": "import Comment from './Comment';\nimport React from 'react';\n\nconst CommentList = props => {\n  return (\n    <div>\n      {\n        props.comments.map(comment => {\n          return (\n            <Comment\n              comment={comment}\n              currentUser={props.currentUser}\n              slug={props.slug}\n              key={comment.id} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default CommentList;"}, {"instruction": "\n        Update the root component to include the new CommentList component. The CommentList component should display a list of comments, with each comment being displayed as a separate item. The CommentList component should receive the following props:\n\n- `comments`: An array of comment objects.\n- `slug`: The slug of the article that the comments are for.\n- `currentUser`: The current user object.\n\nThe CommentList component should be displayed below the CommentInput component, and it should only be displayed if the current user is logged in.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import CommentInput from './CommentInput';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;\n\"\n\n        CommentList Component:\n        \"import Comment from './Comment';\nimport React from 'react';\n\nconst CommentList = props => {\n  return (\n    <div>\n      {\n        props.comments.map(comment => {\n          return (\n            <Comment\n              comment={comment}\n              currentUser={props.currentUser}\n              slug={props.slug}\n              key={comment.id} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default CommentList;\"\n        ", "output": "import CommentInput from './CommentInput';\nimport CommentList from './CommentList';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst CommentContainer = props => {\n  if (props.currentUser) {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <div>\n          <list-errors errors={props.errors}></list-errors>\n          <CommentInput slug={props.slug} currentUser={props.currentUser} />\n        </div>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"col-xs-12 col-md-8 offset-md-2\">\n        <p>\n          <Link to=\"/login\">Sign in</Link>\n          &nbsp;or&nbsp;\n          <Link to=\"/register\">sign up</Link>\n          &nbsp;to add comments on this article.\n        </p>\n\n        <CommentList\n          comments={props.comments}\n          slug={props.slug}\n          currentUser={props.currentUser} />\n      </div>\n    );\n  }\n};\n\nexport default CommentContainer;"}, {"instruction": "Create a React component that displays a comment. The component should include the comment's body, author's profile picture, author's username, date posted, and a delete button that is only visible to the current user if they are the author of the comment. The component should use the following props: comment, currentUser, slug, and commentId.", "output": "import DeleteButton from './DeleteButton';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Comment = props => {\n  const comment = props.comment;\n  const show = props.currentUser &&\n    props.currentUser.username === comment.author.username;\n  return (\n    <div className=\"card\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n      <div className=\"card-footer\">\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          <img src={comment.author.image} className=\"comment-author-img\" alt={comment.author.username} />\n        </Link>\n        &nbsp;\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <span className=\"date-posted\">\n          {new Date(comment.createdAt).toDateString()}\n        </span>\n        <DeleteButton show={show} slug={props.slug} commentId={comment.id} />\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;"}, {"instruction": "\n        Integrate the new \"Comment\" component into the \"CommentList\" component. When a comment is rendered in the \"CommentList\" component, it should display the comment's body, author's username, author's profile picture, date posted, and a delete button if the current user is the author of the comment.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\n\nconst CommentList = props => {\n  return (\n    <div>\n      {\n        props.comments.map(comment => {\n          return (\n            <div\n              key={comment.id} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default CommentList;\n\"\n\n        Comment Component:\n        \"import DeleteButton from './DeleteButton';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Comment = props => {\n  const comment = props.comment;\n  const show = props.currentUser &&\n    props.currentUser.username === comment.author.username;\n  return (\n    <div className=\"card\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n      <div className=\"card-footer\">\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          <img src={comment.author.image} className=\"comment-author-img\" alt={comment.author.username} />\n        </Link>\n        &nbsp;\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <span className=\"date-posted\">\n          {new Date(comment.createdAt).toDateString()}\n        </span>\n        <DeleteButton show={show} slug={props.slug} commentId={comment.id} />\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;\"\n        ", "output": "import Comment from './Comment';\nimport React from 'react';\n\nconst CommentList = props => {\n  return (\n    <div>\n      {\n        props.comments.map(comment => {\n          return (\n            <Comment\n              comment={comment}\n              currentUser={props.currentUser}\n              slug={props.slug}\n              key={comment.id} />\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default CommentList;"}, {"instruction": "Create a button component that allows users to delete something (unspecified) when clicked. This button should only be visible under certain conditions indicated by a show prop. Clicking the button should trigger a function named onClick provided by a parent component. This onClick function should presumably handle the deletion logic.", "output": "import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { DELETE_COMMENT } from '../../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: (payload, commentId) =>\n    dispatch({ type: DELETE_COMMENT, payload, commentId })\n});\n\nconst DeleteButton = props => {\n  const del = () => {\n    const payload = agent.Comments.delete(props.slug, props.commentId);\n    props.onClick(payload, props.commentId);\n  };\n\n  if (props.show) {\n    return (\n      <span className=\"mod-options\">\n        <i className=\"ion-trash-a\" onClick={del}></i>\n      </span>\n    );\n  }\n  return null;\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(DeleteButton);"}, {"instruction": "\n        Integrate the DeleteButton component into the Comment component. The DeleteButton should only be visible if the current user is the author of the comment. When the DeleteButton is clicked, it should dispatch an action to delete the comment.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Comment = props => {\n  const comment = props.comment;\n  const show = props.currentUser &&\n    props.currentUser.username === comment.author.username;\n  return (\n    <div className=\"card\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n      <div className=\"card-footer\">\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          <img src={comment.author.image} className=\"comment-author-img\" alt={comment.author.username} />\n        </Link>\n        &nbsp;\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <span className=\"date-posted\">\n          {new Date(comment.createdAt).toDateString()}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;\n\"\n\n        DeleteButton Component:\n        \"import React from 'react';\nimport agent from '../../agent';\nimport { connect } from 'react-redux';\nimport { DELETE_COMMENT } from '../../constants/actionTypes';\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: (payload, commentId) =>\n    dispatch({ type: DELETE_COMMENT, payload, commentId })\n});\n\nconst DeleteButton = props => {\n  const del = () => {\n    const payload = agent.Comments.delete(props.slug, props.commentId);\n    props.onClick(payload, props.commentId);\n  };\n\n  if (props.show) {\n    return (\n      <span className=\"mod-options\">\n        <i className=\"ion-trash-a\" onClick={del}></i>\n      </span>\n    );\n  }\n  return null;\n};\n\nexport default connect(() => ({}), mapDispatchToProps)(DeleteButton);\"\n        ", "output": "import DeleteButton from './DeleteButton';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst Comment = props => {\n  const comment = props.comment;\n  const show = props.currentUser &&\n    props.currentUser.username === comment.author.username;\n  return (\n    <div className=\"card\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n      <div className=\"card-footer\">\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          <img src={comment.author.image} className=\"comment-author-img\" alt={comment.author.username} />\n        </Link>\n        &nbsp;\n        <Link\n          to={`/@${comment.author.username}`}\n          className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <span className=\"date-posted\">\n          {new Date(comment.createdAt).toDateString()}\n        </span>\n        <DeleteButton show={show} slug={props.slug} commentId={comment.id} />\n      </div>\n    </div>\n  );\n};\n\nexport default Comment;"}, {"instruction": "Design a form that allows users to update their profile settings, including their profile picture, username, bio, email, and password. The form should be easy to use and should validate user input.", "output": "import React from 'react';\nclass SettingsForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      image: '',\n      username: '',\n      bio: '',\n      email: '',\n      password: ''\n    };\n\n    this.updateState = field => ev => {\n      const state = this.state;\n      const newState = Object.assign({}, state, { [field]: ev.target.value });\n      this.setState(newState);\n    };\n\n    this.submitForm = ev => {\n      ev.preventDefault();\n\n      const user = Object.assign({}, this.state);\n      if (!user.password) {\n        delete user.password;\n      }\n\n      this.props.onSubmitForm(user);\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.currentUser) {\n      Object.assign(this.state, {\n        image: this.props.currentUser.image || '',\n        username: this.props.currentUser.username,\n        bio: this.props.currentUser.bio,\n        email: this.props.currentUser.email\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.currentUser) {\n      this.setState(Object.assign({}, this.state, {\n        image: nextProps.currentUser.image || '',\n        username: nextProps.currentUser.username,\n        bio: nextProps.currentUser.bio,\n        email: nextProps.currentUser.email\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submitForm}>\n        <fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"URL of profile picture\"\n              value={this.state.image}\n              onChange={this.updateState('image')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"text\"\n              placeholder=\"Username\"\n              value={this.state.username}\n              onChange={this.updateState('username')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <textarea\n              className=\"form-control form-control-lg\"\n              rows=\"8\"\n              placeholder=\"Short bio about you\"\n              value={this.state.bio}\n              onChange={this.updateState('bio')}>\n            </textarea>\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"email\"\n              placeholder=\"Email\"\n              value={this.state.email}\n              onChange={this.updateState('email')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"password\"\n              placeholder=\"New Password\"\n              value={this.state.password}\n              onChange={this.updateState('password')} />\n          </fieldset>\n\n          <button\n            className=\"btn btn-lg btn-primary pull-xs-right\"\n            type=\"submit\"\n            disabled={this.state.inProgress}>\n            Update Settings\n          </button>\n\n        </fieldset>\n      </form>\n    );\n  }\n}\nexport default SettingsForm;"}, {"instruction": "\n        In the Settings component, integrate the new SettingsForm component. The SettingsForm component should allow users to edit their profile picture, username, bio, email, and password. When the user clicks the \"Update Settings\" button, the form should submit the changes to the server. If the changes are saved successfully, the Settings component should display a success message. If there are any errors, the Settings component should display the errors to the user.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import ListErrors from './ListErrors';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  SETTINGS_SAVED,\n  SETTINGS_PAGE_UNLOADED,\n  LOGOUT\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.settings,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickLogout: () => dispatch({ type: LOGOUT }),\n  onSubmitForm: user =>\n    dispatch({ type: SETTINGS_SAVED, payload: agent.Auth.save(user) }),\n  onUnload: () => dispatch({ type: SETTINGS_PAGE_UNLOADED })\n});\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div className=\"settings-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n\n              <h1 className=\"text-xs-center\">Your Settings</h1>\n\n              <ListErrors errors={this.props.errors}></ListErrors>\n\n              <hr />\n\n              <button\n                className=\"btn btn-outline-danger\"\n                onClick={this.props.onClickLogout}>\n                Or click here to logout.\n              </button>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n\"\n\n        SettingsForm Component:\n        \"import React from 'react';\nclass SettingsForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      image: '',\n      username: '',\n      bio: '',\n      email: '',\n      password: ''\n    };\n\n    this.updateState = field => ev => {\n      const state = this.state;\n      const newState = Object.assign({}, state, { [field]: ev.target.value });\n      this.setState(newState);\n    };\n\n    this.submitForm = ev => {\n      ev.preventDefault();\n\n      const user = Object.assign({}, this.state);\n      if (!user.password) {\n        delete user.password;\n      }\n\n      this.props.onSubmitForm(user);\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.currentUser) {\n      Object.assign(this.state, {\n        image: this.props.currentUser.image || '',\n        username: this.props.currentUser.username,\n        bio: this.props.currentUser.bio,\n        email: this.props.currentUser.email\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.currentUser) {\n      this.setState(Object.assign({}, this.state, {\n        image: nextProps.currentUser.image || '',\n        username: nextProps.currentUser.username,\n        bio: nextProps.currentUser.bio,\n        email: nextProps.currentUser.email\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submitForm}>\n        <fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"URL of profile picture\"\n              value={this.state.image}\n              onChange={this.updateState('image')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"text\"\n              placeholder=\"Username\"\n              value={this.state.username}\n              onChange={this.updateState('username')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <textarea\n              className=\"form-control form-control-lg\"\n              rows=\"8\"\n              placeholder=\"Short bio about you\"\n              value={this.state.bio}\n              onChange={this.updateState('bio')}>\n            </textarea>\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"email\"\n              placeholder=\"Email\"\n              value={this.state.email}\n              onChange={this.updateState('email')} />\n          </fieldset>\n\n          <fieldset className=\"form-group\">\n            <input\n              className=\"form-control form-control-lg\"\n              type=\"password\"\n              placeholder=\"New Password\"\n              value={this.state.password}\n              onChange={this.updateState('password')} />\n          </fieldset>\n\n          <button\n            className=\"btn btn-lg btn-primary pull-xs-right\"\n            type=\"submit\"\n            disabled={this.state.inProgress}>\n            Update Settings\n          </button>\n\n        </fieldset>\n      </form>\n    );\n  }\n}\nexport default SettingsForm;\"\n        ", "output": "import ListErrors from './ListErrors';\nimport SettingsForm from './SettingsForm';\nimport React from 'react';\nimport agent from '../agent';\nimport { connect } from 'react-redux';\nimport {\n  SETTINGS_SAVED,\n  SETTINGS_PAGE_UNLOADED,\n  LOGOUT\n} from '../constants/actionTypes';\n\nconst mapStateToProps = state => ({\n  ...state.settings,\n  currentUser: state.common.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClickLogout: () => dispatch({ type: LOGOUT }),\n  onSubmitForm: user =>\n    dispatch({ type: SETTINGS_SAVED, payload: agent.Auth.save(user) }),\n  onUnload: () => dispatch({ type: SETTINGS_PAGE_UNLOADED })\n});\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div className=\"settings-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-6 offset-md-3 col-xs-12\">\n\n              <h1 className=\"text-xs-center\">Your Settings</h1>\n\n              <ListErrors errors={this.props.errors}></ListErrors>\n\n              <SettingsForm\n                currentUser={this.props.currentUser}\n                onSubmitForm={this.props.onSubmitForm} />\n\n              <hr />\n\n              <button\n                className=\"btn btn-outline-danger\"\n                onClick={this.props.onClickLogout}>\n                Or click here to logout.\n              </button>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);"}, {"instruction": "Design a loading spinner that appears when a user is waiting for data to load. The spinner should be visually appealing and non-distracting, and it should be easy to implement on any web page.", "output": "import React from 'react';\n\nconst Spinner = () => (\n  <div className=\"bobon-spinner mdl-spinner mdl-js-spinner is-active\"></div>\n);\n\nexport default Spinner;"}, {"instruction": "\n        Update the App component to integrate the new Spinner component. When the App is loading data, display the Spinner component. When the App is not loading data, display the page content. When the App is logging in, display the Spinner component. When the App is not logging in, display the page content.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { Link, browserHistory } from 'react-router';\n\nimport C from '../constants';\nimport DialogContainer from '../containers/DialogContainer';\nimport HeaderContainer from '../containers/HeaderContainer';\n\nrequire('../../scss/app.scss');\n\nclass App extends React.Component {\n\n  static propTypes() {\n    return {\n      uid: PropTypes.string,\n      authStatus: PropTypes.string.isRequired,\n      userName: PropTypes.string\n    };\n  }\n\n  componentDidUpdate() {\n    componentHandler.upgradeDom();\n  }\n\n  pageContent() {\n    let content = null;\n    if (!this.props.dataLoading) {\n      content = (\n        <ReactCSSTransitionGroup\n          component=\"div\"\n          transitionName=\"bobon-transition\"\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={500}\n          transitionAppear={true}\n        >\n          { React.cloneElement(this.props.children, {\n              key: this.props.location.pathname\n            }) }\n        </ReactCSSTransitionGroup>\n      );\n    }\n    return content;\n  }\n\n  render() {\n    let extraClass = '';\n    let content = null;\n\n    if (this.props.authStatus !== C.LOGGED_IN) {\n      extraClass = \"bobon-anon\";\n    }\n\n    if (this.props.authStatus === C.LOGGING_IN) {\n      content = null;\n    } else {\n      content = (\n        <div className={ `mdl-layout mdl-js-layout layout--fixed-header ${ extraClass }` }>\n          <HeaderContainer location={ this.props.location }/>\n\n          <main className=\"mdl-layout__content\">\n            <div className=\"bobon-page-content page-content\">\n              { this.pageContent() }\n            </div>\n\n          </main>\n\n          <footer className=\"bobon-footer\">\n            \u00a9 Bobon Profiles 2016. Support: <a href=\"mailto:roast@bobon.coffee\">roast@bobon.coffee</a>.\n          </footer>\n\n          <DialogContainer/>\n        </div>\n      );\n    }\n\n    return content;\n  }\n};\n\nexport default App;\n\"\n\n        Spinner Component:\n        \"import React from 'react';\n\nconst Spinner = () => (\n  <div className=\"bobon-spinner mdl-spinner mdl-js-spinner is-active\"></div>\n);\n\nexport default Spinner;\"\n        ", "output": "import React, { PropTypes } from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { Link, browserHistory } from 'react-router';\n\nimport C from '../constants';\nimport DialogContainer from '../containers/DialogContainer';\nimport HeaderContainer from '../containers/HeaderContainer';\nimport Spinner from './Spinner';\n\nrequire('../../scss/app.scss');\n\nclass App extends React.Component {\n\n  static propTypes() {\n    return {\n      uid: PropTypes.string,\n      authStatus: PropTypes.string.isRequired,\n      userName: PropTypes.string\n    };\n  }\n\n  componentDidUpdate() {\n    componentHandler.upgradeDom();\n  }\n\n  pageContent() {\n    let content = <Spinner/>;\n    if (!this.props.dataLoading) {\n      content = (\n        <ReactCSSTransitionGroup\n          component=\"div\"\n          transitionName=\"bobon-transition\"\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={500}\n          transitionAppear={true}\n        >\n          { React.cloneElement(this.props.children, {\n              key: this.props.location.pathname\n            }) }\n        </ReactCSSTransitionGroup>\n      );\n    }\n    return content;\n  }\n\n  render() {\n    let extraClass = '';\n    let content = null;\n\n    if (this.props.authStatus !== C.LOGGED_IN) {\n      extraClass = \"bobon-anon\";\n    }\n\n    if (this.props.authStatus === C.LOGGING_IN) {\n      content = <Spinner/>;\n    } else {\n      content = (\n        <div className={ `mdl-layout mdl-js-layout layout--fixed-header ${ extraClass }` }>\n          <HeaderContainer location={ this.props.location }/>\n\n          <main className=\"mdl-layout__content\">\n            <div className=\"bobon-page-content page-content\">\n              { this.pageContent() }\n            </div>\n\n          </main>\n\n          <footer className=\"bobon-footer\">\n            \u00a9 Bobon Profiles 2016. Support: <a href=\"mailto:roast@bobon.coffee\">roast@bobon.coffee</a>.\n          </footer>\n\n          <DialogContainer/>\n        </div>\n      );\n    }\n\n    return content;\n  }\n};\n\nexport default App;"}, {"instruction": "Create a React component that renders a button with Material Design styling. The button should be disabled if a `disabled` prop is passed in, and it should have an `onClick` event handler if an `onClick` prop is passed in. The button should have a `customClass` prop that can be used to add additional CSS classes to the button.", "output": "import React from 'react';\n\nclass Button extends React.Component {\n\n  render() {\n    if (this.props.disabled === true) {\n\n      return (\n        <button\n          className={ `mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored ${ this.props.customClass }` }\n          id={ this.props.id ? this.props.id : '' }\n          disabled\n        >\n          { this.props.children }\n        </button>\n      );\n\n    } else {\n\n      return (\n        <button\n          className={ `mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored ${ this.props.customClass }` }\n          onClick={ this.props.onClick }\n          id={ this.props.id ? this.props.id : '' }\n        >\n          { this.props.children }\n        </button>\n      );\n\n    }\n  }\n}\n\nexport default Button;"}, {"instruction": "\n        Integrate the new Button component into the Dialog component. The Button component should be used to replace the existing buttons within the CardAction component of the Dialog component. When the user clicks the \"Yes\" button, the yesAction function should be called and the dialog should be cleared. When the user clicks the \"No\" button, the noAction function should be called and the dialog should be cleared. The buttons should be styled with the \"mdl-button\" class.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\n\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </button>\n\n                <button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;\n\"\n\n        Button Component:\n        \"import React from 'react';\n\nclass Button extends React.Component {\n\n  render() {\n    if (this.props.disabled === true) {\n\n      return (\n        <button\n          className={ `mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored ${ this.props.customClass }` }\n          id={ this.props.id ? this.props.id : '' }\n          disabled\n        >\n          { this.props.children }\n        </button>\n      );\n\n    } else {\n\n      return (\n        <button\n          className={ `mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--colored ${ this.props.customClass }` }\n          onClick={ this.props.onClick }\n          id={ this.props.id ? this.props.id : '' }\n        >\n          { this.props.children }\n        </button>\n      );\n\n    }\n  }\n}\n\nexport default Button;\"\n        ", "output": "import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;"}, {"instruction": "Create a React component that renders a card with a custom class. The card should be able to contain any content.", "output": "import React from 'react';\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <div className={ `mdl-card ${ this.props.customClass }` }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default Card;"}, {"instruction": "\n        Integrate the new \"Card\" component into the \"Dialog\" component. When the \"Dialog\" component renders its content, it should use the \"Card\" component to display the dialog's title and actions. The \"Card\" component should be customized with the \"bobon-dialog\" and \"bobon-dialog-{dialogType}\" classes, where \"{dialogType}\" is the type of dialog being displayed.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <div customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;\n\"\n\n        Card Component:\n        \"import React from 'react';\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <div className={ `mdl-card ${ this.props.customClass }` }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default Card;\"\n        ", "output": "import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;"}, {"instruction": "Create a React component that renders a card title with a custom class. The component should take children as its content.", "output": "import React from 'react';\n\nclass CardTitle extends React.Component {\n  render() {\n    return (\n      <div className={ `mdl-card__title ${ this.props.customClass }` }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default CardTitle;"}, {"instruction": "\n        In the `Dialog` component, when there is text provided, display it within a `CardTitle` component within the `Card` component. The `CardTitle` component should be placed above the `CardAction` component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;\n\"\n\n        CardTitle Component:\n        \"import React from 'react';\n\nclass CardTitle extends React.Component {\n  render() {\n    return (\n      <div className={ `mdl-card__title ${ this.props.customClass }` }>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default CardTitle;\"\n        ", "output": "import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;"}, {"instruction": "Create a React component that wraps its children in a Material Design Lite card action container.", "output": "import React from 'react';\n\nclass CardAction extends React.Component {\n  render() {\n    return(\n      <div className=\"mdl-card__action\">\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default CardAction;"}, {"instruction": "\n        In the Dialog component, integrate the CardAction component into the Card component. The CardAction component should contain two buttons, one with the text specified by the yesText prop and one with the text specified by the noText prop. When the yesText button is clicked, the yesAction prop should be called and the dialog should be cleared. When the noText button is clicked, the noAction prop should be called and the dialog should be cleared.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;\n\"\n\n        CardAction Component:\n        \"import React from 'react';\n\nclass CardAction extends React.Component {\n  render() {\n    return(\n      <div className=\"mdl-card__action\">\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default CardAction;\"\n        ", "output": "import React, { PropTypes } from 'react';\n\nimport Button from './utils/Button';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\n\nclass Dialog extends React.Component {\n  static propTypes() {\n    return {\n      clearDialog: PropTypes.func.isRequired,\n      dialogType: PropTypes.string,\n      noAction: PropTypes.func,\n      noText: PropTypes.string,\n      text: PropTypes.string.isRequired,\n      yesAction: PropTypes.func,\n      yesText: PropTypes.string\n    }\n  }\n\n  render() {\n    let content = null;\n    if (this.props.text) {\n      content = (\n        <div className=\"bobon-dialog-container\">\n          <div className=\"bobon-dialog-cell\">\n            <Card customClass=\"bobon-dialog bobon-dialog-{ this.props.dialogType }\">\n              <CardTitle>\n                { this.props.text }\n              </CardTitle>\n              <CardAction>\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.yesAction) {\n                        this.props.yesAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.yesText }\n                </Button>\n\n                <Button\n                  onClick={ (e) => {\n                      e.preventDefault();\n                      if (this.props.noAction) {\n                        this.props.noAction();\n                      }\n                      this.props.clearDialog();\n                    } }\n                >\n                  { this.props.noText }\n                </Button>\n              </CardAction>\n            </Card>\n          </div>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Dialog;"}, {"instruction": "Create a React component called `Home` that displays a login form. The form should be encapsulated in a container component called `LoginFormContainer`.", "output": "import React from 'react';\nimport LoginFormContainer from '../containers/LoginFormContainer';\n\nclass Home extends React.Component {\n  render() {\n    return <LoginFormContainer/>;\n  }\n}\n\nexport default Home;"}, {"instruction": "\n        Integrate the new Home component into the Main component. When the user is not logged in, display the Home component alongside a chart. When the user is logged in, display the RoastListContainer component instead of the Home component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes } from 'react';\nimport { Line } from 'react-chartjs';\n\nimport C from '../constants';\nimport RoastListContainer from '../containers/RoastListContainer';\nimport { demoDataset, demoChartOptions } from '../demoData';\n\n\nclass Main extends React.Component {\n  static propTypes() {\n    return {\n      authStatus: PropTypes.string.isRequired\n    };\n  }\n\n  render() {\n    let content = null;\n    if (this.props.authStatus === C.LOGGED_IN) {\n      content = (<RoastListContainer/>);\n    } else {\n      content = (\n        <div className=\"bobon-home-anonymous\">\n          <Line\n            options={ demoChartOptions }\n            data={ demoDataset }\n            width=\"2400\"\n            height=\"1200\"\n          />\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Main;\n\"\n\n        Home Component:\n        \"import React from 'react';\nimport LoginFormContainer from '../containers/LoginFormContainer';\n\nclass Home extends React.Component {\n  render() {\n    return <LoginFormContainer/>;\n  }\n}\n\nexport default Home;\"\n        ", "output": "import React, { PropTypes } from 'react';\nimport { Line } from 'react-chartjs';\n\nimport C from '../constants';\nimport Home from './Home';\nimport RoastListContainer from '../containers/RoastListContainer';\nimport { demoDataset, demoChartOptions } from '../demoData';\n\n\nclass Main extends React.Component {\n  static propTypes() {\n    return {\n      authStatus: PropTypes.string.isRequired\n    };\n  }\n\n  render() {\n    let content = null;\n    if (this.props.authStatus === C.LOGGED_IN) {\n      content = (<RoastListContainer/>);\n    } else {\n      content = (\n        <div className=\"bobon-home-anonymous\">\n          <Line\n            options={ demoChartOptions }\n            data={ demoDataset }\n            width=\"2400\"\n            height=\"1200\"\n          />\n          <Home/>\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default Main;"}, {"instruction": "Create a React component that displays a set of four cards, each with an image and a headline. The cards should be arranged in a grid, with one card per row on desktop and all four cards stacked on top of each other on tablet. The cards should have the following content:\n\n**Card 1:**\n* Headline: Create roast\n* Image: An image of a coffee bean\n\n**Card 2:**\n* Headline: Drop beans & start timer\n* Image: An image of a coffee timer\n\n**Card 3:**\n* Headline: Enter temperatures. Push FIRST CRACK when it happens\n* Image: An image of a coffee thermometer\n\n**Card 4:**\n* Headline: Stop timer & complete the roast\n* Image: An image of a coffee roaster", "output": "import React from 'react';\n\nconst imgCreate = require('../../images/step_create.png');\nconst imgInput = require('../../images/step_input.png');\nconst imgStart = require('../../images/step_timer.png');\nconst imgStop = require('../../images/step_stop.png');\n\nclass Instructions extends React.Component {\n  render() {\n    return (\n      <div className=\"mdl-grid bobon-instructions bobon-util__full-width\">\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            1. Create roast\n          </div>\n          <img src={ imgCreate } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            2. Drop beans & start timer\n          </div>\n          <img src={ imgStart } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            3. Enter temperatures. Push FIRST CRACK when it happens\n          </div>\n          <img src={ imgInput } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            4. Stop timer & complete the roast\n          </div>\n          <img src={ imgStop } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;"}, {"instruction": "\n        In the RoastList component, add the Instructions component as a child of the Card component, after the CardTitle component. The Instructions component should provide step-by-step instructions on how to use the application to roast coffee beans.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport moment from 'moment';\n\nimport Button from './utils/Button';\nimport C from '../constants';\nimport Card from './utils/Card';\nimport CardAction from './utils/CardAction';\nimport CardContent from './utils/CardContent';\nimport CardTitle from './utils/CardTitle';\nimport NavigationLink from '../components/utils/NavigationLink';\nimport history from '../history';\nimport {\n  displayTemp,\n  displayWeight\n} from '../helpers';\n\nclass RoastList extends React.Component {\n\n  roastStatus(statusText) {\n    switch(statusText) {\n      case C.ROAST_PENDING:\n        return 'pending';\n        break;\n\n      case C.ROAST_COMPLETED:\n        return 'completed';\n        break;\n\n      case C.ROAST_IN_PROGRESS:\n        return 'in progress';\n        break;\n\n      default:\n        return statusText;\n        break;\n    }\n  }\n\n  lastRoastPointDuration(roastPoints) {\n    let duration = null;\n    if (roastPoints) {\n      let roastKey = Object.keys(roastPoints).pop();\n      duration = moment(roastPoints[roastKey].elapsed).format('mm:ss');\n    }\n\n    return duration;\n  }\n\n  roastRows() {\n    let content = null;\n\n    if (this.props.roasts) {\n      content = Object.keys(this.props.roasts).map(key => {\n        let roast = this.props.roasts[key];\n        let roastDate = '';\n\n        if (roast.roastStart) {\n          roastDate = moment(roast.roastStart).format('DD-MM-YY HH:mm');\n        }\n\n        return (\n          <tr key={ key }\n            onClick={(e) => {\n                e.preventDefault();\n                history.push(`/roasts/${key}`);\n              }}\n          >\n            <td className=\"bobon-table-cell--beans-name\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <strong>{ roast.beansName }</strong>\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <div className={ `bobon-text-with-icon bobon-roast-status--${ roast.status.toLowerCase() }` }>\n                <i className=\"material-icons\">fiber_manual_record</i>\n                { this.roastStatus(roast.status) }\n              </div>\n            </td>\n\n            <td className=\"mdl-data-table__cell--non-numeric\">\n              { roastDate }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { roast.beansMoisture } %\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile\">\n              { displayWeight(roast.batchSize, this.props.unitSystem) } { this.props.weightUnit }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { this.lastRoastPointDuration(roast.roastPoints) }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { roast.firstCrack ? moment(roast.firstCrack).format('mm:ss') : '-' }\n            </td>\n\n            <td className=\"mdl-color-text--amber-500\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <button\n                className=\"mdl-button mdl-js-button mdl-button--icon\n                                 mdl-js-ripple-effect\"\n                onClick={ (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.props.removeRoast(\n                      key,\n                      roast.beansName,\n                      roast.roastStart\n                    );\n                  } }\n              >\n                <i className=\"material-icons\">delete</i>\n              </button>\n            </td>\n          </tr>\n        );\n      });\n    }\n\n    return content;\n  }\n\n  render() {\n    let content = null;\n    if (this.props.roasts && Object.keys(this.props.roasts).length > 0) {\n      content = (\n        <div className=\"mdl-grid\">\n          <Card customClass=\"mdl-cell mdl-cell--12-col\">\n\n            <CardTitle>\n              <div className=\"bobon-text-with-icon\">\n                <i className=\"material-icons\">timeline</i>\n                My roasts\n              </div>\n            </CardTitle>\n\n            <table className=\"mdl-data-table mdl-js-data-table\n                              bobon-util__full-width\"\n            >\n              <thead>\n                <tr>\n                  <th className=\"bobon-table-cell--beans-name\n                                 mdl-data-table__cell--non-numeric\"\n                  >\n                    Bean's name\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\n                                 mdl-data-table__cell--non-numeric\"\n                  >\n                    Status\n                  </th>\n                  <th className=\"mdl-data-table__cell--non-numeric\">\n                    Roast date\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Moisture\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Batch Size\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Duration\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    1st crack\n                  </th>\n                  <th className=\"mdl-data-table__cell--non-numeric\">\n                    Del\n                  </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                { this.roastRows() }\n              </tbody>\n            </table>\n          </Card>\n        </div>\n      );\n    } else {\n      content = (\n        <div className=\"mdl-grid\">\n          <Card customClass=\"mdl-cell mdl-cell--12-col\">\n\n            <CardTitle>\n              <div className=\"bobon-text-with-icon\">\n                <i className=\"material-icons\">timeline</i>\n                You have not recorded any roast profile, yet.\n              </div>\n            </CardTitle>\n\n            <CardAction>\n              <Button customClass=\"mdl-button-with-icon mdl-color-text--red-500\"\n                onClick={ () => {\n                    history.push('/new');\n                  } }\n              >\n                <i className=\"material-icons\">whatshot</i>\n                Create a new roast\n              </Button>\n            </CardAction>\n          </Card>\n\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default RoastList;\n\"\n\n        Instructions Component:\n        \"import React from 'react';\n\nconst imgCreate = require('../../images/step_create.png');\nconst imgInput = require('../../images/step_input.png');\nconst imgStart = require('../../images/step_timer.png');\nconst imgStop = require('../../images/step_stop.png');\n\nclass Instructions extends React.Component {\n  render() {\n    return (\n      <div className=\"mdl-grid bobon-instructions bobon-util__full-width\">\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            1. Create roast\n          </div>\n          <img src={ imgCreate } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            2. Drop beans & start timer\n          </div>\n          <img src={ imgStart } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            3. Enter temperatures. Push FIRST CRACK when it happens\n          </div>\n          <img src={ imgInput } />\n        </div>\n\n        <div className=\"mdl-cell mdl-shadow--2dp mdl-color--teal-500\n                        mdl-cell--3-col-desktop mdl-cell--12-col-tablet\"\n        >\n          <div className=\"mdl-typography--headline mdl-typography--font-thin\">\n            4. Stop timer & complete the roast\n          </div>\n          <img src={ imgStop } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Instructions;\"\n        ", "output": "import React from 'react';\nimport moment from 'moment';\n\nimport Button from './utils/Button';\nimport C from '../constants';\nimport Card from './utils/Card';\nimport CardAction from './utils/CardAction';\nimport CardContent from './utils/CardContent';\nimport CardTitle from './utils/CardTitle';\nimport Instructions from './Instructions';\nimport NavigationLink from '../components/utils/NavigationLink';\nimport history from '../history';\nimport {\n  displayTemp,\n  displayWeight\n} from '../helpers';\n\nclass RoastList extends React.Component {\n\n  roastStatus(statusText) {\n    switch(statusText) {\n      case C.ROAST_PENDING:\n        return 'pending';\n        break;\n\n      case C.ROAST_COMPLETED:\n        return 'completed';\n        break;\n\n      case C.ROAST_IN_PROGRESS:\n        return 'in progress';\n        break;\n\n      default:\n        return statusText;\n        break;\n    }\n  }\n\n  lastRoastPointDuration(roastPoints) {\n    let duration = null;\n    if (roastPoints) {\n      let roastKey = Object.keys(roastPoints).pop();\n      duration = moment(roastPoints[roastKey].elapsed).format('mm:ss');\n    }\n\n    return duration;\n  }\n\n  roastRows() {\n    let content = null;\n\n    if (this.props.roasts) {\n      content = Object.keys(this.props.roasts).map(key => {\n        let roast = this.props.roasts[key];\n        let roastDate = '';\n\n        if (roast.roastStart) {\n          roastDate = moment(roast.roastStart).format('DD-MM-YY HH:mm');\n        }\n\n        return (\n          <tr key={ key }\n            onClick={(e) => {\n                e.preventDefault();\n                history.push(`/roasts/${key}`);\n              }}\n          >\n            <td className=\"bobon-table-cell--beans-name\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <strong>{ roast.beansName }</strong>\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <div className={ `bobon-text-with-icon bobon-roast-status--${ roast.status.toLowerCase() }` }>\n                <i className=\"material-icons\">fiber_manual_record</i>\n                { this.roastStatus(roast.status) }\n              </div>\n            </td>\n\n            <td className=\"mdl-data-table__cell--non-numeric\">\n              { roastDate }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { roast.beansMoisture } %\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile\">\n              { displayWeight(roast.batchSize, this.props.unitSystem) } { this.props.weightUnit }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { this.lastRoastPointDuration(roast.roastPoints) }\n            </td>\n\n            <td className=\"bobon-table-cell--hidden-mobile \">\n              { roast.firstCrack ? moment(roast.firstCrack).format('mm:ss') : '-' }\n            </td>\n\n            <td className=\"mdl-color-text--amber-500\n                           mdl-data-table__cell--non-numeric\"\n            >\n              <button\n                className=\"mdl-button mdl-js-button mdl-button--icon\n                                 mdl-js-ripple-effect\"\n                onClick={ (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.props.removeRoast(\n                      key,\n                      roast.beansName,\n                      roast.roastStart\n                    );\n                  } }\n              >\n                <i className=\"material-icons\">delete</i>\n              </button>\n            </td>\n          </tr>\n        );\n      });\n    }\n\n    return content;\n  }\n\n  render() {\n    let content = null;\n    if (this.props.roasts && Object.keys(this.props.roasts).length > 0) {\n      content = (\n        <div className=\"mdl-grid\">\n          <Card customClass=\"mdl-cell mdl-cell--12-col\">\n\n            <CardTitle>\n              <div className=\"bobon-text-with-icon\">\n                <i className=\"material-icons\">timeline</i>\n                My roasts\n              </div>\n            </CardTitle>\n\n            <table className=\"mdl-data-table mdl-js-data-table\n                              bobon-util__full-width\"\n            >\n              <thead>\n                <tr>\n                  <th className=\"bobon-table-cell--beans-name\n                                 mdl-data-table__cell--non-numeric\"\n                  >\n                    Bean's name\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\n                                 mdl-data-table__cell--non-numeric\"\n                  >\n                    Status\n                  </th>\n                  <th className=\"mdl-data-table__cell--non-numeric\">\n                    Roast date\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Moisture\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Batch Size\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    Duration\n                  </th>\n                  <th className=\"bobon-table-cell--hidden-mobile\">\n                    1st crack\n                  </th>\n                  <th className=\"mdl-data-table__cell--non-numeric\">\n                    Del\n                  </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                { this.roastRows() }\n              </tbody>\n            </table>\n          </Card>\n        </div>\n      );\n    } else {\n      content = (\n        <div className=\"mdl-grid\">\n          <Card customClass=\"mdl-cell mdl-cell--12-col\">\n\n            <CardTitle>\n              <div className=\"bobon-text-with-icon\">\n                <i className=\"material-icons\">timeline</i>\n                You have not recorded any roast profile, yet.\n              </div>\n            </CardTitle>\n\n            <Instructions/>\n\n            <CardAction>\n              <Button customClass=\"mdl-button-with-icon mdl-color-text--red-500\"\n                onClick={ () => {\n                    history.push('/new');\n                  } }\n              >\n                <i className=\"material-icons\">whatshot</i>\n                Create a new roast\n              </Button>\n            </CardAction>\n          </Card>\n\n        </div>\n      );\n    }\n\n    return content;\n  }\n}\n\nexport default RoastList;"}, {"instruction": "Create a React component that renders a radio button with a label. The radio button should be checked if the `checked` prop is true. The component should only update when the `checked` prop changes.", "output": "import React from 'react';\n\nclass Radio extends React.Component {\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.checked !== this.props.checked;\n  }\n\n  radioInput() {\n    let content = null;\n\n    if (this.props.checked === true) {\n      content = <input\n                  className=\"mdl-radio__button\"\n                  id={ this.props.htmlFor }\n                  name={ this.props.name }\n                  type=\"radio\"\n                  value={ this.props.value }\n                  checked\n                />\n    } else {\n      content = <input\n                  className=\"mdl-radio__button\"\n                  id={ this.props.htmlFor }\n                  name={ this.props.name }\n                  type=\"radio\"\n                  value={ this.props.value }\n                />\n    }\n\n    return content;\n  }\n\n  render() {\n    return (\n      <label\n        className={ `mdl-radio bobon-radio mdl-js-radio mdl-js-ripple-effect ${ this.props.customClass ? this.props.customClass : '' }` }\n        htmlFor={ this.props.htmlFor }\n      >\n        { this.radioInput() }\n        <span className=\"mdl-radio__label\">\n          { this.props.label }\n        </span>\n      </label>\n    );\n  }\n}\n\nexport default Radio ;"}, {"instruction": "\n        Update the Settings component to use the new Radio component for the unit system options. The Radio component should display the unit system labels (\"\u00b0C - kg\" and \"\u00b0F - lbs\") and the current unit system should be checked. When the user clicks on a radio button, the unit system should be updated accordingly.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\n\nimport C from '../constants';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\nimport CardContent from './utils/CardContent';\n\nclass Settings extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return nextProps.unitSystem !== this.props.unitSystem;\n  }\n\n  render() {\n    return (\n      <Card customClass=\"mdl-cell mdl-cell--12-col\">\n        <CardTitle>\n          <div className=\"bobon-text-with-icon\">\n            <i className=\"material-icons\">settings</i>\n            Settings\n          </div>\n        </CardTitle>\n        <CardTitle>\n          <div className=\"bobon-text-with-icon\">\n            <i className=\"material-icons\">straighten</i>\n            Unit System\n          </div>\n        </CardTitle>\n        <CardContent>\n\n          <form onChange={ e => {\n              this.props.onChangeUnitSystem(e, this.props.unitSystem);\n            } }\n          >\n\n            <input\n              type=\"radio\"\n              id=\"unit-system-metric\"\n              name=\"unitSystem\"\n              value={ C.METRIC }\n              checked={ this.props.unitSystem === C.METRIC }\n            />\n            <label htmlFor=\"unit-system-metric\">\u00b0C - kg</label>\n\n            <input\n              type=\"radio\"\n              id=\"unit-system-imperial\"\n              name=\"unitSystem\"\n              value={ C.IMPERIAL }\n              checked={ this.props.unitSystem === C.IMPERIAL }\n            />\n            <label htmlFor=\"unit-system-imperial\">\u00b0F - lbs</label>\n          </form>\n\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default Settings;\n\"\n\n        Radio Component:\n        \"import React from 'react';\n\nclass Radio extends React.Component {\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.checked !== this.props.checked;\n  }\n\n  radioInput() {\n    let content = null;\n\n    if (this.props.checked === true) {\n      content = <input\n                  className=\"mdl-radio__button\"\n                  id={ this.props.htmlFor }\n                  name={ this.props.name }\n                  type=\"radio\"\n                  value={ this.props.value }\n                  checked\n                />\n    } else {\n      content = <input\n                  className=\"mdl-radio__button\"\n                  id={ this.props.htmlFor }\n                  name={ this.props.name }\n                  type=\"radio\"\n                  value={ this.props.value }\n                />\n    }\n\n    return content;\n  }\n\n  render() {\n    return (\n      <label\n        className={ `mdl-radio bobon-radio mdl-js-radio mdl-js-ripple-effect ${ this.props.customClass ? this.props.customClass : '' }` }\n        htmlFor={ this.props.htmlFor }\n      >\n        { this.radioInput() }\n        <span className=\"mdl-radio__label\">\n          { this.props.label }\n        </span>\n      </label>\n    );\n  }\n}\n\nexport default Radio ;\"\n        ", "output": "import React from 'react';\n\nimport C from '../constants';\nimport Card from './utils/Card';\nimport CardTitle from './utils/CardTitle';\nimport CardAction from './utils/CardAction';\nimport CardContent from './utils/CardContent';\nimport Radio from './utils/Radio';\n\nclass Settings extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return nextProps.unitSystem !== this.props.unitSystem;\n  }\n\n  render() {\n    return (\n      <Card customClass=\"mdl-cell mdl-cell--12-col\">\n        <CardTitle>\n          <div className=\"bobon-text-with-icon\">\n            <i className=\"material-icons\">settings</i>\n            Settings\n          </div>\n        </CardTitle>\n        <CardTitle>\n          <div className=\"bobon-text-with-icon\">\n            <i className=\"material-icons\">straighten</i>\n            Unit System\n          </div>\n        </CardTitle>\n        <CardContent>\n\n          <form onChange={ e => {\n              this.props.onChangeUnitSystem(e, this.props.unitSystem);\n            } }\n          >\n            <Radio\n              htmlFor=\"unit-system-metric\"\n              name=\"unitSystem\"\n              value={ C.METRIC }\n              label=\"\u00b0C - kg\"\n              checked={ this.props.unitSystem === C.METRIC }\n            />\n\n            <Radio\n              htmlFor=\"unit-system-imperial\"\n              name=\"unitSystem\"\n              value={ C.IMPERIAL }\n              label=\"\u00b0F - lbs\"\n              checked={ this.props.unitSystem === C.IMPERIAL }\n            />\n          </form>\n\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default Settings;"}, {"instruction": "Create a web page layout with three vertical columns of equal width. The left column should contain a panel with the title \"Container\". The middle column should contain a panel with the title \"Items\". The right column should contain a panel with the title \"Item\".", "output": "import React, { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport { observer } from 'mobx-react'\nimport ContainerPanel from './ContainerPanel'\nimport ItemsPanel from './ItemsPanel'\nimport ItemPanel from './ItemPanel'\n\n@observer\nexport default class EditPanel extends Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={8}>\n          <ContainerPanel />\n        </Col>\n        <Col span={8}>\n          <ItemsPanel />\n        </Col>\n        <Col span={8}>\n          <ItemPanel />\n        </Col>\n      </Row>\n    )\n  }\n}"}, {"instruction": "\n        Integrate the EditPanel component into the root component, such that it appears above the PlayerPanel within the content section of the root component.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport PlayerPanel from './PlayerPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\" scrolling=\"0\" width=\"160px\" height=\"30px\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/limichange\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\"\n\n        EditPanel Component:\n        \"import React, { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport { observer } from 'mobx-react'\nimport ContainerPanel from './ContainerPanel'\nimport ItemsPanel from './ItemsPanel'\nimport ItemPanel from './ItemPanel'\n\n@observer\nexport default class EditPanel extends Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={8}>\n          <ContainerPanel />\n        </Col>\n        <Col span={8}>\n          <ItemsPanel />\n        </Col>\n        <Col span={8}>\n          <ItemPanel />\n        </Col>\n      </Row>\n    )\n  }\n}\"\n        ", "output": "import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport PlayerPanel from './PlayerPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\" scrolling=\"0\" width=\"160px\" height=\"30px\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/limichange\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;"}, {"instruction": "Design a React component that displays a list of cards. Each card should have a unique number and respond to clicks by changing its appearance. The component should be able to accept a custom style for the container and the cards.", "output": "import React, { Component } from 'react';\nimport { Card, Icon } from 'antd';\nimport store from './store'\nimport { observer } from 'mobx-react'\n\n@observer\nexport default class PlayerPanel extends Component {\n  cardStyle = {\n    fontSize: 24,\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    cursor: 'pointer'\n  }\n\n  render() {\n\n    let c = []\n\n    store.app.items.getAll().forEach((item, index) => {\n      c.push(\n        <Card\n          key={index}\n          onClick={e => store.app.items.select(item)}\n          bodyStyle={{ height: '100%' }}\n          style={{ ...store.app.items.style, ...item.style }}>\n          <div style={this.cardStyle}>\n            div{index}\n          </div>\n        </Card>\n      )\n    })\n\n    return (\n      <div style={{...store.app.container.style}}>\n        { c }        \n      </div>\n    )\n  }\n}"}, {"instruction": "\n        Add a new component called \"PlayerPanel\" to the root component. The PlayerPanel should be displayed below the EditPanel within the main content area. The PlayerPanel should contain a list of cards, where each card represents an item. When a user clicks on a card, the corresponding item should be selected. The style of the cards should be determined by the \"style\" property of the item and the style of the PlayerPanel should be determined by the \"container.style\" property of the store.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\" scrolling=\"0\" width=\"160px\" height=\"30px\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/limichange\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\"\n\n        PlayerPanel Component:\n        \"import React, { Component } from 'react';\nimport { Card, Icon } from 'antd';\nimport store from './store'\nimport { observer } from 'mobx-react'\n\n@observer\nexport default class PlayerPanel extends Component {\n  cardStyle = {\n    fontSize: 24,\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    cursor: 'pointer'\n  }\n\n  render() {\n\n    let c = []\n\n    store.app.items.getAll().forEach((item, index) => {\n      c.push(\n        <Card\n          key={index}\n          onClick={e => store.app.items.select(item)}\n          bodyStyle={{ height: '100%' }}\n          style={{ ...store.app.items.style, ...item.style }}>\n          <div style={this.cardStyle}>\n            div{index}\n          </div>\n        </Card>\n      )\n    })\n\n    return (\n      <div style={{...store.app.container.style}}>\n        { c }        \n      </div>\n    )\n  }\n}\"\n        ", "output": "import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport PlayerPanel from './PlayerPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\" scrolling=\"0\" width=\"160px\" height=\"30px\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/limichange\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;"}, {"instruction": "Create a React component that wraps an iframe and prevents it from re-rendering when its props change. This is useful for optimizing performance when embedding external content that doesn't require dynamic updates.", "output": "import React from 'react';\n\nexport default class WrappedIframe extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    return (<iframe {...this.props} />);\n  }\n}"}, {"instruction": "\n        Add a new component called \"WrappedIframe\" to the root component. The \"WrappedIframe\" component should be an iframe with the following attributes:\n\n* src: \"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\"\n* scrolling: \"0\"\n* width: \"160px\"\n* height: \"30px\"\n\nPlace the \"WrappedIframe\" component in the header of the root component, to the right of the title.\n\n        Use the following code for context.\n\n        Root Component:\n        \"\"import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport PlayerPanel from './PlayerPanel'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"\"row\"\",\n  flexWrap: \"\"nowrap\"\",\n  justifyContent: \"\"space-between\"\",\n  alignItems: \"\"center\"\",\n  display: \"\"flex\"\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\"App\"\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"\"noopener noreferrer\"\" target=\"\"_blank\"\" href=\"\"https://github.com/limichange\"\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\"\n\"\n\n        WrappedIframe Component:\n        \"import React from 'react';\n\nexport default class WrappedIframe extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    return (<iframe {...this.props} />);\n  }\n}\"\n        ", "output": "\"import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport './App.css';\nimport EditPanel from './EditPanel/EditPanel'\nimport PlayerPanel from './PlayerPanel'\nimport WrappedIframe from './WrappedIframe'\n\nconst { Header, Footer, Content } = Layout;\n\nconst headerStyle = {\n  background: '#fff', \n  padding: 0,\n  flexDirection: \"\"row\"\",\n  flexWrap: \"\"nowrap\"\",\n  justifyContent: \"\"space-between\"\",\n  alignItems: \"\"center\"\",\n  display: \"\"flex\"\"\n}\n\nconst titleStyle = {\n  fontSize: 24,\n  marginLeft: 40\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\"App\"\">\n        <Layout>\n          <Layout>\n            <Header style={headerStyle}>\n              <div style={titleStyle}>Flex Editor</div>\n              <WrappedIframe src=\"\"https://ghbtns.com/github-btn.html?user=limichange&repo=flex-abc&type=star&count=true&size=large\"\" scrolling=\"\"0\"\" width=\"\"160px\"\" height=\"\"30px\"\" />\n            </Header>\n            <Content style={{ margin: '24px 16px 0' }}>\n              <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <EditPanel />\n                <PlayerPanel />\n              </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n              \u00a92017 Created by <a rel=\"\"noopener noreferrer\"\" target=\"\"_blank\"\" href=\"\"https://github.com/limichange\"\">Limichange</a>\n            </Footer>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\""}, {"instruction": "Create a user interface that allows a user to edit the following CSS properties of a selected HTML div element: order, flexGrow, flexShrink, flexBasis, and alignSelf. The user should be able to select the div element from a list of available divs. If no div is selected, display a message indicating that a div must be selected.", "output": "import React, { Component } from 'react'\nimport { Select, InputNumber, Input, Card, Form } from 'antd'\nimport store from '../store'\nimport { observer } from 'mobx-react'\nimport formItemLayout from './formItemLayout'\nimport PanelMenu from './PanelMenu'\n\nconst Option = Select.Option\nconst FormItem = Form.Item\n\n@observer\nexport default class ItemPanel extends Component {\n  render() {\n    let selectItem = store.app.items.selectItem\n    let title = ''\n    let content = {}\n\n    if (selectItem.id === undefined) {\n      title = 'Please select a div'\n      content = <div></div>\n    } else {\n      title = `div${selectItem.id}`\n      content = (\n        <Form>\n          <FormItem {...formItemLayout} label=\"order\">\n            <InputNumber\n              value={selectItem.style.order}\n              onChange={e => selectItem.updateStyle({ order: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexGrow\">\n            <InputNumber\n              value={selectItem.style.flexGrow}\n              onChange={e => selectItem.updateStyle({ flexGrow: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexShrink\">\n            <InputNumber\n              value={selectItem.style.flexShrink}\n              onChange={e => selectItem.updateStyle({ flexShrink: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexBasis\">\n            <Input\n              value={selectItem.style.flexBasis}\n              onChange={e => selectItem.updateStyle({ flexBasis: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"alignSelf\">\n            <Select value={selectItem.style.alignSelf} onChange={e => selectItem.updateStyle({ alignSelf: e })}>\n              <Option value=\"flex-start\">flex-start</Option>\n              <Option value=\"flex-end\">flex-end</Option>\n              <Option value=\"center\">center</Option>\n              <Option value=\"auto\">auto</Option>\n              <Option value=\"baseline\">baseline</Option>\n              <Option value=\"stretch\">stretch</Option>\n            </Select>\n          </FormItem>\n        </Form>\n      )\n    }\n\n    const extra = <PanelMenu object={store.app.items.getSelectItem()} />\n\n    return (\n      <Card extra={extra}\n        title={title}>\n        { content }\n      </Card>\n    )\n  }\n}"}, {"instruction": "\n        Integrate the ItemPanel component into the EditPanel component. The ItemPanel should be displayed in the third column of the EditPanel, and it should allow users to edit the properties of the selected item. The ItemPanel should include a title that displays the name of the selected item, and it should contain a form with fields for editing the item's order, flexGrow, flexShrink, flexBasis, and alignSelf properties. The ItemPanel should also include a PanelMenu component that allows users to perform actions on the selected item.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport { observer } from 'mobx-react'\nimport ContainerPanel from './ContainerPanel'\nimport ItemsPanel from './ItemsPanel'\n\n@observer\nexport default class EditPanel extends Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={8}>\n          <ContainerPanel />\n        </Col>\n        <Col span={8}>\n          <ItemsPanel />\n        </Col>\n      </Row>\n    )\n  }\n}\n\"\n\n        ItemPanel Component:\n        \"import React, { Component } from 'react'\nimport { Select, InputNumber, Input, Card, Form } from 'antd'\nimport store from '../store'\nimport { observer } from 'mobx-react'\nimport formItemLayout from './formItemLayout'\nimport PanelMenu from './PanelMenu'\n\nconst Option = Select.Option\nconst FormItem = Form.Item\n\n@observer\nexport default class ItemPanel extends Component {\n  render() {\n    let selectItem = store.app.items.selectItem\n    let title = ''\n    let content = {}\n\n    if (selectItem.id === undefined) {\n      title = 'Please select a div'\n      content = <div></div>\n    } else {\n      title = `div${selectItem.id}`\n      content = (\n        <Form>\n          <FormItem {...formItemLayout} label=\"order\">\n            <InputNumber\n              value={selectItem.style.order}\n              onChange={e => selectItem.updateStyle({ order: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexGrow\">\n            <InputNumber\n              value={selectItem.style.flexGrow}\n              onChange={e => selectItem.updateStyle({ flexGrow: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexShrink\">\n            <InputNumber\n              value={selectItem.style.flexShrink}\n              onChange={e => selectItem.updateStyle({ flexShrink: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"flexBasis\">\n            <Input\n              value={selectItem.style.flexBasis}\n              onChange={e => selectItem.updateStyle({ flexBasis: e })} />\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"alignSelf\">\n            <Select value={selectItem.style.alignSelf} onChange={e => selectItem.updateStyle({ alignSelf: e })}>\n              <Option value=\"flex-start\">flex-start</Option>\n              <Option value=\"flex-end\">flex-end</Option>\n              <Option value=\"center\">center</Option>\n              <Option value=\"auto\">auto</Option>\n              <Option value=\"baseline\">baseline</Option>\n              <Option value=\"stretch\">stretch</Option>\n            </Select>\n          </FormItem>\n        </Form>\n      )\n    }\n\n    const extra = <PanelMenu object={store.app.items.getSelectItem()} />\n\n    return (\n      <Card extra={extra}\n        title={title}>\n        { content }\n      </Card>\n    )\n  }\n}\"\n        ", "output": "import React, { Component } from 'react'\nimport { Row, Col } from 'antd'\nimport { observer } from 'mobx-react'\nimport ContainerPanel from './ContainerPanel'\nimport ItemsPanel from './ItemsPanel'\nimport ItemPanel from './ItemPanel'\n\n@observer\nexport default class EditPanel extends Component {\n  render() {\n    return (\n      <Row gutter={16}>\n        <Col span={8}>\n          <ContainerPanel />\n        </Col>\n        <Col span={8}>\n          <ItemsPanel />\n        </Col>\n        <Col span={8}>\n          <ItemPanel />\n        </Col>\n      </Row>\n    )\n  }\n}"}, {"instruction": "Create a table that displays the following information for a list of payments:\n- Year (starting from 1, excluding the first item in the list)\n- Interest paid in that year\n- Overpayment made in that year\n- Remaining balance after that year\n\nInclude a header row with the column names and a footer row that shows the total interest and overpayment.", "output": "import React from 'react';\n\nexport default ({ payments, className }) => {\n  let output = payments\n    .filter((year, i) => i > 0 && (year.balance > 0 || year.interestYearly > 0))\n    .reduce(\n      (acc, year, index) => ({\n        interestTotal: acc.interestTotal + year.interestYearly,\n        overpaymentTotal: acc.overpaymentTotal + year.overpayment,\n        rows: [\n          ...acc.rows,\n          [\n            year.partial ? year.partial + 'm' : index + 1,\n            Math.round(year.interestYearly || 0),\n            Math.round(year.overpayment),\n            Math.round(year.balance)\n          ]\n        ]\n      }),\n      { interestTotal: 0, overpaymentTotal: 0, rows: [] }\n    );\n\n  return (\n    <table className={className}>\n      <thead>\n        <tr>\n          <th>Years</th>\n          <th>Interest</th>\n          <th>Overpayment</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n      <tbody>\n        {output.rows.map((row, index) => (\n          <tr key={index}>\n            {row.map((d, i) => (\n              <td key={i}>{d.toLocaleString()}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td colSpan={2}>\n            {Math.round(output.interestTotal).toLocaleString()}\n          </td>\n          <td>{Math.round(output.overpaymentTotal).toLocaleString()}</td>\n          <td />\n        </tr>\n      </tfoot>\n    </table>\n  );\n};"}, {"instruction": "\n        Integrate the Table component into the root component so that it displays the payments data in a table format. The table should be placed next to the chart in the right-hand column of the page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { useState } from 'react';\n\nimport './App.css';\n\nimport Chart from './Chart';\nimport calculate from './calculations';\n\nconst defaultOverpayment = { month: '1', year: '0', amount: '0' };\n\nexport default () => {\n  const [initial, setInitial] = useState('200000');\n  const [rate, setRate] = useState('5');\n  const [years, setYears] = useState('25');\n  const [monthlyOverpayment, setMonthlyOverpayment] = useState('0');\n  const [overpayments, setOverpayments] = useState([defaultOverpayment]);\n\n  const updateOverpayment = index => ({ target }) =>\n    setOverpayments(\n      overpayments.map((overpayment, i) =>\n        i === index\n          ? { ...overpayment, [target.name]: target.value }\n          : overpayment\n      )\n    );\n\n  const { monthlyPayment, payments } = calculate(\n    +initial,\n    +years,\n    +rate,\n    +monthlyOverpayment,\n    overpayments\n  );\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"navbar-header\">\n          <div className=\"navbar-brand\">Mortgage Overpayment Calculator</div>\n        </div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"col-md-8 col-sm-12\">\n          <div className=\"col-sm-4\">\n            <div>\n              <h2>Initial</h2>\n              <label>Amount</label>\n              <input\n                maxLength={7}\n                value={initial}\n                onChange={e => setInitial(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Years</label>\n              <input\n                type=\"number\"\n                maxLength={2}\n                value={years}\n                onChange={e => setYears(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Rate</label>\n              <input\n                type=\"number\"\n                step={0.1}\n                value={rate}\n                onChange={e => setRate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-8\">\n            <div>\n              <h2>Overpayment</h2>\n              <label>Monthly</label>\n              <input\n                type=\"number\"\n                maxLength={5}\n                value={monthlyOverpayment}\n                onChange={e => setMonthlyOverpayment(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Year</label>\n              <label>Month</label>\n              <label>Amount</label>\n            </div>\n            {overpayments.map(({ year, month, amount }, i) => (\n              <div key={i}>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={years}\n                  value={year}\n                  name=\"year\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"12\"\n                  value={month}\n                  name=\"month\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"text\"\n                  value={amount}\n                  name=\"amount\"\n                  onChange={updateOverpayment(i)}\n                />\n\n                {i === overpayments.length - 1 ? (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments([...overpayments, defaultOverpayment])\n                    }\n                  >\n                    +\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments(overpayments.filter((_, j) => j !== i))\n                    }\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"col-sm-12\">\n            <h2>\n              Monthly Payment\n              <span className=\"money\">\n                {(+monthlyOverpayment + monthlyPayment).toFixed(2)}\n              </span>\n            </h2>\n            <Chart payments={payments} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\"\n\n        Table Component:\n        \"import React from 'react';\n\nexport default ({ payments, className }) => {\n  let output = payments\n    .filter((year, i) => i > 0 && (year.balance > 0 || year.interestYearly > 0))\n    .reduce(\n      (acc, year, index) => ({\n        interestTotal: acc.interestTotal + year.interestYearly,\n        overpaymentTotal: acc.overpaymentTotal + year.overpayment,\n        rows: [\n          ...acc.rows,\n          [\n            year.partial ? year.partial + 'm' : index + 1,\n            Math.round(year.interestYearly || 0),\n            Math.round(year.overpayment),\n            Math.round(year.balance)\n          ]\n        ]\n      }),\n      { interestTotal: 0, overpaymentTotal: 0, rows: [] }\n    );\n\n  return (\n    <table className={className}>\n      <thead>\n        <tr>\n          <th>Years</th>\n          <th>Interest</th>\n          <th>Overpayment</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n      <tbody>\n        {output.rows.map((row, index) => (\n          <tr key={index}>\n            {row.map((d, i) => (\n              <td key={i}>{d.toLocaleString()}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td colSpan={2}>\n            {Math.round(output.interestTotal).toLocaleString()}\n          </td>\n          <td>{Math.round(output.overpaymentTotal).toLocaleString()}</td>\n          <td />\n        </tr>\n      </tfoot>\n    </table>\n  );\n};\"\n        ", "output": "import React, { useState } from 'react';\n\nimport './App.css';\n\nimport Table from './Table';\nimport Chart from './Chart';\nimport calculate from './calculations';\n\nconst defaultOverpayment = { month: '1', year: '0', amount: '0' };\n\nexport default () => {\n  const [initial, setInitial] = useState('200000');\n  const [rate, setRate] = useState('5');\n  const [years, setYears] = useState('25');\n  const [monthlyOverpayment, setMonthlyOverpayment] = useState('0');\n  const [overpayments, setOverpayments] = useState([defaultOverpayment]);\n\n  const updateOverpayment = index => ({ target }) =>\n    setOverpayments(\n      overpayments.map((overpayment, i) =>\n        i === index\n          ? { ...overpayment, [target.name]: target.value }\n          : overpayment\n      )\n    );\n\n  const { monthlyPayment, payments } = calculate(\n    +initial,\n    +years,\n    +rate,\n    +monthlyOverpayment,\n    overpayments\n  );\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"navbar-header\">\n          <div className=\"navbar-brand\">Mortgage Overpayment Calculator</div>\n        </div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"col-md-8 col-sm-12\">\n          <div className=\"col-sm-4\">\n            <div>\n              <h2>Initial</h2>\n              <label>Amount</label>\n              <input\n                maxLength={7}\n                value={initial}\n                onChange={e => setInitial(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Years</label>\n              <input\n                type=\"number\"\n                maxLength={2}\n                value={years}\n                onChange={e => setYears(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Rate</label>\n              <input\n                type=\"number\"\n                step={0.1}\n                value={rate}\n                onChange={e => setRate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-8\">\n            <div>\n              <h2>Overpayment</h2>\n              <label>Monthly</label>\n              <input\n                type=\"number\"\n                maxLength={5}\n                value={monthlyOverpayment}\n                onChange={e => setMonthlyOverpayment(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Year</label>\n              <label>Month</label>\n              <label>Amount</label>\n            </div>\n            {overpayments.map(({ year, month, amount }, i) => (\n              <div key={i}>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={years}\n                  value={year}\n                  name=\"year\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"12\"\n                  value={month}\n                  name=\"month\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"text\"\n                  value={amount}\n                  name=\"amount\"\n                  onChange={updateOverpayment(i)}\n                />\n\n                {i === overpayments.length - 1 ? (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments([...overpayments, defaultOverpayment])\n                    }\n                  >\n                    +\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments(overpayments.filter((_, j) => j !== i))\n                    }\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"col-sm-12\">\n            <h2>\n              Monthly Payment\n              <span className=\"money\">\n                {(+monthlyOverpayment + monthlyPayment).toFixed(2)}\n              </span>\n            </h2>\n            <Chart payments={payments} />\n          </div>\n        </div>\n        <Table className=\"col-sm-4\" payments={payments} />\n      </div>\n    </div>\n  );\n};"}, {"instruction": "Create an interactive line chart that visualizes a series of payments over time. The x-axis should represent the payment number, and the y-axis should represent the balance remaining after each payment. The chart should include a baseline line representing the balance if no payments were made, and an actual line representing the balance after each payment. The chart should be responsive to changes in the input data.", "output": "import React, { useEffect, useRef } from 'react';\n\nimport { select } from 'd3-selection';\nimport { line } from 'd3-shape';\nimport { scaleLinear } from 'd3-scale';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport 'd3-transition';\n\nconst margin = { top: 20, right: 20, bottom: 20, left: 80 },\n  fullWidth = 800,\n  fullHeight = 300,\n  width = fullWidth - margin.left - margin.right,\n  height = fullHeight - margin.top - margin.bottom;\n\nconst x = scaleLinear().range([0, width]);\n\nconst y = scaleLinear().range([0, height]);\n\nconst actual = line()\n  .x((d, i) => x(i + (d.partial / 12 || 1) - 1))\n  .y(d => y(d.balance));\n\nconst baseline = line()\n  .x((d, i) => x(i))\n  .y(d => y(d.baseline));\n\nexport default ({ payments }) => {\n  const chart = useRef(null);\n\n  useEffect(() => {\n    const chartEl = select(chart.current);\n    x.domain([0, payments.length - 1]);\n    y.domain([payments[0].balance, 0]);\n\n    chartEl\n      .select('.x')\n      .call(axisBottom(x).ticks(Math.min(payments.length, 30)));\n\n    chartEl.select('.y').call(axisLeft(y));\n\n    chartEl\n      .select('.baseline')\n      .transition()\n      .attr('d', baseline(payments));\n\n    chartEl\n      .select('.actual')\n      .transition()\n      .attr('d', actual(payments));\n  }, [payments]);\n\n  return (\n    <svg\n      ref={chart}\n      height=\"100%\"\n      width=\"100%\"\n      viewBox={`0 0 ${fullWidth} ${fullHeight}`}\n    >\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        <g className=\"axis x\" transform={`translate(0, ${height})`} />\n        <g className=\"axis y\" />\n        <path className=\"line baseline\" />\n        <path className=\"line actual\" />\n      </g>\n    </svg>\n  );\n};"}, {"instruction": "\n        Integrate the newly created \"Chart\" component into the root component. When the user changes any of the input fields, the chart should update to reflect the new values. The chart should be placed below the \"Monthly Payment\" heading.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { useState } from 'react';\n\nimport './App.css';\n\nimport Table from './Table';\nimport calculate from './calculations';\n\nconst defaultOverpayment = { month: '1', year: '0', amount: '0' };\n\nexport default () => {\n  const [initial, setInitial] = useState('200000');\n  const [rate, setRate] = useState('5');\n  const [years, setYears] = useState('25');\n  const [monthlyOverpayment, setMonthlyOverpayment] = useState('0');\n  const [overpayments, setOverpayments] = useState([defaultOverpayment]);\n\n  const updateOverpayment = index => ({ target }) =>\n    setOverpayments(\n      overpayments.map((overpayment, i) =>\n        i === index\n          ? { ...overpayment, [target.name]: target.value }\n          : overpayment\n      )\n    );\n\n  const { monthlyPayment, payments } = calculate(\n    +initial,\n    +years,\n    +rate,\n    +monthlyOverpayment,\n    overpayments\n  );\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"navbar-header\">\n          <div className=\"navbar-brand\">Mortgage Overpayment Calculator</div>\n        </div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"col-md-8 col-sm-12\">\n          <div className=\"col-sm-4\">\n            <div>\n              <h2>Initial</h2>\n              <label>Amount</label>\n              <input\n                maxLength={7}\n                value={initial}\n                onChange={e => setInitial(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Years</label>\n              <input\n                type=\"number\"\n                maxLength={2}\n                value={years}\n                onChange={e => setYears(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Rate</label>\n              <input\n                type=\"number\"\n                step={0.1}\n                value={rate}\n                onChange={e => setRate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-8\">\n            <div>\n              <h2>Overpayment</h2>\n              <label>Monthly</label>\n              <input\n                type=\"number\"\n                maxLength={5}\n                value={monthlyOverpayment}\n                onChange={e => setMonthlyOverpayment(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Year</label>\n              <label>Month</label>\n              <label>Amount</label>\n            </div>\n            {overpayments.map(({ year, month, amount }, i) => (\n              <div key={i}>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={years}\n                  value={year}\n                  name=\"year\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"12\"\n                  value={month}\n                  name=\"month\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"text\"\n                  value={amount}\n                  name=\"amount\"\n                  onChange={updateOverpayment(i)}\n                />\n\n                {i === overpayments.length - 1 ? (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments([...overpayments, defaultOverpayment])\n                    }\n                  >\n                    +\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments(overpayments.filter((_, j) => j !== i))\n                    }\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"col-sm-12\">\n            <h2>\n              Monthly Payment\n              <span className=\"money\">\n                {(+monthlyOverpayment + monthlyPayment).toFixed(2)}\n              </span>\n            </h2>\n          </div>\n        </div>\n        <Table className=\"col-sm-4\" payments={payments} />\n      </div>\n    </div>\n  );\n};\n\"\n\n        Chart Component:\n        \"import React, { useEffect, useRef } from 'react';\n\nimport { select } from 'd3-selection';\nimport { line } from 'd3-shape';\nimport { scaleLinear } from 'd3-scale';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport 'd3-transition';\n\nconst margin = { top: 20, right: 20, bottom: 20, left: 80 },\n  fullWidth = 800,\n  fullHeight = 300,\n  width = fullWidth - margin.left - margin.right,\n  height = fullHeight - margin.top - margin.bottom;\n\nconst x = scaleLinear().range([0, width]);\n\nconst y = scaleLinear().range([0, height]);\n\nconst actual = line()\n  .x((d, i) => x(i + (d.partial / 12 || 1) - 1))\n  .y(d => y(d.balance));\n\nconst baseline = line()\n  .x((d, i) => x(i))\n  .y(d => y(d.baseline));\n\nexport default ({ payments }) => {\n  const chart = useRef(null);\n\n  useEffect(() => {\n    const chartEl = select(chart.current);\n    x.domain([0, payments.length - 1]);\n    y.domain([payments[0].balance, 0]);\n\n    chartEl\n      .select('.x')\n      .call(axisBottom(x).ticks(Math.min(payments.length, 30)));\n\n    chartEl.select('.y').call(axisLeft(y));\n\n    chartEl\n      .select('.baseline')\n      .transition()\n      .attr('d', baseline(payments));\n\n    chartEl\n      .select('.actual')\n      .transition()\n      .attr('d', actual(payments));\n  }, [payments]);\n\n  return (\n    <svg\n      ref={chart}\n      height=\"100%\"\n      width=\"100%\"\n      viewBox={`0 0 ${fullWidth} ${fullHeight}`}\n    >\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        <g className=\"axis x\" transform={`translate(0, ${height})`} />\n        <g className=\"axis y\" />\n        <path className=\"line baseline\" />\n        <path className=\"line actual\" />\n      </g>\n    </svg>\n  );\n};\"\n        ", "output": "import React, { useState } from 'react';\n\nimport './App.css';\n\nimport Table from './Table';\nimport Chart from './Chart';\nimport calculate from './calculations';\n\nconst defaultOverpayment = { month: '1', year: '0', amount: '0' };\n\nexport default () => {\n  const [initial, setInitial] = useState('200000');\n  const [rate, setRate] = useState('5');\n  const [years, setYears] = useState('25');\n  const [monthlyOverpayment, setMonthlyOverpayment] = useState('0');\n  const [overpayments, setOverpayments] = useState([defaultOverpayment]);\n\n  const updateOverpayment = index => ({ target }) =>\n    setOverpayments(\n      overpayments.map((overpayment, i) =>\n        i === index\n          ? { ...overpayment, [target.name]: target.value }\n          : overpayment\n      )\n    );\n\n  const { monthlyPayment, payments } = calculate(\n    +initial,\n    +years,\n    +rate,\n    +monthlyOverpayment,\n    overpayments\n  );\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"navbar-header\">\n          <div className=\"navbar-brand\">Mortgage Overpayment Calculator</div>\n        </div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"col-md-8 col-sm-12\">\n          <div className=\"col-sm-4\">\n            <div>\n              <h2>Initial</h2>\n              <label>Amount</label>\n              <input\n                maxLength={7}\n                value={initial}\n                onChange={e => setInitial(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Years</label>\n              <input\n                type=\"number\"\n                maxLength={2}\n                value={years}\n                onChange={e => setYears(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Rate</label>\n              <input\n                type=\"number\"\n                step={0.1}\n                value={rate}\n                onChange={e => setRate(e.target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-8\">\n            <div>\n              <h2>Overpayment</h2>\n              <label>Monthly</label>\n              <input\n                type=\"number\"\n                maxLength={5}\n                value={monthlyOverpayment}\n                onChange={e => setMonthlyOverpayment(e.target.value)}\n              />\n            </div>\n            <div>\n              <label>Year</label>\n              <label>Month</label>\n              <label>Amount</label>\n            </div>\n            {overpayments.map(({ year, month, amount }, i) => (\n              <div key={i}>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max={years}\n                  value={year}\n                  name=\"year\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"12\"\n                  value={month}\n                  name=\"month\"\n                  onChange={updateOverpayment(i)}\n                />\n                <input\n                  type=\"text\"\n                  value={amount}\n                  name=\"amount\"\n                  onChange={updateOverpayment(i)}\n                />\n\n                {i === overpayments.length - 1 ? (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments([...overpayments, defaultOverpayment])\n                    }\n                  >\n                    +\n                  </button>\n                ) : (\n                  <button\n                    className=\"btn btn-xs\"\n                    onClick={() =>\n                      setOverpayments(overpayments.filter((_, j) => j !== i))\n                    }\n                  >\n                    X\n                  </button>\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"col-sm-12\">\n            <h2>\n              Monthly Payment\n              <span className=\"money\">\n                {(+monthlyOverpayment + monthlyPayment).toFixed(2)}\n              </span>\n            </h2>\n            <Chart payments={payments} />\n          </div>\n        </div>\n        <Table className=\"col-sm-4\" payments={payments} />\n      </div>\n    </div>\n  );\n};"}, {"instruction": "Create a header with a search bar and a dropdown menu for selecting the media type to search for. The search bar should have a placeholder that says \"Search\". When the user types in the search bar, the results should update in real-time. The dropdown menu should have options for \"All\", \"Audiobook\", \"eBook\", \"Movie\", \"Music\", \"Music Video\", \"Podcast\", \"TV Show\", and \"Software\". When the user clicks on an option in the dropdown menu, the selected media type should be updated. When the user presses the enter key in the search bar, the search results should be displayed.", "output": "/* global $ */\n// @flow\n/* eslint-disable jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport emitter from '../emitter';\nimport type { HeaderState, SearchOption } from '../type';\nimport '../style/Header.css';\n\nconst options: Array<SearchOption> = [\n  'All',\n  'Audiobook',\n  'eBook',\n  'Movie',\n  'Music',\n  'Music Video',\n  'Podcast',\n  'TV Show',\n  'Software'\n];\n\nclass Header extends React.PureComponent<{}, HeaderState> {\n  emitSearch: () => void;\n  _onKeyUp: (e: Object) => void;\n  _onClick: (e: Object) => void;\n  _update: (e: Object) => Function;\n  ticking: boolean;\n  rAf: any;\n\n  state: HeaderState = {\n    media: 'All',\n    query: ''\n  };\n\n  constructor(props: Object) {\n    super(props);\n    this.ticking = false;\n    this.rAf = null;\n    this.emitSearch = () => emitter.emit('search', this.state);\n    this._onClick = e => this.setState(\n      { media: e.target.textContent },\n      () => (this.state.query.length ? this.emitSearch() : null)\n    );\n    this._update = ({ keyCode, target: { value: query } }) => _ => {\n      this.setState({ query }, () => keyCode === 13 && this.emitSearch());\n      this.ticking = false;\n    };\n    this._onKeyUp = e => {\n      if (!this.ticking) {\n        this.rAf = window.requestAnimationFrame(this._update(e));\n        this.ticking = true;\n      }\n    };\n  }\n\n  renderSearchOption = () => options.map(opt =>\n    <li\n      key={opt}\n      className={this.state.media === opt ? 'select' : ''}\n    >\n      <a\n        tabIndex=\"0\"\n        role=\"button\"\n        onClick={this._onClick}\n      >\n        {opt}\n      </a>\n    </li>);\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.rAf);\n  }\n\n  render() {\n    return (\n      <div className=\"navbar-fixed\">\n        <nav>\n          <div className=\"nav-wrapper cyan\">\n            <div className=\"header-search-wrapper\">\n              <i className=\"material-icons black-text\">search</i>\n              <input\n                type=\"text\"\n                placeholder=\"Search\"\n                onKeyUp={this._onKeyUp}\n                className=\"search-input white black-text\"\n              />\n            </div>\n            <div className=\"dropdown-wrapper\">\n              <div\n                className=\"dropdown-button\"\n                role=\"button\"\n                data-activates=\"search-options\"\n              >\n                {this.state.media}\n              </div>\n              <ul id=\"search-options\" className=\"dropdown-content\">\n                {this.renderSearchOption()}\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Header;"}, {"instruction": "\n        Add the Header component to the root component. The Header component should be placed at the top of the root component's render method, before the Container and Ribbon components.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport Container from './Container';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Container />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;\n\"\n\n        Header Component:\n        \"/* global $ */\n// @flow\n/* eslint-disable jsx-a11y/anchor-is-valid, jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport emitter from '../emitter';\nimport type { HeaderState, SearchOption } from '../type';\nimport '../style/Header.css';\n\nconst options: Array<SearchOption> = [\n  'All',\n  'Audiobook',\n  'eBook',\n  'Movie',\n  'Music',\n  'Music Video',\n  'Podcast',\n  'TV Show',\n  'Software'\n];\n\nclass Header extends React.PureComponent<{}, HeaderState> {\n  emitSearch: () => void;\n  _onKeyUp: (e: Object) => void;\n  _onClick: (e: Object) => void;\n  _update: (e: Object) => Function;\n  ticking: boolean;\n  rAf: any;\n\n  state: HeaderState = {\n    media: 'All',\n    query: ''\n  };\n\n  constructor(props: Object) {\n    super(props);\n    this.ticking = false;\n    this.rAf = null;\n    this.emitSearch = () => emitter.emit('search', this.state);\n    this._onClick = e => this.setState(\n      { media: e.target.textContent },\n      () => (this.state.query.length ? this.emitSearch() : null)\n    );\n    this._update = ({ keyCode, target: { value: query } }) => _ => {\n      this.setState({ query }, () => keyCode === 13 && this.emitSearch());\n      this.ticking = false;\n    };\n    this._onKeyUp = e => {\n      if (!this.ticking) {\n        this.rAf = window.requestAnimationFrame(this._update(e));\n        this.ticking = true;\n      }\n    };\n  }\n\n  renderSearchOption = () => options.map(opt =>\n    <li\n      key={opt}\n      className={this.state.media === opt ? 'select' : ''}\n    >\n      <a\n        tabIndex=\"0\"\n        role=\"button\"\n        onClick={this._onClick}\n      >\n        {opt}\n      </a>\n    </li>);\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.rAf);\n  }\n\n  render() {\n    return (\n      <div className=\"navbar-fixed\">\n        <nav>\n          <div className=\"nav-wrapper cyan\">\n            <div className=\"header-search-wrapper\">\n              <i className=\"material-icons black-text\">search</i>\n              <input\n                type=\"text\"\n                placeholder=\"Search\"\n                onKeyUp={this._onKeyUp}\n                className=\"search-input white black-text\"\n              />\n            </div>\n            <div className=\"dropdown-wrapper\">\n              <div\n                className=\"dropdown-button\"\n                role=\"button\"\n                data-activates=\"search-options\"\n              >\n                {this.state.media}\n              </div>\n              <ul id=\"search-options\" className=\"dropdown-content\">\n                {this.renderSearchOption()}\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Header;\"\n        ", "output": "import React from 'react';\nimport Header from './Header';\nimport Container from './Container';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;"}, {"instruction": "Create a React component that displays a list of items. When the user enters a search query, the component should fetch data from an API and display the results. If no results are found, display a \"No results found\" message. If an error occurs, display an \"Error\" message.", "output": "// @flow\nimport React from 'react';\nimport List from './List';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;"}, {"instruction": "\n        Integrate the new \"Container\" component into the root component, ensuring that:\n\n- The \"Container\" component is rendered below the \"Header\" component and above the \"Ribbon\" component.\n- The \"Container\" component is responsible for displaying search results and error messages.\n- When the user enters a search term in the \"Header\" component, the \"Container\" component should fetch the search results and display them.\n- If the search returns no results, the \"Container\" component should display a \"no results\" message.\n- If the search fails, the \"Container\" component should display an \"error\" message.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport Header from './Header';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;\n\"\n\n        Container Component:\n        \"// @flow\nimport React from 'react';\nimport List from './List';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;\"\n        ", "output": "import React from 'react';\nimport Header from './Header';\nimport Container from './Container';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;"}, {"instruction": "Create a React component that displays a GitHub ribbon in the bottom-right corner of the screen. When clicked, the ribbon should open the GitHub repository for the project in a new tab. The ribbon should be customizable with a color and a URL.", "output": "import React, { Component } from 'react';\nimport '../style/Ribbon.css';\n\nconst Ribbon = () => (\n  <a\n    target=\"_blank\"\n    href=\"https://github.com/LeoAJ/react-iTunes-search\"\n    className=\"github-corner\"\n    rel=\"noopener noreferrer\"\n    aria-label=\"View source on Github\"\n  >\n    <svg\n      width=\"80\"\n      height=\"80\"\n      viewBox=\"0 0 250 250\"\n      className=\"svg\"\n      aria-hidden=\"true\"\n    >\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n      <path\n        d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n        fill=\"currentColor\"\n        className=\"octo-arm path\"\n      />\n      <path\n        d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n        fill=\"currentColor\"\n        className=\"octo-body\"\n      />\n    </svg>\n  </a>\n);\n\nexport default Ribbon;"}, {"instruction": "\n        Integrate the Ribbon component into the App component by adding it to the JSX within the App component's render method, so that the Ribbon component is rendered below the Header and Container components.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react';\nimport Header from './Header';\nimport Container from './Container';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n    </div>\n  );\n};\n\nexport default App;\n\"\n\n        Ribbon Component:\n        \"import React, { Component } from 'react';\nimport '../style/Ribbon.css';\n\nconst Ribbon = () => (\n  <a\n    target=\"_blank\"\n    href=\"https://github.com/LeoAJ/react-iTunes-search\"\n    className=\"github-corner\"\n    rel=\"noopener noreferrer\"\n    aria-label=\"View source on Github\"\n  >\n    <svg\n      width=\"80\"\n      height=\"80\"\n      viewBox=\"0 0 250 250\"\n      className=\"svg\"\n      aria-hidden=\"true\"\n    >\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n      <path\n        d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n        fill=\"currentColor\"\n        className=\"octo-arm path\"\n      />\n      <path\n        d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n        fill=\"currentColor\"\n        className=\"octo-body\"\n      />\n    </svg>\n  </a>\n);\n\nexport default Ribbon;\"\n        ", "output": "import React from 'react';\nimport Header from './Header';\nimport Container from './Container';\nimport Ribbon from './Ribbon';\nimport '../style/App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n      <Ribbon />\n    </div>\n  );\n};\n\nexport default App;"}, {"instruction": "Create a React component that displays a message and an icon based on a given status. The component should display a loading spinner when the status is \"loading\", a music note icon and the message \"Welcome back!\" when the status is \"init\", an info icon and the message \"No match\" when the status is \"noContent\", and an error icon and the message \"Error!\" when the status is \"error\". The component should be styled using CSS.", "output": "// @flow\nimport React, { PropTypes } from 'react';\nimport '../style/Message.css';\n\nconst msgMap: Object = {\n  init: {\n    icon: 'music_note',\n    msg: 'Welcome back!'\n  },\n  loading: {\n    msg: 'Loading...'\n  },\n  noContent: {\n    icon: 'info',\n    msg: 'No match'\n  },\n  error: {\n    icon: 'error',\n    msg: 'Error!'\n  }\n};\n\nconst spinner = _ => (\n  <div className=\"sk-circle\">\n    <div className=\"sk-circle1 sk-child\" />\n    <div className=\"sk-circle2 sk-child\" />\n    <div className=\"sk-circle3 sk-child\" />\n    <div className=\"sk-circle4 sk-child\" />\n    <div className=\"sk-circle5 sk-child\" />\n    <div className=\"sk-circle6 sk-child\" />\n    <div className=\"sk-circle7 sk-child\" />\n    <div className=\"sk-circle8 sk-child\" />\n    <div className=\"sk-circle9 sk-child\" />\n    <div className=\"sk-circle10 sk-child\" />\n    <div className=\"sk-circle11 sk-child\" />\n    <div className=\"sk-circle12 sk-child\" />\n  </div>\n);\n\nconst Message = ({ status }: { status: string }) => (\n  <div className=\"toast\">\n    {status === 'loading' ? spinner() : <i className=\"material-icons\">{msgMap[status].icon}</i>}\n    <span className=\"text\">{msgMap[status].msg}</span>\n  </div>\n);\n\nexport default Message;"}, {"instruction": "\n        In the Container component, when the status is not empty, display the Message component with the status as a prop. Otherwise, display the List component with the data as props.\n\n        Use the following code for context.\n\n        Root Component:\n        \"// @flow\nimport React from 'react';\nimport List from './List';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <div /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;\n\"\n\n        Message Component:\n        \"// @flow\nimport React, { PropTypes } from 'react';\nimport '../style/Message.css';\n\nconst msgMap: Object = {\n  init: {\n    icon: 'music_note',\n    msg: 'Welcome back!'\n  },\n  loading: {\n    msg: 'Loading...'\n  },\n  noContent: {\n    icon: 'info',\n    msg: 'No match'\n  },\n  error: {\n    icon: 'error',\n    msg: 'Error!'\n  }\n};\n\nconst spinner = _ => (\n  <div className=\"sk-circle\">\n    <div className=\"sk-circle1 sk-child\" />\n    <div className=\"sk-circle2 sk-child\" />\n    <div className=\"sk-circle3 sk-child\" />\n    <div className=\"sk-circle4 sk-child\" />\n    <div className=\"sk-circle5 sk-child\" />\n    <div className=\"sk-circle6 sk-child\" />\n    <div className=\"sk-circle7 sk-child\" />\n    <div className=\"sk-circle8 sk-child\" />\n    <div className=\"sk-circle9 sk-child\" />\n    <div className=\"sk-circle10 sk-child\" />\n    <div className=\"sk-circle11 sk-child\" />\n    <div className=\"sk-circle12 sk-child\" />\n  </div>\n);\n\nconst Message = ({ status }: { status: string }) => (\n  <div className=\"toast\">\n    {status === 'loading' ? spinner() : <i className=\"material-icons\">{msgMap[status].icon}</i>}\n    <span className=\"text\">{msgMap[status].msg}</span>\n  </div>\n);\n\nexport default Message;\"\n        ", "output": "// @flow\nimport React from 'react';\nimport List from './List';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;"}, {"instruction": "Create a React component that displays a list of items. The component should:\n\n* Take an array of items as a prop.\n* Display the items in a list.\n* If there are no items, display a message indicating that there are no results.\n* Each item should be rendered using a separate component.\n* The component should have a CSS class of \"list-wrapper\".", "output": "// @flow\nimport React, { PropTypes } from 'react';\nimport Item from './Item';\nimport type { SearchResult } from '../type';\nimport '../style/List.css';\n\nconst List = ({\n  results,\n  resultCount\n}: {\n  results: Array<SearchResult>,\n  resultCount: number\n}) => (\n  <div className=\"list-wrapper\">\n    {resultCount > 0 ? results.map((item, i) => <Item key={item.trackId || i} {...item} />) : null}\n  </div>\n);\n\nexport default List;"}, {"instruction": "\n        Integrate the new \"List\" component into the root component. When the root component is in a non-loading state, it should display the \"List\" component with data from the root component's state. When the root component is in a loading state, it should display a loading message.\n\n        Use the following code for context.\n\n        Root Component:\n        \"// @flow\nimport React from 'react';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default Container;\n\"\n\n        List Component:\n        \"// @flow\nimport React, { PropTypes } from 'react';\nimport Item from './Item';\nimport type { SearchResult } from '../type';\nimport '../style/List.css';\n\nconst List = ({\n  results,\n  resultCount\n}: {\n  results: Array<SearchResult>,\n  resultCount: number\n}) => (\n  <div className=\"list-wrapper\">\n    {resultCount > 0 ? results.map((item, i) => <Item key={item.trackId || i} {...item} />) : null}\n  </div>\n);\n\nexport default List;\"\n        ", "output": "// @flow\nimport React from 'react';\nimport List from './List';\nimport Message from './Message';\nimport emitter from '../emitter';\nimport { getApiUrl } from '../utils';\nimport type { HeaderState, ContainerState } from '../type';\n\nclass Container extends React.PureComponent<{}, ContainerState> {\n  state: ContainerState = {\n    status: 'init',\n    data: {}\n  };\n\n  async getSearchResult(headerState: HeaderState) {\n    try {\n      this.setState({ status: 'loading' });\n      const resp = await fetch(getApiUrl(headerState));\n      const json = await resp.json();\n      this.setState({\n        data: { ...json },\n        status: json.resultCount ? '' : 'noContent'\n      });\n    } catch (e) {\n      this.setState({ status: 'error' });\n    }\n  }\n\n  componentDidMount() {\n    emitter.on('search', this.getSearchResult.bind(this));\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener('search');\n  }\n\n  render() {\n    const { status, data } = this.state;\n    return (\n      <div>\n        {status.length ? <Message status={status} /> : <List {...data} />}\n      </div>\n    );\n  }\n}\n\nexport default Container;"}, {"instruction": "Create a React component that displays a centered loading spinner inside a card. The spinner should be vertically centered within the card.", "output": "import React from 'react'\nimport { Card, Spinner } from 'elemental'\nimport { styles } from 'refire-app'\n\nconst LoadingSpinner = ({ styles }) => {\n  return (\n    <Card>\n      <div className={styles.spinnerContainer}>\n        <Spinner />\n      </div>\n    </Card>\n  )\n}\n\nconst css = {\n  spinnerContainer: {\n    padding: \"30px 0\",\n  },\n}\n\nexport default styles(css, LoadingSpinner)"}, {"instruction": "\n        Add a loading spinner to the Categories component that displays when there are no boards or categories to display. The spinner should be centered and have a padding of 30px on the top and bottom.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return null;\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)\n\"\n\n        LoadingSpinner Component:\n        \"import React from 'react'\nimport { Card, Spinner } from 'elemental'\nimport { styles } from 'refire-app'\n\nconst LoadingSpinner = ({ styles }) => {\n  return (\n    <Card>\n      <div className={styles.spinnerContainer}>\n        <Spinner />\n      </div>\n    </Card>\n  )\n}\n\nconst css = {\n  spinnerContainer: {\n    padding: \"30px 0\",\n  },\n}\n\nexport default styles(css, LoadingSpinner)\"\n        ", "output": "import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)"}, {"instruction": "Create a React component that displays a list of boards in a category. Each board should be a link to the board's page, and the link should display the board's title. The component should take the following props:\n\n- `boards`: An object containing all of the boards in the app.\n- `category`: The category of the boards to display.\n- `styles`: An object containing styles to apply to the component.", "output": "import React from 'react'\nimport { Link, styles } from 'refire-app'\nimport find from 'lodash/find'\n\nfunction findBoard(boards, boardId) {\n  return find(boards, (board) => {\n    return board.key === boardId\n  }) || { value: {} }\n}\n\nconst Boards = ({ boards, category, styles }) => {\n  return (\n    <div>\n      {\n        Object.keys(category.boards).map((boardId) => {\n          const board = findBoard(boards, boardId)\n          return (\n            <h3 key={boardId} className={styles.header}>\n              <Link to={`board/${board.key}`} className={styles.link}>\n                {board.value.title}\n              </Link>\n            </h3>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  header: {},\n  link: {},\n}\n\nexport default styles(css, Boards)"}, {"instruction": "\n        In the Categories component, add a new component called Boards below the header for each category. The Boards component should display a list of links to boards within the current category. Each link should display the title of the board and link to the board's detail page.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)\n\"\n\n        Boards Component:\n        \"import React from 'react'\nimport { Link, styles } from 'refire-app'\nimport find from 'lodash/find'\n\nfunction findBoard(boards, boardId) {\n  return find(boards, (board) => {\n    return board.key === boardId\n  }) || { value: {} }\n}\n\nconst Boards = ({ boards, category, styles }) => {\n  return (\n    <div>\n      {\n        Object.keys(category.boards).map((boardId) => {\n          const board = findBoard(boards, boardId)\n          return (\n            <h3 key={boardId} className={styles.header}>\n              <Link to={`board/${board.key}`} className={styles.link}>\n                {board.value.title}\n              </Link>\n            </h3>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  header: {},\n  link: {},\n}\n\nexport default styles(css, Boards)\"\n        ", "output": "import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)"}, {"instruction": "Design a React component that displays a list of categories. For each category, display its title and a list of boards associated with that category. If there are no categories or boards to display, show a loading spinner.", "output": "import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)"}, {"instruction": "\n        Integrate the Categories component into the Index component. When the Index component loads, it should display a list of categories, each with a title and a list of boards. If there are no categories or boards, display a loading spinner.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { Component } from 'react'\nimport { bindings } from 'refire-app'\n\nclass Index extends Component {\n  render() {\n    const { value: boards = [] } = this.props.boards || {}\n    const { theme } = this.props\n\n    return (\n      <div>\n        {/* <Categories\n          categories={categories}\n          boards={boards}\n          styles={theme.Categories.Categories}\n          theme={theme.Categories}\n        /> */}\n      </div>\n    )\n  }\n}\n\nexport default bindings([\"boards\"])(Index)\n\"\n\n        Categories Component:\n        \"import React from 'react'\nimport { styles } from 'refire-app'\nimport { Card } from 'elemental'\n\nimport LoadingSpinner from './LoadingSpinner'\nimport Boards from './Boards'\n\nconst Categories = ({ categories, boards, styles, theme }) => {\n\n  if (!boards.length || !categories.length) {\n    return <LoadingSpinner styles={styles} />\n  }\n\n  return (\n    <div>\n      {\n        categories.map(({ key, value: category }) => {\n          return (\n            <Card key={key} className={styles.category}>\n              <h2 className={styles.header}>\n                {category.title}\n              </h2>\n              <Boards\n                category={category}\n                boards={boards}\n                styles={theme.Boards}\n              />\n            </Card>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst css = {\n  category: {},\n  header: {},\n}\n\nexport default styles(css, Categories)\"\n        ", "output": "import React, { Component } from 'react'\nimport { bindings } from 'refire-app'\n\nimport Categories from './Categories'\n\nclass Index extends Component {\n  render() {\n    const { value: categories = [] } = this.props.categories || {}\n    const { value: boards = [] } = this.props.boards || {}\n    const { theme } = this.props\n\n    return (\n      <div>\n        <Categories\n          categories={categories}\n          boards={boards}\n          styles={theme.Categories.Categories}\n          theme={theme.Categories}\n        />\n      </div>\n    )\n  }\n}\n\nexport default bindings([\"categories\", \"boards\"])(Index)"}, {"instruction": "Create a React component that displays a 5-star rating. The component should accept a percentage prop that determines how many stars are filled in. The filled-in stars should be at the top, and the empty stars should be at the bottom. The component should use CSS to style the stars.", "output": "import React, { PropTypes as T } from 'react'\n\nimport styles from './styles.module.css';\n\nconst RatingIcon = (props) => (<span>\u2605</span>)\n\nexport class Rating extends React.Component {\n  render() {\n    const {percentage} = this.props;\n    const style = {\n      width: `${(percentage || 0) * 100}%`\n    }\n    return (\n      <div className={styles.sprite}>\n        <div className={styles.top} style={style}>\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n        </div>\n        <div className={styles.bottom}>\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Rating"}, {"instruction": "\n        Add a star rating component to the Item component, which displays the rating of a place. The rating should be a percentage, with 100% representing a full rating of 5 stars. The rating component should be placed below the name of the place.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport styles from './styles.module.css'\n\nexport class Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  onClick(e) {\n    this.props.onClick(this.props.place);\n  }\n\n  render() {\n    const {place} = this.props;\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        className={classnames(styles.item, {\n        [styles.itemHovered]: this.state.hovered\n      })}>\n          <h1 className={classnames(styles.title)}>{place.name}</h1>\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  place: T.object.isRequired,\n  onHighlight: T.func,\n}\n\nItem.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {}\n}\n\nexport default Item\n\"\n\n        Rating Component:\n        \"import React, { PropTypes as T } from 'react'\n\nimport styles from './styles.module.css';\n\nconst RatingIcon = (props) => (<span>\u2605</span>)\n\nexport class Rating extends React.Component {\n  render() {\n    const {percentage} = this.props;\n    const style = {\n      width: `${(percentage || 0) * 100}%`\n    }\n    return (\n      <div className={styles.sprite}>\n        <div className={styles.top} style={style}>\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n            <RatingIcon />\n        </div>\n        <div className={styles.bottom}>\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n          <RatingIcon />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Rating\"\n        ", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Rating from 'components/Rating/Rating';\nimport styles from './styles.module.css'\n\nexport class Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  onClick(e) {\n    this.props.onClick(this.props.place);\n  }\n\n  render() {\n    const {place} = this.props;\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        className={classnames(styles.item, {\n        [styles.itemHovered]: this.state.hovered\n      })}>\n          <h1 className={classnames(styles.title)}>{place.name}</h1>\n          <Rating className={styles.rating}\n                  percentage={(place.rating/5)} />\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  place: T.object.isRequired,\n  onHighlight: T.func,\n}\n\nItem.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {}\n}\n\nexport default Item"}, {"instruction": "Design a React component that displays a place's name and rating as stars. When the user hovers over the component, it should highlight with a different background color. When the user clicks on the component, it should trigger an onClick event.", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Rating from 'components/Rating/Rating';\nimport styles from './styles.module.css'\n\nexport class Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  onClick(e) {\n    this.props.onClick(this.props.place);\n  }\n\n  render() {\n    const {place} = this.props;\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        className={classnames(styles.item, {\n        [styles.itemHovered]: this.state.hovered\n      })}>\n          <h1 className={classnames(styles.title)}>{place.name}</h1>\n          <Rating className={styles.rating}\n                  percentage={(place.rating/5)} />\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  place: T.object.isRequired,\n  onHighlight: T.func,\n}\n\nItem.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {}\n}\n\nexport default Item"}, {"instruction": "\n        Integrate a new component called \"Item\" into the \"Listing\" component. When a user clicks on an item, it should trigger the \"onClick\" event handler passed down from the \"Listing\" component. The \"Item\" component should display the name of the item and its rating.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport styles from './styles.module.css'\n\nexport class Listing extends React.Component {\n  render() {\n    return (\n      <div className={classnames(styles.container)}>\n      {this.props.places.map(place => {\n        return (\n          <div\n                onClick={this.props.onClick}\n                onHighlight={this.props.onHighlight}\n                offHighlight={this.props.offHighlight}\n                key={place.id} />\n        )\n      })}\n      </div>\n    )\n  }\n}\n\nListing.propTypes = {\n  places: T.array.isRequired,\n  onHighlight: T.func,\n  offHighlight: T.func,\n  onClick: T.func\n}\n\nListing.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {},\n  onClick: () => {},\n}\n\nexport default Listing\n\"\n\n        Item Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Rating from 'components/Rating/Rating';\nimport styles from './styles.module.css'\n\nexport class Item extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: false\n    }\n  }\n\n  onClick(e) {\n    this.props.onClick(this.props.place);\n  }\n\n  render() {\n    const {place} = this.props;\n    return (\n      <div\n        onClick={this.onClick.bind(this)}\n        className={classnames(styles.item, {\n        [styles.itemHovered]: this.state.hovered\n      })}>\n          <h1 className={classnames(styles.title)}>{place.name}</h1>\n          <Rating className={styles.rating}\n                  percentage={(place.rating/5)} />\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  place: T.object.isRequired,\n  onHighlight: T.func,\n}\n\nItem.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {}\n}\n\nexport default Item\"\n        ", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Item from './Item';\nimport styles from './styles.module.css'\n\nexport class Listing extends React.Component {\n  render() {\n    return (\n      <div className={classnames(styles.container)}>\n      {this.props.places.map(place => {\n        return (\n          <Item place={place}\n                onClick={this.props.onClick}\n                onHighlight={this.props.onHighlight}\n                offHighlight={this.props.offHighlight}\n                key={place.id} />\n        )\n      })}\n      </div>\n    )\n  }\n}\n\nListing.propTypes = {\n  places: T.array.isRequired,\n  onHighlight: T.func,\n  offHighlight: T.func,\n  onClick: T.func\n}\n\nListing.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {},\n  onClick: () => {},\n}\n\nexport default Listing"}, {"instruction": "Create a React component that displays a list of items. Each item should be clickable and when clicked, a callback function should be executed. Additionally, when the mouse hovers over an item, a different callback function should be executed, and when the mouse leaves the item, a third callback function should be executed.", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Item from './Item';\nimport styles from './styles.module.css'\n\nexport class Listing extends React.Component {\n  render() {\n    return (\n      <div className={classnames(styles.container)}>\n      {this.props.places.map(place => {\n        return (\n          <Item place={place}\n                onClick={this.props.onClick}\n                onHighlight={this.props.onHighlight}\n                offHighlight={this.props.offHighlight}\n                key={place.id} />\n        )\n      })}\n      </div>\n    )\n  }\n}\n\nListing.propTypes = {\n  places: T.array.isRequired,\n  onHighlight: T.func,\n  offHighlight: T.func,\n  onClick: T.func\n}\n\nListing.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {},\n  onClick: () => {},\n}\n\nexport default Listing"}, {"instruction": "\n        In the Sidebar component, add a Listing component that displays a list of places. When a user clicks on a place in the list, call the onListItemClick prop function and pass in the place, map, and google objects.\n\n        Use the following code for context.\n\n        Root Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport styles from './styles.module.css'\n\nexport class Sidebar extends React.Component {\n  onClick(place, map, google) {\n    if (this.props.onListItemClick) {\n      place.place = place;\n      this.props.onListItemClick(place, map, google)\n    }\n  }\n  render() {\n    return (\n      <div className={classnames(styles.sidebar)}>\n        <div className={classnames(styles.heading)}>\n          <h1>{this.props.title}</h1>\n        </div>\n      </div>\n    )\n  }\n}\n\nSidebar.propTypes = {\n  places: T.array,\n  title: T.string,\n  onListItemClick: T.func\n}\n\nSidebar.defaultProps = {\n  title: 'Restaurants'\n}\n\nexport default Sidebar\"\n\n        Listing Component:\n        \"import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Item from './Item';\nimport styles from './styles.module.css'\n\nexport class Listing extends React.Component {\n  render() {\n    return (\n      <div className={classnames(styles.container)}>\n      {this.props.places.map(place => {\n        return (\n          <Item place={place}\n                onClick={this.props.onClick}\n                onHighlight={this.props.onHighlight}\n                offHighlight={this.props.offHighlight}\n                key={place.id} />\n        )\n      })}\n      </div>\n    )\n  }\n}\n\nListing.propTypes = {\n  places: T.array.isRequired,\n  onHighlight: T.func,\n  offHighlight: T.func,\n  onClick: T.func\n}\n\nListing.defaultProps = {\n  onHighlight: () => {},\n  offHighlight: () => {},\n  onClick: () => {},\n}\n\nexport default Listing\"\n        ", "output": "import React, { PropTypes as T } from 'react'\nimport classnames from 'classnames'\n\nimport Listing from 'components/Listing/Listing'\nimport styles from './styles.module.css'\n\nexport class Sidebar extends React.Component {\n  onClick(place, map, google) {\n    if (this.props.onListItemClick) {\n      place.place = place;\n      this.props.onListItemClick(place, map, google)\n    }\n  }\n  render() {\n    return (\n      <div className={classnames(styles.sidebar)}>\n        <div className={classnames(styles.heading)}>\n          <h1>{this.props.title}</h1>\n        </div>\n        <Listing places={this.props.places}\n                 onClick={this.onClick.bind(this)} />\n      </div>\n    )\n  }\n}\n\nSidebar.propTypes = {\n  places: T.array,\n  title: T.string,\n  onListItemClick: T.func\n}\n\nSidebar.defaultProps = {\n  title: 'Restaurants'\n}\n\nexport default Sidebar"}]